"""
üåê –†–µ–∞–ª—å–Ω–∏–π DEX –∫–ª—ñ—î–Ω—Ç –¥–ª—è Trinkenbot
–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Ethereum, BSC, Solana –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–∏—Ö —Ü—ñ–Ω –∑ DEX
–°—Ç–≤–æ—Ä–µ–Ω–æ Emergent AI Agent - 30 –≤–µ—Ä–µ—Å–Ω—è 2025
"""

import asyncio
import aiohttp
import logging
from typing import Dict, List, Optional, Tuple
import json
import os
from datetime import datetime, timezone
import time

logger = logging.getLogger(__name__)

class RealDexClient:
    """–ö–ª—ñ—î–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ DEX –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö –±–ª–æ–∫—á–µ–π–Ω–∞—Ö"""
    
    def __init__(self):
        # API –∫–ª—é—á—ñ –∑ environment
        self.infura_key = os.getenv('INFURA_KEY')
        self.alchemy_key = os.getenv('ALCHEMY_KEY')
        self.bsc_rpc_url = os.getenv('BSC_RPC_URL')
        self.sol_rpc_url = os.getenv('SOL_RPC_URL')
        
        # Cache –¥–ª—è —Ü—ñ–Ω
        self.price_cache = {}
        self.cache_ttl = 30  # 30 —Å–µ–∫—É–Ω–¥
        
        # –û—Å–Ω–æ–≤–Ω—ñ —Ç–æ–∫–µ–Ω–∏ –¥–ª—è –∞—Ä–±—ñ—Ç—Ä–∞–∂—É
        self.token_addresses = {
            'ethereum': {
                'USDT': '0xdAC17F958D2ee523a2206206994597C13D831ec7',
                'USDC': '0xA0b86a33E6417aF904c964c5C6ff7B4F8c8dfe03',  
                # –î–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω—ñ–≤ —Ç—É—Ç
            },
            'bsc': {
                'USDT': '0x55d398326f99059fF775485246999027B3197955',
                'USDC': '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',
                # –î–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω—ñ–≤ —Ç—É—Ç
            },
            'solana': {
                # Solana –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —ñ–Ω—à—ñ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏
                'USDT': 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB',
                'USDC': 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',
            }
        }
        
        # DEX endpoints
        self.dex_apis = {
            'uniswap': 'https://api.uniswap.org/v1',
            'pancakeswap': 'https://api.pancakeswap.info/api/v2',
            'jupiter': 'https://api.jup.ag/price/v2'
        }
    
    async def get_ethereum_price(self, symbol: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É —Ç–æ–∫–µ–Ω–∞ –∑ Ethereum DEX (Uniswap, SushiSwap)"""
        try:
            cache_key = f"eth_{symbol}"
            cached_price = self._get_cached_price(cache_key)
            if cached_price:
                return cached_price
            
            # –°–ø—Ä–æ–±—É—î–º–æ –∫—ñ–ª—å–∫–∞ –¥–∂–µ—Ä–µ–ª –¥–ª—è Ethereum
            price_data = None
            
            # 1. CoinGecko API (–Ω–∞–π–±—ñ–ª—å—à –Ω–∞–¥—ñ–π–Ω–∏–π)
            price_data = await self._fetch_coingecko_price(symbol, 'ethereum')
            
            if not price_data:
                # 2. Uniswap API
                price_data = await self._fetch_uniswap_price(symbol)
            
            if not price_data:
                # 3. Fallback –¥–æ –º–æ–∫ –¥–∞–Ω–∏—Ö
                price_data = self._get_mock_price(symbol, 'ethereum')
            
            if price_data:
                price_data['chain'] = 'ethereum'
                price_data['source'] = price_data.get('source', 'coingecko')
                self._cache_price(cache_key, price_data)
            
            return price_data
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è Ethereum —Ü—ñ–Ω–∏ –¥–ª—è {symbol}: {e}")
            return self._get_mock_price(symbol, 'ethereum')
    
    async def get_bsc_price(self, symbol: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É —Ç–æ–∫–µ–Ω–∞ –∑ BSC DEX (PancakeSwap)"""
        try:
            cache_key = f"bsc_{symbol}"
            cached_price = self._get_cached_price(cache_key)
            if cached_price:
                return cached_price
            
            price_data = None
            
            # 1. CoinGecko API –¥–ª—è BSC
            price_data = await self._fetch_coingecko_price(symbol, 'binance-smart-chain')
            
            if not price_data:
                # 2. PancakeSwap API
                price_data = await self._fetch_pancakeswap_price(symbol)
            
            if not price_data:
                # 3. Fallback –¥–æ –º–æ–∫ –¥–∞–Ω–∏—Ö
                price_data = self._get_mock_price(symbol, 'bsc')
            
            if price_data:
                price_data['chain'] = 'bsc'
                price_data['source'] = price_data.get('source', 'coingecko')
                self._cache_price(cache_key, price_data)
            
            return price_data
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è BSC —Ü—ñ–Ω–∏ –¥–ª—è {symbol}: {e}")
            return self._get_mock_price(symbol, 'bsc')
    
    async def get_solana_price(self, symbol: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É —Ç–æ–∫–µ–Ω–∞ –∑ Solana DEX (Jupiter, Raydium)"""
        try:
            cache_key = f"sol_{symbol}"
            cached_price = self._get_cached_price(cache_key)
            if cached_price:
                return cached_price
            
            price_data = None
            
            # 1. CoinGecko API –¥–ª—è Solana
            price_data = await self._fetch_coingecko_price(symbol, 'solana')
            
            if not price_data:
                # 2. Jupiter API
                price_data = await self._fetch_jupiter_price(symbol)
            
            if not price_data:
                # 3. Fallback –¥–æ –º–æ–∫ –¥–∞–Ω–∏—Ö
                price_data = self._get_mock_price(symbol, 'solana')
            
            if price_data:
                price_data['chain'] = 'solana'
                price_data['source'] = price_data.get('source', 'coingecko')
                self._cache_price(cache_key, price_data)
            
            return price_data
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è Solana —Ü—ñ–Ω–∏ –¥–ª—è {symbol}: {e}")
            return self._get_mock_price(symbol, 'solana')
    
    async def _fetch_coingecko_price(self, symbol: str, platform: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –∑ CoinGecko API"""
        try:
            # –ú–∞–ø—ñ–Ω–≥ —Å–∏–º–≤–æ–ª—ñ–≤ –¥–æ CoinGecko ID
            symbol_mapping = {
                'ADAUSDT': 'cardano',
                'DOGEUSDT': 'dogecoin',
                'XRPUSDT': 'ripple',
                'AVAXUSDT': 'avalanche-2',
                'DOTUSDT': 'polkadot',
                'MATICUSDT': 'matic-network',
                'LINKUSDT': 'chainlink',
                'ATOMUSDT': 'cosmos',
                'UNIUSDT': 'uniswap',
                'FILUSDT': 'filecoin'
            }
            
            # –í–∏–¥–∞–ª—è—î–º–æ USDT –∑ –∫—ñ–Ω—Ü—è –¥–ª—è –ø–æ—à—É–∫—É
            clean_symbol = symbol.replace('USDT', '') + 'USDT' if 'USDT' in symbol else symbol
            coin_id = symbol_mapping.get(clean_symbol)
            
            if not coin_id:
                return None
            
            url = f"https://api.coingecko.com/api/v3/simple/price"
            params = {
                'ids': coin_id,
                'vs_currencies': 'usd',
                'include_24hr_change': 'true',
                'include_24hr_vol': 'true'
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params, timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        if coin_id in data:
                            coin_data = data[coin_id]
                            return {
                                'price': coin_data.get('usd', 0),
                                'volume_24h': coin_data.get('usd_24h_vol', 0),
                                'change_24h': coin_data.get('usd_24h_change', 0),
                                'source': 'coingecko',
                                'timestamp': datetime.now(timezone.utc).isoformat()
                            }
            
            return None
        except Exception as e:
            logger.debug(f"CoinGecko API –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}")
            return None
    
    async def _fetch_uniswap_price(self, symbol: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –∑ Uniswap API (–∑–∞–≥–ª—É—à–∫–∞)"""
        try:
            # –¢—É—Ç –±—É–¥–µ —Ä–µ–∞–ª—å–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Uniswap API
            # –ü–æ–∫–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ None, —â–æ–± fallback –¥–æ —ñ–Ω—à–∏—Ö –¥–∂–µ—Ä–µ–ª
            return None
        except Exception as e:
            logger.debug(f"Uniswap API –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}")
            return None
    
    async def _fetch_pancakeswap_price(self, symbol: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –∑ PancakeSwap API (–∑–∞–≥–ª—É—à–∫–∞)"""
        try:
            # –¢—É—Ç –±—É–¥–µ —Ä–µ–∞–ª—å–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ PancakeSwap API
            return None
        except Exception as e:
            logger.debug(f"PancakeSwap API –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}")
            return None
    
    async def _fetch_jupiter_price(self, symbol: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –∑ Jupiter API (–∑–∞–≥–ª—É—à–∫–∞)"""
        try:
            # –¢—É—Ç –±—É–¥–µ —Ä–µ–∞–ª—å–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Jupiter API
            return None
        except Exception as e:
            logger.debug(f"Jupiter API –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}")
            return None
    
    def _get_cached_price(self, cache_key: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–∫–µ—à–æ–≤–∞–Ω—É —Ü—ñ–Ω—É"""
        if cache_key in self.price_cache:
            timestamp, price_data = self.price_cache[cache_key]
            if time.time() - timestamp < self.cache_ttl:
                return price_data
        return None
    
    def _cache_price(self, cache_key: str, price_data: Dict):
        """–ó–∞–∫–µ—à—É–≤–∞—Ç–∏ —Ü—ñ–Ω—É"""
        self.price_cache[cache_key] = (time.time(), price_data)
    
    def _get_mock_price(self, symbol: str, chain: str) -> Dict:
        """–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ –º–æ–∫-—Ü—ñ–Ω–∏"""
        # –ë–∞–∑–æ–≤—ñ —Ü—ñ–Ω–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤
        base_prices = {
            'ADAUSDT': 0.48, 'XRPUSDT': 0.62, 'DOGEUSDT': 0.41,
            'AVAXUSDT': 42.5, 'DOTUSDT': 7.2, 'MATICUSDT': 0.95,
            'LINKUSDT': 18.4, 'ATOMUSDT': 9.8, 'UNIUSDT': 8.5,
            'FILUSDT': 5.6, 'TRXUSDT': 0.12, 'XLMUSDT': 0.105
        }
        
        base_price = base_prices.get(symbol, 1.0)
        
        # –î–æ–¥–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫—É –≤–∞—Ä—ñ–∞—Ü—ñ—é –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –º–µ—Ä–µ–∂
        chain_multipliers = {
            'ethereum': 1.001,    # Ethereum —Ç—Ä–æ—Ö–∏ –¥–æ—Ä–æ–∂—á–µ —á–µ—Ä–µ–∑ –≥–∞–∑
            'bsc': 0.999,         # BSC —Ç—Ä–æ—Ö–∏ –¥–µ—à–µ–≤—à–µ
            'solana': 1.0005      # Solana –≤ —Å–µ—Ä–µ–¥–∏–Ω—ñ
        }
        
        multiplier = chain_multipliers.get(chain, 1.0)
        
        # –î–æ–¥–∞—î–º–æ –ø—Å–µ–≤–¥–æ–≤–∏–ø–∞–¥–∫–æ–≤—É –≤–∞—Ä—ñ–∞—Ü—ñ—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ —á–∞—Å—É
        time_variation = (hash(f"{symbol}_{chain}_{int(time.time() / 60)}") % 200 - 100) / 10000  # ¬±1%
        
        final_price = base_price * multiplier * (1 + time_variation)
        
        return {
            'price': final_price,
            'volume_24h': 1000000 + (hash(symbol + chain) % 5000000),
            'change_24h': (hash(symbol) % 200 - 100) / 10,  # -10% to +10%
            'source': 'mock_data',
            'timestamp': datetime.now(timezone.utc).isoformat(),
            'chain': chain
        }
    
    async def get_multiple_prices(self, symbols: List[str], chains: List[str] = ['ethereum', 'bsc', 'solana']) -> Dict:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω–∏ –∫—ñ–ª—å–∫–æ—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –∑ —Ä—ñ–∑–Ω–∏—Ö –º–µ—Ä–µ–∂"""
        try:
            results = {}
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π —Å–∏–º–≤–æ–ª-–º–µ—Ä–µ–∂–∞
            tasks = []
            for symbol in symbols:
                for chain in chains:
                    if chain == 'ethereum':
                        task = self.get_ethereum_price(symbol)
                    elif chain == 'bsc':
                        task = self.get_bsc_price(symbol)
                    elif chain == 'solana':
                        task = self.get_solana_price(symbol)
                    else:
                        continue
                    
                    tasks.append((symbol, chain, task))
            
            # –í–∏–∫–æ–Ω—É—î–º–æ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
            for symbol, chain, task in tasks:
                try:
                    price_data = await task
                    if price_data:
                        if symbol not in results:
                            results[symbol] = {}
                        results[symbol][chain] = price_data
                except Exception as e:
                    logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É {symbol} –Ω–∞ {chain}: {e}")
            
            logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Ü—ñ–Ω–∏ –¥–ª—è {len(results)} —Å–∏–º–≤–æ–ª—ñ–≤")
            return results
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–Ω–æ–∂–∏–Ω–Ω–∏—Ö —Ü—ñ–Ω: {e}")
            return {}
    
    async def get_price_with_liquidity(self, symbol: str, chain: str = 'ethereum') -> Dict:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É —Ä–∞–∑–æ–º –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–∑–æ–≤—É —Ü—ñ–Ω—É
            if chain == 'ethereum':
                price_data = await self.get_ethereum_price(symbol)
            elif chain == 'bsc':
                price_data = await self.get_bsc_price(symbol)
            elif chain == 'solana':
                price_data = await self.get_solana_price(symbol)
            else:
                return {}
            
            if not price_data:
                return {}
            
            # –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å (–ø–æ–∫–∏ —â–æ –º–æ–∫ –¥–∞–Ω—ñ)
            price_data['liquidity'] = {
                'total_liquidity_usd': price_data.get('volume_24h', 0) * 10,  # –ü—Ä–∏–ø—É—â–µ–Ω–Ω—è
                'depth_1_percent': price_data.get('volume_24h', 0) * 0.1,    # –õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å –Ω–∞ 1%
                'depth_5_percent': price_data.get('volume_24h', 0) * 0.5,    # –õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å –Ω–∞ 5%
                'slippage_estimate': 0.003 if price_data.get('volume_24h', 0) > 1000000 else 0.01
            }
            
            return price_data
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å –¥–ª—è {symbol}: {e}")
            return {}

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
real_dex_client = RealDexClient()

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
async def get_eth_price(symbol: str) -> Optional[Dict]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –∑ Ethereum DEX"""
    return await real_dex_client.get_ethereum_price(symbol)

async def get_bsc_price(symbol: str) -> Optional[Dict]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –∑ BSC DEX"""
    return await real_dex_client.get_bsc_price(symbol)

async def get_sol_price(symbol: str) -> Optional[Dict]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –∑ Solana DEX"""
    return await real_dex_client.get_solana_price(symbol)

async def get_best_dex_price(symbol: str) -> Tuple[str, Dict]:
    """–ó–Ω–∞–π—Ç–∏ –Ω–∞–π–∫—Ä–∞—â—É —Ü—ñ–Ω—É —Å–µ—Ä–µ–¥ –≤—Å—ñ—Ö DEX"""
    eth_price = await get_eth_price(symbol)
    bsc_price = await get_bsc_price(symbol)
    sol_price = await get_sol_price(symbol)
    
    prices = []
    if eth_price:
        prices.append(('ethereum', eth_price))
    if bsc_price:
        prices.append(('bsc', bsc_price))
    if sol_price:
        prices.append(('solana', sol_price))
    
    if not prices:
        return 'none', {}
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–∫—Ä–∞—â—É —Ü—ñ–Ω—É (–Ω–∞–π–≤–∏—â—É –¥–ª—è –ø—Ä–æ–¥–∞–∂—É)
    best = max(prices, key=lambda x: x[1].get('price', 0))
    return best[0], best[1]