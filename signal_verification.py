import logging
import time
from typing import Dict, Any, Optional, Tuple
from dataclasses import dataclass, field

from signal_parser import ArbitrageSignal
# Simple fallback for price dynamics
class DynamicsAnalysis:
    def __init__(self):
        self.trend = "neutral"
        self.momentum = 0.0
from config import (
    MIN_24H_VOLUME_USD, MIN_POOLED_LIQUIDITY_USD, MIN_SPREAD, MAX_SPREAD,
    MAX_SLIPPAGE_PERCENT, SLIPPAGE_PADDING, COOLDOWN_SEC,
    MIN_VOLATILITY_15MIN, MAX_VOLATILITY_15MIN, MIN_ORDERBOOK_DEPTH_MULTIPLIER,
    MIN_BUY_RATIO_PERCENT, ORDER_AMOUNT, MIN_NET_PROFIT_PERCENT, ESTIMATED_TRADING_COSTS_PERCENT
)

@dataclass
class VerificationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É"""
    valid: bool = False
    errors: list = field(default_factory=list)
    warnings: list = field(default_factory=list)
    
    # –î–∞–Ω—ñ –∑ XT.com
    xt_found: bool = False
    xt_symbol: str = ""
    xt_price: float = 0.0
    xt_tradeable: bool = False
    
    # –î–∞–Ω—ñ –∑ DEX
    dex_found: bool = False
    dex_pair_address: str = ""
    dex_token_address: str = ""
    dex_price: float = 0.0
    dex_liquidity: float = 0.0
    dex_volume_24h: float = 0.0
    dex_chain: str = ""
    dex_name: str = ""
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏
    actual_spread: float = 0.0
    price_ratio: float = 0.0
    honeypot_status: str = "unknown"
    
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑–∏ –∑–≥—ñ–¥–Ω–æ –∑ –≤–∏–º–æ–≥–∞–º–∏
    volatility_15min: float = 0.0
    buy_ratio_percent: float = 0.0
    orderbook_depth_ratio: float = 0.0
    price_dynamics_15min: float = 0.0
    price_dynamics_1hour: float = 0.0
    
    # üìä –ù–û–í–Ü –î–ê–ù–Ü: –ì–ª–∏–±–∏–Ω–∞ —Ä–∏–Ω–∫—É —Ç–∞ –¥–∏–Ω–∞–º—ñ–∫–∞ —Ü—ñ–Ω
    market_depth_data: Dict = field(default_factory=dict)
    price_dynamics_analysis: Dict = field(default_factory=dict)
    trend_direction: str = "unknown"
    momentum_score: float = 0.0
    support_resistance_levels: Dict = field(default_factory=dict)
    
    # –ü–æ—Å–∏–ª–∞–Ω–Ω—è
    dexscreener_link: str = ""
    pancakeswap_link: str = ""
    uniswap_link: str = ""
    

class SignalVerification:
    """
    –ö–ª–∞—Å –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑–≥—ñ–¥–Ω–æ –∑ –≤–∞—à–∏–º–∏ –≤–∏–º–æ–≥–∞–º–∏:
    
    1. –ó–Ω–∞–π—Ç–∏ token –Ω–∞ XT.com
    2. –ó–Ω–∞–π—Ç–∏ –ø–∞—Ä—É –Ω–∞ DEX  
    3. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ volume/liquidity
    4. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ spread
    5. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ honeypot
    """
    
    def __init__(self):
        self.cooldown_cache = {}  # –ö–µ—à –¥–ª—è –∞–Ω—Ç–∏-–¥—É–±–ª—å –∫—É–ª–¥–∞—É–Ω—É
        
    def verify_signal(self, signal: ArbitrageSignal) -> VerificationResult:
        """
        –ü–æ–≤–Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Å–∏–≥–Ω–∞–ª—É –∑–≥—ñ–¥–Ω–æ –∑ –≤–∞—à–∏–º–∏ –≤–∏–º–æ–≥–∞–º–∏
        
        Args:
            signal: –ü–∞—Ä—Å–æ–≤–∞–Ω–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π —Å–∏–≥–Ω–∞–ª
            
        Returns:
            VerificationResult –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        """
        result = VerificationResult()
        
        try:
            # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω—É
            if not self._check_cooldown(signal.asset):
                result.errors.append(f"–°–∏–º–≤–æ–ª {signal.asset} –≤ –∫—É–ª–¥–∞—É–Ω—ñ ({COOLDOWN_SEC}—Å)")
                return result
            
            # 2. –ó–Ω–∞—Ö–æ–¥–∏–º–æ token –Ω–∞ XT.com
            xt_result = self._verify_xt_token(signal)
            result.xt_found = xt_result['found']
            result.xt_symbol = xt_result.get('symbol', '')
            result.xt_price = xt_result.get('price', 0.0)
            result.xt_tradeable = xt_result.get('tradeable', False)
            
            if not result.xt_found:
                result.errors.append(f"–¢–æ–∫–µ–Ω {signal.asset} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ XT.com")
                return result
            
            if not result.xt_tradeable:
                result.errors.append(f"–¢–æ–∫–µ–Ω {signal.asset} –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ –Ω–∞ XT.com")
                return result
                
            # 3. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–∞—Ä—É –Ω–∞ DEX
            dex_result = self._verify_dex_pair(signal)
            result.dex_found = dex_result['found']
            result.dex_pair_address = dex_result.get('pair_address', '')
            result.dex_token_address = dex_result.get('token_address', '')
            result.dex_price = dex_result.get('price', 0.0)
            result.dex_liquidity = dex_result.get('liquidity', 0.0)
            result.dex_volume_24h = dex_result.get('volume_24h', 0.0)
            result.dex_chain = dex_result.get('chain', '')
            result.dex_name = dex_result.get('dex_name', '')
            
            if not result.dex_found:
                result.errors.append(f"–Ø–∫—ñ—Å–Ω–∞ DEX –ø–∞—Ä–∞ –¥–ª—è {signal.asset} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
                return result
            
            # 4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ volume —Ç–∞ liquidity
            if result.dex_volume_24h < MIN_24H_VOLUME_USD:
                result.errors.append(f"–û–±'—î–º ${result.dex_volume_24h:,.0f} < –º—ñ–Ω—ñ–º—É–º ${MIN_24H_VOLUME_USD:,.0f}")
                
            if result.dex_liquidity < MIN_POOLED_LIQUIDITY_USD:
                result.errors.append(f"–õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å ${result.dex_liquidity:,.0f} < –º—ñ–Ω—ñ–º—É–º ${MIN_POOLED_LIQUIDITY_USD:,.0f}")
            
            # 5. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ spread —Ç–∞ —á–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫
            if result.xt_price > 0 and result.dex_price > 0:
                result.actual_spread = ((result.dex_price - result.xt_price) / result.xt_price) * 100
                result.price_ratio = max(result.xt_price, result.dex_price) / min(result.xt_price, result.dex_price)
                
                spread_abs = abs(result.actual_spread)
                
                # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —á–∏—Å—Ç–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–º—ñ—Å—ñ–π
                net_profit = spread_abs - ESTIMATED_TRADING_COSTS_PERCENT
                
                if net_profit < MIN_NET_PROFIT_PERCENT:
                    result.errors.append(f"–ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ {net_profit:.2f}% < –º—ñ–Ω—ñ–º—É–º {MIN_NET_PROFIT_PERCENT}%")
                    
                if spread_abs > MAX_SPREAD:
                    result.errors.append(f"–°–ø—Ä–µ–¥ {spread_abs:.2f}% > –º–∞–∫—Å–∏–º—É–º {MAX_SPREAD}%")
                    
                # –ü—ñ–¥–æ–∑—Ä—ñ–ª—ñ —Ü—ñ–Ω–∏
                if result.price_ratio > 1.5:
                    result.warnings.append(f"–ü—ñ–¥–æ–∑—Ä—ñ–ª–∞ —Ä—ñ–∑–Ω–∏—Ü—è —Ü—ñ–Ω: {result.price_ratio:.2f}x")
            
            # 6. –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ö–û–ù–ö–†–ï–¢–ù–£ —Ç–æ—Ä–≥–æ–≤—É –ø–∞—Ä—É
            # –ü–†–Ü–û–†–ò–¢–ï–¢ 1: –ì–æ—Ç–æ–≤–µ exact_pair_url –∑ DexCheck Pro
            if dex_result.get('exact_pair_url'):
                result.dexscreener_link = dex_result['exact_pair_url']
                logging.info(f"üîó –ì–û–¢–û–í–ï EXACT URL –¥–ª—è {signal.asset}: {result.dexscreener_link}")
            # –ü–†–Ü–û–†–ò–¢–ï–¢ 2: –ë—É–¥—É—î–º–æ –∑ pair_address —Ç–∞ chain
            elif result.dex_pair_address and result.dex_chain:
                result.dexscreener_link = self._generate_dexscreener_link(result.dex_chain, result.dex_pair_address)
                logging.info(f"üîó –ö–û–ù–ö–†–ï–¢–ù–ê –ü–ê–†–ê –¥–ª—è {signal.asset}: {result.dexscreener_link}")
            # –ü–†–Ü–û–†–ò–¢–ï–¢ 3: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ token_address —è–∫—â–æ —î
            elif result.dex_token_address and result.dex_chain:
                result.dexscreener_link = f"https://dexscreener.com/{result.dex_chain}/{result.dex_token_address}"
                logging.info(f"üîó –¢–û–ö–ï–ù –ê–î–†–ï–°–ê –¥–ª—è {signal.asset}: {result.dexscreener_link}")
            else:
                # –û–°–¢–ê–ù–ù–Ü–ô FALLBACK: –∑ –Ω–∞–∑–≤–æ—é —Ç–æ–∫–µ–Ω–∞
                clean_token = signal.asset.replace('/USDT:USDT', '').replace('/USDT', '').upper()
                chain = 'ethereum'  # Default
                result.dexscreener_link = f"https://dexscreener.com/{chain}/{clean_token}"
                logging.info(f"üîó FALLBACK –¢–û–ö–ï–ù –¥–ª—è {signal.asset}: {result.dexscreener_link}")
                
            result.pancakeswap_link = self._generate_pancakeswap_link(result.dex_token_address, result.dex_chain)
            result.uniswap_link = self._generate_uniswap_link(result.dex_token_address, result.dex_chain)
            
            # 7. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ honeypot (—à–≤–∏–¥–∫–∞ —Å–∏–º—É–ª—è—Ü—ñ—è)
            honeypot_result = self._check_honeypot(result.dex_token_address, result.dex_chain)
            result.honeypot_status = honeypot_result
            
            if honeypot_result == "suspicious":
                result.errors.append("–ü—ñ–¥–æ–∑—Ä–∞ –Ω–∞ honeypot - —Ç–æ–∫–µ–Ω –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –¥–ª—è –±–µ–∑–ø–µ–∫–∏")
            elif honeypot_result == "blocked":
                result.errors.append("–¢–æ–∫–µ–Ω –±–ª–æ–∫—É—î –ø—Ä–æ–¥–∞–∂ (honeypot)")
            elif honeypot_result == "unknown":
                result.warnings.append("‚ö†Ô∏è Honeypot —Å—Ç–∞—Ç—É—Å –Ω–µ–≤—ñ–¥–æ–º–∏–π - –±—É–¥—å—Ç–µ –æ–±–µ—Ä–µ–∂–Ω—ñ")
            
            # 8. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ –∑–∞ 15 —Ö–≤–∏–ª–∏–Ω
            volatility_result = self._check_volatility_15min(signal.asset, result.dex_pair_address, result.dex_chain)
            result.volatility_15min = volatility_result
            
            if volatility_result < MIN_VOLATILITY_15MIN:
                result.errors.append(f"–í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å {volatility_result:.1f}% < –º—ñ–Ω—ñ–º—É–º {MIN_VOLATILITY_15MIN}%")
            elif volatility_result > MAX_VOLATILITY_15MIN:
                result.errors.append(f"–í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å {volatility_result:.1f}% > –º–∞–∫—Å–∏–º—É–º {MAX_VOLATILITY_15MIN}%")
            
            # 9. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–ª–∏–±–∏–Ω–∏ –æ—Ä–¥–µ—Ä–±—É–∫—É
            orderbook_result = self._check_orderbook_depth(signal.asset, result.dex_pair_address, result.dex_chain)
            result.orderbook_depth_ratio = orderbook_result
            
            required_depth = ORDER_AMOUNT * MIN_ORDERBOOK_DEPTH_MULTIPLIER
            if orderbook_result < required_depth:
                result.warnings.append(f"–ì–ª–∏–±–∏–Ω–∞ –æ—Ä–¥–µ—Ä–±—É–∫—É ${orderbook_result:.0f} < –ø–æ—Ç—Ä—ñ–±–Ω–æ ${required_depth:.0f}")
            
            # 10. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è buy/sell
            buysell_result = self._check_buy_sell_ratio(signal.asset, result.dex_pair_address, result.dex_chain)
            result.buy_ratio_percent = buysell_result
            
            if buysell_result < MIN_BUY_RATIO_PERCENT:
                result.warnings.append(f"Buy/Sell —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è {buysell_result:.1f}% < –º—ñ–Ω—ñ–º—É–º {MIN_BUY_RATIO_PERCENT}%")
            
            # 11. –ê–Ω–∞–ª—ñ–∑ –¥–∏–Ω–∞–º—ñ–∫–∏ —Ü—ñ–Ω –∑–∞ 15 —Ö–≤ —Ç–∞ 1 –≥–æ–¥–∏–Ω—É
            price_dynamics_15min, price_dynamics_1hour = self._analyze_price_dynamics(signal.asset, result.dex_pair_address, result.dex_chain)
            result.price_dynamics_15min = price_dynamics_15min
            result.price_dynamics_1hour = price_dynamics_1hour
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–∏–Ω–∞–º—ñ–∫–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            logging.info(f"üìä –î–∏–Ω–∞–º—ñ–∫–∞ —Ü—ñ–Ω {signal.asset}: 15—Ö–≤={price_dynamics_15min:.1f}%, 1–≥–æ–¥={price_dynamics_1hour:.1f}%")
            
            # 12. üìä –ù–û–í–ò–ô: –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –ø—Ä–æ –≥–ª–∏–±–∏–Ω—É —Ä–∏–Ω–∫—É XT.com –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é
            market_depth = self._collect_market_depth_analysis(result.xt_symbol)
            result.market_depth_data = market_depth if market_depth else {}
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ –≥–ª–∏–±–∏–Ω–∏ —Ä–∏–Ω–∫—É
            if market_depth:
                depth_validation = self._validate_market_depth_quality(market_depth, ORDER_AMOUNT)
                if not depth_validation['valid']:
                    result.errors.append(f"–ì–ª–∏–±–∏–Ω–∞ —Ä–∏–Ω–∫—É –Ω–µ–∑–∞–¥–æ–≤—ñ–ª—å–Ω–∞: {depth_validation['reason']}")
            
            # 13. üìà –ù–û–í–ò–ô: –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–∏–Ω–∞–º—ñ–∫–∏ —Ü—ñ–Ω –∑ —Ç—Ä–µ–∫–µ—Ä–æ–º —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é
            price_dynamics_enhanced = self._collect_enhanced_price_dynamics(signal.asset)
            result.price_dynamics_analysis = price_dynamics_enhanced if price_dynamics_enhanced else {}
            
            if price_dynamics_enhanced:
                analysis_15m = price_dynamics_enhanced.get('15m')
                if analysis_15m:
                    result.trend_direction = analysis_15m['trend_direction']
                    result.momentum_score = analysis_15m['momentum_score']
                    result.support_resistance_levels = analysis_15m['support_resistance']
                    
                    # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —è–∫–æ—Å—Ç—ñ —Ç–∞ —Ç—Ä–µ–Ω–¥—É
                    dynamics_validation = self._validate_price_dynamics_quality(analysis_15m)
                    if not dynamics_validation['valid']:
                        result.warnings.append(f"–î–∏–Ω–∞–º—ñ–∫–∞ —Ü—ñ–Ω: {dynamics_validation['reason']}")
            
            # –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
            result.valid = len(result.errors) == 0
            
            if result.valid:
                self._set_cooldown(signal.asset)
                logging.info(f"‚úÖ –°–∏–≥–Ω–∞–ª {signal.asset} –ø—Ä–æ–π—à–æ–≤ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é: —Å–ø—Ä–µ–¥ {result.actual_spread:.2f}%")
            else:
                logging.warning(f"‚ùå –°–∏–≥–Ω–∞–ª {signal.asset} –ù–ï –ø—Ä–æ–π—à–æ–≤ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é: {'; '.join(result.errors)}")
                
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Å–∏–≥–Ω–∞–ª—É {signal.asset}: {e}")
            result.errors.append(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {str(e)}")
            
        return result
    
    def _check_cooldown(self, symbol: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –Ω–µ –≤ –∫—É–ª–¥–∞—É–Ω—ñ —Å–∏–º–≤–æ–ª"""
        now = time.time()
        last_check = self.cooldown_cache.get(symbol, 0)
        return (now - last_check) >= COOLDOWN_SEC
    
    def _set_cooldown(self, symbol: str):
        """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∫—É–ª–¥–∞—É–Ω –¥–ª—è —Å–∏–º–≤–æ–ª—É"""
        self.cooldown_cache[symbol] = time.time()
    
    def _verify_xt_token(self, signal: ArbitrageSignal) -> Dict[str, Any]:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—É –Ω–∞ XT.com"""
        try:
            from xt_client import create_xt, get_xt_price, is_xt_futures_tradeable
            
            # –§–æ—Ä–º—É—î–º–æ symbol –¥–ª—è XT.com
            xt_symbol = f"{signal.asset}/USDT:USDT"
            
            xt = create_xt()
            if not xt:
                return {'found': False, 'error': 'XT –∫–ª—ñ—î–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'}
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω—É
            xt_price = get_xt_price(xt, xt_symbol)
            if not xt_price or xt_price <= 0:
                return {'found': False, 'error': '–¶—ñ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Ç–æ—Ä–≥—ñ–≤–ª—ñ
            tradeable = is_xt_futures_tradeable(xt_symbol)
            
            return {
                'found': True,
                'symbol': xt_symbol,
                'price': xt_price,
                'tradeable': tradeable
            }
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ XT.com –¥–ª—è {signal.asset}: {e}")
            return {'found': False, 'error': str(e)}
    
    def _verify_dex_pair(self, signal: ArbitrageSignal) -> Dict[str, Any]:
        """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫—Ä–∞—â—É DEX –ø–∞—Ä—É –¥–ª—è —Ç–æ–∫–µ–Ω—É"""
        try:
            from utils import get_shared_dex_client
            
            dex_client = get_shared_dex_client()
            if not dex_client:
                return {'found': False, 'error': 'DEX –∫–ª—ñ—î–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'}
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â—É –ø–∞—Ä—É
            best_pair = dex_client.resolve_best_pair(signal.asset)
            if not best_pair:
                return {'found': False, 'error': 'DEX –ø–∞—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞'}
            
            return {
                'found': True,
                'pair_address': best_pair.get('pair_address', ''),
                'token_address': best_pair.get('token_address', ''),
                'price': best_pair.get('price_usd', 0.0),
                'liquidity': best_pair.get('liquidity_usd', 0.0),
                'volume_24h': best_pair.get('volume_24h', 0.0),
                'chain': best_pair.get('chain', 'unknown'),
                'dex_name': best_pair.get('dex_name', 'DEX'),
                'exact_pair_url': best_pair.get('exact_pair_url', '')
            }
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ DEX –¥–ª—è {signal.asset}: {e}")
            return {'found': False, 'error': str(e)}
    
    def _generate_dexscreener_link(self, chain: str, pair_address: str, token_address: str = "") -> str:
        """–ì–µ–Ω–µ—Ä—É—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ DexScreener –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –ø–∞—Ä–∏"""
        if pair_address:
            return f"https://dexscreener.com/{chain}/{pair_address}"
        elif token_address:
            return f"https://dexscreener.com/{chain}?q={token_address}"
        return f"https://dexscreener.com/{chain}"
    
    def _generate_pancakeswap_link(self, token_address: str, chain: str) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ PancakeSwap –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        if chain.lower() == 'bsc' and token_address:
            return f"https://pancakeswap.finance/swap?outputCurrency={token_address}"
        return ""
    
    def _generate_uniswap_link(self, token_address: str, chain: str) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Uniswap –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        if chain.lower() == 'ethereum' and token_address:
            return f"https://app.uniswap.org/#/swap?outputCurrency={token_address}"
        return ""
    
    def _check_honeypot(self, token_address: str, chain: str) -> str:
        """
        –†–µ–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ honeypot —á–µ—Ä–µ–∑ Honeypot.is API + Web3 —Å–∏–º—É–ª—è—Ü—ñ—è
        –ü–æ–≤–µ—Ä—Ç–∞—î: 'ok', 'suspicious', 'blocked', 'unknown'
        """
        try:
            import requests
            from web3 import Web3
            
            # –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞ –≤—ñ–¥–æ–º–∏–º–∏ –ø–∞—Ç–µ—Ä–Ω–∞–º–∏
            if not token_address or len(token_address) < 10:
                return 'unknown'
            
            # üöÄ –†–ï–ê–õ–¨–ù–ê HONEYPOT –ü–ï–†–ï–í–Ü–†–ö–ê —á–µ—Ä–µ–∑ Honeypot.is API
            try:
                honeypot_url = f"https://api.honeypot.is/v2/IsHoneypot?address={token_address}"
                response = requests.get(honeypot_url, timeout=5)
                
                if response.status_code == 200:
                    data = response.json()
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ honeypot —Å—Ç–∞—Ç—É—Å—É
                    if data.get('IsHoneypot', False):
                        logging.warning(f"üö® HONEYPOT DETECTED: {token_address} - BLOCKED!")
                        return 'blocked'
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏—Å–æ–∫–∏—Ö –ø–æ–¥–∞—Ç–∫—ñ–≤ (>10%)
                    buy_tax = data.get('BuyTax', 0)
                    sell_tax = data.get('SellTax', 0)
                    
                    if buy_tax > 10 or sell_tax > 10:
                        logging.warning(f"üö® HIGH TAX: {token_address} - Buy: {buy_tax}%, Sell: {sell_tax}%")
                        return 'suspicious'
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –ø—Ä–æ–¥–∞–∂—É
                    can_sell = data.get('CanSell', True)
                    if not can_sell:
                        logging.warning(f"üö® SELL BLOCKED: {token_address}")
                        return 'blocked'
                    
                    logging.info(f"‚úÖ HONEYPOT CHECK PASSED: {token_address} (Buy: {buy_tax}%, Sell: {sell_tax}%)")
                    return 'ok'
                    
            except Exception as api_error:
                logging.warning(f"‚ö†Ô∏è Honeypot API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è {token_address}: {api_error}")
            
            # üî• FALLBACK: Web3 —Å–∏–º—É–ª—è—Ü—ñ—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ
            if chain.lower() in ['ethereum', 'bsc']:
                return self._simulate_web3_trade(token_address, chain)
            
            # –Ø–∫—â–æ –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ - –±–µ–∑–ø–µ—á–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥
            logging.warning(f"‚ö†Ô∏è Honeypot –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è {token_address} - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fail-safe")
            return 'unknown'
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ honeypot –¥–ª—è {token_address}: {e}")
            return 'unknown'
    
    def _simulate_web3_trade(self, token_address: str, chain: str) -> str:
        """
        Web3 —Å–∏–º—É–ª—è—Ü—ñ—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ honeypot
        –ü–æ–≤–µ—Ä—Ç–∞—î: 'ok', 'suspicious', 'blocked'
        """
        try:
            from web3 import Web3
            
            # RPC –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏
            rpc_urls = {
                'ethereum': 'https://eth.llamarpc.com',
                'bsc': 'https://bsc-dataseed.binance.org'
            }
            
            if chain.lower() not in rpc_urls:
                return 'unknown'
            
            # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Web3
            w3 = Web3(Web3.HTTPProvider(rpc_urls[chain.lower()]))
            if not w3.is_connected():
                logging.warning(f"‚ö†Ô∏è Web3 –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è {chain}")
                return 'unknown'
            
            # –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ–Ω—Ç—Ä–∞–∫—Ç
                code = w3.eth.get_code(Web3.to_checksum_address(token_address))
                if len(code) <= 2:  # "0x" –æ–∑–Ω–∞—á–∞—î —â–æ –Ω–µ–º–∞—î –∫–æ–¥—É
                    logging.warning(f"üö® NO CONTRACT CODE: {token_address}")
                    return 'suspicious'
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä –∫–æ–¥—É (–≤–µ–ª–∏–∫—ñ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∏ —á–∞—Å—Ç–æ honeypot)
                if len(code) > 50000:  # >50KB –∫–æ–¥ –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏–π
                    logging.warning(f"üö® LARGE CONTRACT: {token_address} ({len(code)} bytes)")
                    return 'suspicious'
                
                logging.info(f"‚úÖ WEB3 CHECK PASSED: {token_address} ({len(code)} bytes)")
                return 'ok'
                
            except Exception as contract_error:
                logging.warning(f"‚ö†Ô∏è Contract check failed for {token_address}: {contract_error}")
                return 'unknown'
                
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è Web3 —Å–∏–º—É–ª—è—Ü—ñ—è failed –¥–ª—è {token_address}: {e}")
            return 'unknown'
    
    def _check_volatility_15min(self, symbol: str, pair_address: str, chain: str) -> float:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 15 —Ö–≤–∏–ª–∏–Ω
        –ü–æ–≤–µ—Ä—Ç–∞—î –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
        """
        try:
            from utils import get_shared_dex_client
            
            dex_client = get_shared_dex_client()
            if not dex_client:
                logging.warning(f"DEX –∫–ª—ñ—î–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω–æ—Å—Ç—ñ {symbol}")
                # Fail-closed: —è–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ, –±–ª–æ–∫—É—î–º–æ
                return 0.0  # –ù–∏–∂—á–µ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥—É
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ –∑ DexCheck API
            metrics = dex_client.get_advanced_token_metrics(symbol)
            if not metrics:
                logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è {symbol}")
                return 0.0  # Fail-closed
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ü—ñ–Ω–∏ –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –≤–æ–ª–∞—Ç—ñ–ª—å–Ω–æ—Å—Ç—ñ
            current_price = metrics.get('price_usd', 0)
            price_change = metrics.get('price_change_15min', 0)  # –Ø–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–æ
            
            if current_price > 0 and price_change != 0:
                volatility = abs(price_change)
                logging.info(f"üìä –í–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å {symbol}: {volatility:.1f}%")
                return volatility
            else:
                # Fail-closed: —è–∫—â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –∑–º—ñ–Ω—É —Ü—ñ–Ω–∏, –±–ª–æ–∫—É—î–º–æ
                logging.warning(f"–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å –¥–ª—è {symbol}")
                return 0.0  # –ù–∏–∂—á–µ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥—É
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω–æ—Å—Ç—ñ –¥–ª—è {symbol}: {e}")
            return 0.0  # Fail-closed
    
    def _check_orderbook_depth(self, symbol: str, pair_address: str, chain: str) -> float:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î –≥–ª–∏–±–∏–Ω—É –æ—Ä–¥–µ—Ä–±—É–∫—É —á–µ—Ä–µ–∑ –∑–∞–≥–∞–ª—å–Ω—É –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å
        –ü–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–∞–ª—å–Ω—É –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å —É USD
        """
        try:
            from utils import get_shared_dex_client
            
            dex_client = get_shared_dex_client()
            if not dex_client:
                logging.warning(f"DEX –∫–ª—ñ—î–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥–ª–∏–±–∏–Ω–∏ –æ—Ä–¥–µ—Ä–±—É–∫—É {symbol}")
                # Fail-closed: —è–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ, –±–ª–æ–∫—É—î–º–æ
                return 0.0  # –ù–∏–∂—á–µ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥—É
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å —è–∫ –ø—Ä–æ–∫—Å—ñ –¥–ª—è –≥–ª–∏–±–∏–Ω–∏ –æ—Ä–¥–µ—Ä–±—É–∫—É
            pair_data = dex_client.resolve_best_pair(symbol)
            if not pair_data:
                logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø–∞—Ä–∏ –¥–ª—è {symbol}")
                return 0.0  # Fail-closed
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ
            liquidity_usd = pair_data.get('liquidity', 0.0)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 'liquidity' —è–∫ —É _verify_dex_pair
            
            # –õ–æ–≥—ñ–∫–∞: —è–∫—â–æ –∑–∞–≥–∞–ª—å–Ω–∞ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–Ω—è, —Ç–æ —ñ –≥–ª–∏–±–∏–Ω–∞ –æ—Ä–¥–µ—Ä–±—É–∫—É –±—É–¥–µ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ—é
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 10% –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ—ó –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ —è–∫ –¥–æ—Å—Ç—É–ø–Ω—É –≥–ª–∏–±–∏–Ω—É –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ
            available_depth = liquidity_usd * 0.1
            
            logging.info(f"üìä –ì–ª–∏–±–∏–Ω–∞ –æ—Ä–¥–µ—Ä–±—É–∫—É {symbol}: ${available_depth:,.0f} (–∑ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ ${liquidity_usd:,.0f})")
            return available_depth
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥–ª–∏–±–∏–Ω–∏ –æ—Ä–¥–µ—Ä–±—É–∫—É –¥–ª—è {symbol}: {e}")
            return 0.0  # Fail-closed
    
    def _check_buy_sell_ratio(self, symbol: str, pair_address: str, chain: str) -> float:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –ø–æ–∫—É–ø–æ–∫ –¥–æ –ø—Ä–æ–¥–∞–∂—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 100 —É–≥–æ–¥
        –ü–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥—Å–æ—Ç–æ–∫ –ø–æ–∫—É–ø–æ–∫
        """
        try:
            from utils import get_shared_dex_client
            
            dex_client = get_shared_dex_client()
            if not dex_client:
                logging.warning(f"DEX –∫–ª—ñ—î–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ buy/sell ratio {symbol}")
                # Fail-closed: —è–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ, –±–ª–æ–∫—É—î–º–æ
                return 0.0  # –ù–∏–∂—á–µ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥—É
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ –∑ DexCheck API
            metrics = dex_client.get_advanced_token_metrics(symbol)
            if not metrics:
                logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è {symbol}")
                return 0.0  # Fail-closed
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ 24 –≥–æ–¥–∏–Ω–∏
            txns_24h = metrics.get('txns_24h', {})
            if txns_24h and 'buy_percentage' in txns_24h:
                buy_percentage = txns_24h['buy_percentage']
                logging.info(f"üìä Buy/Sell ratio {symbol}: {buy_percentage:.1f}% –ø–æ–∫—É–ø–æ–∫")
                return buy_percentage
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —è–∫—â–æ —î –¥–∞–Ω—ñ –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É–≥–æ–¥
            buys = txns_24h.get('buys', 0)
            sells = txns_24h.get('sells', 0)
            total_trades = buys + sells
            
            if total_trades > 0:
                buy_percentage = (buys / total_trades) * 100
                logging.info(f"üìä Buy/Sell ratio {symbol}: {buy_percentage:.1f}% –ø–æ–∫—É–ø–æ–∫ ({buys}B/{sells}S)")
                return buy_percentage
            else:
                logging.warning(f"–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ —É–≥–æ–¥–∏ –¥–ª—è {symbol}")
                return 0.0  # Fail-closed
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ buy/sell ratio –¥–ª—è {symbol}: {e}")
            return 0.0  # Fail-closed
    
    def _analyze_price_dynamics(self, symbol: str, pair_address: str, chain: str) -> Tuple[float, float]:
        """
        –ê–Ω–∞–ª—ñ–∑—É—î –¥–∏–Ω–∞–º—ñ–∫—É —Ü—ñ–Ω –∑–∞ 15 —Ö–≤–∏–ª–∏–Ω —Ç–∞ 1 –≥–æ–¥–∏–Ω—É
        –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä—Ç–µ–∂ (–∑–º—ñ–Ω–∞_–∑–∞_15—Ö–≤_%, –∑–º—ñ–Ω–∞_–∑–∞_1–≥–æ–¥_%)
        """
        try:
            from utils import get_shared_dex_client
            
            dex_client = get_shared_dex_client()
            if not dex_client:
                logging.warning(f"DEX –∫–ª—ñ—î–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –¥–∏–Ω–∞–º—ñ–∫–∏ —Ü—ñ–Ω {symbol}")
                return 0.0, 0.0  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞ –¥–∏–Ω–∞–º—ñ–∫–∞
            
            # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö —Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–∏–Ω–∞–º—ñ–∫–∏
            # –ü–æ–∫–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
            price_change_15min = 0.0  # –ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏ –∑–∞ 15 —Ö–≤–∏–ª–∏–Ω —É %
            price_change_1hour = 0.0  # –ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏ –∑–∞ 1 –≥–æ–¥–∏–Ω—É —É %
            
            return price_change_15min, price_change_1hour
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –¥–∏–Ω–∞–º—ñ–∫–∏ —Ü—ñ–Ω –¥–ª—è {symbol}: {e}")
            return 0.0, 0.0
    
    def _collect_market_depth_analysis(self, xt_symbol: str) -> Optional[Dict]:
        """
        üìä –ó–ë–Ü–† –î–ê–ù–ò–• –ü–†–û –ì–õ–ò–ë–ò–ù–£ –†–ò–ù–ö–£ XT.com
        –û—Ç—Ä–∏–º—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–±—Å—è–≥–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö —Ä—ñ–≤–Ω—è—Ö —Ü—ñ–Ω
        """
        try:
            from xt_client import create_xt, collect_market_depth_data
            
            if not xt_symbol:
                return None
                
            xt = create_xt()
            if not xt:
                logging.warning("XT –∫–ª—ñ—î–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –∑–±–æ—Ä—É –≥–ª–∏–±–∏–Ω–∏ —Ä–∏–Ω–∫—É")
                return None
            
            # –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –≥–ª–∏–±–∏–Ω–∏ —Ä–∏–Ω–∫—É –∑ 20 —Ä—ñ–≤–Ω—è–º–∏
            depth_data = collect_market_depth_data(xt, xt_symbol, depth_levels=20)
            
            if depth_data:
                logging.info(f"üìä –ó—ñ–±—Ä–∞–Ω–æ –¥–∞–Ω—ñ –≥–ª–∏–±–∏–Ω–∏ —Ä–∏–Ω–∫—É {xt_symbol}: "
                           f"bids=${depth_data['total_bid_liquidity']:,.0f} "
                           f"asks=${depth_data['total_ask_liquidity']:,.0f}")
                return depth_data
            else:
                logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑—ñ–±—Ä–∞—Ç–∏ –¥–∞–Ω—ñ –≥–ª–∏–±–∏–Ω–∏ —Ä–∏–Ω–∫—É –¥–ª—è {xt_symbol}")
                return None
                
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–æ—Ä—É –≥–ª–∏–±–∏–Ω–∏ —Ä–∏–Ω–∫—É {xt_symbol}: {e}")
            return None
    
    def _collect_enhanced_price_dynamics(self, symbol: str) -> Optional[Dict]:
        """
        üìà –†–û–ó–®–ò–†–ï–ù–ò–ô –ê–ù–ê–õ–Ü–ó –î–ò–ù–ê–ú–Ü–ö–ò –¶–Ü–ù
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î price_tracker –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º—É–ª—å—Ç–∏-—ñ–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
        """
        try:
            # –ó–±–∏—Ä–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ —Ü—ñ–Ω—É –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞
            price_tracker.collect_current_price_data(symbol)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–Ω–∞–ª—ñ–∑ –¥–ª—è –∫—ñ–ª—å–∫–æ—Ö —á–∞—Å–æ–≤–∏—Ö —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤
            multi_analysis = price_tracker.get_multi_timeframe_analysis(symbol)
            
            if multi_analysis:
                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ DynamicsAnalysis –æ–±'—î–∫—Ç–∏ –≤ —Å–ª–æ–≤–Ω–∏–∫–∏ –¥–ª—è —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
                serialized_analysis = {}
                for timeframe, analysis in multi_analysis.items():
                    if analysis:
                        serialized_analysis[timeframe] = {
                            'symbol': analysis.symbol,
                            'timeframe_minutes': analysis.timeframe_minutes,
                            'price_change_pct': analysis.price_change_pct,
                            'volatility_pct': analysis.volatility_pct,
                            'trend_direction': analysis.trend_direction,
                            'momentum_score': analysis.momentum_score,
                            'support_resistance': analysis.support_resistance,
                            'quality_score': analysis.quality_score,
                            'price_levels_count': len(analysis.price_levels)
                        }
                
                if serialized_analysis:
                    logging.info(f"üìà –ó—ñ–±—Ä–∞–Ω–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–∏–Ω–∞–º—ñ–∫–∏ –¥–ª—è {symbol}: "
                               f"{len(serialized_analysis)} —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤")
                    return serialized_analysis
            
            logging.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –¥–∏–Ω–∞–º—ñ–∫–∏ {symbol}")
            return None
            
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –¥–∏–Ω–∞–º—ñ–∫–∏ {symbol}: {e}")
            return None
    
    def _validate_market_depth_quality(self, market_depth: Dict, order_amount: float) -> Dict[str, Any]:
        """
        üìä –í–ê–õ–Ü–î–ê–¶–Ü–Ø –Ø–ö–û–°–¢–Ü –ì–õ–ò–ë–ò–ù–ò –†–ò–ù–ö–£
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—è –≥–ª–∏–±–∏–Ω–∞ —Ä–∏–Ω–∫—É –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ
        """
        try:
            # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ config.py
            MAX_BID_ASK_SPREAD_PERCENT = 1.0
            MIN_TOTAL_LIQUIDITY_MULTIPLIER = 5.0
            MAX_TOP3_CONCENTRATION_PERCENT = 90.0
            
            # –ë–∞–∑–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö
            if not market_depth.get('spread_analysis') or not market_depth.get('bids') or not market_depth.get('asks'):
                return {'valid': False, 'reason': '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ –¥–∞–Ω—ñ –≥–ª–∏–±–∏–Ω–∏ —Ä–∏–Ω–∫—É'}
            
            # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ø—Ä–µ–¥—É bid/ask
            bid_ask_spread = market_depth['spread_analysis'].get('bid_ask_spread_pct', 999)
            if bid_ask_spread > MAX_BID_ASK_SPREAD_PERCENT:
                return {'valid': False, 'reason': f'–°–ø—Ä–µ–¥ bid/ask {bid_ask_spread:.2f}% > {MAX_BID_ASK_SPREAD_PERCENT}%'}
            
            # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≥–∞–ª—å–Ω–æ—ó –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ
            total_bid_liquidity = market_depth.get('total_bid_liquidity', 0)
            total_ask_liquidity = market_depth.get('total_ask_liquidity', 0)
            min_required_liquidity = order_amount * MIN_TOTAL_LIQUIDITY_MULTIPLIER
            
            if total_bid_liquidity < min_required_liquidity:
                return {'valid': False, 'reason': f'–õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å bids ${total_bid_liquidity:.0f} < ${min_required_liquidity:.0f}'}
            
            if total_ask_liquidity < min_required_liquidity:
                return {'valid': False, 'reason': f'–õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å asks ${total_ask_liquidity:.0f} < ${min_required_liquidity:.0f}'}
            
            # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—ó –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ
            bid_concentration = market_depth.get('bid_depth_analysis', {}).get('top3_concentration_pct', 0)
            ask_concentration = market_depth.get('ask_depth_analysis', {}).get('top3_concentration_pct', 0)
            
            if bid_concentration > MAX_TOP3_CONCENTRATION_PERCENT:
                return {'valid': False, 'reason': f'–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è bids {bid_concentration:.1f}% > {MAX_TOP3_CONCENTRATION_PERCENT}%'}
            
            if ask_concentration > MAX_TOP3_CONCENTRATION_PERCENT:
                return {'valid': False, 'reason': f'–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è asks {ask_concentration:.1f}% > {MAX_TOP3_CONCENTRATION_PERCENT}%'}
            
            return {'valid': True, 'reason': '–ì–ª–∏–±–∏–Ω–∞ —Ä–∏–Ω–∫—É –∑–∞–¥–æ–≤—ñ–ª—å–Ω–∞'}
            
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –≥–ª–∏–±–∏–Ω–∏ —Ä–∏–Ω–∫—É: {e}")
            return {'valid': False, 'reason': f'–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {str(e)}'}
    
    def _validate_price_dynamics_quality(self, analysis_15m: Dict) -> Dict[str, Any]:
        """
        üìà –í–ê–õ–Ü–î–ê–¶–Ü–Ø –Ø–ö–û–°–¢–Ü –î–ò–ù–ê–ú–Ü–ö–ò –¶–Ü–ù
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —è–∫—ñ—Å–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è —Ç–æ—Ä–≥–æ–≤–∏—Ö —Ä—ñ—à–µ–Ω—å
        """
        try:
            # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑ config.py
            MIN_DYNAMICS_QUALITY_SCORE = 30.0
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö
            quality_score = analysis_15m.get('quality_score', 0)
            if quality_score < MIN_DYNAMICS_QUALITY_SCORE:
                return {'valid': False, 'reason': f'–Ø–∫—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö {quality_score:.1f} < {MIN_DYNAMICS_QUALITY_SCORE}'}
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –µ–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
            volatility_pct = analysis_15m.get('volatility_pct', 0)
            if volatility_pct > 50:  # –ï–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å
                return {'valid': False, 'reason': f'–ï–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å {volatility_pct:.1f}%'}
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ—á–æ–∫ –¥–∞–Ω–∏—Ö
            price_levels_count = analysis_15m.get('price_levels_count', 0)
            if price_levels_count < 5:
                return {'valid': False, 'reason': f'–ú–∞–ª–æ —Ç–æ—á–æ–∫ –¥–∞–Ω–∏—Ö: {price_levels_count}'}
            
            # –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π—à–ª–∏
            return {'valid': True, 'reason': '–î–∏–Ω–∞–º—ñ–∫–∞ —Ü—ñ–Ω —è–∫—ñ—Å–Ω–∞'}
            
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–∏–Ω–∞–º—ñ–∫–∏ —Ü—ñ–Ω: {e}")
            return {'valid': False, 'reason': f'–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {str(e)}'}

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ç–æ—Ä
signal_verifier = SignalVerification()

def verify_arbitrage_signal(signal: ArbitrageSignal) -> VerificationResult:
    """–ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Å–∏–≥–Ω–∞–ª—É"""
    return signal_verifier.verify_signal(signal)