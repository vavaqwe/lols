import logging
import requests
import matplotlib.pyplot as plt
import threading
import time
import json
from datetime import datetime
from typing import Optional

# üîó –ù–û–í–ê –Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ø: DEX Link Generator –¥–ª—è –ø—Ä—è–º–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ñ –ø–∞—Ä–∏
# Simple fallback instead of dex_link_generator

# Configure logging and HIDE sensitive HTTP requests with tokens
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# CRITICAL SECURITY: Hide HTTP requests with tokens from urllib3, httpx, and telegram library
logging.getLogger('urllib3').setLevel(logging.WARNING)
logging.getLogger('httpx').setLevel(logging.WARNING) 
logging.getLogger('telegram').setLevel(logging.WARNING)
logging.getLogger('telegram.ext').setLevel(logging.WARNING)
logging.getLogger('httpcore').setLevel(logging.WARNING)
logging.getLogger('requests').setLevel(logging.WARNING)

def calculate_spread(dex_price, xt_price, fee=0.06):
    # –ø–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥—Å–æ—Ç–∫–æ–≤–∏–π spread (–≤ %)
    try:
        return ((dex_price - xt_price) / dex_price * 100.0) - fee
    except Exception:
        return 0.0

# –ü—Ä–æ—Å—Ç–∏–π plotting (–≤ –æ–∫—Ä–µ–º–æ–º—É —Ç—Ä–µ–¥—ñ) - –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤ Replit
_plot_lock = threading.Lock()
def plot_spread_live(spread_store):
    # Matplotlib plotting –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è GUI –ø—Ä–æ–±–ª–µ–º —É –≤–µ–±-—Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ
    logging.info("Plotting thread started (GUI disabled for web environment)")
    while True:
        time.sleep(5)  # –ø—Ä–æ—Å—Ç–æ —Ç—Ä–∏–º–∞—î–º–æ —Ç—Ä–µ–¥ –∂–∏–≤–∏–º

def send_telegram(bot_token, chat_id, text):
    """–ë–∞–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–æ—é"""
    if not bot_token:
        logging.warning("‚ùå TELEGRAM: Bot token –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
        return False
    if not chat_id:
        logging.warning(f"‚ùå TELEGRAM: Chat ID –ø–æ—Ä–æ–∂–Ω—ñ–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É")
        return False
    
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    try:
        # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if len(text) > 4000:
            text = text[:4000] + "..."
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –∑ HTML —Ñ–æ—Ä–º–∞—Ç–æ–º –ë–ï–ó web page preview
        response = requests.post(url, data={
            "chat_id": chat_id, 
            "text": text, 
            "parse_mode": "HTML",
            "disable_web_page_preview": True
        }, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                logging.info(f"‚úÖ Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ chat_id={chat_id}")
                return True
            else:
                # –õ–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ Telegram API –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                logging.error(f"‚ùå Telegram API error –¥–ª—è chat_id={chat_id}: {result}")
                return False
        else:
            # –õ–æ–≥—É—î–º–æ HTTP –ø–æ–º–∏–ª–∫–∏ Telegram –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logging.error(f"‚ùå Telegram HTTP error {response.status_code} –¥–ª—è chat_id={chat_id}: {response.text[:200]}")
            return False
            
    except Exception as e:
        # –õ–æ–≥—É—î–º–æ –º–µ—Ä–µ–∂–µ–≤—ñ –ø–æ–º–∏–ª–∫–∏ Telegram –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logging.error(f"‚ùå Telegram network error –¥–ª—è chat_id={chat_id}: {str(e)}")
        return False

def send_to_admins_and_group(text):
    """
    üéØ –¶–ï–ù–¢–†–ê–õ–Ü–ó–û–í–ê–ù–ê –§–£–ù–ö–¶–Ü–Ø: –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±–æ–º –∞–¥–º—ñ–Ω–∞–º + –≥—Ä—É–ø—ñ
    –ì–∞—Ä–∞–Ω—Ç—É—î —â–æ –≤—Å—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ —Ç–∞ –≥—Ä—É–ø–∞ –æ—Ç—Ä–∏–º–∞—é—Ç—å –æ–¥–Ω–∞–∫–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    """
    from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, TELEGRAM_ADMIN_2_ID, TELEGRAM_GROUP_CHAT_ID
    
    results = []
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞–¥–º—ñ–Ω—É 1
    if TELEGRAM_CHAT_ID:
        result = send_telegram(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, text)
        results.append(("–ê–¥–º—ñ–Ω 1", result))
        
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞–¥–º—ñ–Ω—É 2
    if TELEGRAM_ADMIN_2_ID:
        result = send_telegram(TELEGRAM_BOT_TOKEN, TELEGRAM_ADMIN_2_ID, text)
        results.append(("–ê–¥–º—ñ–Ω 2", result))
        
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ –≥—Ä—É–ø—É
    if TELEGRAM_GROUP_CHAT_ID:
        result = send_telegram(TELEGRAM_BOT_TOKEN, TELEGRAM_GROUP_CHAT_ID, text)
        results.append(("–ì—Ä—É–ø–∞", result))
        
    # –õ–æ–≥—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    successful = sum(1 for _, success in results if success)
    logging.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {successful}/{len(results)} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–ê–¥–º—ñ–Ω–∏ + –ì—Ä—É–ø–∞)")
    
    return any(success for _, success in results)  # True —è–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–æ—Å—å

def send_telegram_trade_notification(symbol, side, amount, price, profit=None, action="OPENED", spread=None, exchange_price=None, dex_price=None):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ç–æ—Ä–≥–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –æ–±–æ–º –∞–¥–º—ñ–Ω–∞–º + –≥—Ä—É–ø—ñ —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é"""
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –±—ñ—Ä–∂—É –∑ action
    exchange_name = "üåê Gate.io"
    if "(XT)" in action:
        exchange_name = "‚ö° XT.COM"
    
    # üö® –î–ï–¢–ê–õ–¨–ù–ò–ô –§–û–†–ú–ê–¢ —Å–∏–≥–Ω–∞–ª—É —è–∫ —É –ø—Ä–∏–∫–ª–∞–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if action.startswith("OPENED"):
        clean_symbol = symbol.replace('/USDT:USDT', '')
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ç–æ—Ä–≥–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        leverage = 7  # –ü–ª–µ—á–µ 7x —è–∫ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        margin = 5.0  # –§—ñ–∫—Å–æ–≤–∞–Ω–∞ –º–∞—Ä–∂–∞ $5
        
        # –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ None –∑–Ω–∞—á–µ–Ω—å
        if exchange_price is None or dex_price is None:
            exchange_price = price if price else 1.0
            dex_price = price if price else 1.0
        if spread is None:
            spread = 1.0
            
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ TP/SL/R&R
        if side == "LONG":
            tp_price = exchange_price * 1.017  # TP +1.7%
            sl_price = exchange_price * 0.90   # SL -10%
        else:
            tp_price = exchange_price * 0.983  # TP -1.7%
            sl_price = exchange_price * 1.10   # SL +10%
            
        tp_percent = ((tp_price - exchange_price) / exchange_price) * 100
        sl_percent = ((sl_price - exchange_price) / exchange_price) * 100
        risk_reward = abs(tp_percent) / abs(sl_percent) if abs(sl_percent) > 0 else 0.17
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä—ñ–≤–µ–Ω—å —Ä–∏–∑–∏–∫—É
        if abs(spread) >= 2.0:
            risk_level = "üü° –°–ï–†–ï–î–ù–Ü–ô"
        elif abs(spread) >= 1.5:
            risk_level = "üü¢ –ù–ò–ó–¨–ö–ò–ô"
        else:
            risk_level = "üî¥ –í–ò–°–û–ö–ò–ô"
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó
        text = "üí∞ <b>–ü–û–ó–ò–¶–Ü–Ø –í–Ü–î–ö–†–ò–¢–ê</b> üí∞\n\n"
        text += f"üìä <b>{clean_symbol}</b> {side}\n"
        text += f"üéØ <b>XT.COM</b>: ${exchange_price:.6f}\n"
        text += f"üìä <b>DexScreener</b>: ${dex_price:.6f}\n"
        text += f"üíé <b>–°–ø—Ä–µ–¥</b>: +{abs(spread):.2f}%\n\n"
        
        text += "üìà <b>–¢–û–†–ì–û–í–Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø</b>\n"
        text += f"‚ö° –ü–ª–µ—á–µ: {leverage}x\n"
        text += f"üíµ –†–æ–∑–º—ñ—Ä: ${margin:.1f}\n"
        text += f"üéØ TP: ${tp_price:.6f} ({tp_percent:+.1f}%)\n"
        text += f"üõë SL: ${sl_price:.6f} ({sl_percent:+.1f}%)\n"
        text += f"‚öñÔ∏è R/R: {risk_reward:.2f}\n"
        text += f"üî• –†–∏–∑–∏–∫: {risk_level}\n\n"
        
        # –î–æ–¥–∞—î–º–æ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å —Ç–∞ –æ–±—Å—è–≥ —è–∫—â–æ —î
        try:
            dex_pair_info = get_exact_dex_pair_info(symbol)
            if dex_pair_info:
                liquidity = dex_pair_info.get('liquidity_usd', 0)
                volume_24h = dex_pair_info.get('volume_24h', 0)
                text += f"üíß –õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å: ${liquidity:,.0f}\n"
                text += f"üìä –û–±—Å—è–≥ 24–≥: ${volume_24h:,.0f}\n\n"
        except:
            pass
            
        # üöÄ –ù–û–í–ê –°–ò–°–¢–ï–ú–ê DEX –ü–û–°–ò–õ–ê–ù–¨: –î–æ–¥–∞—î–º–æ –ø—Ä—è–º—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ–ø–æ–≤—ñ DEX
        text += f"üîó <b>–¢–û–†–ì–Ü–í–õ–Ø:</b>\n"
        text += f"‚Ä¢ <a href=\"{xt_pair_link(symbol)}\">üìä XT –¢–æ—Ä–≥—É–≤–∞—Ç–∏</a>\n"
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–æ–ø–æ–≤—ñ DEX –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥—Ä–µ—Å–∏ —Ç–æ–∫–µ–Ω–∞
            exact_pair_info = get_exact_dex_pair_info(symbol)
            token_addresses = {}
            
            if exact_pair_info and exact_pair_info.get('token_address') and exact_pair_info.get('chain_name'):
                chain = exact_pair_info['chain_name'].lower()
                token_addresses[chain] = exact_pair_info['token_address']
            
            # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç–æ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö, –ø—Ä–æ–±—É—î–º–æ token_addresses.json
            if not token_addresses:
                try:
                    with open('token_addresses.json', 'r', encoding='utf-8') as f:
                        token_data = json.load(f)
                        token_info = token_data.get(clean_symbol, {})
                        if token_info.get('address') and token_info.get('chain'):
                            token_addresses[token_info['chain']] = token_info['address']
                except Exception:
                    pass
            
            # üéØ –ü–†–û–°–¢–ò–ô DEX LINK: –±–∞–∑–æ–≤–∏–π fallback –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –º–æ–¥—É–ª—ñ–≤
            if token_addresses:
                # –ü—Ä–æ—Å—Ç–∏–π fallback: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ DexScreener
                try:
                    exact_pair_info = get_exact_dex_pair_info(symbol)
                    if exact_pair_info and exact_pair_info.get('exact_pair_url'):
                        text += f"‚Ä¢ <a href=\"{exact_pair_info['exact_pair_url']}\">üìà DexScreener - –ü–ê–†–ê</a>\n"
                    else:
                        dexscreener_link = get_proper_dexscreener_link(clean_symbol)
                        text += f"‚Ä¢ <a href=\"{dexscreener_link}\">üìà DexScreener</a>\n"
                except Exception:
                    dexscreener_link = get_proper_dexscreener_link(clean_symbol)
                    text += f"‚Ä¢ <a href=\"{dexscreener_link}\">üìà DexScreener</a>\n"
            else:
                # Fallback –¥–æ DexScreener —è–∫—â–æ –Ω–µ–º–∞—î –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
                dexscreener_link = get_proper_dexscreener_link(clean_symbol)
                text += f"‚Ä¢ <a href=\"{dexscreener_link}\">üìà DexScreener</a>\n"
                
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó DEX –ø–æ—Å–∏–ª–∞–Ω—å: {e}")
            # –ë–µ–∑–ø–µ—á–Ω–∏–π fallback
            dexscreener_link = get_proper_dexscreener_link(clean_symbol)
            text += f"‚Ä¢ <a href=\"{dexscreener_link}\">üìà DexScreener</a>\n"
        
        text += "\n"
        
        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è
        import time
        text += f"‚ö° <b>–ë—ñ—Ä–∂–∞:</b> {exchange_name}\n"
        text += f"üí∞ <b>–ú–∞—Ä–∂–∞:</b> ${margin:.2f}\n"  
        text += f"‚è∞ <b>–ß–∞—Å:</b> {time.strftime('%H:%M:%S')}\n"
        text += f"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ü–û–ó–ò–¶–Ü–Ø –í–Ü–î–ö–†–ò–¢–ê"
        
        # ‚úÖ –¶–ï–ù–¢–†–ê–õ–Ü–ó–û–í–ê–ù–ê –í–Ü–î–ü–†–ê–í–ö–ê: –æ–±–æ–º –∞–¥–º—ñ–Ω–∞–º + –≥—Ä—É–ø—ñ
        send_to_admins_and_group(text)
        
    elif action.startswith("CLOSED"):
        clean_symbol = symbol.replace('/USDT:USDT', '')
        
        # üî• –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø P&L: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ —è–∫—â–æ —î, —ñ–Ω–∞–∫—à–µ –ø–µ—Ä–µ–¥–∞–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        if profit is not None:
            # –Ø–∫—â–æ profit –ø–µ—Ä–µ–¥–∞–Ω–æ, —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ —Å—É–º–∏
            profit_pct = (profit / amount) * 100 if amount > 0 and profit != 0 else 0.0
            profit_dollars = profit
        else:
            # –Ø–∫—â–æ profit –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ 0
            profit_pct = 0.0
            profit_dollars = 0.0
            
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –µ–º–æ–¥–∑—ñ —Ç–∞ —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        if profit_dollars > 0:
            result_emoji = "üíö"
            result_text = f"+${profit_dollars:.2f}"
        elif profit_dollars < 0:
            result_emoji = "‚ù§Ô∏è" 
            result_text = f"${profit_dollars:.2f}"
        else:
            result_emoji = "üíô"
            result_text = "$0.00"
            
        # üéØ –ü–û–í–ù–û–¶–Ü–ù–ù–ò–ô –î–ï–¢–ê–õ–¨–ù–ò–ô –§–û–†–ú–ê–¢ –ó–ê–ö–†–ò–¢–¢–Ø (—è–∫ –∑–∞–ø–∏—Ç–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á!)
        text = f"üèÅ **–ü–û–ó–ò–¶–Ü–Ø –ó–ê–ö–†–ò–¢–ê** {result_emoji}\n"
        text += f"üìä **{clean_symbol}** ({side.upper() if side else '‚Äî'}) | {exchange_name}\n"
        text += f"üí∞ –†–æ–∑–º—ñ—Ä: **${amount:.2f} USDT**\n"
        text += f"üìà –¶—ñ–Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è: **${price:.6f}**\n"
        text += f"üíé P&L: **{profit_pct:+.1f}%** ({result_text})\n"
        
        # –î–æ–¥–∞—î–º–æ —Å–ø—Ä–µ–¥ —è–∫—â–æ —î
        if spread is not None:
            text += f"üìä –°–ø—Ä–µ–¥: **{abs(spread):.2f}%**\n"
            
        # –î–æ–¥–∞—î–º–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ü—ñ–Ω —è–∫—â–æ —î
        if exchange_price and dex_price:
            exchange_short = "XT" if "(XT)" in action else exchange_name
            text += f"‚öñÔ∏è {exchange_short}: ${exchange_price:.3f} | DEX: ${dex_price:.3f}\n"
            
        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑ —Ö–µ—à—Ç–µ–≥–æ–º  
        text += f"‚úÖ –°—Ç–∞—Ç—É—Å: **–£–°–ü–Ü–®–ù–û –ó–ê–ö–†–ò–¢–û** | #ArbitrageBot"
        
        # ‚úÖ –¶–ï–ù–¢–†–ê–õ–Ü–ó–û–í–ê–ù–ê –í–Ü–î–ü–†–ê–í–ö–ê: –æ–±–æ–º –∞–¥–º—ñ–Ω–∞–º + –≥—Ä—É–ø—ñ
        send_to_admins_and_group(text)


def generate_crypto_signal(symbol, side, entry_price, tp_price, spread_percentage, leverage, order_amount, token_info=None, exchange="XT.COM", signal_id=None, dex_price=None, comparison_source="DexScreener"):
    """
    –ì–µ–Ω–µ—Ä—É—î –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∏–π —Å–∏–≥–Ω–∞–ª —É —Å—Ç–∏–ª—ñ —è–∫ —É –¥—Ä—É–≥–∞ –∑ ByBit
    –ê–†–•–Ü–¢–ï–ö–¢–û–†: –ü–µ—Ä–µ–ø–∏—Å–∞–Ω–æ –¥–ª—è XT.com –∑ –†–ï–ê–õ–¨–ù–ò–ú–ò —Ü—ñ–Ω–∞–º–∏ —ñ —Å–ø—Ä–µ–¥–∞–º–∏
    ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –î–æ–¥–∞–Ω–æ HTML –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤ Telegram
    """
    import html
    
    # Clean symbol name –∑ –±–µ–∑–ø–µ—á–Ω–∏–º –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è–º
    clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '').upper()
    safe_symbol = html.escape(clean_symbol, quote=False)
    safe_exchange = html.escape(exchange, quote=False)
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –µ–º–æ–¥–∑—ñ –¥–ª—è —Å—Ç–æ—Ä–æ–Ω–∏
    if side == "LONG":
        side_emoji = "üü¢"
        action = "–ö–£–ü–ò–¢–ò"
    else:
        side_emoji = "üî¥"
        action = "–ü–†–û–î–ê–¢–ò"
        
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ TP –≤—ñ–¥—Å—Ç–∞–Ω—å
    tp_distance = abs((tp_price - entry_price) / entry_price * 100)
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ SL (2% –≤—ñ–¥ –≤—Ö–æ–¥—É)
    sl_distance = 2.0
    if side == "LONG":
        sl_price = entry_price * (1 - sl_distance / 100)
    else:
        sl_price = entry_price * (1 + sl_distance / 100)
    
    # R/R —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
    risk_reward = tp_distance / sl_distance if sl_distance > 0 else 1.0
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä—ñ–≤–µ–Ω—å —Ä–∏–∑–∏–∫—É
    if abs(spread_percentage) >= 1.0:
        risk_level = "üî• –í–ò–°–û–ö–ê –Ø–ö–Ü–°–¢–¨"
        risk_color = "üü¢"
    elif abs(spread_percentage) >= 0.5:
        risk_level = "‚ö° –°–ï–†–ï–î–ù–Ø –Ø–ö–Ü–°–¢–¨"
        risk_color = "üü°"
    else:
        risk_level = "‚ö†Ô∏è –ù–ò–ó–¨–ö–ê –Ø–ö–Ü–°–¢–¨"
        risk_color = "üî¥"
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É
    potential_profit = (order_amount * leverage * tp_distance / 100)
    potential_loss = (order_amount * leverage * sl_distance / 100)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
    token_name = safe_symbol
    if token_info and isinstance(token_info, dict):
        token_name = html.escape(token_info.get('name', clean_symbol), quote=False)
    
    # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –§–æ—Ä–º–∞—Ç—É—î–º–æ —Å–∏–≥–Ω–∞–ª –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ HTML —Ç–µ–≥–∞–º–∏ –¥–ª—è Telegram
    signal = f"""üî• <b>–ê–†–ë–Ü–¢–†–ê–ñ–ù–ò–ô –°–ò–ì–ù–ê–õ</b> üî•

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
{side_emoji} <b>{safe_symbol}/USDT PERP</b>
üè¶ –ë—ñ—Ä–∂–∞: ‚ö° <b>{safe_exchange}</b>
üìç –î—ñ—è: <b>{action} {side}</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí∞ <b>–¢–û–†–ì–û–í–Ü –ü–ê–†–ê–ú–ï–¢–†–ò:</b>
üìä –¶—ñ–Ω–∞ –≤—Ö–æ–¥—É: <b>${entry_price:.6f}</b>
üéØ Take Profit: <b>${tp_price:.6f}</b>
üõ°Ô∏è Stop Loss: <b>${sl_price:.6f}</b>
‚öñÔ∏è –ü–ª–µ—á–µ: <b>{leverage}x</b>
üíµ –†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó: <b>${order_amount:.0f} USDT</b>

üìà <b>–ê–ù–ê–õ–Ü–ó:</b>"""

    # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –î–æ–¥–∞—î–º–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ DEX —Ü—ñ–Ω–æ—é –∑ HTML —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
    safe_comparison_source = html.escape(comparison_source, quote=False)
    if dex_price:
        signal += f"""
üí≤ XT.com: <b>${entry_price:.6f}</b>
üìä {safe_comparison_source}: <b>${dex_price:.6f}</b>
üéØ –°–ø—Ä–µ–¥: <b>{spread_percentage:+.2f}%</b>"""
    
    signal += f"""
üéØ TP –î–∏—Å—Ç–∞–Ω—Ü—ñ—è: <b>{tp_distance:.2f}%</b>
üõ°Ô∏è SL –î–∏—Å—Ç–∞–Ω—Ü—ñ—è: <b>{sl_distance:.2f}%</b>
‚öñÔ∏è R/R Ratio: <b>{risk_reward:.1f}:1</b>

üí∞ <b>–ü–†–û–ì–ù–û–ó–ò:</b>
‚úÖ –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: <b>${potential_profit:.2f}</b>
‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–∏–∑–∏–∫: <b>${potential_loss:.2f}</b>

{risk_color} –†—ñ–≤–µ–Ω—å —è–∫–æ—Å—Ç—ñ: <b>{risk_level}</b>

üîó <b>–ü–û–°–ò–õ–ê–ù–ù–Ø:</b>"""

    # üéØ –¶–ï–ù–¢–†–ê–õ–Ü–ó–û–í–ê–ù–ê –°–ò–°–¢–ï–ú–ê: –ü—Ä—è–º—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ–ø–æ–≤—ñ 3 DEX
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–¥—Ä–µ—Å–∏ —Ç–æ–∫–µ–Ω–∞ –∑ —Ç–æ—á–Ω–∏—Ö DEX –¥–∞–Ω–∏—Ö
        exact_pair_info = get_exact_dex_pair_info(symbol)
        token_addresses = {}
        
        if exact_pair_info and exact_pair_info.get('token_address') and exact_pair_info.get('chain_name'):
            chain = exact_pair_info['chain_name'].lower()
            token_addresses[chain] = exact_pair_info['token_address']
        
        # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç–æ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö, –ø—Ä–æ–±—É—î–º–æ token_addresses.json
        if not token_addresses:
            try:
                with open('token_addresses.json', 'r', encoding='utf-8') as f:
                    token_data = json.load(f)
                    token_info = token_data.get(clean_symbol, {})
                    if token_info.get('address') and token_info.get('chain'):
                        token_addresses[token_info['chain']] = token_info['address']
            except Exception:
                pass
        
        # üéØ –¢–û–ü–û–í–ò–ô DEX: —Ç—ñ–ª—å–∫–∏ –û–î–ò–ù –Ω–∞–π–∫—Ä–∞—â–∏–π DEX (–∑–≥—ñ–¥–Ω–æ –∑ –≤–∏–º–æ–≥–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
        if token_addresses:
            from dex_link_generator import build_top_dex_links
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–µ—Ä–µ–∂
            top_dex_links = []
            for chain, address in token_addresses.items():
                chain_links = build_top_dex_links(clean_symbol, chain, address)
                top_dex_links.extend(chain_links)
            
            # üöÄ –ù–û–í–ò–ô –§–û–†–ú–ê–¢: —Ç—ñ–ª—å–∫–∏ –û–î–ò–ù —Ç–æ–ø–æ–≤–∏–π DEX (–Ω–µ –≤—Å—ñ 3) + XT –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            if top_dex_links:
                # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π/–Ω–∞–π–∫—Ä–∞—â–∏–π DEX –∑—ñ —Å–ø–∏—Å–∫—É
                dex_name, dex_link = top_dex_links[0]
                xt_link = xt_pair_link(symbol)
                safe_dex_name = html.escape(dex_name, quote=False)
                signal += f"""
‚Ä¢ <a href="{xt_link}">üìä XT.com –¢–æ—Ä–≥—É–≤–∞—Ç–∏</a>
‚Ä¢ <a href="{dex_link}">üöÄ {safe_dex_name} –¢–æ—Ä–≥—É–≤–∞—Ç–∏</a>"""
            else:
                # Fallback –¥–æ DexScreener —è–∫—â–æ –Ω–µ–º–∞—î DEX –ø–æ—Å–∏–ª–∞–Ω—å
                proper_link = get_proper_dexscreener_link(clean_symbol)
                xt_link = xt_pair_link(symbol)
                signal += f"""
‚Ä¢ <a href="{xt_link}">üìä XT.com –¢–æ—Ä–≥—É–≤–∞—Ç–∏</a>
‚Ä¢ <a href="{proper_link}">üîç DexScreener {safe_symbol}</a>"""
        else:
            # Fallback –¥–æ DexScreener —è–∫—â–æ –Ω–µ–º–∞—î –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
            proper_link = get_proper_dexscreener_link(clean_symbol)
            signal += f"""
‚Ä¢ <a href="{proper_link}">üîç DexScreener {safe_symbol}</a>"""
            
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó DEX –ø–æ—Å–∏–ª–∞–Ω—å –¥–ª—è {symbol}: {e}")
        # –ë–µ–∑–ø–µ—á–Ω–∏–π fallback –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º
        proper_link = get_proper_dexscreener_link(clean_symbol)
        signal += f"""
‚Ä¢ <a href="{proper_link}">üîç DexScreener {safe_symbol}</a>"""
    
    signal += f"""

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ö° <b>XT.COM Arbitrage Bot</b>
ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂—ñ–≤

‚ö†Ô∏è <b>–†–ò–ó–ò–ö:</b> –ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–∏–∑–∏–∫–∞–º–∏!
"""
    
    return signal

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è shared instance
_shared_dex_client_instance = None

def get_shared_dex_client():
    """–û—Ç—Ä–∏–º—É—î shared instance DexClient –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö"""
    global _shared_dex_client_instance
    
    if _shared_dex_client_instance is None:
        try:
            # Import –Ω–æ–≤–æ–≥–æ DexCheckClient –∑–∞–º—ñ—Å—Ç—å —Å—Ç–∞—Ä–æ–≥–æ DexScreenerClient
            from dex_client import DexCheckClient
            _shared_dex_client_instance = DexCheckClient()
        except ImportError as e:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ DexCheckClient: {e}")
            return None
    
    return _shared_dex_client_instance

def get_exact_dex_pair_info(symbol: str) -> Optional[dict]:
    """
    üîó –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –û—Ç—Ä–∏–º—É—î —Ç–æ—á–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ DEX –ø–∞—Ä—É (–Ω–µ –ø–æ—à—É–∫!)
    –ü–æ–≤–µ—Ä—Ç–∞—î pair_address, dex_name, exact_url, contract_address
    """
    try:
        dex_client = get_shared_dex_client()
        if not dex_client:
            return None
            
        clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '').upper()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â—É –ø–∞—Ä—É –∑ –∫–µ—à–µ–º –∞–±–æ —Å–≤—ñ–∂–∏–º–∏ –¥–∞–Ω–∏–º–∏
        best_pair = dex_client.resolve_best_pair(clean_symbol)
        if best_pair and best_pair.get('exact_pair_url'):
            return {
                'exact_pair_url': best_pair['exact_pair_url'],
                'pair_address': best_pair.get('pair_address', ''),
                'dex_name': best_pair.get('dex_name', 'DEX'),
                'token_address': best_pair.get('token_address', ''),
                'chain_name': best_pair.get('chain_name', best_pair.get('chain', 'ethereum'))
            }
            
        return None
        
    except Exception as e:
        logging.debug(f"Error getting exact DEX pair info for {symbol}: {e}")
        return None

def dex_link_for_symbol(symbol: str) -> Optional[str]:
    """
    Universal function to get direct DexScreener link
    Uses SHARED instance for consistency with main bot
    ALWAYS returns fallback link even when API unavailable
    """
    try:
        dex_client = get_shared_dex_client()
        if dex_client and hasattr(dex_client, 'get_dex_link'):
            dex_link = dex_client.get_dex_link(symbol)
            if dex_link and "dexscreener.com" in dex_link:
                logging.debug(f"üîó DexScreener —Ç–æ—á–Ω–∞ –ø–∞—Ä–∞: {symbol} ‚Üí {dex_link}")
                return dex_link
        
        # FALLBACK: –ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω –∞–¥—Ä–µ—Å—É —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–æ—á–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '').upper()
        
        # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω –∞–¥—Ä–µ—Å—É –≤ –∫–µ—à—ñ
        if dex_client and hasattr(dex_client, 'token_addresses'):
            cached_info = dex_client.token_addresses.get(clean_symbol, {})
            if cached_info.get('contract_address') and cached_info.get('chain'):
                chain = cached_info['chain'].lower()
                token_address = cached_info['contract_address']
                exact_link = f"https://dexscreener.com/{chain}/{token_address}"
                logging.debug(f"üîó DexScreener –∑ –∫–µ—à—É: {symbol} ‚Üí {exact_link}")
                return exact_link
        
        # Use new proper link generation function
        return get_proper_dexscreener_link(symbol)
        
    except Exception as e:
        logging.error(f"Error getting DexScreener link for {symbol}: {e}")
        # FALLBACK: Use new proper link generation function
        return get_proper_dexscreener_link(symbol)

def xt_pair_link(symbol):
    """
    üîó –ì–µ–Ω–µ—Ä—É—î –∫–ª—ñ–∫–∞–±–µ–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤—É –ø–∞—Ä—É XT.com
    
    Args:
        symbol: —Å–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ—ó –ø–∞—Ä–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 'ETH/USDT:USDT' –∞–±–æ 'BTC/USDT')
    
    Returns:
        str: URL –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ XT.com futures trading
    """
    try:
        # –û—á–∏—â–∞—î–º–æ —Å–∏–º–≤–æ–ª: ETH/USDT:USDT ‚Üí ETH
        clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '').upper()
        
        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ò–ô –§–û–†–ú–ê–¢ XT.com futures trading
        pair_url = f"https://www.xt.com/en/trade/futures_{clean_symbol}USDT"
        
        logging.debug(f"üîó XT –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {symbol} ‚Üí {pair_url}")
        return pair_url
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è XT –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è {symbol}: {e}")
        return "https://www.xt.com/en/trade"

def get_proper_dexscreener_link(symbol: str) -> str:
    """
    ‚úÖ FIXED: Generate proper DexScreener links using contract addresses
    
    Priority:
    1. Direct contract address link: https://dexscreener.com/{chain}/{contract_address}
    2. Fallback to search only if no contract address available
    
    Args:
        symbol: Trading pair symbol (e.g., 'BTC/USDT:USDT' or 'ETH')
    
    Returns:
        str: Proper DexScreener link
    """
    import json  # Move import to top to fix LSP error
    try:
        # Clean symbol to match token_addresses.json format
        clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '').upper()
        
        # Load token addresses mapping
        try:
            with open('token_addresses.json', 'r', encoding='utf-8') as f:
                token_addresses = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError) as e:
            logging.warning(f"üö® Cannot load token_addresses.json: {e}")
            token_addresses = {}
        
        # Try to get contract address from mapping
        token_info = token_addresses.get(clean_symbol, {})
        if token_info.get('address') and token_info.get('chain'):
            contract_address = token_info['address']
            chain = token_info['chain'].lower()
            
            # Map chain names to DexScreener format
            chain_mapping = {
                'ethereum': 'ethereum',
                'bsc': 'bsc', 
                'polygon': 'polygon',
                'avalanche': 'avalanche',
                'solana': 'solana',
                'arbitrum': 'arbitrum',
                'optimism': 'optimism'
            }
            
            dexscreener_chain = chain_mapping.get(chain, chain)
            direct_link = f"https://dexscreener.com/{dexscreener_chain}/{contract_address}"
            logging.info(f"‚úÖ Direct DexScreener link: {clean_symbol} ‚Üí {direct_link}")
            return direct_link
        
        # Fallback to search only if no contract address
        search_link = f"https://dexscreener.com/search?q={clean_symbol}"
        logging.info(f"‚ö†Ô∏è No contract address for {clean_symbol}, using search: {search_link}")
        return search_link
        
    except Exception as e:
        logging.error(f"‚ùå Error generating DexScreener link for {symbol}: {e}")
        # Safe fallback
        clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '').upper()
        return f"https://dexscreener.com/search?q={clean_symbol}"

def save_config_to_file(config_data):
    """–ó–±–µ—Ä—ñ–≥–∞—î runtime –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open('runtime_config.json', 'w', encoding='utf-8') as f:
            json.dump(config_data, f, ensure_ascii=False, indent=2)
        logging.info("‚úÖ Runtime –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")

def load_config_from_file():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î runtime –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ JSON —Ñ–∞–π–ª—É"""
    try:
        with open('runtime_config.json', 'r', encoding='utf-8') as f:
            config_data = json.load(f)
        logging.info("‚úÖ Runtime –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
        return config_data
    except FileNotFoundError:
        logging.info("‚ö†Ô∏è Runtime –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ defaults")
        return {}
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
        return {}

# üß™ –¢–ï–°–¢–û–í–ê –§–£–ù–ö–¶–Ü–Ø
def test_telegram_configuration():
    """–¢–µ—Å—Ç—É—î Telegram –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –±–æ—Ç–∞"""
    from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, TELEGRAM_GROUP_CHAT_ID
    import time
    
    logging.info("üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø TELEGRAM –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á...")
    
    if not TELEGRAM_BOT_TOKEN:
        logging.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π!")
        return False
    
    timestamp = time.strftime("%H:%M:%S")
    test_message = f"ü§ñ TEST MESSAGE | {timestamp}\n‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î —ñ –º–æ–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!"
    
    success_count = 0
    
    # –¢–µ—Å—Ç—É—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç
    if TELEGRAM_CHAT_ID:
        logging.info(f"üß™ –¢–µ—Å—Ç—É—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç: {TELEGRAM_CHAT_ID}")
        private_result = send_telegram(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, test_message)
        if private_result:
            logging.info("‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç –ø—Ä–∞—Ü—é—î!")
            success_count += 1
        else:
            logging.error("‚ùå –ü—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç –ù–ï –ø—Ä–∞—Ü—é—î!")
    else:
        logging.warning("‚ö†Ô∏è TELEGRAM_CHAT_ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
    
    # –¢–µ—Å—Ç—É—î–º–æ –≥—Ä—É–ø—É
    if TELEGRAM_GROUP_CHAT_ID:
        logging.info(f"üß™ –¢–µ—Å—Ç—É—î–º–æ –≥—Ä—É–ø—É: {TELEGRAM_GROUP_CHAT_ID}")
        group_result = send_telegram(TELEGRAM_BOT_TOKEN, TELEGRAM_GROUP_CHAT_ID, test_message)
        if group_result:
            logging.info("‚úÖ –ì—Ä—É–ø–∞ –ø—Ä–∞—Ü—é—î!")
            success_count += 1
        else:
            logging.error("‚ùå –ì—Ä—É–ø–∞ –ù–ï –ø—Ä–∞—Ü—é—î! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:\n- –ß–∏ –±–æ—Ç –¥–æ–¥–∞–Ω–∏–π –≤ –≥—Ä—É–ø—É?\n- –ß–∏ –º–∞—î –±–æ—Ç –ø—Ä–∞–≤–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è?\n- –ß–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π chat_id –≥—Ä—É–ø–∏?")
    else:
        logging.warning("‚ö†Ô∏è TELEGRAM_GROUP_CHAT_ID (–≥—Ä—É–ø–∞) –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
    
    logging.info(f"üß™ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–£: {success_count} –∑ 2 —á–∞—Ç—ñ–≤ –ø—Ä–∞—Ü—é—é—Ç—å")
    return success_count > 0

# üö´ –í–ò–î–ê–õ–ï–ù–û: _get_primary_dexscreener_link_simple –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞ —Ñ—É–Ω–∫—Ü—ñ—è
# –ó–∞–º—ñ–Ω–µ–Ω–∞ –Ω–∞ –Ω–æ–≤—É —Å–∏—Å—Ç–µ–º—É DEX Link Generator –∑ –ø—Ä—è–º–∏–º–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ –Ω–∞ —Ç–æ–ø–æ–≤—ñ DEX –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏
