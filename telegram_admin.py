import logging
import threading
import os
import time
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import bot, config, utils
import json

# Authorized users (–¥–æ–¥–∞–π—Ç–µ —Å–≤–æ—ó Telegram ID)
AUTHORIZED_USERS = set()

# –î–æ–¥–∞—î–º–æ –ø–µ—Ä—à–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
if config.TELEGRAM_CHAT_ID:
    try:
        AUTHORIZED_USERS.add(int(config.TELEGRAM_CHAT_ID))
        logging.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ 1: {config.TELEGRAM_CHAT_ID}")
    except ValueError:
        logging.error(f"‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π TELEGRAM_CHAT_ID: {config.TELEGRAM_CHAT_ID}")

# –î–æ–¥–∞—î–º–æ –¥—Ä—É–≥–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
if config.TELEGRAM_ADMIN_2_ID:
    try:
        AUTHORIZED_USERS.add(int(config.TELEGRAM_ADMIN_2_ID))
        logging.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ 2: {config.TELEGRAM_ADMIN_2_ID}")
    except ValueError:
        logging.error(f"‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π TELEGRAM_ADMIN_2_ID: {config.TELEGRAM_ADMIN_2_ID}")

def is_authorized(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - –ë–ï–ó–ü–ï–ß–ù–ê –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è"""
    # –ë–ï–ó–ü–ï–ö–ê: –Ø–∫—â–æ —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π, –±–ª–æ–∫—É—î–º–æ –≤—Å—ñ—Ö (default-deny)
    if not AUTHORIZED_USERS:
        logging.warning(f"üö´ –ó–ê–ë–õ–û–ö–û–í–ê–ù–ò–ô –¥–æ—Å—Ç—É–ø –¥–ª—è {user_id}: AUTHORIZED_USERS –ø–æ—Ä–æ–∂–Ω—ñ–π")
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Å–ø–∏—Å–∫—É –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö
    authorized = user_id in AUTHORIZED_USERS
    if authorized:
        logging.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–ª—è {user_id}")
    else:
        logging.warning(f"üö´ –ù–ï–ê–í–¢–û–†–ò–ó–û–í–ê–ù–ò–ô –¥–æ—Å—Ç—É–ø –¥–ª—è {user_id}")
    
    return authorized

async def chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—É—î ID –ø–æ—Ç–æ—á–Ω–æ–≥–æ —á–∞—Ç—É (–≥—Ä—É–ø–∏ –∞–±–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ)"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    chat_type = update.effective_chat.type
    chat_title = getattr(update.effective_chat, 'title', '–ü—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç')
    
    # –õ–æ–≥—É—î–º–æ –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
    logging.info(f"üÜî ID Request: chat_id={chat_id}, user_id={user_id}, type={chat_type}, title={chat_title}")
    
    if chat_type == 'group' or chat_type == 'supergroup':
        message = f"üë• –¶–ï –ì–†–£–ü–ê!\n\n"
        message += f"üÜî ID –ì–†–£–ü–ò: {chat_id}\n\n"
        message += f"üè∑Ô∏è –ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏: {chat_title}\n"
        message += f"üë§ –í–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π ID: {user_id}\n\n"
        message += f"üîß –í–ê–ñ–õ–ò–í–û! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ ID –≥—Ä—É–ø–∏:\n"
        message += f"TELEGRAM_CHAT_ID_2 = {chat_id}\n\n"
        message += f"‚ùóÔ∏è –ù–ï –ø–ª—É—Ç–∞–π—Ç–µ –∑ –æ—Å–æ–±–∏—Å—Ç–∏–º ID {user_id}"
    else:
        message = f"üí¨ –¶–ï –ü–†–ò–í–ê–¢–ù–ò–ô –ß–ê–¢\n\n"
        message += f"üÜî ID –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç—É: {chat_id}\n"
        message += f"üë§ –í–∞—à User ID: {user_id}\n\n"
        message += f"üîß –î–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç—É:\n"
        message += f"TELEGRAM_CHAT_ID = {chat_id}"
    
    await update.message.reply_text(message)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start command with main menu"""
    # –õ–æ–≥—É—î–º–æ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ Chat ID
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    chat_type = update.effective_chat.type
    logging.info(f"üîç –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: chat_id={chat_id}, user_id={user_id}, type={chat_type}")
    
    if not is_authorized(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞")
        return
    
    keyboard = [
        [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å")],
        [KeyboardButton("üíº –ü–æ–∑–∏—Ü—ñ—ó"), KeyboardButton("üí∞ –ó–∞—Ä–æ–±—ñ—Ç–æ–∫")],
        [KeyboardButton("üìã –°–∏–º–≤–æ–ª–∏"), KeyboardButton("üì° –°–∏–≥–Ω–∞–ª–∏")],
        [KeyboardButton("üìö –Ü—Å—Ç–æ—Ä—ñ—è"), KeyboardButton("üí± DRY RUN")],
        [KeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"), KeyboardButton("üî¥ –°—Ç–æ–ø –±–æ—Ç")],
        [KeyboardButton("üìà –¢–æ—Ä–≥—ñ–≤–ª—è")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    welcome_text = f"""
ü§ñ –í—ñ—Ç–∞—é –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ {config.BOT_NAME}!
    
üìç –ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º: {'üîí DRY RUN (–ë–µ–∑–ø–µ—á–Ω–æ)' if config.DRY_RUN else 'üî• LIVE TRADING'}
üìä –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤: {len([s for s, enabled in bot.trade_symbols.items() if enabled])}
üíº –ê–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π: {len([pos for pos in bot.active_positions.values() if pos])}

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º üëá
"""
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show bot status"""
    if not is_authorized(update.effective_user.id):
        return
    
    active_symbols = len([s for s, enabled in bot.trade_symbols.items() if enabled])
    total_symbols = len(bot.trade_symbols)
    active_positions_count = len([pos for pos in bot.active_positions.values() if pos])
    
    status_text = f"""
üìä **–°–¢–ê–¢–£–° –ë–û–¢–ê**

üîß –†–µ–∂–∏–º: {'üîí DRY RUN' if config.DRY_RUN else 'üî• LIVE TRADING'}
üìà –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤: {active_symbols}/{total_symbols}
üíº –í—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π: {active_positions_count}

‚öôÔ∏è **–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø:**
üí∞ –°—É–º–∞ –æ—Ä–¥–µ—Ä–∞: {config.ORDER_AMOUNT} USDT
üìä –ú—ñ–Ω. —Å–ø—Ä–µ–¥: {config.MIN_SPREAD}%
üéØ –õ–µ–≤–µ—Ä–∏–¥–∂: {config.LEVERAGE}x
üìö –ú–∞–∫—Å. –ø–æ–∑–∏—Ü—ñ–π: {config.MAX_OPEN_POSITIONS}
üìñ –ì–ª–∏–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω—É: {config.ORDER_BOOK_DEPTH}

üîÑ –Ü–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {config.SCAN_INTERVAL}—Å
"""
    await update.message.reply_text(status_text, parse_mode='Markdown')

async def positions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show active positions from both XT.com accounts"""
    if not is_authorized(update.effective_user.id):
        return
    
    try:
        positions_text = "üíº **–ê–ö–¢–ò–í–ù–Ü –ü–û–ó–ò–¶–Ü–á (–†–ï–ê–õ–¨–ù–Ü):**\n\n"
        has_positions = False
        total_positions = 0
        
        # XT.com –ê–ö–ê–£–ù–¢ 1
        try:
            import bot
            from xt_client import get_xt_open_positions
            from bot import calculate_pnl_percentage
            
            xt_positions_1 = get_xt_open_positions(bot.xt_account_1)
            logging.info(f"üìä XT.com –ê–ö–ê–£–ù–¢ 1: –∑–Ω–∞–π–¥–µ–Ω–æ {len(xt_positions_1)} –ø–æ–∑–∏—Ü—ñ–π")
            
            positions_text += "‚ö° **–ê–ö–ê–£–ù–¢ 1:**\n"
            if xt_positions_1:
                for pos in xt_positions_1:
                    has_positions = True
                    total_positions += 1
                    clean_symbol = pos['symbol'].replace('/USDT:USDT', '')
                    side_emoji = "üü¢" if pos['side'].upper() == "LONG" else "üî¥"
                    
                    percentage = calculate_pnl_percentage(pos)
                    size_contracts = float(pos.get('contracts', 0) or pos.get('size', 0) or 0)
                    size_usdt = float(pos.get('notional', 0) or pos.get('size_usdt', 0) or 5.0)
                    unrealized_pnl = (percentage / 100) * size_usdt if percentage != 0 else 0.0
                    pnl_emoji = "üíö" if percentage >= 0 else "‚ù§Ô∏è"
                    
                    positions_text += f"üìà **{clean_symbol}**\n"
                    positions_text += f"{side_emoji} {pos['side'].upper()} | üíµ {size_contracts:.4f} –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤\n"
                    positions_text += f"üí∞ –†–æ–∑–º—ñ—Ä: **${size_usdt:.2f} USDT** | üìã –ë–∞–ª–∞–Ω—Å: **{size_contracts:.4f} {clean_symbol}**\n"
                    positions_text += f"{pnl_emoji} PnL: **${unrealized_pnl:.2f}** ({percentage:.2f}%)\n\n"
            else:
                positions_text += "‚ùå –ù–µ–º–∞—î –ø–æ–∑–∏—Ü—ñ–π\n\n"
        except Exception as e:
            positions_text += f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}\n\n"
            logging.error(f"XT.com –ê–ö–ê–£–ù–¢ 1 –ø–æ–∑–∏—Ü—ñ—ó –ø–æ–º–∏–ª–∫–∞: {e}")
        
        # XT.com –ê–ö–ê–£–ù–¢ 2
        try:
            import bot
            from xt_client import get_xt_open_positions
            from bot import calculate_pnl_percentage
            
            xt_positions_2 = get_xt_open_positions(bot.xt_account_2)
            logging.info(f"üìä XT.com –ê–ö–ê–£–ù–¢ 2: –∑–Ω–∞–π–¥–µ–Ω–æ {len(xt_positions_2)} –ø–æ–∑–∏—Ü—ñ–π")
            
            positions_text += "‚ö° **–ê–ö–ê–£–ù–¢ 2:**\n"
            if xt_positions_2:
                for pos in xt_positions_2:
                    has_positions = True
                    total_positions += 1
                    clean_symbol = pos['symbol'].replace('/USDT:USDT', '')
                    side_emoji = "üü¢" if pos['side'].upper() == "LONG" else "üî¥"
                    
                    percentage = calculate_pnl_percentage(pos)
                    size_contracts = float(pos.get('contracts', 0) or pos.get('size', 0) or 0)
                    size_usdt = float(pos.get('notional', 0) or pos.get('size_usdt', 0) or 5.0)
                    unrealized_pnl = (percentage / 100) * size_usdt if percentage != 0 else 0.0
                    pnl_emoji = "üíö" if percentage >= 0 else "‚ù§Ô∏è"
                    
                    positions_text += f"üìà **{clean_symbol}**\n"
                    positions_text += f"{side_emoji} {pos['side'].upper()} | üíµ {size_contracts:.4f} –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤\n"
                    positions_text += f"üí∞ –†–æ–∑–º—ñ—Ä: **${size_usdt:.2f} USDT** | üìã –ë–∞–ª–∞–Ω—Å: **{size_contracts:.4f} {clean_symbol}**\n"
                    positions_text += f"{pnl_emoji} PnL: **${unrealized_pnl:.2f}** ({percentage:.2f}%)\n\n"
            else:
                positions_text += "‚ùå –ù–µ–º–∞—î –ø–æ–∑–∏—Ü—ñ–π\n\n"
        except Exception as e:
            positions_text += f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}\n\n"
            logging.error(f"XT.com –ê–ö–ê–£–ù–¢ 2 –ø–æ–∑–∏—Ü—ñ—ó –ø–æ–º–∏–ª–∫–∞: {e}")
        
        if not has_positions:
            positions_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            positions_text += "üìä **–ü–Ü–î–°–£–ú–û–ö:**\n"
            positions_text += "‚ùå –ù–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –Ω–∞ –∂–æ–¥–Ω–æ–º—É –∞–∫–∞—É–Ω—Ç—ñ\n"
            positions_text += "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ —Å–∫–∞–Ω—É—î –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ..."
        else:
            positions_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            positions_text += f"üìä **–ó–ê–ì–ê–õ–û–ú: {total_positions} –ø–æ–∑–∏—Ü—ñ–π**"
    
    except Exception as e:
        positions_text = f"‚ùå **–ü–û–ú–ò–õ–ö–ê –û–¢–†–ò–ú–ê–ù–ù–Ø –ü–û–ó–ò–¶–Ü–ô:**\n\n{str(e)}"
        logging.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø–æ–∑–∏—Ü—ñ–π: {e}")
    
    await update.message.reply_text(positions_text, parse_mode='Markdown')

async def signals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show current arbitrage signals"""
    if not is_authorized(update.effective_user.id):
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Å–ø—Ä–µ–¥–∏ –∑ –±–æ—Ç–∞
    current_signals = []
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º–æ—Å—å –ø–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–∏–º–≤–æ–ª–∞—Ö —ñ –ø–æ–∫–∞–∑—É—î–º–æ —Ç–æ–ø –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
    from utils import get_shared_dex_client
    from xt_client import create_xt, fetch_xt_ticker
    
    try:
        xt = create_xt()
        signals_text = "üì° **–ê–†–ë–Ü–¢–†–ê–ñ–ù–Ü –°–ò–ì–ù–ê–õ–ò** (DexScreener)\n\n"
        
        # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à—ñ 10 —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –æ–≥–ª—è–¥—É
        active_symbols = [s for s, enabled in bot.trade_symbols.items() if enabled][:10]
        
        for symbol in active_symbols:
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω–∏
                ticker = fetch_xt_ticker(xt, symbol)
                if not ticker:
                    continue
                    
                xt_price = float(ticker['last'])
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–∫–µ–Ω
                dex_client = get_shared_dex_client()
                # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —á–µ—Ä–µ–∑ resolve_best_pair
                token_info = dex_client.resolve_best_pair(symbol.replace('/USDT:USDT', ''))
                if not token_info:
                    continue
                    
                dex_price = token_info.get('price_usd', 0)
                
                if dex_price and dex_price > 0.000001:
                    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–ø—Ä–µ–¥
                    spread_pct = ((dex_price - xt_price) / xt_price) * 100
                    
                    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ñ–µ–π–∫–∏
                    is_realistic = True
                    price_ratio = max(xt_price, dex_price) / min(xt_price, dex_price)
                    min_liquidity = token_info.get('liquidity_usd', 0)
                    
                    if abs(spread_pct) > 10 or price_ratio > 1.15 or min_liquidity < 100000:
                        is_realistic = False
                    
                    # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ä–µ–∞–ª—å–Ω—ñ —Ü—ñ–∫–∞–≤—ñ —Å–ø—Ä–µ–¥–∏ (>= 0.3%)
                    if abs(spread_pct) >= 0.3 and is_realistic:
                        clean_symbol = symbol.replace('/USDT:USDT', '')
                        direction = "üü¢ LONG" if spread_pct > 0 else "üî¥ SHORT"
                        
                        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞—Ä—É
                        try:
                            from utils import get_exact_dex_pair_info, get_proper_dexscreener_link
                            exact_pair_info = get_exact_dex_pair_info(clean_symbol)
                            if exact_pair_info and exact_pair_info.get('exact_pair_url'):
                                dex_link = exact_pair_info['exact_pair_url']
                            else:
                                dex_link = get_proper_dexscreener_link(clean_symbol)
                        except:
                            dex_link = get_proper_dexscreener_link(clean_symbol)
                        
                        signals_text += f"**{clean_symbol}** {direction}\n"
                        signals_text += f"üìä XT: ${xt_price:.4f} | DexScreener: ${dex_price:.4f}\n"
                        signals_text += f"üí∞ –°–ø—Ä–µ–¥: **{spread_pct:+.2f}%**\n"
                        signals_text += f"üíß –õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å: ${min_liquidity:,.0f}\n"
                        signals_text += f"üîç [–ì—Ä–∞—Ñ—ñ–∫ DexScreener]({dex_link})\n"
                        signals_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        current_signals.append((clean_symbol, spread_pct))
                        
            except Exception as e:
                continue
        
        if not current_signals:
            signals_text += "‚ùå –ó–∞—Ä–∞–∑ –Ω–µ–º–∞—î —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑ —Å–ø—Ä–µ–¥–æ–º >= 0.3%\n"
            signals_text += "üìà –ë–æ—Ç —Å–∫–∞–Ω—É—î 596+ —Ç–æ–∫–µ–Ω—ñ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ...\n"
        else:
            signals_text += f"\n‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(current_signals)} –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π!"
            signals_text += f"\nü§ñ –ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª–∏ –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å—Å—è –ø—Ä–∏ —Å–ø—Ä–µ–¥—ñ >= 0.5%"
        
    except Exception as e:
        signals_text = f"‚ùå **–ü–û–ú–ò–õ–ö–ê –°–ò–ì–ù–ê–õ–Ü–í:**\n\n{str(e)}"
    
    await update.message.reply_text(signals_text, parse_mode='Markdown')

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show account balance with position counts"""
    if not is_authorized(update.effective_user.id):
        return
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å –∑ –û–ë–û–• –∞–∫–∞—É–Ω—Ç—ñ–≤ XT.com
        import bot
        from xt_client import get_xt_futures_balance, get_xt_open_positions
        
        # –ê–∫–∞—É–Ω—Ç 1
        xt_balance_1 = get_xt_futures_balance(bot.xt_account_1)
        xt_positions_1 = get_xt_open_positions(bot.xt_account_1)
        xt_pos_count_1 = len(xt_positions_1)
        
        # –ê–∫–∞—É–Ω—Ç 2
        xt_balance_2 = get_xt_futures_balance(bot.xt_account_2)
        xt_positions_2 = get_xt_open_positions(bot.xt_account_2)
        xt_pos_count_2 = len(xt_positions_2)
        
        balance_text = "üí∞ **–ë–ê–õ–ê–ù–° XT.COM:**\n\n"
        total_balance = 0
        has_balance = False
        
        # XT.com –ê–ö–ê–£–ù–¢ 1
        balance_text += f"‚ö° **–ê–ö–ê–£–ù–¢ 1** ({xt_pos_count_1} –ø–æ–∑–∏—Ü—ñ–π):\n"
        if xt_balance_1.get('total', 0) > 0:
            has_balance = True
            available_1 = float(xt_balance_1.get('free', 0))
            used_1 = float(xt_balance_1.get('used', 0))
            total_1 = float(xt_balance_1.get('total', 0))
            
            balance_text += f"üíµ –î–æ—Å—Ç—É–ø–Ω–æ: {available_1:.2f} USDT\n"
            if used_1 > 0:
                balance_text += f"üìä –í –ø–æ–∑–∏—Ü—ñ—è—Ö: {used_1:.2f} USDT\n"
            balance_text += f"üéØ –ó–∞–≥–∞–ª–æ–º: {total_1:.2f} USDT\n"
            total_balance += total_1
        else:
            balance_text += "üíµ USDT: 0.00 USDT –¥–æ—Å—Ç—É–ø–Ω–æ\n"
        
        balance_text += "\n"
        
        # XT.com –ê–ö–ê–£–ù–¢ 2
        balance_text += f"‚ö° **–ê–ö–ê–£–ù–¢ 2** ({xt_pos_count_2} –ø–æ–∑–∏—Ü—ñ–π):\n"
        if xt_balance_2.get('total', 0) > 0:
            has_balance = True
            available_2 = float(xt_balance_2.get('free', 0))
            used_2 = float(xt_balance_2.get('used', 0))
            total_2 = float(xt_balance_2.get('total', 0))
            
            balance_text += f"üíµ –î–æ—Å—Ç—É–ø–Ω–æ: {available_2:.2f} USDT\n"
            if used_2 > 0:
                balance_text += f"üìä –í –ø–æ–∑–∏—Ü—ñ—è—Ö: {used_2:.2f} USDT\n"
            balance_text += f"üéØ –ó–∞–≥–∞–ª–æ–º: {total_2:.2f} USDT\n"
            total_balance += total_2
        else:
            balance_text += "üíµ USDT: 0.00 USDT –¥–æ—Å—Ç—É–ø–Ω–æ\n"
        
        if has_balance:
            total_positions = xt_pos_count_1 + xt_pos_count_2
            balance_text += f"\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            balance_text += f"üí∞ **–ó–ê–ì–ê–õ–¨–ù–ò–ô –ë–ê–õ–ê–ù–°: {total_balance:.2f} USDT**\n"
            balance_text += f"üìä **–í–°–¨–û–ì–û –ü–û–ó–ò–¶–Ü–ô: {total_positions}**"
        else:
            balance_text += "‚ùå –ë–∞–ª–∞–Ω—Å –ø—É—Å—Ç–∏–π –∞–±–æ –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö"
    
    except Exception as e:
        balance_text = f"‚ùå **–ü–û–ú–ò–õ–ö–ê –ë–ê–õ–ê–ù–°–£:**\n\n{str(e)}"
    
    await update.message.reply_text(balance_text, parse_mode='Markdown')

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–∑–∏—Ü—ñ–π
trade_history_data = []

def add_to_trade_history(symbol, side, entry_price, close_price=None, pnl=None, close_reason="Manual", timestamp=None, exchange="XT.com"):
    """–î–æ–¥–∞—î –∑–∞–ø–∏—Å –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ"""
    if timestamp is None:
        timestamp = datetime.now()
    
    history_record = {
        "timestamp": timestamp,
        "symbol": symbol.replace('/USDT:USDT', ''),
        "side": side,
        "entry_price": float(entry_price),
        "close_price": float(close_price) if close_price else None,
        "pnl": float(pnl) if pnl else None,
        "close_reason": close_reason,
        "exchange": exchange
    }
    
    trade_history_data.append(history_record)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 100 –∑–∞–ø–∏—Å—ñ–≤
    if len(trade_history_data) > 100:
        trade_history_data.pop(0)

async def trade_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—É—î —ñ—Å—Ç–æ—Ä—ñ—é —Ç–æ—Ä–≥—ñ–≤–ª—ñ –∑ –ø—Ä–∏–±—É—Ç–∫–æ–º/–∑–±–∏—Ç–∫–æ–º"""
    if not is_authorized(update.effective_user.id):
        return
    
    try:
        history_text = "üìö **–Ü–°–¢–û–†–Ü–Ø –¢–û–†–ì–Ü–í–õ–Ü:**\n\n"
        
        if not trade_history_data:
            history_text += "‚ùå –Ü—Å—Ç–æ—Ä—ñ—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ –ø–æ—Ä–æ–∂–Ω—è\n"
            history_text += "üí° –ü–æ–∑–∏—Ü—ñ—ó –±—É–¥—É—Ç—å –¥–æ–¥–∞–≤–∞—Ç–∏—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ—Å–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ"
        else:
            # –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 10 –∑–∞–ø–∏—Å—ñ–≤
            recent_trades = sorted(trade_history_data, key=lambda x: x['timestamp'], reverse=True)[:10]
            
            total_pnl = 0.0
            profitable_trades = 0
            
            history_text += f"üìä **–û–°–¢–ê–ù–ù–Ü {len(recent_trades)} –û–ü–ï–†–ê–¶–Ü–ô:**\n\n"
            
            for trade in recent_trades:
                symbol = trade['symbol']
                side = trade['side']
                entry_price = trade['entry_price']
                close_price = trade['close_price']
                pnl = trade['pnl']
                close_reason = trade['close_reason']
                exchange = trade['exchange']
                
                # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
                trade_time = trade['timestamp'].strftime("%d.%m %H:%M")
                
                side_emoji = "üü¢" if side == "LONG" else "üî¥"
                
                if pnl is not None:
                    total_pnl += pnl
                    if pnl > 0:
                        profitable_trades += 1
                        pnl_emoji = "üíö"
                    else:
                        pnl_emoji = "‚ù§Ô∏è"
                    
                    history_text += f"**{symbol}** {side_emoji}\n"
                    history_text += f"üïê {trade_time} | üè™ {exchange}\n"
                    history_text += f"üìà ${entry_price:.6f} ‚Üí ${close_price:.6f}\n"
                    history_text += f"{pnl_emoji} P&L: ${pnl:.2f}\n"
                    history_text += f"üìù {close_reason}\n\n"
                else:
                    # –ê–∫—Ç–∏–≤–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è
                    history_text += f"**{symbol}** {side_emoji} (–∞–∫—Ç–∏–≤–Ω–∞)\n"
                    history_text += f"üïê {trade_time} | üè™ {exchange}\n"
                    history_text += f"üìà –í—Ö—ñ–¥: ${entry_price:.6f}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            win_rate = (profitable_trades / len(recent_trades)) * 100 if recent_trades else 0
            avg_pnl = total_pnl / len(recent_trades) if recent_trades else 0
            
            history_text += "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n"
            history_text += f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π P&L: ${total_pnl:.2f}\n"
            history_text += f"üìà –ü—Ä–∏–±—É—Ç–∫–æ–≤–∏—Ö: {profitable_trades}/{len(recent_trades)} ({win_rate:.1f}%)\n"
            history_text += f"‚öñÔ∏è –°–µ—Ä–µ–¥–Ω—ñ–π P&L: ${avg_pnl:.2f}\n"
        
        await update.message.reply_text(history_text, parse_mode='Markdown')
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ—Å—Ç–æ—Ä—ñ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ")

async def profit_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show current profit/loss from active positions"""
    if not is_authorized(update.effective_user.id):
        return
    
    try:
        profit_text = "üí∞ **–ó–í–Ü–¢ –ü–†–û –ó–ê–†–û–ë–Ü–¢–û–ö:**\n\n"
        
        total_unrealized_pnl = 0.0
        total_positions = 0
        profitable_positions = 0
        
        # –û—Ç—Ä–∏–º—É—î–º–æ gate –∫–ª—ñ—î–Ω—Ç –¥–ª—è —Ü—ñ–Ω
        # ‚ùå GATE –í–ò–î–ê–õ–ï–ù–û: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ XT.com
        # gate = gate_client.create_gate()  # REMOVED - Gate.io system removed
        
        if not bot.active_positions:
            profit_text += "‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ø—Ä–∏–±—É—Ç–∫—É\n"
            profit_text += "üìä –ó–∞–≥–∞–ª—å–Ω–∏–π –Ω–µ—Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π P&L: $0.00\n"
        else:
            profit_text += "üìä **–ê–ö–¢–ò–í–ù–Ü –ü–û–ó–ò–¶–Ü–á:**\n\n"
            
            for symbol, position in bot.active_positions.items():
                if position:
                    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É
                    try:
                        # ‚úÖ –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û XT.com –∑–∞–º—ñ—Å—Ç—å Gate.io
                        from xt_client import fetch_xt_ticker, create_xt
                        xt_exchange = create_xt()
                        ticker = fetch_xt_ticker(xt_exchange, symbol)
                        if ticker and 'last' in ticker:
                            current_price = float(ticker['last'])
                        
                        clean_symbol = symbol.replace('/USDT:USDT', '')
                        profit_text += f"**{clean_symbol}:**\n"
                        
                        side = position['side']
                        open_price = position['avg_entry']
                        amount = position['size_usdt']
                        
                        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–µ—Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ P&L
                        if side == "LONG":
                            unrealized_pnl = ((current_price - open_price) / open_price) * amount
                        else:  # SHORT
                            unrealized_pnl = ((open_price - current_price) / open_price) * amount
                        
                        total_unrealized_pnl += unrealized_pnl
                        total_positions += 1
                        
                        if unrealized_pnl > 0:
                            profitable_positions += 1
                            pnl_emoji = "üü¢"
                        else:
                            pnl_emoji = "üî¥"
                        
                        profit_pct = (unrealized_pnl / amount) * 100
                        
                        side_emoji = "üü¢" if side == "LONG" else "üî¥"
                        profit_text += f"{side_emoji} {side} | "
                        profit_text += f"üíµ ${amount:.2f} | "
                        profit_text += f"üìà ${open_price:.6f} ‚Üí ${current_price:.6f}\n"
                        profit_text += f"{pnl_emoji} P&L: ${unrealized_pnl:+.2f} ({profit_pct:+.1f}%)\n"
                        profit_text += f"üéØ TP: ${position['tp_price']:.6f}\n"
                        profit_text += f"üìä –£—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è: {position['adds_done']}\n"
                        profit_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        
                    except Exception as e:
                        profit_text += f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –¥–ª—è {symbol}: {str(e)}\n"
                        continue
            
            # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            win_rate = (profitable_positions / total_positions * 100) if total_positions > 0 else 0
            avg_pnl = total_unrealized_pnl / total_positions if total_positions > 0 else 0
            
            profit_text += "\nüìà **–ó–ê–ì–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n"
            profit_text += f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –Ω–µ—Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π P&L: ${total_unrealized_pnl:+.2f}\n"
            profit_text += f"üìä –ü–æ–∑–∏—Ü—ñ–π –≤—Å—å–æ–≥–æ: {total_positions}\n"
            profit_text += f"üü¢ –ü—Ä–∏–±—É—Ç–∫–æ–≤–∏—Ö: {profitable_positions} ({win_rate:.1f}%)\n"
            profit_text += f"üî¥ –ó–±–∏—Ç–∫–æ–≤–∏—Ö: {total_positions - profitable_positions}\n"
            profit_text += f"üìä –°–µ—Ä–µ–¥–Ω—ñ–π P&L: ${avg_pnl:+.2f}\n"
            
            # –°—Ç–∞—Ç—É—Å –ø–æ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—é –¥–æ TP
            if total_unrealized_pnl > 0:
                profit_text += f"\nüéØ **–°–¢–ê–¢–£–°:** –ù–∞ —à–ª—è—Ö—É –¥–æ –ø—Ä–∏–±—É—Ç–∫—É! üöÄ"
            elif total_unrealized_pnl == 0:
                profit_text += f"\n‚öñÔ∏è **–°–¢–ê–¢–£–°:** –ë–µ–∑–∑–±–∏—Ç–∫–æ–≤—ñ—Å—Ç—å (Break-even)"
            else:
                profit_text += f"\nüìâ **–°–¢–ê–¢–£–°:** –¢–∏–º—á–∞—Å–æ–≤–∏–π –¥—Ä–æ—É–¥–∞—É–Ω"
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–µ–∂–∏–º
        if config.DRY_RUN:
            profit_text += f"\n\nüîí **–†–ï–ñ–ò–ú:** DRY RUN (–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è)\n"
            profit_text += f"‚ö†Ô∏è –¶–µ —Å–∏–º—É–ª—è—Ü—ñ—è, —Ä–µ–∞–ª—å–Ω—ñ –∫–æ—à—Ç–∏ –Ω–µ –∑–∞–¥—ñ—è–Ω—ñ"
        else:
            profit_text += f"\n\nüî• **–†–ï–ñ–ò–ú:** LIVE TRADING\n"
            profit_text += f"üí∞ –†–µ–∞–ª—å–Ω–∞ —Ç–æ—Ä–≥—ñ–≤–ª—è –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –∫–æ—à—Ç–∞–º–∏"
    
    except Exception as e:
        profit_text = f"‚ùå **–ü–û–ú–ò–õ–ö–ê –†–û–ó–†–ê–•–£–ù–ö–£ –ü–†–ò–ë–£–¢–ö–£:**\n\n{str(e)}"
    
    await update.message.reply_text(profit_text, parse_mode='Markdown')

async def symbols_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show symbols management menu"""
    if not is_authorized(update.effective_user.id):
        return
    
    keyboard = []
    row = []
    for i, (symbol, enabled) in enumerate(list(bot.trade_symbols.items())[:20]):  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 20
        status_emoji = "üü¢" if enabled else "üî¥"
        button_text = f"{status_emoji} {symbol}"
        row.append(InlineKeyboardButton(button_text, callback_data=f"toggle_{symbol}"))
        
        if len(row) == 2:  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
            keyboard.append(row)
            row = []
    
    if row:  # –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥ —è–∫—â–æ —î
        keyboard.append(row)
    
    keyboard.append([
        InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç–∏ –≤—Å—ñ", callback_data="enable_all"),
        InlineKeyboardButton("‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –≤—Å—ñ", callback_data="disable_all")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    active_count = len([s for s, enabled in bot.trade_symbols.items() if enabled])
    text = f"üìã **–ö–ï–†–£–í–ê–ù–ù–Ø –°–ò–ú–í–û–õ–ê–ú–ò** ({active_count} –∞–∫—Ç–∏–≤–Ω–∏—Ö)\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —Å–∏–º–≤–æ–ª —â–æ–± —É–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏:"
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def settings_buttons_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show settings menu with buttons"""
    if not is_authorized(update.effective_user.id):
        return
    
    settings_text = f"""
‚öôÔ∏è **–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ë–û–¢–ê**

–ü–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è:
üí∞ –°—É–º–∞ –æ—Ä–¥–µ—Ä–∞: {config.ORDER_AMOUNT} USDT
üìä –ú—ñ–Ω. —Å–ø—Ä–µ–¥: {config.MIN_SPREAD}%
üéØ –õ–µ–≤–µ—Ä–∏–¥–∂: {config.LEVERAGE}x
üìö –ú–∞–∫—Å. –ø–æ–∑–∏—Ü—ñ–π: {config.MAX_OPEN_POSITIONS}
üìñ –ì–ª–∏–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω—É: {config.ORDER_BOOK_DEPTH}

üìà **–£–°–ï–†–ï–î–ù–ï–ù–ù–Ø:**
üîÑ –£–≤—ñ–º–∫–Ω–µ–Ω–æ: {"‚úÖ" if config.AVERAGING_ENABLED else "‚ùå"}
üìä –ü–æ—Ä—ñ–≥: {config.AVERAGING_THRESHOLD_PCT}%
üî¢ –ú–∞–∫—Å. –¥–æ–¥–∞–≤–∞–Ω—å: {config.AVERAGING_MAX_ADDS}
üíµ –ú–∞–∫—Å. —Ä–æ–∑–º—ñ—Ä: ${config.MAX_POSITION_USDT_PER_SYMBOL}

–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä:
"""
    
    keyboard = [
        [
            InlineKeyboardButton("üí∞ –°—É–º–∞ –æ—Ä–¥–µ—Ä–∞", callback_data="settings_amount"),
            InlineKeyboardButton("üìä –ú—ñ–Ω. —Å–ø—Ä–µ–¥", callback_data="settings_spread")
        ],
        [
            InlineKeyboardButton("üéØ –õ–µ–≤–µ—Ä–∏–¥–∂", callback_data="settings_leverage"),
            InlineKeyboardButton("üìö –ú–∞–∫—Å. –ø–æ–∑–∏—Ü—ñ–π", callback_data="settings_positions")
        ],
        [
            InlineKeyboardButton("üìñ –ì–ª–∏–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω—É", callback_data="settings_depth"),
            InlineKeyboardButton("üîÑ –£—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è", callback_data="settings_averaging")
        ],
        [
            InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="settings_refresh")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(settings_text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_settings_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle settings button clicks"""
    if not is_authorized(update.effective_user.id):
        return
    
    query = update.callback_query
    await query.answer()
    
    if query.data == "settings_amount":
        keyboard = [
            [InlineKeyboardButton("üí∞ $3", callback_data="set_amount_3"),
             InlineKeyboardButton("üí∞ $5", callback_data="set_amount_5")],
            [InlineKeyboardButton("üí∞ $10", callback_data="set_amount_10"),
             InlineKeyboardButton("üí∞ $15", callback_data="set_amount_15")],
            [InlineKeyboardButton("üí∞ $20", callback_data="set_amount_20"),
             InlineKeyboardButton("üí∞ $50", callback_data="set_amount_50")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_back")]
        ]
        text = f"üí∞ **–°–£–ú–ê –û–†–î–ï–†–ê** (–ø–æ—Ç–æ—á–Ω–∞: ${config.ORDER_AMOUNT})\n\n–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É —Å—É–º—É –æ—Ä–¥–µ—Ä–∞:"
        
    elif query.data == "settings_spread":
        keyboard = [
            [InlineKeyboardButton("üìä 0.5%", callback_data="set_spread_0.5"),
             InlineKeyboardButton("üìä 0.7%", callback_data="set_spread_0.7")],
            [InlineKeyboardButton("üìä 1.0%", callback_data="set_spread_1.0"),
             InlineKeyboardButton("üìä 1.5%", callback_data="set_spread_1.5")],
            [InlineKeyboardButton("üìä 2.0%", callback_data="set_spread_2.0"),
             InlineKeyboardButton("üìä 3.0%", callback_data="set_spread_3.0")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_back")]
        ]
        text = f"üìä **–ú–Ü–ù–Ü–ú–ê–õ–¨–ù–ò–ô –°–ü–†–ï–î** (–ø–æ—Ç–æ—á–Ω–∏–π: {config.MIN_SPREAD}%)\n\n–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Å–ø—Ä–µ–¥:"
        
    elif query.data == "settings_leverage":
        keyboard = [
            [InlineKeyboardButton("üéØ 3x", callback_data="set_leverage_3"),
             InlineKeyboardButton("üéØ 5x", callback_data="set_leverage_5")],
            [InlineKeyboardButton("üéØ 7x", callback_data="set_leverage_7"),
             InlineKeyboardButton("üéØ 10x", callback_data="set_leverage_10")],
            [InlineKeyboardButton("üéØ 15x", callback_data="set_leverage_15"),
             InlineKeyboardButton("üéØ 20x", callback_data="set_leverage_20")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_back")]
        ]
        text = f"üéØ **–õ–ï–í–ï–†–ò–î–ñ** (–ø–æ—Ç–æ—á–Ω–∏–π: {config.LEVERAGE}x)\n\n–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –ª–µ–≤–µ—Ä–∏–¥–∂:"
        
    elif query.data == "settings_positions":
        keyboard = [
            [InlineKeyboardButton("üìö 1", callback_data="set_positions_1"),
             InlineKeyboardButton("üìö 3", callback_data="set_positions_3")],
            [InlineKeyboardButton("üìö 5", callback_data="set_positions_5"),
             InlineKeyboardButton("üìö 10", callback_data="set_positions_10")],
            [InlineKeyboardButton("üìö 15", callback_data="set_positions_15"),
             InlineKeyboardButton("üìö 25", callback_data="set_positions_25")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_back")]
        ]
        text = f"üìö **–ú–ê–ö–°–ò–ú–£–ú –ü–û–ó–ò–¶–Ü–ô** (–ø–æ—Ç–æ—á–Ω–æ: {config.MAX_OPEN_POSITIONS})\n\n–í–∏–±–µ—Ä—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ–π:"
        
    elif query.data == "settings_depth":
        keyboard = [
            [InlineKeyboardButton("üìñ 5", callback_data="set_depth_5"),
             InlineKeyboardButton("üìñ 10", callback_data="set_depth_10")],
            [InlineKeyboardButton("üìñ 15", callback_data="set_depth_15"),
             InlineKeyboardButton("üìñ 20", callback_data="set_depth_20")],
            [InlineKeyboardButton("üìñ 25", callback_data="set_depth_25"),
             InlineKeyboardButton("üìñ 50", callback_data="set_depth_50")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_back")]
        ]
        text = f"üìñ **–ì–õ–ò–ë–ò–ù–ê –°–¢–ê–ö–ê–ù–£** (–ø–æ—Ç–æ—á–Ω–∞: {config.ORDER_BOOK_DEPTH})\n\n–í–∏–±–µ—Ä—ñ—Ç—å –≥–ª–∏–±–∏–Ω—É –∞–Ω–∞–ª—ñ–∑—É —Å—Ç–∞–∫–∞–Ω—É:"
        
    elif query.data == "settings_averaging":
        keyboard = [
            [
                InlineKeyboardButton("üîÑ –£–≤—ñ–º–∫–Ω—É—Ç–∏" if not config.AVERAGING_ENABLED else "‚ùå –í–∏–º–∫–Ω—É—Ç–∏", 
                                   callback_data="toggle_averaging")
            ],
            [
                InlineKeyboardButton("üìä –ü–æ—Ä—ñ–≥ —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è", callback_data="averaging_threshold"),
                InlineKeyboardButton("üî¢ –ú–∞–∫—Å. –¥–æ–¥–∞–≤–∞–Ω—å", callback_data="averaging_max_adds")
            ],
            [
                InlineKeyboardButton("üíµ –ú–∞–∫—Å. —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó", callback_data="averaging_max_size"),
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_back")
            ]
        ]
        text = f"""üìà **–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø**

üîÑ –£–≤—ñ–º–∫–Ω–µ–Ω–æ: {"‚úÖ" if config.AVERAGING_ENABLED else "‚ùå"}
üìä –ü–æ—Ä—ñ–≥: {config.AVERAGING_THRESHOLD_PCT}% (—Ü—ñ–Ω–∞ –ø—Ä–æ—Ç–∏ –ø–æ–∑–∏—Ü—ñ—ó)
üî¢ –ú–∞–∫—Å. –¥–æ–¥–∞–≤–∞–Ω—å: {config.AVERAGING_MAX_ADDS}
üíµ –ú–∞–∫—Å. —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó: ${config.MAX_POSITION_USDT_PER_SYMBOL}
‚è∞ –ü–∞—É–∑–∞ –º—ñ–∂ —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è–º–∏: {config.AVERAGING_COOLDOWN_SEC}—Å

–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:"""
        
    elif query.data == "settings_refresh" or query.data == "settings_back":
        return await settings_buttons_menu_refresh(query)
        
    # –û–±—Ä–æ–±–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è
    elif query.data == "toggle_averaging":
        config.AVERAGING_ENABLED = not config.AVERAGING_ENABLED
        utils.save_config_to_file({"AVERAGING_ENABLED": config.AVERAGING_ENABLED})
        status = "‚úÖ —É–≤—ñ–º–∫–Ω–µ–Ω–æ" if config.AVERAGING_ENABLED else "‚ùå –≤–∏–º–∫–Ω–µ–Ω–æ"
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è", callback_data="settings_averaging")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"üîÑ –£—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è {status}", reply_markup=reply_markup)
        return
        
    elif query.data == "averaging_threshold":
        keyboard = [
            [InlineKeyboardButton("üìä 0.5%", callback_data="set_avg_threshold_0.5"),
             InlineKeyboardButton("üìä 1.0%", callback_data="set_avg_threshold_1.0")],
            [InlineKeyboardButton("üìä 1.5%", callback_data="set_avg_threshold_1.5"),
             InlineKeyboardButton("üìä 2.0%", callback_data="set_avg_threshold_2.0")],
            [InlineKeyboardButton("üìä 3.0%", callback_data="set_avg_threshold_3.0"),
             InlineKeyboardButton("üìä 5.0%", callback_data="set_avg_threshold_5.0")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_averaging")]
        ]
        text = f"üìä **–ü–û–†–Ü–ì –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø** (–ø–æ—Ç–æ—á–Ω–∏–π: {config.AVERAGING_THRESHOLD_PCT}%)\n\n–í–∏–±–µ—Ä—ñ—Ç—å –≤—ñ–¥—Å–æ—Ç–æ–∫ —Ä—É—Ö—É –ø—Ä–æ—Ç–∏ –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è:"
        
    elif query.data == "averaging_max_adds":
        keyboard = [
            [InlineKeyboardButton("üî¢ 1", callback_data="set_avg_adds_1"),
             InlineKeyboardButton("üî¢ 2", callback_data="set_avg_adds_2")],
            [InlineKeyboardButton("üî¢ 3", callback_data="set_avg_adds_3"),
             InlineKeyboardButton("üî¢ 5", callback_data="set_avg_adds_5")],
            [InlineKeyboardButton("üî¢ 10", callback_data="set_avg_adds_10"),
             InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_averaging")]
        ]
        text = f"üî¢ **–ú–ê–ö–°–ò–ú–£–ú –î–û–î–ê–í–ê–ù–¨** (–ø–æ—Ç–æ—á–Ω–æ: {config.AVERAGING_MAX_ADDS})\n\n–í–∏–±–µ—Ä—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—Å–µ—Ä–µ–¥–Ω–µ–Ω—å –Ω–∞ –ø–æ–∑–∏—Ü—ñ—é:"
        
    elif query.data == "averaging_max_size":
        keyboard = [
            [InlineKeyboardButton("üíµ $25", callback_data="set_avg_size_25"),
             InlineKeyboardButton("üíµ $50", callback_data="set_avg_size_50")],
            [InlineKeyboardButton("üíµ $100", callback_data="set_avg_size_100"),
             InlineKeyboardButton("üíµ $200", callback_data="set_avg_size_200")],
            [InlineKeyboardButton("üíµ $500", callback_data="set_avg_size_500"),
             InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_averaging")]
        ]
        text = f"üíµ **–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ò–ô –†–û–ó–ú–Ü–† –ü–û–ó–ò–¶–Ü–á** (–ø–æ—Ç–æ—á–Ω–∏–π: ${config.MAX_POSITION_USDT_PER_SYMBOL})\n\n–í–∏–±–µ—Ä—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª:"
    
    # –û–±—Ä–æ–±–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å
    elif query.data.startswith("set_"):
        return await handle_setting_change(query)
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_setting_change(query):
    """Handle actual setting changes"""
    parts = query.data.split("_")
    if len(parts) == 3:
        _, param, value = parts
    elif len(parts) == 4:  # –¥–ª—è avg_threshold_1.0 —Ñ–æ—Ä–º–∞—Ç—É
        _, param, subparam, value = parts
    else:
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –∫–æ–º–∞–Ω–¥–∏")
        return
    
    try:
        # üîí THREAD-SAFE CONFIG CHANGES (Task 6: –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –∑ trading logic)
        from locks import config_lock
        with config_lock:
            if param == "amount":
                config.ORDER_AMOUNT = float(value)
                message = f"‚úÖ –°—É–º–∞ –æ—Ä–¥–µ—Ä–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${value}"
            elif param == "spread":
                config.MIN_SPREAD = float(value)
                message = f"‚úÖ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Å–ø—Ä–µ–¥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {value}%"
            elif param == "leverage":
                config.LEVERAGE = int(value)
                message = f"‚úÖ –õ–µ–≤–µ—Ä–∏–¥–∂ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {value}x"
            elif param == "positions":
                config.MAX_OPEN_POSITIONS = int(value)
                message = f"‚úÖ –ú–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü—ñ–π –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {value}"
            elif param == "depth":
                config.ORDER_BOOK_DEPTH = int(value)
                message = f"‚úÖ –ì–ª–∏–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {value}"
            elif param == "avg":
                if subparam == "threshold":
                    config.AVERAGING_THRESHOLD_PCT = float(value)
                    message = f"‚úÖ –ü–æ—Ä—ñ–≥ —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {value}%"
                elif subparam == "adds":
                    config.AVERAGING_MAX_ADDS = int(value)
                    message = f"‚úÖ –ú–∞–∫—Å–∏–º—É–º –¥–æ–¥–∞–≤–∞–Ω—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {value}"
                elif subparam == "size":
                    config.MAX_POSITION_USDT_PER_SYMBOL = float(value)
                    message = f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${value}"
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        utils.save_config_to_file({
            "ORDER_AMOUNT": config.ORDER_AMOUNT,
            "MIN_SPREAD": config.MIN_SPREAD,
            "LEVERAGE": config.LEVERAGE,
            "MAX_OPEN_POSITIONS": config.MAX_OPEN_POSITIONS,
            "ORDER_BOOK_DEPTH": config.ORDER_BOOK_DEPTH
        })
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", callback_data="settings_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
        
    except Exception as e:
        await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è: {str(e)}")

async def settings_buttons_menu_refresh(query):
    """Refresh settings menu"""
    settings_text = f"""
‚öôÔ∏è **–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ë–û–¢–ê**

–ü–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è:
üí∞ –°—É–º–∞ –æ—Ä–¥–µ—Ä–∞: {config.ORDER_AMOUNT} USDT
üìä –ú—ñ–Ω. —Å–ø—Ä–µ–¥: {config.MIN_SPREAD}%
üéØ –õ–µ–≤–µ—Ä–∏–¥–∂: {config.LEVERAGE}x
üìö –ú–∞–∫—Å. –ø–æ–∑–∏—Ü—ñ–π: {config.MAX_OPEN_POSITIONS}
üìñ –ì–ª–∏–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω—É: {config.ORDER_BOOK_DEPTH}

–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä:
"""
    
    keyboard = [
        [
            InlineKeyboardButton("üí∞ –°—É–º–∞ –æ—Ä–¥–µ—Ä–∞", callback_data="settings_amount"),
            InlineKeyboardButton("üìä –ú—ñ–Ω. —Å–ø—Ä–µ–¥", callback_data="settings_spread")
        ],
        [
            InlineKeyboardButton("üéØ –õ–µ–≤–µ—Ä–∏–¥–∂", callback_data="settings_leverage"),
            InlineKeyboardButton("üìö –ú–∞–∫—Å. –ø–æ–∑–∏—Ü—ñ–π", callback_data="settings_positions")
        ],
        [
            InlineKeyboardButton("üìñ –ì–ª–∏–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω—É", callback_data="settings_depth"),
            InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="settings_refresh")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(settings_text, reply_markup=reply_markup, parse_mode='Markdown')

async def toggle_symbol(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Toggle symbol enable/disable"""
    if not is_authorized(update.effective_user.id):
        return
    
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("toggle_"):
        symbol = query.data[7:]  # Remove "toggle_" prefix
        if symbol in bot.trade_symbols:
            bot.trade_symbols[symbol] = not bot.trade_symbols[symbol]
            status = "üü¢ —É–≤—ñ–º–∫–Ω–µ–Ω–æ" if bot.trade_symbols[symbol] else "üî¥ –≤–∏–º–∫–Ω–µ–Ω–æ"
            await query.edit_message_text(f"‚úÖ –°–∏–º–≤–æ–ª {symbol} {status}")
            
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é —Å–∏–º–≤–æ–ª—ñ–≤ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            import asyncio
            await asyncio.sleep(1.0)
            await symbols_menu(update, context)
    
    elif query.data == "enable_all":
        for symbol in bot.trade_symbols:
            bot.trade_symbols[symbol] = True
        await query.edit_message_text("‚úÖ –í—Å—ñ —Å–∏–º–≤–æ–ª–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ!")
        import asyncio
        await asyncio.sleep(1.0)
        await symbols_menu(update, context)
    
    elif query.data == "disable_all":
        for symbol in bot.trade_symbols:
            bot.trade_symbols[symbol] = False
        await query.edit_message_text("‚ùå –í—Å—ñ —Å–∏–º–≤–æ–ª–∏ –≤–∏–º–∫–Ω–µ–Ω–æ!")
        import asyncio
        await asyncio.sleep(1.0)
        await symbols_menu(update, context)

async def set_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Set order amount"""
    await set_parameter(update, context, "set_amount")

async def set_spread(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Set min spread"""
    await set_parameter(update, context, "set_spread")

async def set_leverage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Set leverage"""
    await set_parameter(update, context, "set_leverage")

async def set_positions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Set max positions"""
    await set_parameter(update, context, "set_positions")

async def set_depth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Set order book depth"""
    await set_parameter(update, context, "set_depth")

async def set_parameter(update: Update, context: ContextTypes.DEFAULT_TYPE, param_name: str):
    """Set trading parameter"""
    if not is_authorized(update.effective_user.id):
        return
    
    if len(context.args) != 1:
        await update.message.reply_text(f"‚ùå –í–∫–∞–∂—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è: /{param_name} <–∑–Ω–∞—á–µ–Ω–Ω—è>")
        return
    
    try:
        value = float(context.args[0])
        
        if param_name == "set_amount":
            # ORDER_AMOUNT —Ç–µ–ø–µ—Ä –§–Ü–ö–°–û–í–ê–ù–ò–ô –Ω–∞ 5.0 USDT - –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è
            await update.message.reply_text(f"‚ùå –°—É–º–∞ –æ—Ä–¥–µ—Ä–∞ –§–Ü–ö–°–û–í–ê–ù–ê –Ω–∞ 5.0 USDT —ñ –Ω–µ –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—è!")
        elif param_name == "set_spread":
            config.MIN_SPREAD = value
            await update.message.reply_text(f"‚úÖ –ú—ñ–Ω. —Å–ø—Ä–µ–¥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {value}%")
        elif param_name == "set_leverage":
            config.LEVERAGE = int(value)
            await update.message.reply_text(f"‚úÖ –õ–µ–≤–µ—Ä–∏–¥–∂ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {int(value)}x")
        elif param_name == "set_positions":
            config.MAX_OPEN_POSITIONS = int(value)
            await update.message.reply_text(f"‚úÖ –ú–∞–∫—Å. –ø–æ–∑–∏—Ü—ñ–π –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {int(value)}")
        elif param_name == "set_depth":
            config.ORDER_BOOK_DEPTH = int(value)
            await update.message.reply_text(f"‚úÖ –ì–ª–∏–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {int(value)}")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        utils.save_config_to_file({
            "ORDER_AMOUNT": config.ORDER_AMOUNT,
            "MIN_SPREAD": config.MIN_SPREAD,
            "LEVERAGE": config.LEVERAGE,
            "MAX_OPEN_POSITIONS": config.MAX_OPEN_POSITIONS,
            "ORDER_BOOK_DEPTH": config.ORDER_BOOK_DEPTH
        })
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è! –í–∫–∞–∂—ñ—Ç—å —á–∏—Å–ª–æ.")

async def toggle_dry_run(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Toggle DRY_RUN mode"""
    if not is_authorized(update.effective_user.id):
        return
    
    if not config.ALLOW_LIVE_TRADING:
        await update.message.reply_text("üîí –†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –¥–ª—è –±–µ–∑–ø–µ–∫–∏")
        return
    
    # üîí THREAD-SAFE CONFIG CHANGE (Task 6: –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –∑ trading logic)  
    from locks import config_lock
    with config_lock:
        config.DRY_RUN = not config.DRY_RUN
        mode = "üîí DRY RUN (–ë–µ–∑–ø–µ—á–Ω–æ)" if config.DRY_RUN else "üî• LIVE TRADING"
    await update.message.reply_text(f"‚úÖ –†–µ–∂–∏–º –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {mode}")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle text messages from keyboard"""
    user_id = update.effective_user.id
    
    # Debug logging
    logging.info(f"üì± –û—Ç—Ä–∏–º–∞–Ω–æ —Ç–µ–∫—Å—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: '{update.message.text}'")
    
    if not is_authorized(user_id):
        # –¢–∏—Ö–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        pass
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞")
        return
    
    text = update.message.text
    logging.info(f"‚úÖ –û–±—Ä–æ–±–ª—è—é –∫–æ–º–∞–Ω–¥—É: '{text}'")
    
    if text == "üìä –°—Ç–∞—Ç—É—Å":
        await status(update, context)
    elif text == "üíº –ü–æ–∑–∏—Ü—ñ—ó":
        await positions(update, context)
    elif text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è":
        await settings_buttons_menu(update, context)
    elif text == "üìã –°–∏–º–≤–æ–ª–∏":
        await symbols_menu(update, context)
    elif text == "üí∞ –ë–∞–ª–∞–Ω—Å":
        await balance(update, context)
    elif text == "üì° –°–∏–≥–Ω–∞–ª–∏":
        await signals(update, context)
    elif text == "üí∞ –ó–∞—Ä–æ–±—ñ—Ç–æ–∫":
        await profit_report(update, context)
    elif text == "üìö –Ü—Å—Ç–æ—Ä—ñ—è":
        await trade_history(update, context)
    elif text == "üí± DRY RUN":
        # üîí THREAD-SAFE CONFIG CHANGE (Task 6: –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –∑ trading logic)
        from bot import config_lock
        with config_lock:
            config.DRY_RUN = True
        await update.message.reply_text("üîí –£–≤—ñ–º–∫–Ω–µ–Ω–æ —Ä–µ–∂–∏–º DRY RUN (–ë–µ–∑–ø–µ—á–Ω–æ)")
    elif text == "üìà –¢–æ—Ä–≥—ñ–≤–ª—è":
        from bot import config_lock
        if config.ALLOW_LIVE_TRADING:
            # üîí THREAD-SAFE CONFIG CHANGE (Task 6: –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –∑ trading logic)
            with config_lock:
                config.DRY_RUN = False
            await update.message.reply_text("üî• –£–≤—ñ–º–∫–Ω–µ–Ω–æ —Ä–µ–∂–∏–º LIVE TRADING")
        else:
            await update.message.reply_text("üîí –†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π")
    elif text in ["üî¥ –°—Ç–æ–ø –±–æ—Ç", "üü¢ –°—Ç–∞—Ä—Ç –±–æ—Ç"]:
        await update.message.reply_text("‚ÑπÔ∏è –§—É–Ω–∫—Ü—ñ—è —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó")
    elif "ARBITRAGE SIGNAL" in text.upper() or "ASSET:" in text.upper():
        # –û–±—Ä–æ–±–∫–∞ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤
        await handle_arbitrage_signal(update, context)
    elif text.upper().startswith("CANCEL "):
        # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
        await handle_cancel_command(update, context)
    else:
        logging.info(f"‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: '{text}'")
        await update.message.reply_text(f"‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: '{text}'\n–°–ø—Ä–æ–±—É–π—Ç–µ /start")

async def handle_arbitrage_signal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏"""
    try:
        from signal_processor import process_signal_message
        
        message_text = update.message.text
        user_id = update.effective_user.id
        
        logging.info(f"üì® –û—Ç—Ä–∏–º–∞–Ω–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π —Å–∏–≥–Ω–∞–ª –≤—ñ–¥ {user_id}")
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ —Å–∏–≥–Ω–∞–ª
        result = process_signal_message(message_text, "telegram")
        
        # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        if result['success']:
            await update.message.reply_text("‚úÖ –ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π —Å–∏–≥–Ω–∞–ª —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π —ñ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏–π")
        else:
            error_msg = "; ".join(result['errors'][:2])  # –ü–µ—Ä—à—ñ 2 –ø–æ–º–∏–ª–∫–∏
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–∏–≥–Ω–∞–ª—É:\n{error_msg}")
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É: {e}")
        await update.message.reply_text("‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–∏–≥–Ω–∞–ª—É")

async def handle_cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π"""
    try:
        text = update.message.text.upper()
        # –í–∏—Ç—è–≥—É—î–º–æ –Ω–∞–∑–≤—É –∞–∫—Ç–∏–≤—É –∑ –∫–æ–º–∞–Ω–¥–∏ "CANCEL SYMBOL"
        parts = text.split()
        if len(parts) >= 2:
            asset = parts[1]
            # –†–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω–∏–π cancel registry
            from cancel_registry import request_cancel_for_asset
            success = request_cancel_for_asset(asset)
            if success:
                await update.message.reply_text(f"‚úÖ –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥–ª—è {asset} –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ\n‚è±Ô∏è –í–∏–∫–æ–Ω–∞–Ω–Ω—è –±—É–¥–µ –∑—É–ø–∏–Ω–µ–Ω–æ —è–∫—â–æ –≤–æ–Ω–æ —â–µ –Ω–µ –ø–æ—á–∞–ª–æ—Å—å")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: CANCEL SYMBOL")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è")

def setup_telegram_bot():
    """Setup Telegram bot"""
    if not config.TELEGRAM_BOT_TOKEN:
        logging.error("TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        return None
    
    application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
    
    # Commands
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("chat_id", chat_id))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("positions", positions))
    application.add_handler(CommandHandler("symbols", symbols_menu))
    application.add_handler(CommandHandler("settings", settings_buttons_menu))
    application.add_handler(CommandHandler("set_amount", set_amount))
    application.add_handler(CommandHandler("set_spread", set_spread)) 
    application.add_handler(CommandHandler("set_leverage", set_leverage))
    application.add_handler(CommandHandler("set_positions", set_positions))
    application.add_handler(CommandHandler("set_depth", set_depth))
    
    # –î—É–±–ª—ñ–∫–∞—Ç–∏ –∫–æ–º–∞–Ω–¥ –≤–∏–¥–∞–ª–µ–Ω–æ
    
    # Callback handlers for symbols
    application.add_handler(CallbackQueryHandler(toggle_symbol, pattern="^(toggle_|enable_all|disable_all)"))
    
    # Callback handlers for settings
    application.add_handler(CallbackQueryHandler(handle_settings_buttons, pattern="^(settings_|set_)"))
    
    # Text message handler
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    return application

def run_telegram_bot():
    """Run Telegram bot"""
    import asyncio
    try:
        # Create new event loop for this thread
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        application = setup_telegram_bot()
        if application:
            logging.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            application.run_polling()
        else:
            # –¢–∏—Ö–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–º–∏–ª–∫–∏ –∑–∞–ø—É—Å–∫—É Telegram –±–æ—Ç–∞
            pass
    except Exception as e:
        # –¢–∏—Ö–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–º–∏–ª–∫–∏ Telegram –±–æ—Ç–∞
        pass
    finally:
        try:
            loop.close()
        except:
            pass

if __name__ == "__main__":
    run_telegram_bot()