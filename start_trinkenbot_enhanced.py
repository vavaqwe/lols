#!/usr/bin/env python3
"""
üöÄ Trinkenbot Enhanced - –ü–æ–≤–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è
–ó–∞–ø—É—Å–∫ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ + –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
–°—Ç–≤–æ—Ä–µ–Ω–æ Emergent AI Agent - 30 –≤–µ—Ä–µ—Å–Ω—è 2025
"""

import os
import sys
import subprocess
import threading
import time
import logging
from pathlib import Path

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class TrinkenbotEnhanced:
    def __init__(self):
        self.base_dir = Path(__file__).parent
        self.original_bot_process = None
        self.web_api_process = None
        self.web_frontend_process = None
        self.running = False

    def check_dependencies(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π —Ç–∞ API –∫–ª—é—á—ñ–≤"""
        logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Python –ø–∞–∫–µ—Ç—ñ–≤
        required_packages = ['ccxt', 'fastapi', 'uvicorn']
        missing = []
        
        for package in required_packages:
            try:
                __import__(package)
                logger.info(f"‚úÖ {package} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            except ImportError:
                missing.append(package)
                logger.warning(f"‚ùå {package} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
        
        if missing:
            logger.info("üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –ø–∞–∫–µ—Ç—ñ–≤...")
            for package in missing:
                subprocess.run([sys.executable, '-m', 'pip', 'install', package])
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API –∫–ª—é—á—ñ–≤
        from dotenv import load_dotenv
        load_dotenv()
        
        api_key = os.getenv('XT_API_KEY')
        api_secret = os.getenv('XT_API_SECRET')
        
        if not api_key or not api_secret:
            logger.error("‚ùå XT API –∫–ª—é—á—ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –≤ .env —Ñ–∞–π–ª—ñ!")
            return False
        
        # –¢–µ—Å—Ç XT –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        try:
            import ccxt
            xt = ccxt.xt({
                'apiKey': api_key,
                'secret': api_secret,
                'sandbox': False
            })
            markets = xt.load_markets()
            futures_count = len([s for s, m in markets.items() if m.get('type') in ['swap', 'future']])
            logger.info(f"‚úÖ XT.com –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è OK: {futures_count} —Ñ—å—é—á–µ—Ä—Å–Ω–∏—Ö –ø–∞—Ä")
        except Exception as e:
            logger.error(f"‚ùå XT.com –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
            return False
        
        return True

    def start_original_bot(self):
        """–ó–∞–ø—É—Å–∫ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        try:
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ Trinkenbot...")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î main.py
            if not (self.base_dir / 'main.py').exists():
                logger.warning("‚ö†Ô∏è main.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–ø—É—Å–∫ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞")
                return True
            
            self.original_bot_process = subprocess.Popen([
                sys.executable, 'main.py'
            ], cwd=self.base_dir)
            
            logger.info("‚úÖ –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞: {e}")
            return False

    def start_web_api(self):
        """–ó–∞–ø—É—Å–∫ FastAPI –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            logger.info("üåê –ó–∞–ø—É—Å–∫ Web API —Å–µ—Ä–≤–µ—Ä–∞...")
            
            web_server_file = self.base_dir / 'web_interface' / 'server.py'
            if not web_server_file.exists():
                logger.error("‚ùå Web API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            self.web_api_process = subprocess.Popen([
                sys.executable, str(web_server_file)
            ])
            
            # –ß–µ–∫–∞—î–º–æ –∑–∞–ø—É—Å–∫—É
            time.sleep(3)
            logger.info("‚úÖ Web API –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:8001")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Web API: {e}")
            return False

    def start_web_frontend(self):
        """–ó–∞–ø—É—Å–∫ React frontend"""
        try:
            logger.info("‚öõÔ∏è –ó–∞–ø—É—Å–∫ React Frontend...")
            
            frontend_dir = self.base_dir / 'frontend'
            if not frontend_dir.exists():
                logger.error("‚ùå Frontend –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ package.json
            if not (frontend_dir / 'package.json').exists():
                logger.error("‚ùå package.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if not (frontend_dir / 'node_modules').exists():
                logger.info("üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è frontend –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
                subprocess.run(['yarn', 'install'], cwd=frontend_dir, check=True)
            
            # –ó–∞–ø—É—Å–∫ frontend
            self.web_frontend_process = subprocess.Popen([
                'yarn', 'start'
            ], cwd=frontend_dir)
            
            # –ß–µ–∫–∞—î–º–æ –∑–∞–ø—É—Å–∫—É
            time.sleep(5)
            logger.info("‚úÖ React Frontend –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:3000")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É frontend: {e}")
            return False

    def monitor_processes(self):
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—ñ–≤"""
        logger.info("üëÅÔ∏è –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø—Ä–æ—Ü–µ—Å—ñ–≤...")
        
        while self.running:
            time.sleep(30)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
            
            processes = [
                ("–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –±–æ—Ç", self.original_bot_process),
                ("Web API", self.web_api_process),
                ("React Frontend", self.web_frontend_process)
            ]
            
            for name, process in processes:
                if process and process.poll() is not None:
                    logger.warning(f"‚ö†Ô∏è {name} –∑—É–ø–∏–Ω–∏–≤—Å—è (–∫–æ–¥: {process.returncode})")

    def start_all(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å—ñ—î—ó —Å–∏—Å—Ç–µ–º–∏"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Trinkenbot Enhanced...")
        print("‚îÅ" * 60)
        print("ü§ñ TRINKENBOT ENHANCED - Startup")
        print("‚îÅ" * 60)
        
        if not self.check_dependencies():
            return False
        
        self.running = True
        
        # –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        success_count = 0
        total_components = 3
        
        if self.start_original_bot():
            success_count += 1
            
        if self.start_web_api():
            success_count += 1
            
        if self.start_web_frontend():
            success_count += 1
        
        if success_count >= 2:  # –ú—ñ–Ω—ñ–º—É–º Web API + Frontend
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
            self.print_status()
            
            # –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
            monitor_thread = threading.Thread(target=self.monitor_processes, daemon=True)
            monitor_thread.start()
            
            return True
        else:
            logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–∏—Å—Ç–µ–º–∏")
            return False

    def print_status(self):
        """–í–∏–≤–µ–¥–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Å–∏—Å—Ç–µ–º–∏"""
        print("‚îÅ" * 60)
        print("üéâ TRINKENBOT ENHANCED - –ì–û–¢–û–í–ò–ô!")
        print("‚îÅ" * 60)
        
        if self.original_bot_process:
            print("ü§ñ –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –±–æ—Ç: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π")
        else:
            print("ü§ñ –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –±–æ—Ç: ‚ö†Ô∏è –ù–µ –∑–∞–ø—É—â–µ–Ω–æ")
            
        if self.web_api_process:
            print("üåê Web API: ‚úÖ http://localhost:8001")
        else:
            print("üåê Web API: ‚ùå –ù–µ –∑–∞–ø—É—â–µ–Ω–æ")
            
        if self.web_frontend_process:
            print("‚öõÔ∏è Web Dashboard: ‚úÖ http://localhost:3000")
        else:
            print("‚öõÔ∏è Web Dashboard: ‚ùå –ù–µ –∑–∞–ø—É—â–µ–Ω–æ")
            
        print("‚îÅ" * 60)
        print("üîë –í–•–Ü–î –í DASHBOARD:")
        print("   ‚Ä¢ API Key: edbae47c-5dd1-4e17-85a5-4ddbf9a0198d")
        print("   ‚Ä¢ API Secret: dc15cbd32da51249b35326dcc0bafb9045771fa8")
        print("   ‚Ä¢ Password: trinken2024")
        print("‚îÅ" * 60)
        print("üí° –í—ñ–¥–∫—Ä–∏–π—Ç–µ http://localhost:3000 –≤ –±—Ä–∞—É–∑–µ—Ä—ñ")
        print("‚ö†Ô∏è  –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏")
        print("‚îÅ" * 60)

    def stop_all(self):
        """–ó—É–ø–∏–Ω–∫–∞ –≤—Å—ñ—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤"""
        logger.info("üõë –ó—É–ø–∏–Ω–∫–∞ —Å–∏—Å—Ç–µ–º–∏...")
        self.running = False
        
        processes = [
            ("React Frontend", self.web_frontend_process),
            ("Web API", self.web_api_process),
            ("–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –±–æ—Ç", self.original_bot_process),
        ]
        
        for name, process in processes:
            if process:
                try:
                    process.terminate()
                    process.wait(timeout=10)
                    logger.info(f"‚úÖ {name} –∑—É–ø–∏–Ω–µ–Ω–æ")
                except:
                    try:
                        process.kill()
                        logger.warning(f"‚ö†Ô∏è {name} –ø—Ä–∏–º—É—Å–æ–≤–æ –∑–∞–∫—Ä–∏—Ç–æ")
                    except:
                        pass

if __name__ == "__main__":
    bot = TrinkenbotEnhanced()
    
    try:
        if bot.start_all():
            # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É –∑—É–ø–∏–Ω–∫–∏
            try:
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                print("\nüõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏...")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        bot.stop_all()
        print("\nüëã Trinkenbot Enhanced –∑—É–ø–∏–Ω–µ–Ω–æ")
        print("üôè –î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!")