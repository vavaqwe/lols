"""
üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—É—Ç–∫–æ–≤–æ—Å—Ç—ñ –¥–ª—è Trinkenbot  
–¢–æ—á–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ P&L –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–º—ñ—Å—ñ–π, slippage, leverage
–°—Ç–≤–æ—Ä–µ–Ω–æ Emergent AI Agent - 30 –≤–µ—Ä–µ—Å–Ω—è 2025
"""

import logging
from typing import Dict, List, Optional, Tuple
from decimal import Decimal, ROUND_HALF_UP
from datetime import datetime, timezone
import math

logger = logging.getLogger(__name__)

class ProfitCalculator:
    """–ö–ª–∞—Å –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ø—Ä–∏–±—É—Ç–∫–æ–≤–æ—Å—Ç—ñ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö —É–≥–æ–¥"""
    
    def __init__(self):
        # –ö–æ–º—ñ—Å—ñ—ó –±—ñ—Ä–∂—ñ XT.com (–ø—Ä–∏–º—ñ—Ä–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è)
        self.xt_maker_fee = Decimal('0.0008')  # 0.08%
        self.xt_taker_fee = Decimal('0.0010')  # 0.10%
        
        # –ö–æ–º—ñ—Å—ñ—ó DEX (–ø—Ä–∏–º—ñ—Ä–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è)
        self.dex_fees = {
            'ethereum': Decimal('0.003'),    # 0.30% Uniswap
            'bsc': Decimal('0.0025'),        # 0.25% PancakeSwap  
            'solana': Decimal('0.0025'),     # 0.25% Raydium/Jupiter
        }
        
        # Slippage –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏
        self.slippage_rates = {
            'low': Decimal('0.001'),      # 0.1%
            'medium': Decimal('0.003'),   # 0.3%
            'high': Decimal('0.005'),     # 0.5%
        }
        
    def calculate_arbitrage_profit(self, 
                                 xt_price: float,
                                 dex_price: float,
                                 position_size_usdt: float,
                                 leverage: int = 10,
                                 dex_chain: str = 'ethereum',
                                 slippage_level: str = 'medium') -> Dict:
        """
        –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∏–±—É—Ç–∫–æ–≤–æ—Å—Ç—ñ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ—ó —É–≥–æ–¥–∏
        
        Args:
            xt_price: –¶—ñ–Ω–∞ –Ω–∞ XT.com
            dex_price: –¶—ñ–Ω–∞ –Ω–∞ DEX
            position_size_usdt: –†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó –≤ USDT
            leverage: –ü–ª–µ—á–µ
            dex_chain: –ú–µ—Ä–µ–∂–∞ DEX (ethereum/bsc/solana)
            slippage_level: –†—ñ–≤–µ–Ω—å slippage (low/medium/high)
        
        Returns:
            Dict –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–º –ø—Ä–∏–±—É—Ç–∫—É
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —É Decimal –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç—ñ
            xt_price_d = Decimal(str(xt_price))
            dex_price_d = Decimal(str(dex_price))
            position_size_d = Decimal(str(position_size_usdt))
            leverage_d = Decimal(str(leverage))
            
            # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–ø—Ä—è–º—É –∞—Ä–±—ñ—Ç—Ä–∞–∂—É
            if xt_price_d > dex_price_d:
                # –ö—É–ø–∏—Ç–∏ –Ω–∞ DEX, –ø—Ä–æ–¥–∞—Ç–∏ –Ω–∞ XT
                direction = 'dex_to_xt'
                spread_percent = ((xt_price_d - dex_price_d) / dex_price_d) * 100
                buy_price = dex_price_d
                sell_price = xt_price_d
            else:
                # –ö—É–ø–∏—Ç–∏ –Ω–∞ XT, –ø—Ä–æ–¥–∞—Ç–∏ –Ω–∞ DEX  
                direction = 'xt_to_dex'
                spread_percent = ((dex_price_d - xt_price_d) / xt_price_d) * 100
                buy_price = xt_price_d
                sell_price = dex_price_d
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω—ñ–≤
            tokens_to_trade = position_size_d / buy_price
            
            # –ö–æ–º—ñ—Å—ñ—ó
            xt_fee_rate = self.xt_taker_fee  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ taker fee
            dex_fee_rate = self.dex_fees.get(dex_chain, self.dex_fees['ethereum'])
            slippage_rate = self.slippage_rates.get(slippage_level, self.slippage_rates['medium'])
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏—Ç—Ä–∞—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É
            if direction == 'dex_to_xt':
                # –ö—É–ø—ñ–≤–ª—è –Ω–∞ DEX
                buy_amount = tokens_to_trade * buy_price
                dex_fee = buy_amount * dex_fee_rate
                slippage_cost = buy_amount * slippage_rate
                total_buy_cost = buy_amount + dex_fee + slippage_cost
                
                # –ü—Ä–æ–¥–∞–∂ –Ω–∞ XT
                sell_revenue_gross = tokens_to_trade * sell_price
                xt_fee = sell_revenue_gross * xt_fee_rate
                sell_revenue_net = sell_revenue_gross - xt_fee
            else:
                # –ö—É–ø—ñ–≤–ª—è –Ω–∞ XT
                buy_amount = tokens_to_trade * buy_price
                xt_fee_buy = buy_amount * xt_fee_rate
                total_buy_cost = buy_amount + xt_fee_buy
                
                # –ü—Ä–æ–¥–∞–∂ –Ω–∞ DEX
                sell_revenue_gross = tokens_to_trade * sell_price
                dex_fee = sell_revenue_gross * dex_fee_rate
                slippage_cost = sell_revenue_gross * slippage_rate
                sell_revenue_net = sell_revenue_gross - dex_fee - slippage_cost
            
            # –ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫
            gross_profit = sell_revenue_net - total_buy_cost
            
            # –£—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –ø–ª–µ—á–∞
            required_margin = position_size_d / leverage_d
            leveraged_profit = gross_profit * leverage_d
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ ROI
            roi_percent = (leveraged_profit / required_margin) * 100 if required_margin > 0 else Decimal('0')
            
            # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—å –¥–ª—è –ø–æ–∫—Ä–∏—Ç—Ç—è —Ä–∏–∑–∏–∫—ñ–≤
            min_profit_threshold = required_margin * Decimal('0.005')  # 0.5%
            
            result = {
                'is_profitable': leveraged_profit > min_profit_threshold,
                'direction': direction,
                'spread_percent': float(spread_percent),
                'gross_profit': float(gross_profit),
                'leveraged_profit': float(leveraged_profit),
                'required_margin': float(required_margin),
                'roi_percent': float(roi_percent),
                'position_size': float(position_size_d),
                'tokens_to_trade': float(tokens_to_trade),
                'fees': {
                    'xt_fee': float(xt_fee_rate * position_size_d) if direction == 'xt_to_dex' else float(sell_revenue_gross * xt_fee_rate),
                    'dex_fee': float(dex_fee_rate * position_size_d) if direction == 'dex_to_xt' else float(dex_fee),
                    'slippage_cost': float(slippage_cost),
                    'total_fees': float((dex_fee if 'dex_fee' in locals() else Decimal('0')) + 
                                       (xt_fee if 'xt_fee' in locals() else xt_fee_buy if 'xt_fee_buy' in locals() else Decimal('0')) + 
                                       slippage_cost)
                },
                'prices': {
                    'xt_price': float(xt_price_d),
                    'dex_price': float(dex_price_d),
                    'buy_price': float(buy_price),
                    'sell_price': float(sell_price)
                },
                'settings': {
                    'leverage': leverage,
                    'dex_chain': dex_chain,
                    'slippage_level': slippage_level
                },
                'recommendation': self._get_recommendation(leveraged_profit, roi_percent, spread_percent)
            }
            
            logger.debug(f"–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∏–±—É—Ç–∫—É: {result['recommendation']}, ROI: {roi_percent:.2f}%")
            return result
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ø—Ä–∏–±—É—Ç–∫—É: {e}")
            return {
                'is_profitable': False,
                'error': str(e),
                'gross_profit': 0.0,
                'leveraged_profit': 0.0,
                'roi_percent': 0.0
            }
    
    def _get_recommendation(self, leveraged_profit: Decimal, roi_percent: Decimal, spread_percent: Decimal) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤"""
        try:
            if leveraged_profit <= 0:
                return "üî¥ –ù–ï –¢–û–†–ì–£–í–ê–¢–ò - –∑–±–∏—Ç–∫–∏"
            elif roi_percent < Decimal('1'):
                return "üü° –°–õ–ê–ë–ö–ò–ô - –Ω–∏–∑—å–∫–∞ –ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—å"
            elif roi_percent < Decimal('3'):
                return "üü¢ –î–û–ë–†–ò–ô - –ø–æ–º—ñ—Ä–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫"
            elif roi_percent < Decimal('8'):
                return "üíö –í–Ü–î–ú–Ü–ù–ù–ò–ô - –≤–∏—Å–æ–∫–∏–π –ø—Ä–∏–±—É—Ç–æ–∫"
            else:
                return "üöÄ –Ü–î–ï–ê–õ–¨–ù–ò–ô - –Ω–∞–¥–≤–∏—Å–æ–∫–∏–π –ø—Ä–∏–±—É—Ç–æ–∫"
        except:
            return "‚ö™ –ù–ï–í–ò–ó–ù–ê–ß–ï–ù–û"
    
    def calculate_stop_loss(self, entry_price: float, position_side: str, stop_loss_percent: float = 25.0) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ü—ñ–Ω–∏ —Å—Ç–æ–ø-–ª–æ—Å—É"""
        try:
            entry_price_d = Decimal(str(entry_price))
            stop_loss_rate = Decimal(str(stop_loss_percent)) / 100
            
            if position_side.upper() == 'LONG':
                # –î–ª—è –¥–æ–≤–≥–∏—Ö –ø–æ–∑–∏—Ü—ñ–π —Å—Ç–æ–ø-–ª–æ—Å –Ω–∏–∂—á–µ —Ü—ñ–Ω–∏ –≤—Ö–æ–¥—É
                stop_loss_price = entry_price_d * (Decimal('1') - stop_loss_rate)
            else:  # SHORT
                # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–æ–∑–∏—Ü—ñ–π —Å—Ç–æ–ø-–ª–æ—Å –≤–∏—â–µ —Ü—ñ–Ω–∏ –≤—Ö–æ–¥—É  
                stop_loss_price = entry_price_d * (Decimal('1') + stop_loss_rate)
            
            return float(stop_loss_price)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å—Ç–æ–ø-–ª–æ—Å—É: {e}")
            return entry_price * 0.75 if position_side.upper() == 'LONG' else entry_price * 1.25
    
    def calculate_take_profit(self, entry_price: float, position_side: str, take_profit_percent: float = 2.5) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ü—ñ–Ω–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç—É"""
        try:
            entry_price_d = Decimal(str(entry_price))
            take_profit_rate = Decimal(str(take_profit_percent)) / 100
            
            if position_side.upper() == 'LONG':
                # –î–ª—è –¥–æ–≤–≥–∏—Ö –ø–æ–∑–∏—Ü—ñ–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç –≤–∏—â–µ —Ü—ñ–Ω–∏ –≤—Ö–æ–¥—É
                take_profit_price = entry_price_d * (Decimal('1') + take_profit_rate)
            else:  # SHORT
                # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–æ–∑–∏—Ü—ñ–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç –Ω–∏–∂—á–µ —Ü—ñ–Ω–∏ –≤—Ö–æ–¥—É
                take_profit_price = entry_price_d * (Decimal('1') - take_profit_rate)
            
            return float(take_profit_price)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç—É: {e}")
            return entry_price * 1.025 if position_side.upper() == 'LONG' else entry_price * 0.975
    
    def calculate_position_size(self, account_balance: float, risk_percent: float = 2.0, leverage: int = 10) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É"""
        try:
            balance_d = Decimal(str(account_balance))
            risk_rate = Decimal(str(risk_percent)) / 100
            leverage_d = Decimal(str(leverage))
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—É–º–∞ —Ä–∏–∑–∏–∫—É
            max_risk_amount = balance_d * risk_rate
            
            # –†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–ª–µ—á–∞
            position_size = max_risk_amount * leverage_d
            
            # –û–±–º–µ–∂–µ–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó (–Ω–µ –±—ñ–ª—å—à–µ 10% –±–∞–ª–∞–Ω—Å—É –∑ –ø–ª–µ—á–µ–º)
            max_position = balance_d * leverage_d * Decimal('0.10')
            position_size = min(position_size, max_position)
            
            logger.info(f"–†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó: ${position_size:.2f} (—Ä–∏–∑–∏–∫: {risk_percent}%)")
            return float(position_size)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó: {e}")
            return min(account_balance * 0.02 * leverage, account_balance * leverage * 0.10)
    
    def analyze_spread_profitability(self, spreads: List[Dict]) -> List[Dict]:
        """–ê–Ω–∞–ª—ñ–∑ –ø—Ä–∏–±—É—Ç–∫–æ–≤–æ—Å—Ç—ñ —Å–ø–∏—Å–∫—É —Å–ø—Ä–µ–¥—ñ–≤"""
        try:
            analyzed_spreads = []
            
            for spread in spreads:
                try:
                    profit_analysis = self.calculate_arbitrage_profit(
                        xt_price=spread.get('xt_price', 0),
                        dex_price=spread.get('dex_price', 0),
                        position_size_usdt=spread.get('position_size', 1000),
                        leverage=spread.get('leverage', 10),
                        dex_chain=spread.get('chain', 'ethereum'),
                        slippage_level='medium'
                    )
                    
                    # –î–æ–¥–∞—î–º–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –¥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥—É
                    enhanced_spread = {**spread, **profit_analysis}
                    analyzed_spreads.append(enhanced_spread)
                    
                except Exception as e:
                    logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–ø—Ä–µ–¥ –¥–ª—è {spread.get('symbol', 'unknown')}: {e}")
                    continue
            
            # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—é
            analyzed_spreads.sort(key=lambda x: x.get('roi_percent', 0), reverse=True)
            
            logger.info(f"–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ {len(analyzed_spreads)} —Å–ø—Ä–µ–¥—ñ–≤")
            return analyzed_spreads
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Å–ø—Ä–µ–¥—ñ–≤: {e}")
            return []

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
profit_calculator = ProfitCalculator()

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
def calculate_profit(xt_price: float, dex_price: float, position_size: float, leverage: int = 10) -> Dict:
    """–®–≤–∏–¥–∫–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∏–±—É—Ç–∫—É"""
    return profit_calculator.calculate_arbitrage_profit(xt_price, dex_price, position_size, leverage)

def get_stop_loss_price(entry_price: float, side: str, stop_loss_pct: float = 25.0) -> float:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É —Å—Ç–æ–ø-–ª–æ—Å—É"""
    return profit_calculator.calculate_stop_loss(entry_price, side, stop_loss_pct)

def get_take_profit_price(entry_price: float, side: str, take_profit_pct: float = 2.5) -> float:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É —Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç—É"""
    return profit_calculator.calculate_take_profit(entry_price, side, take_profit_pct)

def calculate_optimal_position_size(balance: float, risk_pct: float = 2.0, leverage: int = 10) -> float:
    """–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó"""
    return profit_calculator.calculate_position_size(balance, risk_pct, leverage)