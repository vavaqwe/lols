import re
import logging
from typing import Optional, Dict, Any
from dataclasses import dataclass

@dataclass
class ArbitrageSignal:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É"""
    asset: str = ""
    action: str = ""  # LONG/SHORT
    xt_price: float = 0.0
    dex_price: float = 0.0
    spread_percent: float = 0.0
    size_usd: float = 0.0
    tp: float = 0.0  # Take Profit
    sl: float = 0.0  # Stop Loss
    leverage: int = 1
    liquidity_usd: float = 0.0
    volume_24h_usd: float = 0.0
    
    @property
    def is_valid(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Å–∏–≥–Ω–∞–ª –º–∞—î –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è"""
        required_fields = [
            self.asset, self.action, self.xt_price, self.dex_price, 
            self.spread_percent, self.size_usd, self.tp, self.sl
        ]
        return all(field for field in required_fields)

class SignalParser:
    """
    –ü–∞—Ä—Å–µ—Ä —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞
    
    –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç:
    üö® ARBITRAGE SIGNAL üö®
    ASSET: PEOPLE
    ACTION: LONG
    XT_PRICE: $0.020940
    DEX_PRICE: $0.021319
    SPREAD: +1.72%
    SIZE_USD: $5.0
    TP: $0.021191
    SL: $0.018846
    LEVERAGE: 5x
    LIQUIDITY: $391,982
    VOLUME_24H: $497,000
    """
    
    def __init__(self):
        # –†–µ–≥—É–ª—è—Ä–Ω—ñ –≤–∏—Ä–∞–∑–∏ –¥–ª—è –≤–∏—Ç—è–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
        self.patterns = {
            'asset': r'ASSET:\s*([A-Z0-9]+)',
            'action': r'ACTION:\s*(LONG|SHORT)',
            'xt_price': r'XT_PRICE:\s*\$?([0-9]+\.?[0-9]*)',
            'dex_price': r'DEX_PRICE:\s*\$?([0-9]+\.?[0-9]*)',
            'spread': r'SPREAD:\s*([+-]?[0-9]+\.?[0-9]*)%?',
            'size_usd': r'SIZE_USD:\s*\$?([0-9]+\.?[0-9]*)',
            'tp': r'TP:\s*\$?([0-9]+\.?[0-9]*)',
            'sl': r'SL:\s*\$?([0-9]+\.?[0-9]*)',
            'leverage': r'LEVERAGE:\s*([0-9]+)x?',
            'liquidity': r'LIQUIDITY:\s*\$?([0-9,]+(?:\.[0-9]*)?)',
            'volume_24h': r'VOLUME_24H:\s*\$?([0-9,]+(?:\.[0-9]*)?)'
        }
    
    def parse_signal(self, text: str) -> Optional[ArbitrageSignal]:
        """
        –ü–∞—Ä—Å–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–∏–≥–Ω–∞–ª—É —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É ArbitrageSignal
        
        Args:
            text: –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Å–∏–≥–Ω–∞–ª–æ–º
            
        Returns:
            ArbitrageSignal –∞–±–æ None —è–∫—â–æ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ–≤–¥–∞–ª–∏–π
        """
        try:
            signal = ArbitrageSignal()
            
            # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ —Å–∏–º–≤–æ–ª–∏ —Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ –≤–µ—Ä—Ö–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä –¥–ª—è –ø–æ—à—É–∫—É
            text_upper = text.upper().replace(',', '')
            
            # –í–∏—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ –∑–∞ –ø–∞—Ç–µ—Ä–Ω–∞–º–∏
            for field, pattern in self.patterns.items():
                match = re.search(pattern, text_upper, re.IGNORECASE)
                if match:
                    value = match.group(1)
                    
                    # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö
                    if field == 'asset':
                        signal.asset = value.upper()
                    elif field == 'action':
                        signal.action = value.upper()
                    elif field in ['xt_price', 'dex_price', 'spread', 'tp', 'sl']:
                        signal.__setattr__(field.replace('spread', 'spread_percent'), float(value))
                    elif field == 'size_usd':
                        signal.size_usd = float(value)
                    elif field == 'leverage':
                        signal.leverage = int(value)
                    elif field in ['liquidity', 'volume_24h']:
                        # –û–±—Ä–æ–±–ª—è—î–º–æ —á–∏—Å–ª–∞ –∑ –∫–æ–º–∞–º–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 391,982)
                        clean_value = value.replace(',', '')
                        signal.__setattr__(field.replace('volume_24h', 'volume_24h_usd').replace('liquidity', 'liquidity_usd'), float(clean_value))
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å–∏–≥–Ω–∞–ª –º–∞—î –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
            if signal.asset and signal.action and signal.xt_price > 0 and signal.dex_price > 0:
                logging.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø–∞—Ä—Å–æ–≤–∞–Ω–∏–π —Å–∏–≥–Ω–∞–ª: {signal.asset} {signal.action} ${signal.xt_price:.6f}")
                return signal
            else:
                logging.warning(f"‚ùå –ù–µ–ø–æ–≤–Ω–∏–π —Å–∏–≥–Ω–∞–ª: {signal.asset} | XT:{signal.xt_price} | DEX:{signal.dex_price}")
                return None
                
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —Å–∏–≥–Ω–∞–ª—É: {e}")
            return None
    
    def validate_signal_thresholds(self, signal: ArbitrageSignal) -> Dict[str, Any]:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å–∏–≥–Ω–∞–ª –∑–≥—ñ–¥–Ω–æ –∑ –ø–æ—Ä–æ–≥–æ–≤–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
        
        Returns:
            dict –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        """
        from config import MIN_SPREAD, MAX_SPREAD
        
        # –ü–æ—Ä–æ–≥–∏ –∑–≥—ñ–¥–Ω–æ –∑ –≤–∞—à–∏–º–∏ –≤–∏–º–æ–≥–∞–º–∏
        from config import MIN_24H_VOLUME_USD, MIN_POOLED_LIQUIDITY_USD
        
        validation_result = {
            'valid': True,
            'errors': [],
            'warnings': []
        }
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ø—Ä–µ–¥—É
        spread = abs(signal.spread_percent)
        if spread < MIN_SPREAD:
            validation_result['valid'] = False
            validation_result['errors'].append(f"–°–ø—Ä–µ–¥ {spread:.2f}% < –º—ñ–Ω—ñ–º—É–º {MIN_SPREAD}%")
        
        if spread > MAX_SPREAD:
            validation_result['valid'] = False
            validation_result['errors'].append(f"–°–ø—Ä–µ–¥ {spread:.2f}% > –º–∞–∫—Å–∏–º—É–º {MAX_SPREAD}%")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±'—î–º—É –∑–∞ 24 –≥–æ–¥–∏–Ω–∏
        if signal.volume_24h_usd > 0 and signal.volume_24h_usd < MIN_24H_VOLUME_USD:
            validation_result['valid'] = False
            validation_result['errors'].append(f"–û–±'—î–º ${signal.volume_24h_usd:,.0f} < –º—ñ–Ω—ñ–º—É–º ${MIN_24H_VOLUME_USD:,.0f}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ
        if signal.liquidity_usd > 0 and signal.liquidity_usd < MIN_POOLED_LIQUIDITY_USD:
            validation_result['valid'] = False
            validation_result['errors'].append(f"–õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å ${signal.liquidity_usd:,.0f} < –º—ñ–Ω—ñ–º—É–º ${MIN_POOLED_LIQUIDITY_USD:,.0f}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑—É–º–Ω–æ—Å—Ç—ñ —Ü—ñ–Ω (—á–∏ –Ω–µ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π —Å–ø—Ä–µ–¥ = –ø—ñ–¥–æ–∑—Ä—ñ–ª–æ)
        price_ratio = max(signal.xt_price, signal.dex_price) / min(signal.xt_price, signal.dex_price)
        if price_ratio > 1.5:  # >50% —Ä—ñ–∑–Ω–∏—Ü—è —Ü—ñ–Ω –ø—ñ–¥–æ–∑—Ä—ñ–ª–æ
            validation_result['warnings'].append(f"–ü—ñ–¥–æ–∑—Ä—ñ–ª–∞ —Ä—ñ–∑–Ω–∏—Ü—è —Ü—ñ–Ω: {price_ratio:.2f}x")
        
        return validation_result

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—è—Ö
signal_parser = SignalParser()

def parse_arbitrage_signal(text: str) -> Optional[ArbitrageSignal]:
    """–ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É —Å–∏–≥–Ω–∞–ª—É"""
    return signal_parser.parse_signal(text)

def validate_signal(signal: ArbitrageSignal) -> Dict[str, Any]:
    """–ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Å–∏–≥–Ω–∞–ª—É"""
    return signal_parser.validate_signal_thresholds(signal)