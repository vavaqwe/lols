import time
import threading
import requests
import json
import os
from collections import deque
from config import *
from utils import calculate_spread, send_telegram, plot_spread_live, save_config_to_file, load_config_from_file, generate_crypto_signal, test_telegram_configuration, get_proper_dexscreener_link, send_to_admins_and_group
from telegram_admin import run_telegram_bot
# Gate.io integration removed - using only XT.com
# # # import gate_client  # –í–∏–¥–∞–ª–µ–Ω–æ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ XT  # Removed: XT.com only system removed
from xt_client import create_xt, load_xt_futures_markets, get_xt_price, is_xt_futures_tradeable, get_xt_futures_balance, xt_open_market_position, xt_close_position_market, analyze_xt_order_book_liquidity, fetch_xt_ticker, fetch_xt_order_book, get_xt_open_positions
import xt_client

# Helper functions for XT.com compatibility (replacing Gate.io functions)
def fetch_ticker(exchange, symbol):
    """Wrapper for XT ticker"""
    return fetch_xt_ticker(exchange, symbol)

def fetch_order_book(exchange, symbol, depth=10):
    """Wrapper for XT order book"""
    return fetch_xt_order_book(exchange, symbol, depth)
from dex_client import get_dex_price_simple, get_dex_token_info, get_advanced_token_analysis
import logging
from datetime import datetime
import threading

# XT.com - –î–í–ê –ü–ê–†–ê–õ–ï–õ–¨–ù–ò–• –ê–ö–ê–£–ù–¢–ò
xt_account_1 = create_xt(api_key=XT_API_KEY, api_secret=XT_API_SECRET, account_name="Account 1")  # –ü–µ—Ä—à–∏–π –∞–∫–∞—É–Ω—Ç

# –î—Ä—É–≥–∏–π –∞–∫–∞—É–Ω—Ç —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –∫–ª—é—á—ñ
if XT_ACCOUNT_2_API_KEY and XT_ACCOUNT_2_API_SECRET:
    xt_account_2 = create_xt(api_key=XT_ACCOUNT_2_API_KEY, api_secret=XT_ACCOUNT_2_API_SECRET, account_name="Account 2")
    logging.info("‚úÖ –î—Ä—É–≥–∏–π XT –∞–∫–∞—É–Ω—Ç –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
else:
    xt_account_2 = xt_account_1  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä—à–∏–π –∞–∫–∞—É–Ω—Ç —è–∫—â–æ –¥—Ä—É–≥–∏–π –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ
    logging.info("‚ÑπÔ∏è –î—Ä—É–≥–∏–π XT –∞–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à–∏–π")

xt = xt_account_1  # –î–ª—è backwards compatibility –∑ —ñ—Å–Ω—É—é—á–∏–º –∫–æ–¥–æ–º
markets = {}  # XT markets will be stored here
xt_markets_available = True
trade_symbols = {}  # runtime on/off per symbol
active_positions = {}  # symbol -> position dict {side, avg_entry, size_usdt, adds_done, last_add_price, tp_price, last_add_time, opened_at, expires_at, xt_pair_url, account}
active_positions_account_2 = {}  # –ü–æ–∑–∏—Ü—ñ—ó –¥—Ä—É–≥–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É

spread_store = deque(maxlen=1000)
_plot_thread = None
bot_running = True
monitor_stop_event = threading.Event()  # üõ°Ô∏è THREAD-SAFE MONITOR: Event –∑–∞–º—ñ—Å—Ç—å boolean
monitor_lifecycle_lock = threading.Lock()  # üîí –ó–ê–•–ò–°–¢ –≤—ñ–¥ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –ø–æ—Ç–æ–∫—ñ–≤
worker_threads = []
monitor_thread = None  # üéØ –†–µ—Ñ–µ—Ä–µ–Ω—Å –Ω–∞ –ø–æ—Ç—ñ–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É

# üïí –ö–£–õ–î–ê–£–ù —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∫–æ–∂–Ω–æ—ó –º–æ–Ω–µ—Ç–∏ (2 —Ö–≤–∏–ª–∏–Ω–∏ —è–∫ –ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)
telegram_cooldown = {}  # symbol -> timestamp –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É
# TELEGRAM_COOLDOWN_SEC —ñ–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è –∑ config.py –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ

# üîí SIMPLE THREADING LOCKS (replaced external locks module)
active_positions_lock = threading.Lock()
balance_check_lock = threading.Lock()
order_placement_lock = threading.Lock()
config_lock = threading.Lock()
telegram_cooldown_lock = threading.Lock()
opportunities_lock = threading.Lock()
signals_lock = threading.Lock()
trading_lock = threading.Lock()
monitoring_lock = threading.Lock()
processing_symbols_lock = threading.Lock()

# üéØ –ì–õ–û–ë–ê–õ–¨–ù–ò–ô –ü–û–®–£–ö–ê–ß –ù–ê–ô–ö–†–ê–©–ò–• –ú–û–ñ–õ–ò–í–û–°–¢–ï–ô (–∑–∞–º—ñ—Å—Ç—å –±–∞–≥–∞—Ç—å–æ—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤)
best_opportunities = {}  # {symbol: {spread, side, score, data}}
last_best_signal_time = 0
BEST_SIGNAL_INTERVAL = 30  # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –û–î–ò–ù –Ω–∞–π–∫—Ä–∞—â–∏–π —Å–∏–≥–Ω–∞–ª —Ä–∞–∑ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥

# üíæ –§–£–ù–ö–¶–Ü–á –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø/–ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ü–û–ó–ò–¶–Ü–ô
def save_positions_to_file():
    """–ó–±–µ—Ä—ñ–≥–∞—î active_positions –≤ positions.json –∑ –∑–∞—Ö–∏—Å—Ç–æ–º –≤—ñ–¥ race conditions"""
    try:
        with active_positions_lock:
            positions_data = active_positions.copy()
        
        # –î–æ–¥–∞—î–º–æ –º—ñ—Ç–∫—É —á–∞—Å—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        save_data = {
            'positions': positions_data,
            'saved_at': time.time(),
            'version': '1.1'  # –í–µ—Ä—Å—ñ—è –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
        }
        
        with open('positions.json', 'w') as f:
            json.dump(save_data, f, indent=2)
        
        logging.info(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(positions_data)} –ø–æ–∑–∏—Ü—ñ–π –≤ positions.json")
        return True
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π: {e}")
        return False

def load_positions_from_file():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–æ–∑–∏—Ü—ñ—ó –∑ positions.json —Ç–∞ –æ–Ω–æ–≤–ª—é—î expires_at –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö –ø–æ–∑–∏—Ü—ñ–π"""
    global active_positions
    
    try:
        if not os.path.exists('positions.json'):
            logging.info("üìÅ positions.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ—á–∏–Ω–∞—î–º–æ –∑ –ø—É—Å—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π")
            return
        
        with open('positions.json', 'r') as f:
            save_data = json.load(f)
        
        # –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Å—Ç–∞—Ä–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ —Ç–∞ –Ω–æ–≤–∏—Ö
        if isinstance(save_data, dict) and 'positions' in save_data:
            loaded_positions = save_data['positions']
            saved_at = save_data.get('saved_at', time.time())
        else:
            # –°—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç: –ø—Ä—è–º–æ —Å–ª–æ–≤–Ω–∏–∫ –ø–æ–∑–∏—Ü—ñ–π
            loaded_positions = save_data
            saved_at = time.time()
        
        current_time = time.time()
        valid_positions = {}
        
        for symbol, position in loaded_positions.items():
            # –§–Ü–ö–° –ë–ê–ì–£: –ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ timestamps!
            if 'opened_at' not in position or position.get('opened_at', 0) <= 0:
                position['opened_at'] = saved_at  # –ù–∞–±–ª–∏–∂–µ–Ω–∞ –º—ñ—Ç–∫–∞ —á–∞—Å—É
                logging.info(f"üîß {symbol}: –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ opened_at={position['opened_at']} –∑ —Ñ–∞–π–ª—É")
            else:
                logging.info(f"üîß {symbol}: –ó–±–µ—Ä–µ–∂–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏–π opened_at={position['opened_at']} –∑ —Ñ–∞–π–ª—É")
            
            if 'expires_at' not in position or position.get('expires_at', 0) <= 0:
                position['expires_at'] = position['opened_at'] + POSITION_MAX_AGE_SEC
                logging.info(f"üîß {symbol}: –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ expires_at={position['expires_at']} –∑ —Ñ–∞–π–ª—É")
            else:
                logging.info(f"üîß {symbol}: –ó–±–µ—Ä–µ–∂–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏–π expires_at={position['expires_at']} –∑ —Ñ–∞–π–ª—É")
            
            if 'xt_pair_url' not in position:
                position['xt_pair_url'] = generate_xt_pair_url(symbol)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ–∑–∏—Ü—ñ—è –Ω–µ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∞
            if ENABLE_TIME_STOP and current_time >= position['expires_at']:
                logging.warning(f"‚è∞ {symbol}: –ü–æ–∑–∏—Ü—ñ—è –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∞ ({(current_time - position['expires_at'])/60:.1f}—Ö–≤), –±—É–¥–µ –∑–∞–∫—Ä–∏—Ç–∞")
                # –ù–µ –¥–æ–¥–∞—î–º–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—É –ø–æ–∑–∏—Ü—ñ—é, –≤–æ–Ω–∞ –±—É–¥–µ –∑–∞–∫—Ä–∏—Ç–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ü–∏–∫–ª—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
            else:
                valid_positions[symbol] = position
        
        with active_positions_lock:
            active_positions.update(valid_positions)
        
        logging.info(f"üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(valid_positions)} –≤–∞–ª—ñ–¥–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –∑ positions.json")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
        if len(valid_positions) != len(loaded_positions):
            save_positions_to_file()
        
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π: {e}")

def get_positions_by_account():
    """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–∑–∏—Ü—ñ—ó —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø–æ –∞–∫–∞—É–Ω—Ç–∞—Ö + –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å"""
    try:
        with active_positions_lock:
            positions_acc_1 = active_positions.copy()
            positions_acc_2 = active_positions_account_2.copy()
        
        # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü—ñ–π –∞–∫–∞—É–Ω—Ç—É 1
        account_1_positions = []
        for symbol, position in positions_acc_1.items():
            # –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ —â–æ –≤—Å—ñ —á–∏—Å–ª–æ–≤—ñ –ø–æ–ª—è –º–∞—é—Ç—å –≤–∞–ª—ñ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è (–Ω–µ None)
            avg_entry = position.get('avg_entry')
            avg_entry = float(avg_entry) if avg_entry is not None and avg_entry != 0 else 0.0
            
            size_usdt = position.get('size_usdt', 0)
            size_usdt = float(size_usdt) if size_usdt is not None else 0.0
            
            pnl = calculate_pnl_percentage(position) if avg_entry > 0 else 0.0
            pnl = float(pnl) if pnl is not None else 0.0
            
            position_data = {
                'symbol': symbol,
                'side': position.get('side', 'LONG'),
                'size': size_usdt,
                'entry_price': avg_entry,
                'pnl': pnl,
                'account': 1
            }
            account_1_positions.append(position_data)
        
        # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü—ñ–π –∞–∫–∞—É–Ω—Ç—É 2
        account_2_positions = []
        for symbol, position in positions_acc_2.items():
            # –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ —â–æ –≤—Å—ñ —á–∏—Å–ª–æ–≤—ñ –ø–æ–ª—è –º–∞—é—Ç—å –≤–∞–ª—ñ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è (–Ω–µ None)
            avg_entry = position.get('avg_entry')
            avg_entry = float(avg_entry) if avg_entry is not None and avg_entry != 0 else 0.0
            
            size_usdt = position.get('size_usdt', 0)
            size_usdt = float(size_usdt) if size_usdt is not None else 0.0
            
            pnl = calculate_pnl_percentage(position) if avg_entry > 0 else 0.0
            pnl = float(pnl) if pnl is not None else 0.0
            
            position_data = {
                'symbol': symbol,
                'side': position.get('side', 'LONG'),
                'size': size_usdt,
                'entry_price': avg_entry,
                'pnl': pnl,
                'account': 2
            }
            account_2_positions.append(position_data)
        
        total_positions = len(positions_acc_1) + len(positions_acc_2)
        
        return {
            'account_1': account_1_positions,
            'account_2': account_2_positions,
            'total': total_positions,
            'account_1_count': len(account_1_positions),
            'account_2_count': len(account_2_positions)
        }
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ get_positions_by_account: {e}")
        return {
            'account_1': [],
            'account_2': [],
            'total': 0,
            'account_1_count': 0,
            'account_2_count': 0
        }

def generate_xt_pair_url(symbol):
    """–ì–µ–Ω–µ—Ä—É—î XT.com –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ—ó –ø–∞—Ä–∏"""
    try:
        # –û—á–∏—â–∞—î–º–æ —Å–∏–º–≤–æ–ª: ETH/USDT:USDT ‚Üí ETHUSDT
        clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '').upper()
        pair = f"{clean_symbol}USDT"
        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ò–ô –§–û–†–ú–ê–¢ XT.com futures trading
        return f"https://www.xt.com/en/trade/futures_{pair}"
    except:
        return "https://www.xt.com/en/trade"

def calculate_pnl_percentage(position, use_leverage=True):
    """
    üßÆ –£–ù–Ü–§–Ü–ö–û–í–ê–ù–ò–ô —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ PnL —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö –∑ fallback –ª–æ–≥—ñ–∫–æ—é —Ç–∞ XT ticker
    
    Args:
        position: —Å–ª–æ–≤–Ω–∏–∫ –ø–æ–∑–∏—Ü—ñ—ó –∑ —Ä—ñ–∑–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏ –¥–ª—è —Ü—ñ–Ω
        use_leverage: —á–∏ –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏ –ª–µ–≤–µ—Ä–∏–¥–∂ –¥–æ P&L (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º True)
    
    Returns:
        float: PnL —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
    """
    try:
        symbol = position.get('symbol', 'UNKNOWN')
        
        # üîß FALLBACK –õ–û–ì–Ü–ö–ê –¥–ª—è entry price
        entry_price = float(
            position.get('entryPrice') or 
            position.get('avg_entry') or 
            position.get('entry_price') or 0
        )
        
        # üîß FALLBACK –õ–û–ì–Ü–ö–ê –¥–ª—è current price
        current_price = float(
            position.get('markPrice') or 
            position.get('currentPrice') or 
            position.get('current_price') or 0
        )
        
        # üöÄ –ö–†–ò–¢–ò–ß–ù–û: –Ø–∫—â–æ currentPrice –≤—ñ–¥—Å—É—Ç–Ω—è, –æ—Ç—Ä–∏–º—É—î–º–æ –∑ XT ticker
        if current_price <= 0 and symbol != 'UNKNOWN' and xt:
            try:
                xt_ticker = xt.fetch_ticker(symbol)
                if xt_ticker and xt_ticker.get('last'):
                    current_price = float(xt_ticker['last'])
                    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤
                    position['currentPrice'] = current_price
                    logging.info(f"üîÑ [{symbol}] XT ticker —Ü—ñ–Ω–∞: ${current_price}")
            except Exception as ticker_error:
                logging.warning(f"‚ö†Ô∏è [{symbol}] –ü–æ–º–∏–ª–∫–∞ XT ticker: {ticker_error}")
        
        # üîß –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–æ—Ä–æ–Ω–∏
        side = str(position.get('side', 'LONG')).upper()
        if side.lower() in ['buy', 'long']:
            side = 'LONG'
        elif side.lower() in ['sell', 'short']:
            side = 'SHORT'
        
        # üßÆ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
        if entry_price <= 0 or current_price <= 0:
            if symbol != 'UNKNOWN':
                logging.warning(f"üö® [{symbol}] P&L –Ω–µ–º–æ–∂–ª–∏–≤–æ: entry={entry_price}, current={current_price}")
            return 0.0
        
        # üìä –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±–∞–∑–æ–≤–æ–≥–æ P&L%
        if side == 'LONG':
            pnl_pct = ((current_price - entry_price) / entry_price) * 100
        else:  # SHORT
            pnl_pct = ((entry_price - current_price) / entry_price) * 100
        
        # ‚ö° –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ª–µ–≤–µ—Ä–∏–¥–∂—É —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if use_leverage:
            leverage = float(position.get('leverage', LEVERAGE))
            pnl_pct = pnl_pct * leverage
        
        logging.info(f"‚úÖ [{symbol}] P&L: {side} {pnl_pct:.2f}% (entry=${entry_price}, current=${current_price}, lev={use_leverage})")
        return round(pnl_pct, 2)
        
    except Exception as e:
        symbol = position.get('symbol', 'UNKNOWN') if isinstance(position, dict) else 'UNKNOWN'
        logging.error(f"‚ùå P&L –ø–æ–º–∏–ª–∫–∞ [{symbol}]: {e}")
        return 0.0

def send_best_opportunity_signal():
    """
    üéØ –í–ò–ë–Ü–†–ö–ê –ù–ê–ô–ö–†–ê–©–û–á –ú–û–ñ–õ–ò–í–û–°–¢–Ü: –∑–∞–º—ñ—Å—Ç—å –±–∞–≥–∞—Ç—å–æ—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ - –û–î–ò–ù –Ω–∞–π–∫—Ä–∞—â–∏–π
    """
    global last_best_signal_time, best_opportunities
    
    while bot_running:
        try:
            current_time = time.time()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–∞—Å—Ç–∞–≤ —á–∞—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É
            if current_time - last_best_signal_time >= BEST_SIGNAL_INTERVAL:
                with opportunities_lock:
                    if best_opportunities:
                        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–∫—Ä–∞—â—É –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º
                        best_symbol = max(best_opportunities.keys(), 
                                         key=lambda s: best_opportunities[s]['score'])
                        best_data = best_opportunities[best_symbol]
                        
                        # –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ (—Å—Ç–∞—Ä—à—ñ 60 —Å–µ–∫—É–Ω–¥)
                        old_threshold = current_time - 60
                        fresh_opportunities = {k: v for k, v in best_opportunities.items() 
                                             if v['timestamp'] > old_threshold}
                        best_opportunities.clear()
                        best_opportunities.update(fresh_opportunities)
                        
                        # üîí –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—É–ª–¥–∞—É–Ω –¥–ª—è –Ω–∞–π–∫—Ä–∞—â–æ—ó –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ!
                        if best_data['timestamp'] > old_threshold:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–≤—ñ–∂—ñ—Å—Ç—å
                            
                            # üïí THREAD-SAFE –ö–£–õ–î–ê–£–ù: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–∏–≥–Ω–∞–ª –¥–ª—è —Ü—å–æ–≥–æ —Å–∏–º–≤–æ–ª—É
                            signal_allowed = False
                            with telegram_cooldown_lock:
                                last_signal_time = telegram_cooldown.get(best_symbol, 0)
                                time_since_last = current_time - last_signal_time
                                
                                if time_since_last >= TELEGRAM_COOLDOWN_SEC:
                                    telegram_cooldown[best_symbol] = current_time
                                    signal_allowed = True
                                else:
                                    time_left = int(TELEGRAM_COOLDOWN_SEC - time_since_last)
                                    logging.info(f"üèÜ –ù–ê–ô–ö–†–ê–©–ò–ô –°–ò–ì–ù–ê–õ –ó–ê–ë–õ–û–ö–û–í–ê–ù–û: {best_symbol} —â–µ {time_left}—Å –∫—É–ª–¥–∞—É–Ω—É")
                            
                            if signal_allowed:  # –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û –¢–Ü–õ–¨–ö–ò –Ø–ö–©–û –î–û–ó–í–û–õ–ï–ù–û
                                side = best_data['side']
                                spread = best_data['spread']
                                xt_price = best_data['xt_price']
                                dex_price = best_data['dex_price']
                                token_info = best_data['token_info']
                                
                                # üõ°Ô∏è –í–ï–†–ò–§–Ü–ö–ê–¶–Ü–Ø –°–ò–ì–ù–ê–õ–£ (—è–∫ –ø—Ä–æ—Å–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - –±–ª–æ–∫—É—î–º–æ –±–µ–∑ DEX –∞–¥—Ä–µ—Å–∏!)
                                try:
                                    from signal_parser import ArbitrageSignal
                                    from signal_verification import verify_arbitrage_signal
                                    from telegram_formatter import format_arbitrage_signal_message
                                    
                                    # –û—Ç—Ä–∏–º—É—î–º–æ clean_symbol –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
                                    clean_symbol = best_symbol.replace('/USDT:USDT', '').replace('1000', '')
                                    
                                    test_signal = ArbitrageSignal(
                                        asset=clean_symbol,
                                        action=side,
                                        spread_percent=spread,
                                        xt_price=xt_price,
                                        dex_price=dex_price,
                                        size_usd=ORDER_AMOUNT,
                                        leverage=LEVERAGE
                                    )
                                    
                                    # –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–≤–Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è–º —Å–∏–≥–Ω–∞–ª—ñ–≤ –±–µ–∑ DEX –∞–¥—Ä–µ—Å–∏
                                    verification_result = verify_arbitrage_signal(test_signal)
                                    
                                    if verification_result.valid:
                                        # ‚úÖ –°–ò–ì–ù–ê–õ –í–ê–õ–Ü–î–ù–ò–ô - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –û–ë–û–ú –ê–î–ú–Ü–ù–ê–ú + –ì–†–£–ü–Ü
                                        logging.info(f"üîç –í–ï–†–ò–§–Ü–ö–£–Æ –°–ò–ì–ù–ê–õ: {best_symbol} - –≤–∞–ª—ñ–¥–Ω–∏–π")
                                        signal_message = format_arbitrage_signal_message(test_signal, verification_result, for_group=False)
                                        send_to_admins_and_group(signal_message)
                                        
                                        logging.info(f"‚úÖ –°–ò–ì–ù–ê–õ –í–ï–†–ò–§–Ü–ö–û–í–ê–ù–û –¥–ª—è {best_symbol}: {side} —Å–ø—Ä–µ–¥={spread:.2f}% (—Ä–µ–π—Ç–∏–Ω–≥={best_data['score']:.1f})")
                                    else:
                                        # ‚ö†Ô∏è –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û FALLBACK –°–ò–ì–ù–ê–õ –û–ë–û–ú –ê–î–ú–Ü–ù–ê–ú + –ì–†–£–ü–Ü (—è–∫ –ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - –í–°–Ü —Å–∏–≥–Ω–∞–ª–∏ –º–∞—é—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏—Å—è!)
                                        logging.info(f"‚ö†Ô∏è –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û FALLBACK –°–ò–ì–ù–ê–õ –¥–ª—è {best_symbol}: {'; '.join(verification_result.errors)}")
                                        signal_message = format_arbitrage_signal_message(test_signal, verification_result, for_group=False)
                                        send_to_admins_and_group(signal_message)
                                        
                                except Exception as signal_error:
                                    logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É {best_symbol}: {signal_error}")
                                last_best_signal_time = current_time
                            
                            # –û—á–∏—â—É—î–º–æ –≤—Å—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (–Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏)
                            best_opportunities.clear()
                        
            time.sleep(5)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ send_best_opportunity_signal: {e}")
            time.sleep(10)

# üî• PnL PATCH v2.0 –ó–ê–í–ï–†–®–ï–ù–û! 
logging.info("üöÄ PnL PATCH v2.0 –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–∏–¥–∞–ª–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–æ fallback –ª–æ–≥—ñ–∫—É")

# üéØ –§–£–ù–ö–¶–Ü–á –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û–ì–û –ó–ê–ö–†–ò–¢–¢–Ø –ü–û–ó–ò–¶–Ü–ô

def compute_cross_exchange_spread(position, symbol):
    """üìä –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–ø—Ä–µ–¥—É –º—ñ–∂ –±—ñ—Ä–∂–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó"""
    try:
        arb_pair = position.get('arb_pair', 'xt-dex')
        
        if arb_pair == 'gate-dex':
            # Gate.io –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ None
            return None, None, None
                
        elif arb_pair == 'xt-dex':
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Ü—ñ–Ω–∏ XT.com —Ç–∞ DEX
            xt_ticker = xt_client.fetch_xt_ticker(xt, symbol) if xt else None
            xt_price = float(xt_ticker['last']) if xt_ticker else None
            
            dex_price = get_dex_price_simple(symbol, for_convergence=True)
            
            if xt_price and dex_price:
                spread_pct = calculate_spread(dex_price, xt_price)
                return abs(spread_pct), xt_price, dex_price
                
        elif arb_pair == 'gate-xt':
            # Gate.io –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ None
            return None, None, None
                
        return None, None, None
        
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å–ø—Ä–µ–¥—É {symbol}: {e}")
        return None, None, None

def gate_close_position_market(symbol, side, size_usdt):
    """üîí DEPRECATED: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ XT.com (Gate.io –≤–∏–¥–∞–ª–µ–Ω–æ)"""
    # üîí –ü–û–î–í–Ü–ô–ù–ò–ô –ó–ê–•–ò–°–¢: DRY_RUN + ALLOW_LIVE_TRADING
    if DRY_RUN:
        logging.info("[GATE DRY-RUN] close market %s %s %sUSDT", symbol, side, size_usdt)
        return True
    
    if not ALLOW_LIVE_TRADING:
        logging.error("[GATE SECURITY] üö® LIVE TRADING BLOCKED: ALLOW_LIVE_TRADING=False")
        return False
    
    try:
        # üîí –ö–†–ò–¢–ò–ß–ù–û: –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—É –ø–æ–∑–∏—Ü—ñ—é –∑ –±—ñ—Ä–∂—ñ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
        try:
            positions = get_xt_open_positions(xt)
            actual_position = None
            
            for pos in positions:
                if pos['symbol'] == symbol and str(pos['side']).upper() == side.upper() and pos['size'] != 0:
                    actual_position = pos
                    break
                    
            if not actual_position:
                logging.error(f"‚ùå {symbol}: –ê–∫—Ç–∏–≤–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è {side} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Gate.io")
                return False
                
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ—á–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó –∑ –±—ñ—Ä–∂—ñ (–∞ –Ω–µ USDT —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫)
            contracts = abs(float(actual_position['size']))  # üîí –ö–†–ò–¢–ò–ß–ù–û: —Ç–æ—á–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –∑ API –±—ñ—Ä–∂—ñ
            
        except Exception as e:
            logging.error(f"‚ùå {symbol}: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –∑ XT.com: {e}")
            # FALLBACK: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞—Ä–∏–π –º–µ—Ç–æ–¥ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É
            ticker = fetch_xt_ticker(xt, symbol)
            if not ticker:
                logging.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –¥–ª—è {symbol}")
                return False
            current_price = float(ticker['last'])
            contracts = round(size_usdt / current_price, 6)
        
        if contracts <= 0:
            logging.error(f"‚ùå {symbol}: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó {contracts}")
            return False
        
        # üîí –ö–†–ò–¢–ò–ß–ù–û: –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ side –ø–µ—Ä–µ–¥ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–º close_side
        side = side.upper()  # –ê–†–•–Ü–¢–ï–ö–¢–û–†: –≤–∏–ø—Ä–∞–≤–ª—è—î–º–æ case-sensitivity bug!
        logging.info(f"üîß {symbol}: –ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π side='{side}' –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω—É —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è  
        close_side = "sell" if side == "LONG" else "buy"
        logging.info(f"üîß {symbol}: –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ close_side='{close_side}' –¥–ª—è side='{side}'")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –∑ reduce-only
        # üéØ –ó–ê–ö–†–ò–í–ê–Ñ–ú–û –ù–ê –û–ë–û–• –ê–ö–ê–£–ù–¢–ê–•
        result_1 = xt_close_position_market(xt_account_1, symbol, side, size_usdt)
        result_2 = xt_close_position_market(xt_account_2, symbol, side, size_usdt)
        result = result_1 or result_2  # –£—Å–ø—ñ—à–Ω–æ —è–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∑–∞–∫—Ä–∏–≤—Å—è
        if result:
            order = {"id": f"xt-close-{int(time.time())}", "status": "filled"}
            if result_1:
                logging.info(f"‚úÖ –ê–ö–ê–£–ù–¢ 1: –ó–∞–∫—Ä–∏—Ç–æ –ø–æ–∑–∏—Ü—ñ—é {symbol} {side}")
            if result_2:
                logging.info(f"‚úÖ –ê–ö–ê–£–ù–¢ 2: –ó–∞–∫—Ä–∏—Ç–æ –ø–æ–∑–∏—Ü—ñ—é {symbol} {side}")
        else:
            order = None
        
        if order:
            # üîß –î–ï–¢–ê–õ–¨–ù–ï –õ–û–ì–£–í–ê–ù–ù–Ø –î–õ–Ø –ë–ï–ó–ü–ï–ö–ò
            logging.info(f"‚úÖ {symbol}: –£–°–ü–Ü–®–ù–ï –ó–ê–ö–†–ò–¢–¢–Ø:")
            logging.info(f"   ‚Ä¢ Side: {side} ‚Üí Close_side: {close_side}")  
            logging.info(f"   ‚Ä¢ Contracts: {contracts}")
            logging.info(f"   ‚Ä¢ Order ID: {order.get('id')}")
            logging.info(f"   ‚Ä¢ Status: {order.get('status', 'unknown')}")
            return order
        else:
            logging.error(f"‚ùå {symbol}: –ü–†–û–í–ê–õ–ï–ù–ï –ó–ê–ö–†–ò–¢–¢–Ø –ø–æ–∑–∏—Ü—ñ—ó {side}")
            logging.error(f"   ‚Ä¢ Side: {side} ‚Üí Close_side: {close_side}")
            logging.error(f"   ‚Ä¢ Contracts: {contracts}")
            return False
            
    except Exception as e:
        logging.error(f"‚ùå {symbol}: –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó Gate.io: {e}")
        return False

def close_position(symbol, position):
    """üéØ –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º API –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –±—ñ—Ä–∂—ñ"""
    try:
        exchange = position.get('exchange', 'gate')
        side = position.get('side', 'LONG')
        size_usdt = position.get('size_usdt', 0)
        
        logging.warning(f"üî• CLOSE_POSITION: symbol={symbol}, exchange={exchange}, side={side}, size_usdt={size_usdt}")
        logging.warning(f"üî• CLOSE_POSITION: xt_account_1={xt_account_1 is not None}, xt_account_2={xt_account_2 is not None}")
        
        # –¢—ñ–ª—å–∫–∏ XT.com (Gate.io –≤–∏–¥–∞–ª–µ–Ω–æ) - –ó–ê–ö–†–ò–í–ê–Ñ–ú–û –ù–ê –û–ë–û–• –ê–ö–ê–£–ù–¢–ê–•
        if xt_account_1 and xt_account_2:
            logging.warning(f"üî• CLOSE_POSITION: –í–∏–∫–ª–∏–∫–∞—î–º–æ xt_close_position_market() –¥–ª—è –ê–ö–ê–£–ù–¢–£ 1...")
            result_1 = xt_close_position_market(xt_account_1, symbol, side, size_usdt)
            logging.warning(f"üî• CLOSE_POSITION: –ê–ö–ê–£–ù–¢ 1 result={result_1}")
            
            logging.warning(f"üî• CLOSE_POSITION: –í–∏–∫–ª–∏–∫–∞—î–º–æ xt_close_position_market() –¥–ª—è –ê–ö–ê–£–ù–¢–£ 2...")
            result_2 = xt_close_position_market(xt_account_2, symbol, side, size_usdt)
            logging.warning(f"üî• CLOSE_POSITION: –ê–ö–ê–£–ù–¢ 2 result={result_2}")
            
            result = result_1 or result_2
            logging.warning(f"üî• CLOSE_POSITION: –§—ñ–Ω–∞–ª—å–Ω–∏–π result={result} (result_1={result_1}, result_2={result_2})")
            
            if result_1:
                logging.info(f"‚úÖ –ê–ö–ê–£–ù–¢ 1: –ó–∞–∫—Ä–∏—Ç–æ {symbol} {side}")
            else:
                logging.error(f"‚ùå –ê–ö–ê–£–ù–¢ 1: –ù–ï –í–î–ê–õ–û–°–Ø –∑–∞–∫—Ä–∏—Ç–∏ {symbol} {side}")
            
            if result_2:
                logging.info(f"‚úÖ –ê–ö–ê–£–ù–¢ 2: –ó–∞–∫—Ä–∏—Ç–æ {symbol} {side}")
            else:
                logging.error(f"‚ùå –ê–ö–ê–£–ù–¢ 2: –ù–ï –í–î–ê–õ–û–°–Ø –∑–∞–∫—Ä–∏—Ç–∏ {symbol} {side}")
            
            return result
        else:
            logging.error(f"‚ùå {symbol}: –ê–∫–∞—É–Ω—Ç–∏ XT –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ (xt_account_1={xt_account_1 is not None}, xt_account_2={xt_account_2 is not None})")
            return False
        
    except Exception as e:
        logging.error(f"‚ùå {symbol}: –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó: {e}")
        import traceback
        logging.error(f"‚ùå {symbol}: Traceback: {traceback.format_exc()}")
        return False

def monitor_open_positions():
    """üéØ –ú–û–ù–Ü–¢–û–†–ò–ù–ì –ü–û–ó–ò–¶–Ü–ô: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó —Ü—ñ–Ω, +5% –ø—Ä–∏–±—É—Ç–∫—É, –∞–±–æ 1-–≥–æ–¥–∏–Ω–Ω–æ–º—É —Ç–∞–π–º–µ—Ä—ñ"""
    thread_id = threading.current_thread().ident
    logging.warning(f"üéØ MONITOR-{thread_id}: –ó–∞—Ö–∏—â–µ–Ω–∏–π –ø–æ—Ç—ñ–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø–æ–∑–∏—Ü—ñ–π –∑–∞–ø—É—â–µ–Ω–æ!")
    
    while not monitor_stop_event.is_set():
        try:
            positions_to_close = []
            current_time = time.time()
            
            # –ö–æ–ø—ñ—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –∑ –∑–∞—Ö–∏—Å—Ç–æ–º –≤—ñ–¥ race conditions
            with active_positions_lock:
                current_positions = active_positions.copy()
            
            # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π –∑ –æ–±–æ—Ö XT –∞–∫–∞—É–Ω—Ç—ñ–≤
            all_exchange_positions = []
            for account_num, xt_account in [(1, xt_account_1), (2, xt_account_2)]:
                if xt_account:
                    try:
                        raw_positions = xt_account.fetch_positions()
                        xt_positions = xt_client.get_xt_open_positions(xt_account)
                        logging.info(f"üîß XT –ê–ö–ê–£–ù–¢ {account_num}: raw_positions={len(raw_positions) if raw_positions else 0}, filtered={len(xt_positions)}")
                        
                        if raw_positions and len(raw_positions) > 0:
                            logging.info(f"üìä XT –ê–ö–ê–£–ù–¢ {account_num} –ü–û–ó–ò–¶–Ü–ô: {len(raw_positions)} (–ø–µ—Ä—à—ñ 2):")
                            for i, pos in enumerate(raw_positions[:2]):
                                symbol = pos.get('symbol', '?')
                                size = pos.get('size', 0)
                                contracts = pos.get('contracts', 0)
                                notional = pos.get('notional', 0)
                                logging.info(f"   {i+1}. {symbol}: size={size}, contracts={contracts}, notional={notional}")
                            all_exchange_positions.extend(xt_positions)
                        else:
                            logging.info(f"üìä XT –ê–ö–ê–£–ù–¢ {account_num}: –ù–µ–º–∞—î raw –ø–æ–∑–∏—Ü—ñ–π –∞–±–æ –ø—É—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫")
                            
                    except Exception as e:
                        logging.error(f"‚ùå XT –ê–ö–ê–£–ù–¢ {account_num} –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–ú–ò–õ–ö–ê: {e}")
            
            # üî• –ö–†–ò–¢–ò–ß–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –∑ –æ–±–æ—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤ –≤ active_positions
            if all_exchange_positions:
                exchange_positions = all_exchange_positions 
                if exchange_positions:
                    logging.info(f"üîÑ –°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–Ø: –ó–Ω–∞–π–¥–µ–Ω–æ {len(exchange_positions)} –ø–æ–∑–∏—Ü—ñ–π –Ω–∞ XT.com")
                    
                    # –î–æ–¥–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –∑ –±—ñ—Ä–∂—ñ –¥–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö
                    with active_positions_lock:
                        for pos in exchange_positions:
                            symbol = pos['symbol']
                            side = pos['side'].upper()
                            size = pos.get('size_usdt', pos.get('size', 0))
                            entry_price = pos.get('entryPrice', 0)
                            
                            # –î–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î –≤ active_positions
                            if symbol not in active_positions:
                                current_time = time.time()
                                # üõ°Ô∏è –ó–ê–•–ò–°–¢: –Ø–∫—â–æ –±—ñ—Ä–∂–∞ –ø–æ–≤–µ—Ä—Ç–∞—î size=0, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ORDER_AMOUNT
                                safe_size = abs(size) if abs(size) > 0 else ORDER_AMOUNT
                                logging.info(f"üîß {symbol}: –±—ñ—Ä–∂–∞ size={size} ‚Üí safe_size={safe_size}")
                                active_positions[symbol] = {
                                    'symbol': symbol,
                                    'side': side,
                                    'size_usdt': safe_size,
                                    'avg_entry': entry_price,
                                    'exchange': 'xt',
                                    'status': 'open',
                                    'adds_done': 0,  # üéØ –í–ò–ü–†–ê–í–õ–ï–ù–û: –¥–æ–∑–≤–æ–ª—è—î–º–æ 1 —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
                                    'last_add_time': 0,  # –î–∞–≤–Ω—ñ–π —á–∞—Å, —â–æ–± cooldown –Ω–µ –±–ª–æ–∫—É–≤–∞–≤
                                    'entry_time': current_time,
                                    'opened_at': current_time,  # üîß –§–Ü–ö–° –¢–ê–ô–ú–ï–†–ê: –¥–æ–¥–∞–Ω–æ opened_at
                                    'expires_at': current_time + POSITION_MAX_AGE_SEC,  # üîß –§–Ü–ö–° –¢–ê–ô–ú–ï–†–ê: –¥–æ–¥–∞–Ω–æ expires_at
                                    'synced_from_exchange': True  # –ü–æ–∑–Ω–∞—á–∫–∞ —â–æ —Ü–µ –∑ –±—ñ—Ä–∂—ñ
                                }
                                logging.info(f"‚ûï –°–ò–ù–•–†–û–ù–Ü–ó–û–í–ê–ù–û: {symbol} {side} ${size:.2f} –≤—ñ–¥ XT.com")
                        
                        # –û–Ω–æ–≤–ª—é—î–º–æ current_positions –ø—ñ—Å–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
                        current_positions = active_positions.copy()
                        
            logging.info(f"üéØ MONITOR: –ü–µ—Ä–µ–≤—ñ—Ä—è—é {len(current_positions)} –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π...")
            
            if len(current_positions) == 0:
                time.sleep(30)
                continue
            
            for symbol, position in current_positions.items():
                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó —è–∫—ñ –≤–∂–µ –∑–∞–∫—Ä–∏–≤–∞—é—Ç—å—Å—è
                if position.get('status') == 'closing':
                    continue
                
                # ‚è∞ 1. –ü–ï–†–ï–í–Ü–†–ö–ê 1-–ì–û–î–ò–ù–ù–û–ì–û –¢–ê–ô–ú–ï–†–ê (–ù–ê–ô–í–ò–©–ê –ü–†–Ü–û–†–ò–¢–ï–¢–ù–Ü–°–¢–¨)
                if ENABLE_TIME_STOP:
                    expires_at = position.get('expires_at', 0)
                    opened_at = position.get('opened_at', 0)
                    logging.info(f"üîß –¢–ê–ô–ú–ï–† DEBUG [{symbol}]: current_time={current_time}, opened_at={opened_at}, expires_at={expires_at}, delta={(current_time - opened_at)/60:.1f}—Ö–≤")
                    if expires_at > 0 and current_time >= expires_at:
                        time_elapsed = (current_time - position.get('opened_at', current_time)) / 3600
                        reason = f"Time Stop 1h (—á–∞—Å: {time_elapsed:.1f}–≥–æ–¥)"
                        
                        # üöÄ –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û –ù–û–í–£ –£–ù–Ü–§–Ü–ö–û–í–ê–ù–£ P&L –§–£–ù–ö–¶–Ü–Æ
                        pnl_pct = calculate_pnl_percentage(position, use_leverage=True)
                        logging.info(f"‚è∞ [{symbol}] –¢–ê–ô–ú–ï–† P&L: {pnl_pct:.2f}%")
                        
                        # üéØ –ö–†–ê–°–ò–í–ï –°–ü–û–í–Ü–©–ï–ù–ù–Ø –ü–†–û –ó–ê–ö–†–ò–¢–¢–Ø –ó–ê –¢–ê–ô–ú–ï–†–û–ú
                        timer_signal = f"‚è∞ **–ó–ê–ö–†–ò–¢–¢–Ø –ó–ê –¢–ê–ô–ú–ï–†–û–ú 1 –ì–û–î–ò–ù–ê!**\n"\
                                     f"üìä –°–∏–º–≤–æ–ª: **{symbol.replace('/USDT:USDT', '')}** ({position['side']})\n"\
                                     f"üí∞ –†–æ–∑–º—ñ—Ä: **${position['size_usdt']:.2f}**\n"\
                                     f"‚è±Ô∏è –ß–∞—Å —É –ø–æ–∑–∏—Ü—ñ—ó: **{time_elapsed:.1f}–≥–æ–¥** (–º–∞–∫—Å–∏–º—É–º 1.0–≥–æ–¥)\n"\
                                     f"üíé P&L: **{pnl_pct:+.1f}%** (${(position['size_usdt'] * pnl_pct / 100):+.2f})\n"\
                                     f"üö™ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–∏–∑–∏–∫–æ–º\n"\
                                     f"‚è∞ –ß–∞—Å: **{time.strftime('%H:%M:%S %d.%m.%Y')}**"
                        send_to_admins_and_group(timer_signal)
                        
                        positions_to_close.append((symbol, position, reason, pnl_pct))
                        continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
                    
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —á–∞—Å —É—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó
                entry_time = position.get('entry_time', time.time())
                if time.time() - entry_time < MIN_HOLD_SEC:
                    continue
                    
                exchange = position.get('exchange', 'gate')
                side = position.get('side', 'LONG').upper()  # üîí –ö–†–ò–¢–ò–ß–ù–û: –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –¥–æ uppercase
                entry_price = position.get('avg_entry', 0)
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –±—ñ—Ä–∂—ñ
                current_price = None
                if exchange == "gate":
                    ticker = fetch_xt_ticker(xt, symbol)
                    current_price = float(ticker['last']) if ticker else None
                elif exchange == "xt" and xt:
                    ticker = xt_client.fetch_xt_ticker(xt, symbol)
                    current_price = float(ticker['last']) if ticker else None
                    
                if not current_price or not entry_price:
                    continue
                    
                # 1. –ü–ï–†–ï–í–Ü–†–ö–ê TAKE PROFIT +20% (–ó –õ–ï–í–ï–†–ò–î–ñ–ï–ú!)
                pnl_pct = calculate_pnl_percentage(position, use_leverage=True)
                if pnl_pct >= TAKE_PROFIT_PCT:
                    reason = f"TP +{pnl_pct:.1f}%"
                    positions_to_close.append((symbol, position, reason, pnl_pct))
                    continue
                
                # 1.1 –ü–ï–†–ï–í–Ü–†–ö–ê –°–¢–û–ü-–õ–û–°–° –ó –õ–ï–í–ï–†–ò–î–ñ–ï–ú (–í–ò–ü–†–ê–í–õ–ï–ù–û!)
                leverage = float(position.get('leverage', LEVERAGE))
                effective_sl_clean = STOP_LOSS_PCT / leverage  # –ï—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π –ø–æ—Ä—ñ–≥ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ PnL
                if pnl_pct <= -effective_sl_clean:
                    leveraged_pnl = pnl_pct * leverage  # –î–ª—è –ª–æ–≥—ñ–≤
                    logging.info(f"üö® SLCHK [{symbol}] pnl_clean={pnl_pct:.2f}% | lev={leverage:.0f}x | SL_clean={effective_sl_clean:.2f}% | leveraged_pnl={leveraged_pnl:.1f}% ‚Üí CLOSE")
                    reason = f"SL {pnl_pct:.1f}% ‚â§ -{effective_sl_clean:.2f}% (leveraged: {leveraged_pnl:.1f}%)"
                    positions_to_close.append((symbol, position, reason, pnl_pct))
                    continue
                
                # 1.2 –ü–ï–†–ï–í–Ü–†–ö–ê 50% –†–£–•–£ –í–Ü–î –ü–û–ß–ê–¢–ö–û–í–û–ì–û –°–ü–†–ï–î–£ (Nazir: –¥–æ–¥–∞–Ω–æ)
                if HALF_MOVE_CLOSE and position.get('entry_spread_pct'):
                    initial_spread_pct = abs(position.get('entry_spread_pct', 0))
                    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ø—Ä–µ–¥
                    spread_result = compute_cross_exchange_spread(position, symbol)
                    if spread_result[0] is not None:
                        current_spread_pct, price1, price2 = spread_result
                        current_spread_pct = abs(current_spread_pct)
                        
                        # –Ø–∫—â–æ —Å–ø—Ä–µ–¥ –∑–º–µ–Ω—à–∏–≤—Å—è –Ω–∞ 50% –≤—ñ–¥ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ
                        half_target = initial_spread_pct * HALF_MOVE_PCT  # 50% –≤—ñ–¥ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å–ø—Ä–µ–¥—É
                        spread_reduction = initial_spread_pct - current_spread_pct
                        
                        if spread_reduction >= half_target:
                            reason = f"50% —Ä—É—Ö: {initial_spread_pct:.2f}%‚Üí{current_spread_pct:.2f}% (-{spread_reduction:.2f}%)"
                            
                            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ 50% —Ä—É—Ö
                            half_move_signal = f"üéØ **50% –†–£–• –¶–Ü–ù!**\n"\
                                             f"üìä –°–∏–º–≤–æ–ª: **{symbol.replace('/USDT:USDT', '')}** ({position['side']})\n"\
                                             f"üí∞ –†–æ–∑–º—ñ—Ä: **${position['size_usdt']:.2f}**\n"\
                                             f"üìà –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–ø—Ä–µ–¥: **{initial_spread_pct:.2f}%**\n"\
                                             f"üìâ –ü–æ—Ç–æ—á–Ω–∏–π —Å–ø—Ä–µ–¥: **{current_spread_pct:.2f}%**\n"\
                                             f"‚ö° –†—É—Ö: **-{spread_reduction:.2f}%** (50% –¥–æ—Å—è–≥–Ω—É—Ç–æ)\n"\
                                             f"üíé P&L: **{pnl_pct:+.1f}%** (${(position['size_usdt'] * pnl_pct / 100):+.2f})\n"\
                                             f"‚ú® –¶—ñ–Ω–∏ –∑—ñ–π—à–ª–∏—Å—è –Ω–∞ 50%! –§—ñ–∫—Å—É—î–º–æ –ø—Ä–∏–±—É—Ç–æ–∫\n"\
                                             f"‚è∞ –ß–∞—Å: **{time.strftime('%H:%M:%S %d.%m.%Y')}**"
                            send_to_admins_and_group(half_move_signal)
                            
                            positions_to_close.append((symbol, position, reason, pnl_pct))
                            continue
                    
                # 2. –ü–ï–†–ï–í–Ü–†–ö–ê –ö–û–ù–í–ï–†–ì–ï–ù–¶–Ü–á –¶–Ü–ù (DEX –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è - –ø–æ–≤–µ—Ä–Ω—É—Ç–æ)
                logging.info(f"üéØ MONITOR [{symbol}]: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ DEX –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó... CLOSE_ON_CONVERGENCE={CLOSE_ON_CONVERGENCE}")
                if CLOSE_ON_CONVERGENCE:
                    try:
                        spread_result = compute_cross_exchange_spread(position, symbol)
                        logging.info(f"üéØ MONITOR [{symbol}]: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø—Ä–µ–¥—É: {spread_result}")
                        
                        if spread_result[0] is not None:
                            current_spread_pct, price1, price2 = spread_result
                            logging.info(f"üéØ MONITOR [{symbol}]: –ü–æ—Ç–æ—á–Ω–∏–π —Å–ø—Ä–µ–¥: {current_spread_pct:.3f}%, –ø–æ—Ä—ñ–≥: {CONVERGENCE_SPREAD_PCT}%")
                            
                            if abs(current_spread_pct) <= CONVERGENCE_SPREAD_PCT:
                                reason = f"DEX –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è {current_spread_pct:.2f}% ‚â§ {CONVERGENCE_SPREAD_PCT}%"
                                
                                # üéØ –ö–†–ê–°–ò–í–ï –°–ü–û–í–Ü–©–ï–ù–ù–Ø –ü–†–û –ö–û–ù–í–ï–†–ì–ï–ù–¶–Ü–Æ –¶–Ü–ù
                                convergence_signal = f"üéØ **–ö–û–ù–í–ï–†–ì–ï–ù–¶–Ü–Ø –¶–Ü–ù!**\n"\
                                                    f"üìä –°–∏–º–≤–æ–ª: **{symbol.replace('/USDT:USDT', '')}** ({position['side']})\n"\
                                                    f"üí∞ –†–æ–∑–º—ñ—Ä: **${position['size_usdt']:.2f}**\n"\
                                                    f"üìà –¶—ñ–Ω–∏: –ë—ñ—Ä–∂–∞ **${price1:.6f}** | Dex **${price2:.6f}**\n"\
                                                    f"üìâ –°–ø—Ä–µ–¥: **{abs(current_spread_pct):.2f}%** ‚â§ {CONVERGENCE_SPREAD_PCT}% (–∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è)\n"\
                                                    f"üíé P&L: **{pnl_pct:+.1f}%** (${(position['size_usdt'] * pnl_pct / 100):+.2f})\n"\
                                                    f"‚ú® –¶—ñ–Ω–∏ –∑—ñ–π—à–ª–∏—Å—è! –§—ñ–∫—Å—É—î–º–æ –ø—Ä–∏–±—É—Ç–æ–∫\n"\
                                                    f"‚è∞ –ß–∞—Å: **{time.strftime('%H:%M:%S %d.%m.%Y')}**"
                                send_to_admins_and_group(convergence_signal)
                                
                                positions_to_close.append((symbol, position, reason, pnl_pct))
                                continue
                        else:
                            logging.warning(f"üéØ MONITOR [{symbol}]: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø—Ä–µ–¥ –¥–ª—è –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó")
                    
                    except Exception as e:
                        logging.error(f"üéØ MONITOR [{symbol}]: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó: {e}")
                        # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó —è–∫—â–æ —î –ø–æ–º–∏–ª–∫–∞ –∑ DEX
            
            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∫—Ä–∏—Ç–µ—Ä—ñ—è–º
            for symbol, position, reason, pnl_pct in positions_to_close:
                logging.warning(f"üî• {symbol}: –°–ü–†–û–ë–ê –ó–ê–ö–†–ò–¢–¢–Ø –ü–û–ó–ò–¶–Ü–á - {reason}")
                logging.warning(f"üî• {symbol}: position data = {position}")
                
                # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –∑–∞–∫—Ä–∏—Ç—Ç—è –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–±
                with active_positions_lock:
                    if symbol in active_positions:
                        active_positions[symbol]['status'] = 'closing'
                        logging.warning(f"üî• {symbol}: –ü–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ 'closing' –≤ active_positions")
                    else:
                        logging.error(f"‚ùå {symbol}: –ù–ï –ó–ù–ê–ô–î–ï–ù–û –≤ active_positions –ø—ñ–¥ —á–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è!")
                
                # üîí CRITICAL ORDER PLACEMENT LOCK –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è (Task 6: —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–Ω–∏—Ö closes)
                logging.warning(f"üî• {symbol}: –í–∏–∫–ª–∏–∫–∞—î–º–æ close_position()...")
                with order_placement_lock:
                    result = close_position(symbol, position)
                
                logging.warning(f"üî• {symbol}: close_position() –ø–æ–≤–µ—Ä–Ω—É–≤ result={result}")
                
                if result:
                    # –£—Å–ø—ñ—à–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è - –≤–∏–¥–∞–ª—è—î–º–æ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π üîí THREAD SAFE
                    with active_positions_lock:
                        if symbol in active_positions:
                            del active_positions[symbol]
                            logging.info(f"üóëÔ∏è {symbol}: –í–∏–¥–∞–ª–µ–Ω–æ –∑ active_positions")
                            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –ø—ñ—Å–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è
                            save_positions_to_file()
                    
                    # ‚úÖ –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –ü–†–û –ó–ê–ö–†–ò–¢–¢–Ø –ü–û–ó–ò–¶–Ü–á
                    close_signal = f"‚úÖ **–ü–û–ó–ò–¶–Ü–Æ –ó–ê–ö–†–ò–¢–û!**\n"\
                                  f"üìä –°–∏–º–≤–æ–ª: **{symbol.replace('/USDT:USDT', '')}** ({position['side']})\n"\
                                  f"üí∞ –†–æ–∑–º—ñ—Ä: **${position['size_usdt']:.2f}**\n"\
                                  f"üíé P&L: **{pnl_pct:+.1f}%** (${(position['size_usdt'] * pnl_pct / 100):+.2f})\n"\
                                  f"üìù –ü—Ä–∏—á–∏–Ω–∞: **{reason}**\n"\
                                  f"‚è∞ –ß–∞—Å: **{time.strftime('%H:%M:%S %d.%m.%Y')}**"
                    send_to_admins_and_group(close_signal)
                    
                    logging.info(f"‚úÖ {symbol}: –ü–æ–∑–∏—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–æ, P&L={pnl_pct:+.1f}%")
                else:
                    # –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞—Ç—É—Å
                    with active_positions_lock:
                        if symbol in active_positions:
                            active_positions[symbol]['status'] = 'open'
                    logging.error(f"‚ùå {symbol}: –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó")
                    
                time.sleep(1)  # –ü–∞—É–∑–∞ –º—ñ–∂ –∑–∞–∫—Ä–∏—Ç—Ç—è–º–∏
                
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –º–æ–Ω—ñ—Ç–æ—Ä—ñ –ø–æ–∑–∏—Ü—ñ–π: {e}")
            
        # –ü–∞—É–∑–∞ –º—ñ–∂ —Ü–∏–∫–ª–∞–º–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É  
        monitor_stop_event.wait(timeout=MONITOR_INTERVAL_SEC)
    
    logging.warning(f"üö® MONITOR-{thread_id}: –ü–æ—Ç—ñ–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π! (stop_event={monitor_stop_event.is_set()}, bot_running={bot_running})")
    
    # üßπ CLEANUP: –û–±–Ω—É–ª—è—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Ä–µ—Ñ–µ—Ä–µ–Ω—Å –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ
    global monitor_thread
    monitor_thread = None

# üöÄ –ù–û–í–Ü –§–Ü–®–ö–ò: –†–æ–∑—É–º–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ
def calculate_volatility_indicator(symbol, exchange="xt"):
    """üìä –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–æ–ª–∞—Ç—ñ–ª—å–Ω–æ—Å—Ç—ñ - –∞–Ω–∞–ª—ñ–∑—É—î –∫–æ–ª–∏–≤–∞–Ω–Ω—è —Ü—ñ–Ω –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏"""
    try:
        if exchange == "xt" and xt:
            ticker_data = xt_client.fetch_xt_ticker(xt, symbol)
        else:
            ticker_data = fetch_ticker(xt, symbol)
            
        if not ticker_data or not ticker_data.get('high') or not ticker_data.get('low'):
            return {"status": "no_data", "volatility": 0}
            
        high_24h = float(ticker_data['high'])
        low_24h = float(ticker_data['low'])
        current_price = float(ticker_data['last'])
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å —è–∫ % –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏
        volatility_pct = ((high_24h - low_24h) / current_price) * 100
        
        # –ö–ª–∞—Å–∏—Ñ—ñ–∫—É—î–º–æ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å
        if volatility_pct < 2:
            risk_level = "LOW"
            quality_score = 8  # –ù–∏–∑—å–∫–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å = —Ö–æ—Ä–æ—à–∞ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å
        elif volatility_pct < 5:
            risk_level = "MEDIUM"  
            quality_score = 6
        elif volatility_pct < 10:
            risk_level = "HIGH"
            quality_score = 4
        else:
            risk_level = "EXTREME"
            quality_score = 1  # –í–∏—Å–æ–∫–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å = —Ä–∏–∑–∏–∫–æ–≤–∞–Ω–æ
            
        return {
            "status": "success",
            "volatility": round(volatility_pct, 2),
            "risk_level": risk_level,
            "quality_score": quality_score,
            "high_24h": high_24h,
            "low_24h": low_24h
        }
        
    except Exception as e:
        return {"status": "error", "error": str(e), "volatility": 0}

def analyze_volume_quality(symbol, dex_info, exchange="xt"):
    """üìà –ê–Ω–∞–ª—ñ–∑ —è–∫–æ—Å—Ç—ñ –æ–±'—î–º—ñ–≤ —Ç–æ—Ä–≥—ñ–≤–ª—ñ"""
    try:
        if exchange == "xt" and xt:
            ticker_data = xt_client.fetch_xt_ticker(xt, symbol)
        else:
            ticker_data = fetch_ticker(xt, symbol)
            
        if not ticker_data or not ticker_data.get('quoteVolume'):
            return {"status": "no_data", "quality": 0}
            
        # –û–±'—î–º –±—ñ—Ä–∂—ñ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏ –≤ USD
        exchange_volume_24h = float(ticker_data['quoteVolume'])
        
        # –û–±'—î–º DEX –∑ dex_info
        dex_volume_24h = dex_info.get('volume_24h', 0) if dex_info else 0
        
        # –†–∞—Ö—É—î–º–æ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç —è–∫–æ—Å—Ç—ñ –æ–±'—î–º—É
        total_volume = exchange_volume_24h + dex_volume_24h
        
        if total_volume < 10000:  # –ú–µ–Ω—à–µ $10K - –Ω–∏–∑—å–∫–∞ —è–∫—ñ—Å—Ç—å
            quality_score = 1
            volume_grade = "POOR"
        elif total_volume < 100000:  # $10K-100K - —Å–µ—Ä–µ–¥–Ω—è —è–∫—ñ—Å—Ç—å
            quality_score = 4
            volume_grade = "FAIR"
        elif total_volume < 1000000:  # $100K-1M - —Ö–æ—Ä–æ—à–∞ —è–∫—ñ—Å—Ç—å  
            quality_score = 7
            volume_grade = "GOOD"
        else:  # –ë—ñ–ª—å—à–µ $1M - –≤—ñ–¥–º—ñ–Ω–Ω–∞ —è–∫—ñ—Å—Ç—å
            quality_score = 10
            volume_grade = "EXCELLENT"
            
        return {
            "status": "success",
            "exchange_volume": exchange_volume_24h,
            "dex_volume": dex_volume_24h,
            "total_volume": total_volume,
            "quality_score": quality_score,
            "grade": volume_grade
        }
        
    except Exception as e:
        return {"status": "error", "error": str(e), "quality": 0}

def smart_entry_timing(symbol, spread_pct, volatility_data, volume_data):
    """‚è∞ –†–æ–∑—É–º–Ω–∏–π —Ç–∞–π–º–∏–Ω–≥ –≤—Ö–æ–¥—ñ–≤ - –≤–∏–∑–Ω–∞—á–∞—î –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –º–æ–º–µ–Ω—Ç –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ"""
    try:
        timing_score = 0
        reasons = []
        
        # 1. –ê–Ω–∞–ª—ñ–∑ —Å–ø—Ä–µ–¥—É - —á–∏–º –±—ñ–ª—å—à–∏–π, —Ç–∏–º –∫—Ä–∞—â–µ
        if spread_pct >= 3.0:
            timing_score += 40  # –í—ñ–¥–º—ñ–Ω–Ω–∏–π —Å–ø—Ä–µ–¥
            reasons.append(f"–í—ñ–¥–º—ñ–Ω–Ω–∏–π —Å–ø—Ä–µ–¥ {spread_pct}%")
        elif spread_pct >= 2.0:
            timing_score += 25  # –•–æ—Ä–æ—à–∏–π —Å–ø—Ä–µ–¥
            reasons.append(f"–•–æ—Ä–æ—à–∏–π —Å–ø—Ä–µ–¥ {spread_pct}%")
        elif spread_pct >= 1.0:
            timing_score += 10  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Å–ø—Ä–µ–¥
            reasons.append(f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Å–ø—Ä–µ–¥ {spread_pct}%")
        
        # 2. –í–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å - –Ω–∏–∑—å–∫–∞ –∫—Ä–∞—â–∞ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
        if volatility_data.get("quality_score", 0) >= 6:
            timing_score += 20  # –°—Ç–∞–±—ñ–ª—å–Ω–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å
            reasons.append(f"–°—Ç–∞–±—ñ–ª—å–Ω–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å {volatility_data.get('volatility', 0)}%")
        elif volatility_data.get("quality_score", 0) >= 4:
            timing_score += 10  # –ü–æ–º—ñ—Ä–Ω–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å
            reasons.append(f"–ü–æ–º—ñ—Ä–Ω–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å {volatility_data.get('volatility', 0)}%")
        
        # 3. –û–±'—î–º - –≤–∏—Å–æ–∫–∏–π –æ–±'—î–º –∫—Ä–∞—â–µ –¥–ª—è –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ
        volume_score = volume_data.get("quality_score", 0)
        if volume_score >= 7:
            timing_score += 25  # –í—ñ–¥–º—ñ–Ω–Ω–∏–π –æ–±'—î–º
            reasons.append(f"–í–∏—Å–æ–∫–∏–π –æ–±'—î–º ${volume_data.get('total_volume', 0):,.0f}")
        elif volume_score >= 4:
            timing_score += 15  # –°–µ—Ä–µ–¥–Ω—ñ–π –æ–±'—î–º
            reasons.append(f"–°–µ—Ä–µ–¥–Ω–∏–π –æ–±'—î–º ${volume_data.get('total_volume', 0):,.0f}")
        
        # 4. –ü–Ü–î–í–ò–©–ï–ù–Ü –∫—Ä–∏—Ç–µ—Ä—ñ—ó –¥–ª—è —è–∫—ñ—Å–Ω—ñ—à–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ (—è–∫ –ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)
        if timing_score >= 70:
            timing_grade = "PERFECT"  # 70+ = —ñ–¥–µ–∞–ª—å–Ω–∏–π –º–æ–º–µ–Ω—Ç
            entry_recommendation = "ENTER_NOW"
        elif timing_score >= 50:
            timing_grade = "GOOD"  # 50+ = —Ö–æ—Ä–æ—à–∏–π –º–æ–º–µ–Ω—Ç  
            entry_recommendation = "ENTER_SOON"
        elif timing_score >= 20:
            timing_grade = "FAIR"  # 20+ = —Å–µ—Ä–µ–¥–Ω—ñ–π –º–æ–º–µ–Ω—Ç
            entry_recommendation = "CONSIDER"
        else:
            # –ë–õ–û–ö–£–Ñ–ú–û —Ç—ñ–ª—å–∫–∏ –Ω–∞–π–≥—ñ—Ä—à—ñ < 20 (–¥–æ–∑–≤–æ–ª—è—î–º–æ –ú–ê–ö–°–ò–ú–£–ú —Å–∏–≥–Ω–∞–ª—ñ–≤!)  
            timing_grade = "BLOCKED"  # –ó–∞–Ω–∞–¥—Ç–æ —Å–ª–∞–±–∫–∏–π —Å–∏–≥–Ω–∞–ª
            entry_recommendation = "SKIP_SIGNAL"
            
        return {
            "status": "success",
            "timing_score": timing_score,
            "grade": timing_grade,
            "recommendation": entry_recommendation,
            "reasons": reasons
        }
        
    except Exception as e:
        return {"status": "error", "error": str(e), "timing_score": 0}

def stop_all_workers():
    """–ó—É–ø–∏–Ω–∏—Ç–∏ –≤—Å—ñ—Ö –≤–æ—Ä–∫–µ—Ä—ñ–≤"""
    global bot_running, worker_threads, monitor_thread
    logging.warning("üî¥ ADMIN STOP: –ó—É–ø–∏–Ω—è—é –≤—Å—ñ—Ö –≤–æ—Ä–∫–µ—Ä—ñ–≤ —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å...")
    bot_running = False
    
    # üõ°Ô∏è THREAD-SAFE STOP: –∑—É–ø–∏–Ω—è—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ Event
    monitor_stop_event.set()
    
    # –ó—É–ø–∏–Ω—è—î–º–æ –≤–æ—Ä–∫–µ—Ä—ñ–≤
    for thread in worker_threads:
        if thread.is_alive():
            thread.join(timeout=2)
    worker_threads.clear()
    
    # üéØ ROBUST MONITOR STOP: –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    if monitor_thread and monitor_thread.is_alive():
        logging.warning("üéØ –û—á—ñ–∫—É—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ–∫—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...")
        monitor_thread.join(timeout=5)  # –ó–±—ñ–ª—å—à–µ–Ω–æ —Ç–∞–π–º–∞—É—Ç
        if monitor_thread.is_alive():
            logging.error("üö® –ö–†–ò–¢–ò–ß–ù–û: –ü–æ—Ç—ñ–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –Ω–µ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑–∞ 5 —Å–µ–∫—É–Ω–¥!")
        else:
            logging.info("‚úÖ –ü–æ—Ç—ñ–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            monitor_thread = None  # üßπ CLEANUP: –û–±–Ω—É–ª—è—î–º–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å
    
    logging.warning("üî¥ STOP COMPLETED: –í—Å—ñ –≤–æ—Ä–∫–µ—Ä–∏ –∑—É–ø–∏–Ω–µ–Ω–æ")

def restart_workers():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ—Ö –≤–æ—Ä–∫–µ—Ä—ñ–≤"""
    global bot_running, active_positions
    logging.warning("üîÑ ADMIN RESTART: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å...")
    stop_all_workers()
    
    with active_positions_lock:  # üîí –ó–ê–•–ò–°–¢ –≤—ñ–¥ race conditions
        active_positions.clear()  # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ –ø–æ–∑–∏—Ü—ñ—ó
        logging.info(f"üóëÔ∏è –û–ß–ò–©–ï–ù–û: –í—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –ø–∞–º'—è—Ç—ñ!")
    
    # üõ°Ô∏è RESET MONITOR EVENT: –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ä—Ç—É
    monitor_stop_event.clear()
    logging.info("üîÑ RESET: Monitor stop event —Å–∫–∏–Ω—É—Ç–∏–π –¥–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç—É")
    bot_running = True
    
    logging.warning("üü¢ RESTART: –ó–∞–ø—É—Å–∫–∞—é –≤–æ—Ä–∫–µ—Ä—ñ–≤ —Ç–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥...")
    start_workers()
    start_monitor()  # üéØ –û–∫—Ä–µ–º–∏–π –∑–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É

def sync_positions_from_exchange():
    """–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –∑ –±—ñ—Ä–∂–µ—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ"""
    global active_positions
    try:
        # üîß –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û XT –ë–Ü–†–ñ–£ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø–æ–∑–∏—Ü—ñ–π
        try:
            logging.info("üîß [SAFE WRAPPER] –°–ø—Ä–æ–±–∞ 1: fetch_positions –∑ settle=usdt")
            raw_positions = xt.fetch_positions(['USDT'], {'settle': 'usdt'}) if xt else []
            exchange_positions = raw_positions if raw_positions is not None else []
            active_exchange_positions = [p for p in exchange_positions if float(p.get('contracts', 0) or 0) > 0]
            logging.info(f"‚úÖ –°–ø—Ä–æ–±–∞ 1 —É—Å–ø—ñ—à–Ω–∞: {len(active_exchange_positions)} –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π")
            exchange_positions = active_exchange_positions
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π –∑ XT –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: {e}")
            exchange_positions = []
        logging.info(f"üîç –û—Ç—Ä–∏–º–∞–Ω–æ {len(exchange_positions)} –ø–æ–∑–∏—Ü—ñ–π –∑ XT.com API")
        
        # üö® –ê–í–¢–û–û–ß–ò–©–ï–ù–ù–Ø: —è–∫—â–æ –±—ñ—Ä–∂–∞ –ø–æ–≤–µ—Ä—Ç–∞—î 0 –ø–æ–∑–∏—Ü—ñ–π, –æ—á–∏—â–∞—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—é –ø–∞–º'—è—Ç—å
        if len(exchange_positions) == 0:
            with active_positions_lock:
                if len(active_positions) > 0:
                    logging.warning(f"üßπ –ê–í–¢–û–û–ß–ò–©–ï–ù–ù–Ø: –ë—ñ—Ä–∂–∞ –ø–æ–∫–∞–∑—É—î 0 –ø–æ–∑–∏—Ü—ñ–π, –æ—á–∏—â–∞—î–º–æ {len(active_positions)} –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –ø–æ–∑–∏—Ü—ñ–π")
                    active_positions.clear()
                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
                    send_to_admins_and_group(
                                f"üßπ **–°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–Ø –ü–û–ó–ò–¶–Ü–ô**\n"
                                f"–ë—ñ—Ä–∂–∞: 0 –ø–æ–∑–∏—Ü—ñ–π\n"
                                f"–û—á–∏—â–µ–Ω–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—é –ø–∞–º'—è—Ç—å\n"
                                f"‚è∞ {time.strftime('%H:%M:%S')}")
            return 0
        synced_count = 0
        
        with active_positions_lock:  # üîí –ó–ê–•–ò–°–¢ –≤—ñ–¥ race conditions
            for i, pos in enumerate(exchange_positions):
                # –î–æ–¥–∞—Ç–∫–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                if i < 3:  # –ø–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3 –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è —Ä–æ–∑—É–º—ñ–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É
                    logging.info(f"üìä –ü–æ–∑–∏—Ü—ñ—è {i}: {pos}")
                
                # –ë–µ–∑–ø–µ—á–Ω–µ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑ –∑–∞—Ö–∏—Å—Ç–æ–º –≤—ñ–¥ None
                size_raw = pos.get('size', 0)
                contracts_raw = pos.get('contracts', 0)
                
                size = float(size_raw) if size_raw is not None else 0.0
                contracts = abs(float(str(contracts_raw))) if contracts_raw is not None else 0.0
                
                if size > 0 or contracts > 0:  # –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è (–æ–¥–∏–Ω –∑ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤)
                    symbol = pos.get('symbol', '')
                    side_value = pos.get('side', '')
                    side = 'LONG' if (side_value and side_value.lower() == 'long') else 'SHORT'
                    # –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è entry_price
                    entry_raw = pos.get('entryPrice') or pos.get('entry_price') or pos.get('markPrice') or 0
                    entry_price = float(entry_raw) if entry_raw is not None and str(entry_raw).replace('.','').replace('-','').isdigit() else 0.0
                    
                    # –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è notional
                    notional_raw = pos.get('notional') or pos.get('size_usdt') or 0
                    notional = abs(float(notional_raw)) if notional_raw is not None and str(notional_raw).replace('.','').replace('-','').isdigit() else (contracts * entry_price)
                    
                    # üõ°Ô∏è –ó–ê–•–ò–°–¢: –Ø–∫—â–æ notional=0, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ORDER_AMOUNT
                    safe_notional = notional if notional > 0 else ORDER_AMOUNT
                    logging.info(f"üîß {symbol}: –±—ñ—Ä–∂–∞ notional={notional} ‚Üí safe_notional={safe_notional}")
                    
                    # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–≥—Ä–µ–≥–æ–≤–∞–Ω—É –ø–æ–∑–∏—Ü—ñ—é –≤ –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
                    position = {
                        "side": side,
                        "avg_entry": entry_price,
                        "size_usdt": safe_notional,
                        "adds_done": 0,  # –±—ñ—Ä–∂–∞ –Ω–µ –∑–Ω–∞—î —Å–∫—ñ–ª—å–∫–∏ —É—Å–µ—Ä–µ–¥–Ω–µ–Ω—å –±—É–ª–æ
                        "last_add_price": entry_price,
                        # –§–Ü–ö–°–û–í–ê–ù–ê –¶–Ü–õ–¨: +30% –ø—Ä–∏–±—É—Ç–∫—É –∑ –ª–µ–≤–µ—Ä–∏–¥–∂–µ–º (—è–∫ –ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)
                        "tp_price": entry_price * (1 + (0.30/LEVERAGE if side == "LONG" else -0.30/LEVERAGE)),  # 30% –ø—Ä–∏–±—É—Ç–∫—É –∑ –ª–µ–≤–µ—Ä–∏–¥–∂–µ–º
                        "last_add_time": 0,  # –¥–∞–≤–Ω–æ
                        # üéØ –ù–û–í–Ü –ü–û–õ–Ø –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û–ì–û –ó–ê–ö–†–ò–¢–¢–Ø
                        "entry_time": time.time() - 3600,  # –ø—Ä–∏–±–ª–∏–∑–Ω–æ –≥–æ–¥–∏–Ω—É —Ç–æ–º—É (—ñ—Å—Ç–æ—Ä–∏—á–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è)
                        "exchange": "gate",  # –±—ñ—Ä–∂–∞ –Ω–∞ —è–∫—ñ–π –≤—ñ–¥–∫—Ä–∏—Ç–∞ –ø–æ–∑–∏—Ü—ñ—è (–∑–∞–≤–∂–¥–∏ Gate.io –≤ —Ü—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó)
                        "arb_pair": "gate-dex",  # —Ç–∏–ø –∞—Ä–±—ñ—Ç—Ä–∞–∂—É (–≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
                        "entry_spread_pct": 0.0,  # –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–ø—Ä–µ–¥ (–Ω–µ–≤—ñ–¥–æ–º–æ –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö –ø–æ–∑–∏—Ü—ñ–π)
                        "entry_ref_price": entry_price,  # —Ä–µ—Ñ–µ—Ä–µ–Ω—Ç–Ω–∞ —Ü—ñ–Ω–∞ –Ω–∞ —á–∞—Å –≤—Ö–æ–¥—É
                        "status": "open"  # —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü—ñ—ó (open/closing/closed)
                    }
                    
                    # üîí –ö–†–ò–¢–ò–ß–ù–û: –ó–ê–í–ñ–î–ò –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ—Å–Ω—É—é—á—ñ timestamps (–ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ!)
                    current_time = time.time()
                    existing_position = active_positions.get(symbol, {})
                    
                    # –§–Ü–ö–° –ë–ê–ì–£: –ó–ê–í–ñ–î–ò –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ timestamps —è–∫—â–æ –≤–æ–Ω–∏ —î
                    if existing_position.get('opened_at') and existing_position.get('opened_at') > 0:
                        position['opened_at'] = existing_position['opened_at']  # –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û –Ü–°–ù–£–Æ–ß–ò–ô!
                        logging.info(f"üîß {symbol}: –ó–±–µ—Ä–µ–∂–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏–π opened_at={existing_position['opened_at']}")
                    else:
                        position['opened_at'] = current_time - 3600  # –ø—Ä–∏–±–ª–∏–∑–Ω–æ –≥–æ–¥–∏–Ω—É —Ç–æ–º—É –¥–ª—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
                        logging.info(f"üîß {symbol}: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–∏–π opened_at={position['opened_at']}")
                    
                    if existing_position.get('expires_at') and existing_position.get('expires_at') > 0:
                        position['expires_at'] = existing_position['expires_at']  # –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û –Ü–°–ù–£–Æ–ß–ò–ô!
                        logging.info(f"üîß {symbol}: –ó–±–µ—Ä–µ–∂–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏–π expires_at={existing_position['expires_at']}")
                    else:
                        position['expires_at'] = position['opened_at'] + POSITION_MAX_AGE_SEC
                        logging.info(f"üîß {symbol}: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–∏–π expires_at={position['expires_at']}")
                    if 'xt_pair_url' not in position:
                        position['xt_pair_url'] = generate_xt_pair_url(symbol)
                    
                    active_positions[symbol] = position  # –æ–¥–∏–Ω –∑–∞–ø–∏—Å –Ω–∞ —Å–∏–º–≤–æ–ª
                    synced_count += 1
                
        logging.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ {synced_count} –ø–æ–∑–∏—Ü—ñ–π –∑ –±—ñ—Ä–∂—ñ")
        
        # üíæ –û–ë–û–í'–Ø–ó–ö–û–í–û –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –≤ —Ñ–∞–π–ª!
        if synced_count > 0:
            save_positions_to_file()
            logging.info(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {synced_count} —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π —É positions.json")
        
        return synced_count
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø–æ–∑–∏—Ü—ñ–π: {type(e).__name__}: {e}")
        return 0

def init_markets():
    global markets, trade_symbols, xt, xt_markets_available
    # ‚ùå GATE.IO –í–Ü–î–ö–õ–Æ–ß–ï–ù–û –∑–∞ –∑–∞–ø–∏—Ç–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - —Ç—ñ–ª—å–∫–∏ XT –±—ñ—Ä–∂–∞!
    # markets = load_futures_markets(gate)
    markets = {}  # –ü–æ—Ä–æ–∂–Ω—ñ Gate.io —Ä–∏–Ω–∫–∏
    
    # üöÄ –¢–Ü–õ–¨–ö–ò XT –ë–Ü–†–ñ–ê - —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ XT —è–∫ –æ—Å–Ω–æ–≤–Ω—É –±—ñ—Ä–∂—É
    try:
        if XT_API_KEY and XT_API_SECRET:
            xt = create_xt()
            xt_markets = load_xt_futures_markets(xt)
            xt_markets_available = True
            logging.info(f"üöÄ XT –±—ñ—Ä–∂–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞ —è–∫ –Ñ–î–ò–ù–ê –±—ñ—Ä–∂–∞: {len(xt_markets)} —Ä–∏–Ω–∫—ñ–≤")
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ XT —Ä–∏–Ω–∫–∏ —è–∫ –æ—Å–Ω–æ–≤–Ω—ñ
            markets = xt_markets
            # –≤–∫–ª—é—á–∞—î–º–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —É—Å—ñ XT —Ä–∏–Ω–∫–∏
            for s in markets.keys():
                trade_symbols[s] = True
                
            logging.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(markets)} —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ä –Ω–∞ XT –±—ñ—Ä–∂—ñ")
        else:
            logging.error("‚ùå XT API –∫–ª—é—á—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ - —Å–∏—Å—Ç–µ–º–∞ –ù–ï –ú–û–ñ–ï –ü–†–ê–¶–Æ–í–ê–¢–ò!")
            xt_markets_available = False
            raise Exception("XT –±—ñ—Ä–∂–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∞ - –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å XT_API_KEY —Ç–∞ XT_API_SECRET")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó XT –±—ñ—Ä–∂—ñ: {e}")
        xt_markets_available = False
        raise
    
    # üéØ –ù–æ–≤—ñ —Ñ—ñ—à–∫–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ:
    # üìä –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ, üìà –ê–Ω–∞–ª—ñ–∑ –æ–±'—î–º—ñ–≤, ‚è∞ –†–æ–∑—É–º–Ω–∏–π —Ç–∞–π–º–∏–Ω–≥
    logging.info("üéØ –ê–∫—Ç–∏–≤–Ω—ñ —Ñ—ñ—à–∫–∏: –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å, –æ–±'—î–º–∏, —Ç–∞–π–º–∏–Ω–≥ –≤—Ö–æ–¥—ñ–≤")
    logging.info("üöÄ –ù–û–í–ê –°–ò–°–¢–ï–ú–ê: XT.com vs DEX –∞—Ä–±—ñ—Ç—Ä–∞–∂ (Gate.io –í–Ü–î–ö–õ–Æ–ß–ï–ù–û)")
    
    logging.info(f"–£–≤—ñ–º–∫–Ω–µ–Ω–æ —Ç–æ—Ä–≥—ñ–≤–ª—é –¥–ª—è {len(trade_symbols)} —Å–∏–º–≤–æ–ª—ñ–≤ –Ω–∞ XT –±—ñ—Ä–∂—ñ")
    
    # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –ø–æ–∑–∏—Ü—ñ—ó –∑ XT –±—ñ—Ä–∂—ñ
    sync_positions_from_exchange()

def can_execute_on_orderbook(symbol, order_amount_usdt, depth_levels=ORDER_BOOK_DEPTH, max_slippage_pct=1.0, exchange="xt"):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –±—ñ—á–Ω—ñ –æ–±—Å—è–≥–∏ –≤ —Å—Ç–∞–∫–∞–Ω—ñ ‚Äî —Å—Ç—Ä–æ–≥–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ
    """
    try:
        if exchange == "xt" and xt:
            ob = xt_client.fetch_xt_order_book(xt, symbol, depth_levels)
            ticker = xt_client.fetch_xt_ticker(xt, symbol)
        else:
            ob = fetch_order_book(xt, symbol, depth_levels)
            ticker = fetch_xt_ticker(xt, symbol)
        last = ticker['last']
        
        if last is None or not ob or 'asks' not in ob or 'bids' not in ob:
            logging.info(f"[{symbol}] ‚ö†Ô∏è –Ü–ù–§–û: –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö order book –∞–ª–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ç–æ—Ä–≥—É–≤–∞—Ç–∏")
            return True
            
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ asks —ñ bids –æ–∫—Ä–µ–º–æ
        asks_liquidity = 0.0
        bids_liquidity = 0.0
        
        # –†–∞—Ö—É—î–º–æ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å –≤ asks (–¥–ª—è LONG –ø–æ–∑–∏—Ü—ñ–π)
        for price, vol in ob['asks'][:depth_levels]:
            asks_liquidity += float(price) * float(vol)
            
        # –†–∞—Ö—É—î–º–æ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å –≤ bids (–¥–ª—è SHORT –ø–æ–∑–∏—Ü—ñ–π)  
        for price, vol in ob['bids'][:depth_levels]:
            bids_liquidity += float(price) * float(vol)
            
        # –ë–ï–ó–ü–ï–ß–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê: –ø–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º –≤ 5 —Ä–∞–∑—ñ–≤ –±—ñ–ª—å—à–µ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ –Ω—ñ–∂ —Å—É–º–∞ –æ—Ä–¥–µ—Ä—É (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è futures!)
        min_required_liquidity = order_amount_usdt * 5
        
        asks_ok = asks_liquidity >= min_required_liquidity
        bids_ok = bids_liquidity >= min_required_liquidity
        
        # –ó–ê–í–ñ–î–ò –õ–û–ì–£–Ñ–ú–û –Ü–ù–§–û–†–ú–ê–¶–Ü–Æ –ü–†–û –õ–Ü–ö–í–Ü–î–ù–Ü–°–¢–¨
        logging.info(f"[{symbol}] üíß –õ–Ü–ö–í–Ü–î–ù–Ü–°–¢–¨: asks=${asks_liquidity:.2f} bids=${bids_liquidity:.2f} –ø–æ—Ç—Ä—ñ–±–Ω–æ>${min_required_liquidity:.2f}")
        
        if not (asks_ok and bids_ok):
            logging.warning(f"[{symbol}] ‚ùå –ë–õ–û–ö–û–í–ê–ù–ò–ô –í–•–Ü–î: –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—è –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å asks=${asks_liquidity:.2f} bids=${bids_liquidity:.2f} < ${min_required_liquidity:.2f}")
            # –ë–õ–û–ö–£–Ñ–ú–û —Ç–æ—Ä–≥—ñ–≤–ª—é –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ —è–∫ –ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            return False
        else:
            logging.info(f"[{symbol}] ‚úÖ –õ–Ü–ö–í–Ü–î–ù–Ü–°–¢–¨ –î–û–°–¢–ê–¢–ù–Ø - —Ç–æ—Ä–≥—ñ–≤–ª—è –¥–æ–∑–≤–æ–ª–µ–Ω–∞")
            return True
            
    except Exception as e:
        logging.error(f"[{symbol}] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ: {e}")
        return False



def generate_close_signal(symbol, side, close_price, tp_price, open_price):
    """
    –ì–µ–Ω–µ—Ä—É—î –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó
    """
    from datetime import datetime
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∏–±—É—Ç–∫—É
    if side == "LONG":
        profit_pct = ((close_price - open_price) / open_price) * 100
    else:
        profit_pct = ((open_price - close_price) / open_price) * 100
    
    profit_color = "üü¢" if profit_pct > 0 else "üî¥"
    status_emoji = "‚úÖ" if profit_pct > 0 else "‚ùå"
    close_reason = "TP –î–û–°–Ø–ì–ù–£–¢–û" if abs(close_price - tp_price) < 0.00001 else "–ü–û–ó–ò–¶–Ü–Æ –ó–ê–ö–†–ò–¢–û"
    
    current_time = datetime.now().strftime("%H:%M UTC")
    
    close_signal = f"""
{status_emoji} **–ü–û–ó–ò–¶–Ü–Æ –ó–ê–ö–†–ò–¢–û** {status_emoji}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìç **{symbol.replace('/USDT:USDT', '')}** | XT.COM FUTURES
üìä **{side}** | {current_time}

üíπ **–í–•–Ü–î:** ${open_price:.6f}
üèÅ **–í–ò–•–Ü–î:** ${close_price:.6f}
üéØ **TP:** ${tp_price:.6f}

{profit_color} **–†–ï–ó–£–õ–¨–¢–ê–¢:** {profit_pct:+.2f}%
üìã **–°–¢–ê–¢–£–°:** {close_reason}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ö° XT.COM Arbitrage Bot
ü§ñ –ê–≤—Ç–æ–∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó
"""
    return close_signal

def open_market_position(symbol, side, usd_amount, leverage, gate_price_ref=None, dex_price_ref=None, spread_ref=None, account_num=1):
    """
    Proxy function to XT.com - replaced Gate.io with XT.com
    –ü—ñ–¥—Ç—Ä–∏–º—É—î –æ–±–∏–¥–≤–∞ –∞–∫–∞—É–Ω—Ç–∏ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä account_num
    """
    # –í–∏–±–∏—Ä–∞—î–º–æ –∞–∫–∞—É–Ω—Ç –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ
    xt_client = xt_account_1 if account_num == 1 else xt_account_2
    return xt_open_market_position(xt_client, symbol, side, usd_amount, leverage, gate_price_ref, dex_price_ref, spread_ref)

def close_position_market(symbol, side, usd_amount, account_num=1):
    """
    Proxy function to XT.com - replaced Gate.io with XT.com
    –ü—ñ–¥—Ç—Ä–∏–º—É—î –æ–±–∏–¥–≤–∞ –∞–∫–∞—É–Ω—Ç–∏ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä account_num
    """
    # –í–∏–±–∏—Ä–∞—î–º–æ –∞–∫–∞—É–Ω—Ç –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è
    xt_client = xt_account_1 if account_num == 1 else xt_account_2
    return xt_close_position_market(xt_client, symbol, side, usd_amount)

def symbol_worker(symbol):
    """
    –†–æ–±–æ—Ç–∞ –ø–æ –æ–¥–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É –∑ —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è–º –ø–æ–∑–∏—Ü—ñ–π: fetch ticker, dex price via dexscreener, calc spread, check liquidity, open/average/close
    """
    logging.info("Worker started for %s", symbol)
    while bot_running:
        try:
            if not trade_symbols.get(symbol, False):
                time.sleep(1)
                continue

            # 1) –¢–Ü–õ–¨–ö–ò XT –ë–Ü–†–ñ–ê - –æ—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω—É –∑ XT (—è–∫ –ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)
            xt_price = None
            if not (xt_markets_available and xt):
                logging.debug(f"[{symbol}] ‚ùå XT –±—ñ—Ä–∂–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                time.sleep(SCAN_INTERVAL)
                continue
                
            try:
                xt_price = get_xt_price(xt, symbol)
                if not xt_price or not is_xt_futures_tradeable(symbol):
                    logging.debug(f"[{symbol}] ‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ —Ç–æ—Ä–≥—É–≤–∞—Ç–∏ –Ω–∞ XT futures")
                    time.sleep(SCAN_INTERVAL)
                    continue
                logging.debug(f"[{symbol}] ‚úÖ XT —Ü—ñ–Ω–∞: ${xt_price:.6f}")
            except Exception as e:
                logging.debug(f"[{symbol}] ‚ö†Ô∏è XT —Ü—ñ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
                time.sleep(SCAN_INTERVAL)
                continue

            # 2) –¢–Ü–õ–¨–ö–ò –¢–û–î–Ü DexScreener - –æ—Ç—Ä–∏–º—É—î–º–æ –†–û–ó–®–ò–†–ï–ù–Ü –ú–ï–¢–†–ò–ö–ò —è–∫ —É —Ä–æ—Å—ñ–π—Å—å–∫–æ—ó —Å–∏—Å—Ç–µ–º–∏!
            try:
                # üî¨ –†–û–ó–®–ò–†–ï–ù–ò–ô –ê–ù–ê–õ–Ü–ó: –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å, FDV, market cap, —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó, –ø–æ–∫—É–ø—Ü—ñ/–ø—Ä–æ–¥–∞–≤—Ü—ñ
                advanced_metrics = get_advanced_token_analysis(symbol)
                if not advanced_metrics:
                    logging.debug(f"[{symbol}] ‚ùå –ù–µ–º–∞—î —è–∫—ñ—Å–Ω–æ—ó –ø–∞—Ä–∏ –Ω–∞ DexScreener")
                    time.sleep(SCAN_INTERVAL)
                    continue
                    
                # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ (backward compatibility)
                token_info = {
                    'price_usd': advanced_metrics.get('price_usd', 0),
                    'liquidity': advanced_metrics.get('liquidity', 0),
                    'volume_24h': advanced_metrics.get('volume_24h', 0),
                    'dex_link': advanced_metrics.get('exact_pair_url') or get_proper_dexscreener_link(symbol)
                }
                
                # –ö–æ—Ä–æ—Ç–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–æ–∫–µ–Ω (–∑–º–µ–Ω—à–µ–Ω–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è)
                logging.info(f"üìä {symbol}: ${advanced_metrics.get('price_usd', 0):.6f} | Vol ${advanced_metrics.get('volume_1h', 0):,.0f}")
                    
                if not token_info:
                    logging.debug(f"[{symbol}] ‚ùå –ù–µ–º–∞—î —è–∫—ñ—Å–Ω–æ—ó –ø–∞—Ä–∏ –Ω–∞ DexScreener")
                    time.sleep(SCAN_INTERVAL)
                    continue
                
                dex_price = token_info['price_usd']
                
                # –ñ–û–†–°–¢–ö–Ü –ü–ï–†–ï–í–Ü–†–ö–ò (—è–∫ —É —Ç–æ–ø–æ–≤–∏—Ö –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –±–æ—Ç—ñ–≤)
                if not dex_price or dex_price < 0.000001:  # –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ $0.000001
                    raise Exception(f"Invalid DexScreener price: {dex_price}")
                    
            except Exception as e:
                # –ë–õ–û–ö–£–Ñ–ú–û —Ç–æ–∫–µ–Ω–∏ –∑ –ø–æ–≥–∞–Ω–∏–º–∏ DexScreener —Ü—ñ–Ω–∞–º–∏ - —è–∫ —É –¥—Ä—É–≥–∞ –∑ Bybit
                logging.warning(f"[{symbol}] ‚ùå –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —á–µ—Ä–µ–∑ –ø–æ–≥–∞–Ω—É DexScreener —Ü—ñ–Ω—É: {e}")
                time.sleep(SCAN_INTERVAL)
                continue

            # 3) –¢–Ü–õ–¨–ö–ò XT vs DexScreener –ê–†–ë–Ü–¢–†–ê–ñ (Gate.io –í–Ü–î–ö–õ–Æ–ß–ï–ù–û)
            if not xt_price:
                logging.debug(f"[{symbol}] ‚ùå XT —Ü—ñ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                time.sleep(SCAN_INTERVAL)
                continue
                
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–ø—Ä–µ–¥ XT vs DexScreener
            xt_dex_spread = calculate_spread(dex_price, xt_price)
            best_spread = xt_dex_spread
            best_direction = "LONG" if xt_price < dex_price else "SHORT" 
            best_exchange_pair = "XT vs Dex"
            trading_exchange = "xt"  # –ó–ê–í–ñ–î–ò —Ç–æ—Ä–≥—É—î–º–æ –Ω–∞ XT
            ref_price = xt_price  # –í–ò–ü–†–ê–í–õ–ï–ù–û: XT —Ü—ñ–Ω–∞ –¥–ª—è XT –±—ñ—Ä–∂—ñ
            
            spread_pct = best_spread
            spread_store.append(spread_pct)
            
            # –ü–æ–∫—Ä–∞—â–µ–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –∑ XT —Ç–∞ DexScreener
            clean_symbol = symbol.replace('/USDT:USDT', '')
            log_info = f"XT: ${xt_price:.6f} | Dex: ${dex_price:.6f} | –°–ø—Ä–µ–¥: {best_spread:.2f}% {best_direction} | –¢–æ—Ä–≥—É—î–º–æ –Ω–∞: XT"
            logging.info(f"[{clean_symbol}] {log_info}")
            
            # üöÄ –ù–û–í–Ü –§–Ü–®–ö–ò: –†–æ–∑—É–º–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ü–Ü–°–õ–Ø –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è trading_exchange
            volatility = calculate_volatility_indicator(symbol, trading_exchange)
            volume_analysis = analyze_volume_quality(symbol, token_info, trading_exchange)
            smart_timing = smart_entry_timing(symbol, abs(spread_pct), volatility, volume_analysis)
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ñ—ñ—à–æ–∫
            # –ê–Ω–∞–ª—ñ–∑ —è–∫–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω–∞ (–ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–º–µ–Ω—à–µ–Ω–æ)
            if volatility.get('status') == 'success' and smart_timing.get('status') == 'success':
                logging.info(f"[{clean_symbol}] üìä –í–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å: {volatility['volatility']}% | –¢–∞–π–º–∏–Ω–≥: {smart_timing['grade']}")
            
            # ‚úÖ –ü–û–í–ù–ê –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø - –ë–ï–ó –ë–õ–û–ö–ò–†–û–í–û–ö!
            enhanced_entry_check = True
            
            # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–ë–ï–ó –ë–õ–û–ö–£–í–ê–ù–ù–Ø!)
            # –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
            if volatility.get('risk_level') == 'EXTREME' and volatility.get('volatility', 0) > 30:
                logging.info(f"[{clean_symbol}] ‚ö†Ô∏è –í–∏—Å–æ–∫–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å {volatility.get('volatility', 0)}% - —Ç–æ—Ä–≥—É—î–º–æ –æ–±–µ—Ä–µ–∂–Ω–æ")
            
            # –ù–ï —Å–ø–∞–º–∏–º–æ –ø—Ä–æ –∫–æ–∂–Ω—É –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—É –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å - —Ç—ñ–ª—å–∫–∏ –ø—Ä–æ —Ä–µ–∞–ª—å–Ω—ñ —Ç–æ—Ä–≥–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó

            # 3) –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É –ø–µ—Ä–µ–¥ —Ç–æ—Ä–≥—ñ–≤–ª–µ—é
            # –ú–ê–†–ñ–ê –ó–ê –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø–ú (–∑–±—ñ–ª—å—à–µ–Ω–æ –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ –¥–æ—Ä–æ–∂—á–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏)
            required_margin = float(ORDER_AMOUNT)  # –ü—Ä–∏–º—É—Å–æ–≤–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—è –¥–æ float
            
            # üîí THREAD-SAFE –ë–ê–õ–ê–ù–° (Task 6: –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –±–∞–ª–∞–Ω—Å—É)
            try:
                with balance_check_lock:  # –ó–ê–•–ò–°–¢: —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω worker –ø–µ—Ä–µ–≤—ñ—Ä—è—î –±–∞–ª–∞–Ω—Å –æ–¥–Ω–æ—á–∞—Å–Ω–æ
                    # –í–∏–¥–∞–ª–µ–Ω–æ DEBUG –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —á–∏—Å—Ç–æ—Ç–∏
                    
                    # ‚úÖ –¢–Ü–õ–¨–ö–ò XT.COM –ë–Ü–†–ñ–ê - –û–ë–ò–î–í–ê –ê–ö–ê–£–ù–¢–ò
                    if trading_exchange == "xt":
                        # –ë–∞–ª–∞–Ω—Å –∞–∫–∞—É–Ω—Ç–∞ 1
                        balance_1 = get_xt_futures_balance(xt_account_1)
                        available_balance_1 = float(balance_1.get('free', 0.0))
                        # –ë–∞–ª–∞–Ω—Å –∞–∫–∞—É–Ω—Ç–∞ 2
                        balance_2 = get_xt_futures_balance(xt_account_2)
                        available_balance_2 = float(balance_2.get('free', 0.0))
                        # –ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∏–π –±–∞–ª–∞–Ω—Å
                        available_balance = available_balance_1 + available_balance_2
                        logging.info(f"üí∞ XT.com –ê–ö–ê–£–ù–¢ 1: ${balance_1['total']:.2f} USDT (–¥–æ—Å—Ç—É–ø–Ω–æ ${available_balance_1:.2f})")
                        logging.info(f"üí∞ XT.com –ê–ö–ê–£–ù–¢ 2: ${balance_2['total']:.2f} USDT (–¥–æ—Å—Ç—É–ø–Ω–æ ${available_balance_2:.2f})")
                        logging.info(f"üí∞ –ó–ê–ì–ê–õ–û–ú: ${balance_1['total'] + balance_2['total']:.2f} USDT (–¥–æ—Å—Ç—É–ø–Ω–æ ${available_balance:.2f})")
                    else:
                        # –Ø–∫—â–æ trading_exchange –Ω–µ XT - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
                        logging.warning(f"[{symbol}] ‚ö†Ô∏è –ü—ñ–¥—Ç—Ä–∏–º—É—î–º–æ —Ç—ñ–ª—å–∫–∏ XT –±—ñ—Ä–∂—É, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ: {trading_exchange}")
                        continue
                        
                    # –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è —É–º–æ–≤ —Ç–æ—Ä–≥—ñ–≤–ª—ñ
                    spread_check = abs(spread_pct) >= MIN_SPREAD
                    balance_check = available_balance >= required_margin
                    
                    # üîí –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –∑ –ó–ê–•–ò–°–¢–û–ú (–ø–æ–∑–∞ balance_check_lock)
                    with active_positions_lock:
                        total_positions = len(active_positions)
                        has_position = symbol in active_positions
                    positions_check = total_positions < MAX_OPEN_POSITIONS
                
                
                # üî• –ü–û–ö–†–ê–©–ï–ù–Ü –§–Ü–õ–¨–¢–†–ò –†–ï–ê–õ–¨–ù–û–°–¢–Ü - –≤—ñ–¥—Å—ñ—é—î–º–æ —Ñ–µ–π–∫–æ–≤—ñ –∞—Ä–±—ñ—Ç—Ä–∞–∂—ñ!
                is_realistic = True
                
                # 1. –†–û–ó–£–ú–ù–ò–ô —Å–ø—Ä–µ–¥ —Ñ—ñ–ª—å—Ç—Ä: —Ä—ñ–∑–Ω—ñ –ª—ñ–º—ñ—Ç–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –º–æ–Ω–µ—Ç
                clean_symbol = symbol.replace('/USDT:USDT', '')
                
                # –û—Å–Ω–æ–≤–Ω—ñ –º–æ–Ω–µ—Ç–∏ (ETH, BTC —Ç–æ—â–æ) - –±—ñ–ª—å—à –∂–æ—Ä—Å—Ç–∫—ñ –ª—ñ–º—ñ—Ç–∏
                major_tokens = ['ETH', 'BTC', 'BNB', 'ADA', 'SOL', 'MATIC', 'AVAX', 'DOT', 'LINK']
                max_spread_limit = 50.0  # –ü–û–õ–Ü–ü–®–ï–ù–û: –º–∞–∫—Å–∏–º—É–º 50% –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ñ–µ–π–∫—ñ–≤
                
                # –ñ–û–†–°–¢–ö–ê –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–µ–π–∫–æ–≤–∏—Ö —Å–ø—Ä–µ–¥—ñ–≤  
                if abs(spread_pct) > max_spread_limit:
                    logging.warning(f"[{symbol}] ‚ùå –§–ï–ô–ö: –ù–µ—Ä–µ–∞–ª—å–Ω–∏–π —Å–ø—Ä–µ–¥ {spread_pct:.2f}% > {max_spread_limit}%")
                    is_realistic = False
                
                # –ë–õ–û–ö–£–í–ê–ù–ù–Ø –ù–ï–ì–ê–¢–ò–í–ù–ò–• –°–ü–†–ï–î–Ü–í (–æ—á–µ–≤–∏–¥–Ω—ñ —Ñ–µ–π–∫–∏)
                if spread_pct < -25.0:  # –ù–µ–≥–∞—Ç–∏–≤–Ω—ñ —Å–ø—Ä–µ–¥–∏ –±—ñ–ª—å—à–µ -25% –∑–∞–≤–∂–¥–∏ —Ñ–µ–π–∫–æ–≤—ñ  
                    logging.warning(f"[{symbol}] ‚ùå –§–ï–ô–ö: –ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π —Å–ø—Ä–µ–¥ {spread_pct:.2f}% –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ")
                    is_realistic = False
                
                # 2. –†–û–ó–°–õ–ê–ë–õ–ï–ù–ê –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è —Ü—ñ–Ω –¥–ª—è –±—ñ–ª—å—à–µ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π
                price_ratio = max(xt_price, dex_price) / min(xt_price, dex_price)
                max_price_ratio = 2.5  # –†–û–ó–°–õ–ê–ë–õ–ï–ù–û: 2.5x –¥–ª—è –≤—Å—ñ—Ö –º–æ–Ω–µ—Ç –¥–ª—è –±—ñ–ª—å—à–µ —Å–∏–≥–Ω–∞–ª—ñ–≤
                
                if price_ratio > max_price_ratio:
                    logging.warning(f"[{symbol}] ‚ùå –§–ï–ô–ö: –¶—ñ–Ω–∏ –≤—ñ–¥—Ä—ñ–∑–Ω—è—é—Ç—å—Å—è –≤ {price_ratio:.2f} —Ä–∞–∑—ñ–≤ (–º–∞–∫—Å. {max_price_ratio:.1f}x)")
                    is_realistic = False
                
                # 3. –ê–ë–°–û–õ–Æ–¢–ù–ê –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–Ω –¥–ª—è —Ç–æ–ø-–º–æ–Ω–µ—Ç (—è–∫ ETH $3701 vs $4601)  
                if clean_symbol in major_tokens:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ü—ñ–Ω–¥–∏ –≤ —Ä–æ–∑—É–º–Ω–∏—Ö –º–µ–∂–∞—Ö –¥–ª—è —Ç–æ–ø-–º–æ–Ω–µ—Ç
                    expected_ranges = {
                        'ETH': (2000, 6000),    # ETH –æ—á—ñ–∫—É—î—Ç—å—Å—è $2000-6000
                        'BTC': (30000, 100000), # BTC –æ—á—ñ–∫—É—î—Ç—å—Å—è $30k-100k  
                        'BNB': (200, 1000),     # BNB –æ—á—ñ–∫—É—î—Ç—å—Å—è $200-1000
                        'SOL': (50, 500),       # SOL –æ—á—ñ–∫—É—î—Ç—å—Å—è $50-500
                        'ADA': (0.2, 3.0),      # ADA –æ—á—ñ–∫—É—î—Ç—å—Å—è $0.2-3.0
                    }
                    
                    if clean_symbol in expected_ranges:
                        min_price, max_price = expected_ranges[clean_symbol]
                        if not (min_price <= xt_price <= max_price) or not (min_price <= dex_price <= max_price):
                            logging.warning(f"[{symbol}] ‚ùå –§–ï–ô–ö: –¶—ñ–Ω–∞ –ø–æ–∑–∞ –º–µ–∂–∞–º–∏ –¥–ª—è {clean_symbol}: XT=${xt_price:.2f}, Dex=${dex_price:.2f} (–æ—á—ñ–∫—É—î—Ç—å—Å—è ${min_price}-${max_price})")
                            is_realistic = False
                
                # 4. –ñ–û–†–°–¢–ö–Ü –§–Ü–õ–¨–¢–†–ò: –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å —Ç–∞ –æ–±—Å—è–≥ –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ (—è–∫ –ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)
                min_liquidity = token_info.get('liquidity', 0)
                min_volume_24h = token_info.get('volume_24h', 0)
                
                if min_liquidity < MIN_POOLED_LIQUIDITY_USD:  # –§–Ü–õ–¨–¢–† –∑ config.py
                    logging.warning(f"[{symbol}] ‚ùå –§–ï–ô–ö: –ú–∞–ª–∞ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å ${min_liquidity:,.0f} < ${MIN_POOLED_LIQUIDITY_USD:,}")
                    is_realistic = False
                    
                if min_volume_24h < MIN_24H_VOLUME_USD:  # –§–Ü–õ–¨–¢–† –∑ config.py
                    logging.warning(f"[{symbol}] ‚ùå –§–ï–ô–ö: –ú–∞–ª–∏–π –æ–±—Å—è–≥ ${min_volume_24h:,.0f} < ${MIN_24H_VOLUME_USD:,}")
                    is_realistic = False
                
                # 5. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ü–µ –Ω–µ —Å—Ç–µ–π–±–ª–∫–æ—ó–Ω –∞–±–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —Ç–æ–∫–µ–Ω–∏
                blacklisted_tokens = ['USDT', 'USDC', 'BUSD', 'DAI', 'TUSD', 'FDUSD', 'TON']
                if any(token in clean_symbol for token in blacklisted_tokens):
                    logging.info(f"[{symbol}] ‚ùå –ó–ê–ë–õ–û–ö–û–í–ê–ù–û: –¢–æ–∫–µ–Ω {clean_symbol} –≤ —á–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É")
                    is_realistic = False
                
                # 6. –î–û–î–ê–¢–ö–û–í–û: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∞—Ç–Ω–æ—Å—Ç—ñ —Ü—ñ–Ω (–≤–∏—è–≤–ª—è—î –¥–µ—è–∫—ñ —Ñ–µ–π–∫–∏)
                if xt_price > 0 and dex_price > 0:
                    # –Ø–∫—â–æ –æ–¥–Ω–∞ —Ü—ñ–Ω–∞ —î —Ç–æ—á–Ω–∏–º –∫—Ä–∞—Ç–Ω–∏–º —ñ–Ω—à–æ—ó (x10, x100), —Ü–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ–º–∏–ª–∫–∞
                    ratio_check = xt_price / dex_price
                    if abs(ratio_check - round(ratio_check)) < 0.01 and round(ratio_check) >= 10:
                        logging.warning(f"[{symbol}] ‚ùå –§–ï–ô–ö: –ü—ñ–¥–æ–∑—Ä—é–≤–∞–Ω–µ –∫—Ä–∞—Ç–Ω–µ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è —Ü—ñ–Ω {ratio_check:.1f}x")
                        is_realistic = False
                
                # –ê–í–¢–û–°–ò–ì–ù–ê–õ–ò: –û–∫—Ä–µ–º—ñ —Å–∏–≥–Ω–∞–ª–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø–∞—Ä–∏ –±—ñ—Ä–∂ >= MIN_SPREAD
                
                # –õ–æ–≥—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ñ—ñ—à–æ–∫
                if volatility.get('status') == 'success':
                    # –ö–æ–º–ø–∞–∫—Ç–Ω–∏–π –∑–≤—ñ—Ç —è–∫–æ—Å—Ç—ñ (–∑–º–µ–Ω—à–µ–Ω–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è)
                    if volatility.get('status') == 'success' and volume_analysis.get('status') == 'success':
                        logging.info(f"[{symbol}] üìä Vol: {volatility['volatility']}% | –û–±'—î–º: ${volume_analysis['total_volume']:,.0f} | –¢–∞–π–º–∏–Ω–≥: {smart_timing.get('grade', 'N/A')}")
                
                # –ü—ñ–¥–≤–∏—â—É—î–º–æ –≤–∏–º–æ–≥–∏ –¥–æ –≤—Ö–æ–¥—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–æ–≤–∏—Ö —Ñ—ñ—à–æ–∫
                enhanced_entry_check = True
                
                # üéØ –î–û–ó–í–û–õ–ï–ù–û: –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –Ω–∞–π–≥—ñ—Ä—à–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ (–¥–æ–∑–≤–æ–ª—è—î–º–æ FAIR —Ç–∞–π–º–∏–Ω–≥)
                timing_recommendation = smart_timing.get('recommendation', 'WAIT')
                if timing_recommendation in ['SKIP_SIGNAL']:  # –¢—ñ–ª—å–∫–∏ SKIP_SIGNAL, WAIT/CONSIDER –¥–æ–∑–≤–æ–ª–µ–Ω—ñ
                    logging.warning(f"[{symbol}] ‚ùå –ë–õ–û–ö–û–í–ê–ù–ò–ô –°–ò–ì–ù–ê–õ: —Ç–∞–π–º—ñ–Ω–≥ {smart_timing.get('grade')} ({smart_timing.get('timing_score', 0)} –±–∞–ª—ñ–≤)")
                    enhanced_entry_check = False  # –ë–õ–û–ö–£–Ñ–ú–û —Ç—ñ–ª—å–∫–∏ –Ω–∞–π–≥—ñ—Ä—à—ñ —Å–∏–≥–Ω–∞–ª–∏
                
                # –ë–ª–æ–∫—É—î–º–æ –ø—Ä–∏ –µ–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ñ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
                if volatility.get('risk_level') == 'EXTREME':
                    logging.info(f"[{symbol}] üìä –Ü–ù–§–û: –í–∏—Å–æ–∫–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å {volatility.get('volatility', 0)}% –∞–ª–µ —Ç–æ—Ä–≥—É—î–º–æ –¥–∞–ª—ñ")
                    # –ë–ï–ó –ë–õ–û–ö–£–í–ê–ù–ù–Ø enhanced_entry_check –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è True
                
                # –ë–ª–æ–∫—É—î–º–æ –ø—Ä–∏ –Ω–∏–∑—å–∫–æ–º—É –æ–±'—î–º—ñ
                if volume_analysis.get('quality_score', 0) <= 1:
                    logging.warning(f"[{symbol}] üìà –ë–õ–û–ö–û–í–ê–ù–û: –ó–∞–Ω–∞–¥—Ç–æ –Ω–∏–∑—å–∫–∏–π –æ–±'—î–º ${volume_analysis.get('total_volume', 0):,.0f}")
                    enhanced_entry_check = False
                
                # üõ°Ô∏è –ü–ï–†–ï–í–Ü–†–Ø–Ñ–ú–û –Ü–°–ù–£–Æ–ß–Ü –ü–û–ó–ò–¶–Ü–á –ü–ï–†–ï–î –í–Ü–î–ü–†–ê–í–ö–û–Æ –°–ò–ì–ù–ê–õ–Ü–í
                with active_positions_lock:
                    already_has_position = symbol in active_positions

                # üéØ –ù–û–í–ê –õ–û–ì–Ü–ö–ê: –ó–ë–ò–†–ê–Ñ–ú–û –ú–û–ñ–õ–ò–í–û–°–¢–Ü –ë–ï–ó –ë–ê–õ–ê–ù–°–û–í–ò–• –û–ë–ú–ï–ñ–ï–ù–¨ –î–õ–Ø –ù–ê–ô–ö–†–ê–©–ò–• –°–ò–ì–ù–ê–õ–Ü–í
                logging.info(f"üîç –ü–ï–†–ï–í–Ü–†–ö–ê –°–ò–ì–ù–ê–õ–£ {symbol}: realistic={is_realistic}, entry_check={enhanced_entry_check}, has_position={already_has_position}")
                if is_realistic and enhanced_entry_check and not already_has_position:
                    # 1. XT vs DexScreener (–¢–Ü–õ–¨–ö–ò XT –ë–Ü–†–ñ–ê)
                    xt_dex_spread_pct = calculate_spread(dex_price, xt_price)
                    if abs(xt_dex_spread_pct) >= MIN_SPREAD:
                        current_time = time.time()
                        logging.info(f"üî• –°–ò–ì–ù–ê–õ –ó–ù–ê–ô–î–ï–ù–û: {symbol} —Å–ø—Ä–µ–¥={xt_dex_spread_pct:.2f}% (–º—ñ–Ω={MIN_SPREAD}%, –º–∞–∫—Å={MAX_SPREAD}%)")
                        
                        # üéØ –ó–ë–ò–†–ê–Ñ–ú–û –î–õ–Ø –ù–ê–ô–ö–†–ê–©–ò–• –°–ò–ì–ù–ê–õ–Ü–í (–ë–ï–ó –ö–£–õ–î–ê–£–ù –ü–ï–†–ï–í–Ü–†–ö–ò –¢–£–¢)
                        side = "LONG" if xt_dex_spread_pct > 0 else "SHORT"
                        
                        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–ª—è –ø–æ—à—É–∫—É –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ
                        liquidity = advanced_metrics.get('liquidity', 0)
                        volume_24h = advanced_metrics.get('volume_24h', 0) 
                        score = abs(xt_dex_spread_pct) * 100 + (liquidity / 1000) + (volume_24h / 10000)
                        
                        # ‚úÖ –î–û–î–ê–Ñ–ú–û –í –°–ò–°–¢–ï–ú–£ –ù–ê–ô–ö–†–ê–©–ò–• –ú–û–ñ–õ–ò–í–û–°–¢–ï–ô (–ë–ï–ó –ë–ê–õ–ê–ù–°–û–í–ò–• –û–ë–ú–ï–ñ–ï–ù–¨)
                        with opportunities_lock:
                            best_opportunities[symbol] = {
                                'spread': xt_dex_spread_pct,
                                'side': side,
                                'score': score,
                                'timestamp': current_time,
                                'xt_price': xt_price,
                                'dex_price': dex_price,
                                'token_info': token_info,
                                'advanced_metrics': advanced_metrics
                            }
                        
                        logging.info(f"[{symbol}] üèÜ –î–û–î–ê–ù–û –î–û –ù–ê–ô–ö–†–ê–©–ò–•: {side} —Å–ø—Ä–µ–¥={xt_dex_spread_pct:.2f}% (—Ä–µ–π—Ç–∏–Ω–≥={score:.1f})")
                        
                        # üö® –ù–û–í–ê –õ–û–ì–Ü–ö–ê: –ù–ï–ì–ê–ô–ù–ï –í–Ü–î–ü–†–ê–í–õ–ï–ù–ù–Ø –°–ò–ì–ù–ê–õ–£ –ù–ï–ó–ê–õ–ï–ñ–ù–û –í–Ü–î –ë–ê–õ–ê–ù–°–£!
                        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–∏–≥–Ω–∞–ª –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ (—Ç—ñ–ª—å–∫–∏ –∑ –∫—É–ª–¥–∞—É–Ω–æ–º)
                        signal_sent = False
                        
                        with telegram_cooldown_lock:  # –ö–†–ò–¢–ò–ß–ù–ê –°–ï–ö–¶–Ü–Ø
                            last_signal_time = telegram_cooldown.get(symbol, 0)
                            time_since_last = current_time - last_signal_time
                            
                            if time_since_last >= TELEGRAM_COOLDOWN_SEC:
                                signal_sent = True
                                
                                # üõ°Ô∏è –í–ï–†–ò–§–Ü–ö–ê–¶–Ü–Ø –°–ò–ì–ù–ê–õ–£ (—è–∫ –ø—Ä–æ—Å–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - –±–ª–æ–∫—É—î–º–æ –±–µ–∑ DEX –∞–¥—Ä–µ—Å–∏!)
                                logging.info(f"üîç –í–ï–†–ò–§–Ü–ö–£–Æ –°–ò–ì–ù–ê–õ: {symbol} {side} —Å–ø—Ä–µ–¥={xt_dex_spread_pct:.2f}%")
                                
                                try:
                                    # –°—Ç–≤–æ—Ä—é—î–º–æ ArbitrageSignal –æ–±'—î–∫—Ç –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
                                    from signal_parser import ArbitrageSignal
                                    from signal_verification import verify_arbitrage_signal
                                    from telegram_formatter import format_arbitrage_signal_message
                                    
                                    test_signal = ArbitrageSignal(
                                        asset=clean_symbol,
                                        action=side,
                                        spread_percent=xt_dex_spread_pct,
                                        xt_price=xt_price,
                                        dex_price=dex_price
                                    )
                                    
                                    # –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–≤–Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è–º —Å–∏–≥–Ω–∞–ª—ñ–≤ –±–µ–∑ DEX –∞–¥—Ä–µ—Å–∏
                                    verification_result = verify_arbitrage_signal(test_signal)
                                    
                                    if verification_result.valid:
                                        # ‚úÖ –°–ò–ì–ù–ê–õ –í–ê–õ–Ü–î–ù–ò–ô - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑ –ø–æ–≤–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
                                        signal_message = format_arbitrage_signal_message(test_signal, verification_result)
                                        logging.info(f"‚úÖ –°–ò–ì–ù–ê–õ –í–ï–†–ò–§–Ü–ö–û–í–ê–ù–û –¥–ª—è {symbol}: DEX –∑–Ω–∞–π–¥–µ–Ω–æ!")
                                    else:
                                        # üîÑ –°–ò–ì–ù–ê–õ –ù–ï –í–ï–†–ò–§–Ü–ö–û–í–ê–ù–û - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑ fallback –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º
                                        logging.info(f"‚ö†Ô∏è –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û FALLBACK –°–ò–ì–ù–ê–õ –¥–ª—è {symbol}: {'; '.join(verification_result.errors)}")
                                        signal_message = format_arbitrage_signal_message(test_signal, verification_result, for_group=True)
                                        # –ù–ï –±–ª–æ–∫—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑ fallback –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏!
                                    
                                except Exception as signal_error:
                                    logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Å–∏–≥–Ω–∞–ª—É {symbol}: {signal_error}")
                                    signal_sent = False
                                    signal_message = None
                        
                        # üì± –í–Ü–î–ü–†–ê–í–õ–ï–ù–ù–Ø –í TELEGRAM (–ü–û–ó–ê –õ–û–ö–û–ú) - –¢–Ü–õ–¨–ö–ò –í–ê–õ–Ü–î–ù–Ü –°–ò–ì–ù–ê–õ–ò!
                        signal_message = locals().get('signal_message', None)
                        if signal_sent and signal_message:
                            try:
                                # üéØ –¢–û–†–ì–û–í–Ü –°–ò–ì–ù–ê–õ–ò –û–ë–û–ú –ê–î–ú–Ü–ù–ê–ú + –ì–†–£–ü–Ü
                                success2 = send_to_admins_and_group(signal_message)
                                
                                if success2:
                                    # –¢–Ü–õ–¨–ö–ò –ü–Ü–°–õ–Ø –£–°–ü–Ü–®–ù–û–á –í–Ü–î–ü–†–ê–í–ö–ò –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫—É–ª–¥–∞—É–Ω
                                    with telegram_cooldown_lock:
                                        telegram_cooldown[symbol] = current_time
                                    logging.info(f"üì± –°–ò–ì–ù–ê–õ –í–Ü–î–ü–†–ê–í–õ–ï–ù–û: {symbol} {side} —Å–ø—Ä–µ–¥={xt_dex_spread_pct:.2f}% (—ñ–≥–Ω–æ—Ä—É—î–º–æ –±–∞–ª–∞–Ω—Å)")
                                else:
                                    logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ –æ–±–∏–¥–≤–∞ —á–∞—Ç–∏ {symbol}")
                                    
                            except Exception as telegram_error:
                                logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Telegram –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ {symbol}: {telegram_error}")
                        
                        # –ü–æ–∫–∞–∑—É—î–º–æ –∫—É–ª–¥–∞—É–Ω —è–∫—â–æ —Å–∏–≥–Ω–∞–ª –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π
                        if not signal_sent:
                            with telegram_cooldown_lock:
                                last_signal_time = telegram_cooldown.get(symbol, 0)
                                time_since_last = current_time - last_signal_time
                                if time_since_last < TELEGRAM_COOLDOWN_SEC:
                                    time_left = int(TELEGRAM_COOLDOWN_SEC - time_since_last)
                                    logging.info(f"[{symbol}] ‚è∞ –ö–£–õ–î–ê–£–ù: —â–µ {time_left}—Å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É")
                        
                        # üîÑ –°–¢–ê–†–ê –õ–û–ì–Ü–ö–ê: –¢—ñ–ª—å–∫–∏ –¥–ª—è –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ç–æ—Ä–≥—É–≤–∞–Ω–Ω—è (–∑ –±–∞–ª–∞–Ω—Å–æ–≤–∏–º–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è–º–∏)
                        # –ü–†–ò–ú–£–°–û–í–ê –ú–ê–†–ñ–ê $5: –∫—É–ø—É—î–º–æ —á–∞—Å—Ç–∫–æ–≤–æ –¥–ª—è –±—É–¥—å-—è–∫–æ—ó –º–æ–Ω–µ—Ç–∏  
                        # –ó–∞–≤–∂–¥–∏ —Ç–æ—Ä–≥—É—î–º–æ –Ω–∞ –§–Ü–ö–°–û–í–ê–ù–£ –º–∞—Ä–∂—É $5.00 (–º–æ–∂–Ω–∞ –∫—É–ø–∏—Ç–∏ —á–∞—Å—Ç–∏–Ω—É –º–æ–Ω–µ—Ç–∏)
                        
                        time.sleep(5)
                    
                    # 2. XT vs DexScreener (—è–∫—â–æ XT –¥–æ—Å—Ç—É–ø–Ω–∞)
                    if xt_price:
                        xt_dex_spread_pct = calculate_spread(dex_price, xt_price)
                        if abs(xt_dex_spread_pct) >= MIN_SPREAD:
                            # –ü–†–ò–ú–£–°–û–í–ê –ú–ê–†–ñ–ê $5: –∫—É–ø—É—î–º–æ —á–∞—Å—Ç–∫–æ–≤–æ –¥–ª—è –±—É–¥—å-—è–∫–æ—ó –º–æ–Ω–µ—Ç–∏
                            # –ó–∞–≤–∂–¥–∏ —Ç–æ—Ä–≥—É—î–º–æ –Ω–∞ –§–Ü–ö–°–û–í–ê–ù–£ –º–∞—Ä–∂—É $5.00 (–º–æ–∂–Ω–∞ –∫—É–ø–∏—Ç–∏ —á–∞—Å—Ç–∏–Ω—É –º–æ–Ω–µ—Ç–∏)
                            # üïí THREAD-SAFE –ö–£–õ–î–ê–£–ù: —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–ª—è –±–∞–≥–∞—Ç–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—ñ
                            current_time = time.time()
                            signal_sent = False
                            
                            with telegram_cooldown_lock:  # –ö–†–ò–¢–ò–ß–ù–ê –°–ï–ö–¶–Ü–Ø  
                                last_signal_time = telegram_cooldown.get(symbol, 0)
                                time_since_last = current_time - last_signal_time
                                
                                if time_since_last >= TELEGRAM_COOLDOWN_SEC:
                                    telegram_cooldown[symbol] = current_time  # –û–¥—Ä–∞–∑—É –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å
                                    signal_sent = True
                                else:
                                    time_left = int(TELEGRAM_COOLDOWN_SEC - time_since_last)
                                    logging.info(f"[{symbol}] ‚è∞ –°–ü–Ü–õ–¨–ù–ò–ô –ö–£–õ–î–ê–£–ù: —â–µ {time_left}—Å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É")
                            
                            # üéØ –í–ò–î–ê–õ–ï–ù–û –î–£–ë–õ–Ü–ö–ê–¢: —Ü–µ–π –±–ª–æ–∫ –¥—É–±–ª—é–≤–∞–≤ –ª–æ–≥—ñ–∫—É –∑ —Ä—è–¥–∫—ñ–≤ –≤–∏—â–µ
                            # –ó–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Å–∏—Å—Ç–µ–º—É –Ω–∞–π–∫—Ä–∞—â–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤
                        
                        # –í–ò–î–ê–õ–ï–ù–û: –º—ñ–∂–±—ñ—Ä–∂–æ–≤–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂ Gate ‚Üî XT (–∑–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ DEX –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è)
                elif already_has_position:
                    logging.info(f"[{symbol}] ‚èπÔ∏è –ü–†–û–ü–£–°–ö–ê–Ñ–ú–û –°–ò–ì–ù–ê–õ: –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è")
                elif abs(spread_pct) >= MIN_SPREAD and not is_realistic:
                    logging.warning(f"[{symbol}] ‚ùå –ë–õ–û–ö–û–í–ê–ù–ò–ô –§–ï–ô–ö: —Å–ø—Ä–µ–¥={spread_pct:.2f}%")
                
                # –†–ï–ê–õ–¨–ù–ê –¢–û–†–ì–Ü–í–õ–Ø –ó –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø–ú
                if spread_check and balance_check and not DRY_RUN and is_realistic:
                    side = "LONG" if spread_pct > 0 else "SHORT"
                    
                    # –õ–æ–≥—ñ–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –≤—Ö–æ–¥—É –∞–±–æ —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è
                    if not has_position and positions_check:
                        # –ë–ê–ó–û–í–ò–ô –í–•–Ü–î: –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –Ω–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é
                        logging.info(f"[{symbol}] üéØ –ë–ê–ó–û–í–ò–ô –í–•–Ü–î: spread={abs(spread_pct):.3f}% >= {MIN_SPREAD}%, –±–∞–ª–∞–Ω—Å={available_balance:.4f} >= {required_margin:.4f}, –ø–æ–∑–∏—Ü—ñ–π={total_positions} < {MAX_OPEN_POSITIONS}")

                        # –°–¢–†–û–ì–ê –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ order book –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –±—ñ—Ä–∂—ñ
                        ok_liq = can_execute_on_orderbook(symbol, ORDER_AMOUNT, ORDER_BOOK_DEPTH, exchange=trading_exchange)
                        
                        # üîç –î–û–î–ê–¢–ö–û–í–ê –ü–ï–†–ï–í–Ü–†–ö–ê XT order book –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ (—Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –¥–ª—è XT.com)
                        if ok_liq and trading_exchange == "xt":
                            # –í–ò–ü–†–ê–í–õ–ï–ù–û: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ notional size (–º–∞—Ä–∂–∞ * –ª–µ–≤–µ—Ä–∏–¥–∂) –∑–∞–º—ñ—Å—Ç—å —Ç—ñ–ª—å–∫–∏ –º–∞—Ä–∂—ñ
                            notional_size = ORDER_AMOUNT * LEVERAGE
                            current_side = "LONG" if spread_pct > 0 else "SHORT"  # –Ø–≤–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î–º–æ side
                            can_trade_xt, xt_liquidity_info = analyze_xt_order_book_liquidity(xt, symbol, current_side, notional_size, min_liquidity_ratio=2.0)
                            if not can_trade_xt:
                                logging.warning(f"[{symbol}] {xt_liquidity_info}")
                                ok_liq = False
                            else:
                                logging.info(f"[{symbol}] {xt_liquidity_info}")
                        
                        if ok_liq:
                            # –ü–†–ò–ú–£–°–û–í–ï –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–µ–≤–µ—Ä–∏–¥–∂—É –ü–ï–†–ï–î –∫–æ–∂–Ω–æ—é —É–≥–æ–¥–æ—é
                            if trading_exchange == "xt":
                                try:
                                    # –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–∫–ª–∏–∫ –∑ positionSide
                                    position_side = "LONG" if side == "LONG" else "SHORT"
                                    xt.set_leverage(LEVERAGE, symbol, {"positionSide": position_side})
                                    logging.info(f"[{symbol}] ‚öôÔ∏è XT: –ü–†–ò–ú–£–°–û–í–û –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–µ–≤–µ—Ä–∏–¥–∂ {LEVERAGE}x ({position_side})")
                                except Exception as e:
                                    logging.error(f"[{symbol}] ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–µ–≤–µ—Ä–∏–¥–∂—É XT: {e}")
                                    # –ù–µ –±–ª–æ–∫—É—î–º–æ —Ç–æ—Ä–≥—ñ–≤–ª—é, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ
                                    pass
                                    
                                # üîí ORDER PLACEMENT LOCK (Task 6: –∑–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–æ–¥–≤—ñ–π–Ω–∏–º –æ—Ä–¥–µ—Ä–∞–º)
                                with order_placement_lock:
                                    # üéØ –ü–ê–†–ê–õ–ï–õ–¨–ù–ê –¢–û–†–ì–Ü–í–õ–Ø –ù–ê –î–í–û–• –ê–ö–ê–£–ù–¢–ê–•
                                    order_account_1 = xt_open_market_position(xt_account_1, symbol, side, ORDER_AMOUNT, LEVERAGE, ref_price, dex_price, spread_pct)
                                    order_account_2 = xt_open_market_position(xt_account_2, symbol, side, ORDER_AMOUNT, LEVERAGE, ref_price, dex_price, spread_pct)
                                    # –í–≤–∞–∂–∞—î–º–æ —É—Å–ø—ñ—à–Ω–∏–º —è–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∞–∫–∞—É–Ω—Ç –≤—ñ–¥–∫—Ä–∏–≤ –ø–æ–∑–∏—Ü—ñ—é
                                    order = order_account_1 or order_account_2
                                    if order_account_1:
                                        logging.info(f"[{symbol}] ‚úÖ –ê–ö–ê–£–ù–¢ 1: –í—ñ–¥–∫—Ä–∏—Ç–æ {side} –ø–æ–∑–∏—Ü—ñ—é –∑ –ª–µ–≤–µ—Ä–∏–¥–∂–µ–º {LEVERAGE}x")
                                    if order_account_2:
                                        logging.info(f"[{symbol}] ‚úÖ –ê–ö–ê–£–ù–¢ 2: –í—ñ–¥–∫—Ä–∏—Ç–æ {side} –ø–æ–∑–∏—Ü—ñ—é –∑ –ª–µ–≤–µ—Ä–∏–¥–∂–µ–º {LEVERAGE}x")
                            else:
                                order = None
                            if order:
                                    logging.info(f"[{symbol}] üöÄ XT: –í—ñ–¥–∫—Ä–∏—Ç–æ {side} –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –æ–±–æ—Ö –∞–∫–∞—É–Ω—Ç–∞—Ö –∑ –ª–µ–≤–µ—Ä–∏–¥–∂–µ–º {LEVERAGE}x")
                            # ‚ùå GATE.IO –í–Ü–î–ö–õ–Æ–ß–ï–ù–û - —Ç—ñ–ª—å–∫–∏ XT –±—ñ—Ä–∂–∞!
                            # else:  # gate (–í–Ü–î–ö–õ–Æ–ß–ï–ù–û)
                            #     order = open_market_position(symbol, side, ORDER_AMOUNT, LEVERAGE, gate_price, dex_price, spread_pct)
                            if order:
                                # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–≥—Ä–µ–≥–æ–≤–∞–Ω—É –ø–æ–∑–∏—Ü—ñ—é
                                entry_price = ref_price  # –ó–∞–≤–∂–¥–∏ XT —Ü—ñ–Ω–∞
                                # –§–Ü–ö–°–û–í–ê–ù–ê –¶–Ü–õ–¨: +30% –ø—Ä–∏–±—É—Ç–∫—É –∑ –ª–µ–≤–µ—Ä–∏–¥–∂–µ–º (—è–∫ –ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)
                                if side == "LONG":
                                    tp_price = entry_price * (1 + 0.30 / LEVERAGE)  # 30% –ø—Ä–∏–±—É—Ç–∫—É –∑ –ª–µ–≤–µ—Ä–∏–¥–∂–µ–º
                                else:  # SHORT
                                    tp_price = entry_price * (1 - 0.30 / LEVERAGE)  # 30% –ø—Ä–∏–±—É—Ç–∫—É –∑ –ª–µ–≤–µ—Ä–∏–¥–∂–µ–º
                                position = {
                                    "side": side,
                                    "avg_entry": entry_price,
                                    "size_usdt": ORDER_AMOUNT,
                                    "adds_done": 0,
                                    "last_add_price": entry_price,
                                    "tp_price": tp_price,
                                    "last_add_time": time.time(),
                                    "exchange": trading_exchange,  # –ó–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ –Ω–∞ —è–∫—ñ–π –±—ñ—Ä–∂—ñ —Ç–æ—Ä–≥—É—î–º–æ
                                    # üéØ –ù–û–í–Ü –ü–û–õ–Ø –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û–ì–û –ó–ê–ö–†–ò–¢–¢–Ø
                                    "entry_time": time.time(),  # —á–∞—Å –≤—Ö–æ–¥—É –≤ –ø–æ–∑–∏—Ü—ñ—é
                                    "arb_pair": f"{trading_exchange}-dex",  # —Ç–∏–ø –∞—Ä–±—ñ—Ç—Ä–∞–∂—É (gate-dex –∞–±–æ xt-dex)
                                    "entry_spread_pct": spread_pct,  # –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–ø—Ä–µ–¥
                                    "entry_ref_price": dex_price,  # —Ä–µ—Ñ–µ—Ä–µ–Ω—Ç–Ω–∞ —Ü—ñ–Ω–∞ DEX –Ω–∞ —á–∞—Å –≤—Ö–æ–¥—É
                                    "status": "open"  # —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü—ñ—ó (open/closing/closed)
                                }
                                # üîí –ó–ê–•–ò–°–¢: –¢—ñ–ª—å–∫–∏ –¥–ª—è –ù–û–í–ò–• –ø–æ–∑–∏—Ü—ñ–π –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–µ—Ä–∏
                                current_time = time.time()
                                existing_position = active_positions.get(symbol, {})
                                if 'opened_at' not in existing_position or existing_position.get('opened_at', 0) <= 0:
                                    position['opened_at'] = current_time
                                else:
                                    position['opened_at'] = existing_position['opened_at']  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ—Å–Ω—É—é—á–∏–π!
                                if 'expires_at' not in existing_position or existing_position.get('expires_at', 0) <= 0:
                                    position['expires_at'] = position['opened_at'] + POSITION_MAX_AGE_SEC
                                else:
                                    position['expires_at'] = existing_position['expires_at']  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ—Å–Ω—É—é—á–∏–π!
                                position['xt_pair_url'] = generate_xt_pair_url(symbol)
                                
                                with active_positions_lock:
                                    active_positions[symbol] = position
                                
                                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
                                save_positions_to_file()
                                
                                # üì± –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û –ü–†–û–§–ï–°–Ü–ô–ù–ï –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –ü–†–û –í–Ü–î–ö–†–ò–¢–¢–Ø –ü–û–ó–ò–¶–Ü–á
                                try:
                                    from telegram_formatter import format_position_opened_message
                                    opened_message = format_position_opened_message(
                                        symbol=symbol,
                                        side=side,
                                        entry_price=ref_price,
                                        size_usd=ORDER_AMOUNT,
                                        leverage=LEVERAGE,
                                        spread_percent=spread_pct
                                    )
                                    send_to_admins_and_group(opened_message)
                                    logging.info(f"üì± –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ Telegram –ø—Ä–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è {symbol}")
                                except Exception as e:
                                    logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Telegram: {e}")
                                
                                logging.info("Opened %s on %s avg_entry=%.6f tp=%.6f", side, symbol, ref_price, tp_price)
                    
                    elif has_position and AVERAGING_ENABLED:
                        # üîí –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø: –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –∑ –∑–∞—Ö–∏—Å—Ç–æ–º
                        with active_positions_lock:
                            position = active_positions[symbol].copy()  # –ö–æ–ø—ñ—é—î–º–æ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∑–º—ñ–Ω –ø—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏
                        current_time = time.time()
                        cooldown_passed = (current_time - position.get('last_add_time', 0)) >= AVERAGING_COOLDOWN_SEC
                        can_add_more = position.get('adds_done', 0) < AVERAGING_MAX_ADDS
                        
                        # üîç –î–ï–¢–ê–õ–¨–ù–ï –õ–û–ì–£–í–ê–ù–ù–Ø –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                        logging.info(f"[{symbol}] üîç –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: adds_done={position.get('adds_done', 0)}, max_adds={AVERAGING_MAX_ADDS}, can_add_more={can_add_more}, cooldown_passed={cooldown_passed}")
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ —Å–∏–º–≤–æ–ª
                        position_size_ok = position['size_usdt'] < MAX_POSITION_USDT_PER_SYMBOL
                        
                        # üéØ –Ø–í–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –í–°–Ü–• –£–ú–û–í –¥–ª—è —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è (—è–∫ –ø—Ä–æ—Å–∏–≤ architect)
                        if AVERAGING_ENABLED and can_add_more and cooldown_passed and position_size_ok:
                            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü—ñ–Ω–∞ –π–¥–µ –ø—Ä–æ—Ç–∏ –ø–æ–∑–∏—Ü—ñ—ó
                            avg_entry = position['avg_entry']
                            should_average = False
                            
                            if position['side'] == "LONG" and side == "LONG":
                                # LONG –ø–æ–∑–∏—Ü—ñ—è: —É—Å–µ—Ä–µ–¥–Ω—é—î–º–æ —è–∫—â–æ —Ü—ñ–Ω–∞ –≤–ø–∞–ª–∞
                                adverse_threshold = avg_entry * (1 - AVERAGING_THRESHOLD_PCT / 100)
                                should_average = xt_price <= adverse_threshold
                            elif position['side'] == "SHORT" and side == "SHORT":
                                # SHORT –ø–æ–∑–∏—Ü—ñ—è: —É—Å–µ—Ä–µ–¥–Ω—é—î–º–æ —è–∫—â–æ —Ü—ñ–Ω–∞ –≤–∏—Ä–æ—Å–ª–∞
                                adverse_threshold = avg_entry * (1 + AVERAGING_THRESHOLD_PCT / 100)
                                should_average = xt_price >= adverse_threshold
                            
                            if should_average:
                                # üéØ –ñ–û–†–°–¢–ö–ê –ü–ï–†–ï–í–Ü–†–ö–ê –õ–Ü–ú–Ü–¢–Ü–í: –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É—î–º–æ MAX_POSITION_USDT_PER_SYMBOL
                                remaining_capacity = MAX_POSITION_USDT_PER_SYMBOL - position['size_usdt']
                                
                                if remaining_capacity <= 0:
                                    logging.warning(f"[{symbol}] ‚ùå –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø –ó–ê–ë–õ–û–ö–û–í–ê–ù–û: –ø–æ–∑–∏—Ü—ñ—è –¥–æ—Å—è–≥–ª–∞ –º–∞–∫—Å–∏–º—É–º—É ${MAX_POSITION_USDT_PER_SYMBOL:.2f}, –ø–æ—Ç–æ—á–Ω–∏–π —Ä–æ–∑–º—ñ—Ä=${position['size_usdt']:.2f}")
                                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è
                                
                                # üõ°Ô∏è –¢–û–ß–ù–ò–ô –†–û–ó–†–ê–•–£–ù–û–ö: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π ORDER_AMOUNT, –∞–ª–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç–∏
                                if remaining_capacity < ORDER_AMOUNT:
                                    logging.warning(f"[{symbol}] ‚ùå –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø –°–ö–ê–°–û–í–ê–ù–û: –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º—ñ—Å—Ü—è –¥–ª—è ORDER_AMOUNT=${ORDER_AMOUNT:.2f}, –∑–∞–ª–∏—à–æ–∫=${remaining_capacity:.2f}")
                                    continue
                                if available_balance < ORDER_AMOUNT:
                                    logging.warning(f"[{symbol}] ‚ùå –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø –°–ö–ê–°–û–í–ê–ù–û: –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª–∞–Ω—Å—É –¥–ª—è ORDER_AMOUNT=${ORDER_AMOUNT:.2f}, –±–∞–ª–∞–Ω—Å=${available_balance:.2f}")
                                    continue
                                
                                # üéØ –ó–ê–í–ñ–î–ò –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û –§–Ü–ö–°–û–í–ê–ù–ò–ô ORDER_AMOUNT –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
                                add_size = ORDER_AMOUNT
                                
                                logging.info(f"[{symbol}] üìà –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø –†–û–ó–†–ê–•–£–ù–û–ö: –ø–æ—Ç–æ—á–Ω–∏–π_—Ä–æ–∑–º—ñ—Ä=${position['size_usdt']:.2f}, –º–∞–∫—Å=${MAX_POSITION_USDT_PER_SYMBOL:.2f}, –∑–∞–ª–∏—à–æ–∫=${remaining_capacity:.2f}, –¥–æ–¥–∞—î–º–æ=${add_size:.2f}")
                                
                                # –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø –¢–Ü–õ–¨–ö–ò –Ø–ö–©–û –Ñ –î–û–°–¢–ê–¢–ù–¨–û –ú–Ü–°–¶–Ø –¢–ê –ë–ê–õ–ê–ù–°–£!
                                if add_size >= 1.0:  # –ú—ñ–Ω—ñ–º—É–º $1.00 –¥–ª—è –æ—Ä–¥–µ—Ä–∞
                                    logging.info(f"[{symbol}] üìà –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø: {position['side']} add_size=${add_size:.2f}, —Ü—ñ–Ω–∞={xt_price:.6f} vs avg={avg_entry:.6f}, —Å–ø—Ä–µ–¥={abs(spread_pct):.3f}%")
                                    
                                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ –¥–ª—è —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –±—ñ—Ä–∂—ñ
                                    ok_liq = can_execute_on_orderbook(symbol, add_size, ORDER_BOOK_DEPTH, exchange=trading_exchange)
                                    
                                    # üîç –î–û–î–ê–¢–ö–û–í–ê –ü–ï–†–ï–í–Ü–†–ö–ê XT order book –¥–ª—è —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è
                                    if ok_liq and trading_exchange == "xt":
                                        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ notional size –¥–ª—è —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è
                                        avg_notional_size = add_size * LEVERAGE
                                        can_avg_xt, xt_avg_info = analyze_xt_order_book_liquidity(xt, symbol, position['side'], avg_notional_size, min_liquidity_ratio=2.0)
                                        if not can_avg_xt:
                                            logging.warning(f"[{symbol}] –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø: {xt_avg_info}")
                                            ok_liq = False
                                        else:
                                            logging.info(f"[{symbol}] –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø: {xt_avg_info}")
                                    
                                    if ok_liq:
                                        # –ü–†–ò–ú–£–°–û–í–ï –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–µ–≤–µ—Ä–∏–¥–∂—É –ü–ï–†–ï–î —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è–º
                                        if trading_exchange == "xt":
                                            try:
                                                xt.set_leverage(LEVERAGE, symbol)
                                                logging.info(f"[{symbol}] ‚öôÔ∏è XT: –ü–†–ò–ú–£–°–û–í–û –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–µ–≤–µ—Ä–∏–¥–∂ {LEVERAGE}x –¥–ª—è —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è")
                                            except Exception as e:
                                                logging.error(f"[{symbol}] ‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–µ–≤–µ—Ä–∏–¥–∂—É XT –ø—Ä–∏ —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—ñ: {e}")
                                                pass
                                                
                                            # üîí ORDER PLACEMENT LOCK –¥–ª—è —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è (Task 6: –∑–∞–ø–æ–±—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–Ω–∏–º –æ—Ä–¥–µ—Ä–∞–º)
                                            with order_placement_lock:
                                                order = xt_open_market_position(xt, symbol, position['side'], add_size, LEVERAGE, ref_price, dex_price, spread_pct)
                                            current_price = ref_price  # –ó–∞–≤–∂–¥–∏ XT —Ü—ñ–Ω–∞
                                        else:
                                            order = None
                                            current_price = ref_price
                                        # ‚ùå GATE.IO –í–Ü–î–ö–õ–Æ–ß–ï–ù–û - —Ç—ñ–ª—å–∫–∏ XT –±—ñ—Ä–∂–∞!
                                        # else:  # gate (–í–Ü–î–ö–õ–Æ–ß–ï–ù–û)
                                        #     order = open_market_position(symbol, position['side'], add_size, LEVERAGE, gate_price, dex_price, spread_pct)
                                        if order:
                                            # üîí –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–≥—Ä–µ–≥–æ–≤–∞–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó –∑ –∑–∞—Ö–∏—Å—Ç–æ–º
                                            with active_positions_lock:
                                                if symbol in active_positions:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –ø–æ–∑–∏—Ü—ñ—è —â–µ —ñ—Å–Ω—É—î
                                                    current_position = active_positions[symbol]
                                                    new_size = current_position['size_usdt'] + add_size
                                                    new_avg_entry = (current_position['avg_entry'] * current_position['size_usdt'] + current_price * add_size) / new_size
                                                else:
                                                    logging.warning(f"[{symbol}] –ü–æ–∑–∏—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è")
                                                    continue
                                                    # –§–Ü–ö–°–û–í–ê–ù–ê –¶–Ü–õ–¨: +30% –ø—Ä–∏–±—É—Ç–∫—É –∑ –ª–µ–≤–µ—Ä–∏–¥–∂–µ–º (—è–∫ –ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)
                                                    if current_position['side'] == "LONG":
                                                        new_tp_price = new_avg_entry * (1 + 0.30 / LEVERAGE)  # 30% –ø—Ä–∏–±—É—Ç–∫—É –∑ –ª–µ–≤–µ—Ä–∏–¥–∂–µ–º
                                                    else:  # SHORT
                                                        new_tp_price = new_avg_entry * (1 - 0.30 / LEVERAGE)  # 30% –ø—Ä–∏–±—É—Ç–∫—É –∑ –ª–µ–≤–µ—Ä–∏–¥–∂–µ–º
                                                    
                                                    active_positions[symbol].update({
                                                        'avg_entry': new_avg_entry,
                                                        'size_usdt': new_size,
                                                        'adds_done': current_position['adds_done'] + 1,
                                                        'last_add_price': ref_price,
                                                        'tp_price': new_tp_price,
                                                        'last_add_time': current_time
                                                    })
                                                    
                                                    # üîç –î–ï–¢–ê–õ–¨–ù–ï –õ–û–ì–£–í–ê–ù–ù–Ø –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó  
                                                    logging.info(f"‚úÖ –ü–û–ó–ò–¶–Ü–Ø –û–ù–û–í–õ–ï–ù–ê: adds_done {current_position['adds_done']} -> {current_position['adds_done'] + 1}, —Ä–æ–∑–º—ñ—Ä ${current_position['size_usdt']:.2f} -> ${new_size:.2f}")
                                            
                                            # üîç –í–ò–ü–†–ê–í–õ–ï–ù–û: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è adds_done
                                            updated_adds = current_position['adds_done'] + 1
                                            logging.info(f"‚úÖ –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û {position['side']} –Ω–∞ {symbol}: –Ω–æ–≤–∞ avg_entry={new_avg_entry:.6f}, —Ä–æ–∑–º—ñ—Ä=${new_size:.2f}, –¥–æ–¥–∞–≤–∞–Ω—å={updated_adds}/{AVERAGING_MAX_ADDS}")
                else:
                    if not spread_check:
                        logging.debug(f"[{symbol}] –°–ø—Ä–µ–¥ {abs(spread_pct):.3f}% < {MIN_SPREAD}%")
                    elif not positions_check and not has_position:
                        logging.info(f"[{symbol}] ‚ùå –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –ø–æ–∑–∏—Ü—ñ–π: {total_positions} >= {MAX_OPEN_POSITIONS}")
                    elif not balance_check:
                        logging.info(f"[{symbol}] ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª–∞–Ω—Å—É: –ø–æ—Ç—Ä—ñ–±–Ω–æ {required_margin:.4f} USDT, —î {available_balance:.4f} USDT")
            except Exception as balance_error:
                logging.exception("Balance check error with full traceback")

            # 4) üîí –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –ó–ê–ö–†–ò–¢–¢–Ø –ü–†–ò –°–ü–†–ï–î–Ü 30% –ó –ó–ê–•–ò–°–¢–û–ú
            with active_positions_lock:
                if symbol in active_positions:
                    position = active_positions[symbol].copy()  # –ö–æ–ø—ñ—é—î–º–æ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –ø–æ–∑–∞ –ª–æ–∫–æ–º
                else:
                    position = None
            
            if position:
                
                # ‚úÖ –ù–û–í–Ü –£–ú–û–í–ò –í–ò–•–û–î–£ (—è–∫ –ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á):
                # 1) –û—Å–Ω–æ–≤–Ω–∞ —Ü—ñ–ª—å: +30% –ø—Ä–∏–±—É—Ç–∫—É
                # 2) –ü—Ä–∏ –∑–Ω–∏–∫–Ω–µ–Ω–Ω—ñ —Å–ø—Ä–µ–¥—É: –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –Ω–∞ +10-15%
                
                current_price = ref_price  # –ó–∞–≤–∂–¥–∏ XT —Ü—ñ–Ω–∞
                entry_price = position['avg_entry']
                
                # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ—Ç–æ—á–Ω–æ–≥–æ P&L —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
                if position['side'] == "LONG":
                    pnl_pct = ((current_price - entry_price) / entry_price) * 100 * LEVERAGE
                else:  # SHORT  
                    pnl_pct = ((entry_price - current_price) / entry_price) * 100 * LEVERAGE
                
                should_close = False
                close_reason = ""
                
                # 1) –û–°–ù–û–í–ù–ê –¶–Ü–õ–¨: +30% –ø—Ä–∏–±—É—Ç–∫—É (–ø—Ä–∏–º—É—Å–æ–≤–µ –∑–∞–∫—Ä–∏—Ç—Ç—è)
                if pnl_pct >= 30.0:
                    should_close = True
                    close_reason = f"üéØ –î–û–°–Ø–ì–ù–£–¢–û –¶–Ü–õ–¨ +30%! P&L={pnl_pct:.1f}%"
                    
                # 2) –î–û–°–¢–†–û–ö–û–í–ï –ó–ê–ö–†–ò–¢–¢–Ø: —Å–ø—Ä–µ–¥ –∑–Ω–∏–∫–∞—î + –ø—Ä–∏–±—É—Ç–æ–∫ 10-15%
                elif abs(spread_pct) < 0.3 and 10.0 <= pnl_pct < 30.0:  # —Å–ø—Ä–µ–¥ < 0.3% –≤–≤–∞–∂–∞—î—Ç—å—Å—è "–∑–Ω–∏–∫–ª–∏–º"
                    should_close = True
                    close_reason = f"‚ö° –î–û–°–¢–†–û–ö–û–í–ï –ó–ê–ö–†–ò–¢–¢–Ø: —Å–ø—Ä–µ–¥ –∑–Ω–∏–∫ ({abs(spread_pct):.2f}% < 0.3%) + –ø—Ä–∏–±—É—Ç–æ–∫ {pnl_pct:.1f}% (–≤ –º–µ–∂–∞—Ö 10-30%)"
                    
                # 3) –ó–ê–•–ò–°–¢: —Å–ø—Ä–µ–¥ > 30% (—è–∫ –±—É–ª–æ —Ä–∞–Ω—ñ—à–µ)
                elif abs(spread_pct) >= 30.0:
                    should_close = True 
                    close_reason = f"üö® –ê–í–ê–†–Ü–ô–ù–ï –ó–ê–ö–†–ò–¢–¢–Ø: —Å–ø—Ä–µ–¥ {abs(spread_pct):.2f}% >= 30%"
                
                if should_close:
                    logging.warning(f"üö® –ê–í–¢–û–ó–ê–ö–†–ò–¢–¢–Ø {position['side']} {symbol}: {close_reason}")
                    
                    # –ë–ï–ó–ü–ï–ß–ù–ï –ó–ê–ö–†–ò–¢–¢–Ø: —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –Ω–∞ –±—ñ—Ä–∂—ñ, –ø–æ—Ç—ñ–º –≤–∏–¥–∞–ª—è—î–º–æ –∑ —Å–∏—Å—Ç–µ–º–∏
                    try:
                        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–≤—ñ–∂—É —Ü—ñ–Ω—É –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è
                        fresh_ticker = fetch_ticker(xt, symbol)
                        if fresh_ticker:
                            current_xt_price = float(fresh_ticker['last'])
                        else:
                            current_xt_price = ref_price  # fallback
                        
                        # –ü–ï–†–ï–í–Ü–†–Ø–Ñ–ú–û –ß–ò –Ü–°–ù–£–Ñ –ü–û–ó–ò–¶–Ü–Ø –ü–ï–†–ï–î –ó–ê–ö–†–ò–¢–¢–Ø–ú
                        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–≤—ñ–∂—ñ –ø–æ–∑–∏—Ü—ñ—ó –∑ –±—ñ—Ä–∂—ñ
                        try:
                            # üîß –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û –ë–ï–ó–ü–ï–ß–ù–ò–ô WRAPPER
                            # Gate.io –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ XT  
                            # Gate.io –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ XT positions
                            current_positions = []
                            has_real_position = False
                            for pos in current_positions:
                                if pos['symbol'] == symbol and float(pos.get('contracts', 0)) > 0:
                                    has_real_position = True
                                    break
                            
                            if not has_real_position:
                                logging.warning(f"üö® –ü–û–ó–ò–¶–Ü–Ø {symbol} –£–ñ–ï –ó–ê–ö–†–ò–¢–ê –ù–ê –ë–Ü–†–ñ–Ü - –≤–∏–¥–∞–ª—è—î–º–æ –∑ —Å–∏—Å—Ç–µ–º–∏")
                                with active_positions_lock:
                                    if symbol in active_positions:
                                        del active_positions[symbol]
                                continue
                        except:
                            logging.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∑–∏—Ü—ñ—ó - –ø—Ä–æ–±—É—î–º–æ –∑–∞–∫—Ä–∏—Ç–∏")
                        
                        # –ü—Ä–æ–±—É—î–º–æ –∑–∞–∫—Ä–∏—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é –Ω–∞ –±—ñ—Ä–∂—ñ
                        close_success = close_position_market(symbol, position['side'], position['size_usdt'])
                        
                        if close_success:
                            # üîí –¢–Ü–õ–¨–ö–ò —è–∫—â–æ –∑–∞–∫—Ä–∏—Ç—Ç—è —É—Å–ø—ñ—à–Ω–µ - –≤–∏–¥–∞–ª—è—î–º–æ –∑ —Å–∏—Å—Ç–µ–º–∏
                            with active_positions_lock:
                                if symbol in active_positions:
                                    del active_positions[symbol]
                            
                            # –î–û–î–ê–Ñ–ú–û –î–û –Ü–°–¢–û–†–Ü–á –¢–û–†–ì–Ü–í–õ–Ü
                            try:
                                import telegram_admin
                                telegram_admin.add_to_trade_history(
                                    symbol=symbol,
                                    side=position['side'],
                                    entry_price=position['avg_entry'],
                                    close_price=current_xt_price,
                                    pnl=(position['size_usdt'] * pnl_pct / 100),
                                    close_reason=close_reason,
                                    exchange="Gate.io"
                                )
                                logging.info(f"üìö –î–æ–¥–∞–Ω–æ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó: {symbol} P&L={pnl_pct:+.1f}%")
                            except Exception as history_error:
                                logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó: {history_error}")
                            
                            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –µ–º–æ–¥–∑—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                            if pnl_pct > 0:
                                result_emoji = "üíö"
                                result_text = f"+${(position['size_usdt'] * pnl_pct / 100):+.2f}"
                            elif pnl_pct < 0:
                                result_emoji = "‚ù§Ô∏è"
                                result_text = f"${(position['size_usdt'] * pnl_pct / 100):+.2f}"
                            else:
                                result_emoji = "üíô"
                                result_text = "$0.00"
                            
                            # üéØ –†–û–ó–®–ò–†–ï–ù–ï –î–ï–¢–ê–õ–¨–ù–ï –°–ü–û–í–Ü–©–ï–ù–ù–Ø –ü–†–û –ê–í–¢–û–ó–ê–ö–†–ò–¢–¢–Ø (—è–∫ –ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á!)
                            close_signal = f"üéØ **–ê–í–¢–û–ó–ê–ö–†–ò–¢–¢–Ø –ü–û–ó–ò–¶–Ü–á** {result_emoji}\n"\
                                         f"üìä **{symbol.replace('/USDT:USDT', '')}** ({position['side']}) | ‚ö° XT.COM\n"\
                                         f"üí∞ –†–æ–∑–º—ñ—Ä: **${position['size_usdt']:.2f} USDT** | –õ–µ–≤–µ—Ä–∏–¥–∂: **{LEVERAGE}x**\n"\
                                         f"üìà –í—Ö—ñ–¥: **${position['avg_entry']:.6f}**\n"\
                                         f"üìâ –í–∏—Ö—ñ–¥: **${current_xt_price:.6f}**\n"\
                                         f"üíé P&L: **{pnl_pct:+.1f}%** ({result_text})\n"\
                                         f"üìä –°–ø—Ä–µ–¥: **{abs(spread_pct):.2f}%**\n"\
                                         f"üéØ –ü—Ä–∏—á–∏–Ω–∞: **{close_reason}**\n"\
                                         f"‚è∞ –ß–∞—Å: {datetime.now().strftime('%H:%M:%S')}\n"\
                                         f"‚úÖ –°—Ç–∞—Ç—É—Å: **–£–°–ü–Ü–®–ù–û –ó–ê–ö–†–ò–¢–û** | #ArbitrageBot"
                            
                            # üìä –ü–û–ó–ò–¶–Ü–á –û–ë–û–ú –ê–î–ú–Ü–ù–ê–ú + –ì–†–£–ü–Ü
                            send_to_admins_and_group(close_signal)
                            logging.info(f"‚úÖ –ê–í–¢–û–ó–ê–ö–†–ò–¢–û {position['side']} {symbol}: —Å–ø—Ä–µ–¥={abs(spread_pct):.2f}%, —Ä–æ–∑–º—ñ—Ä=${position['size_usdt']:.2f}")
                            continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É TP
                        else:
                            # üî• –ö–†–ò–¢–ò–ß–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ù–ï –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ Telegram –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ –∞–≤—Ç–æ–∑–∞–∫—Ä–∏—Ç—Ç—è
                            logging.info(f"‚ö†Ô∏è –ê–≤—Ç–æ–∑–∞–∫—Ä–∏—Ç—Ç—è {position['side']} {symbol} –Ω–µ –≤–¥–∞–ª–æ—Å—è - —Ü–µ –º–æ–∂–µ –±—É—Ç–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ (–ø–æ–∑–∏—Ü—ñ—è –≤–∂–µ –∑–∞–∫—Ä–∏—Ç–∞)")
                            # –ü–æ–∑–∏—Ü—ñ—è –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –≤ active_positions –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
                            
                    except Exception as close_error:
                        # üî• –ö–†–ò–¢–ò–ß–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—É —Å–∞–º—É –ª–æ–≥—ñ–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —è–∫ —É close_position_market
                        error_str = str(close_error).lower()
                        normal_errors = [
                            "reduce_exceeded", "empty position", "position not found",
                            "insufficient margin", "position already closed", "order not found",
                            "rate limit", "timeout", "connection", "network"
                        ]
                        is_normal_error = any(err in error_str for err in normal_errors)
                        
                        if is_normal_error:
                            logging.info(f"‚ö†Ô∏è –ù–æ—Ä–º–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–∑–∞–∫—Ä–∏—Ç—Ç—è {symbol}: {error_str[:50]}... (–±–µ–∑ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è)")
                        else:
                            logging.error(f"‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ –∞–≤—Ç–æ–∑–∞–∫—Ä–∏—Ç—Ç—ñ {symbol}: {close_error}")
                            # –¢–Ü–õ–¨–ö–ò –¥–ª—è —Å–ø—Ä–∞–≤–¥—ñ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ Telegram
                            error_signal = f"üö® **–ö–†–ò–¢–ò–ß–ù–ê –°–ò–°–¢–ï–ú–ù–ê –ü–û–ú–ò–õ–ö–ê!**\n"\
                                         f"üìä –°–∏–º–≤–æ–ª: **{symbol.replace('/USDT:USDT', '')}** ({position['side']})\n"\
                                         f"üí∞ –†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó: **${position['size_usdt']:.2f}**\n"\
                                         f"üìà –í—Ö—ñ–¥: **${position['avg_entry']:.6f}**\n"\
                                         f"üìâ –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: **${ref_price:.6f}**\n"\
                                         f"üìä P&L: **{pnl_pct:+.1f}%**\n"\
                                         f"‚ö†Ô∏è –°–ø—Ä–µ–¥: **{abs(spread_pct):.2f}%**\n"\
                                         f"üéØ –ü—Ä–∏—á–∏–Ω–∞: {close_reason}\n"\
                                         f"‚ùå **–ü–û–ú–ò–õ–ö–ê API**: `{str(close_error)[:100]}...`\n"\
                                         f"üè™ –ë—ñ—Ä–∂–∞: **{position.get('exchange', 'gate').upper()}**\n"\
                                         f"‚è∞ –ß–∞—Å: **{time.strftime('%H:%M:%S %d.%m.%Y')}**\n"\
                                         f"üö® **–¢–ï–†–ú–Ü–ù–û–í–û –ü–û–¢–†–Ü–ë–ù–ï –†–£–ß–ù–ï –í–¢–†–£–ß–ê–ù–ù–Ø!**"
                            # üö® –ö–†–ò–¢–ò–ß–ù–Ü –ü–û–ú–ò–õ–ö–ò –û–ë–û–ú –ê–î–ú–Ü–ù–ê–ú + –ì–†–£–ü–Ü
                            send_to_admins_and_group(error_signal)
                        # –ü–æ–∑–∏—Ü—ñ—è –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º—ñ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
                
                # –í–ò–î–ê–õ–ï–ù–û: —Å—Ç–∞—Ä–∞ –ª–æ–≥—ñ–∫–∞ 25% TP - –∑–∞–º—ñ–Ω–µ–Ω–∞ –Ω–∞ –Ω–æ–≤—É –ª–æ–≥—ñ–∫—É 30% –≤–∏—â–µ

        except Exception as e:
            # –î–ï–¢–ê–õ–¨–ù–ï –õ–û–ì–£–í–ê–ù–ù–Ø –ì–õ–û–ë–ê–õ–¨–ù–ò–• –ü–û–ú–ò–õ–û–ö –í–û–†–ö–ï–†–ê
            error_msg = f"‚ö†Ô∏è **–ü–û–ú–ò–õ–ö–ê –í–û–†–ö–ï–†–ê –°–ò–ú–í–û–õ–£**\n"\
                       f"üìä –°–∏–º–≤–æ–ª: **{symbol.replace('/USDT:USDT', '')}**\n"\
                       f"‚ùå –ü–æ–º–∏–ª–∫–∞: `{str(e)[:150]}...`\n"\
                       f"üîß –í–æ—Ä–∫–µ—Ä –ø—Ä–æ–¥–æ–≤–∂—É—î —Ä–æ–±–æ—Ç—É —á–µ—Ä–µ–∑ 30 —Å–µ–∫\n"\
                       f"‚è∞ –ß–∞—Å: **{time.strftime('%H:%M:%S')}**"
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —É –≤–∏–ø–∞–¥–∫—É —Å–µ—Ä–π–æ–∑–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ (–Ω–µ —á–∞—Å—Ç—ñ –¥—Ä—ñ–±–Ω–∏—Ü—ñ)  
            if "timeout" not in str(e).lower() and "rate limit" not in str(e).lower():
                # üö® –ü–û–ú–ò–õ–ö–ò –í–û–†–ö–ï–†–ê –û–ë–û–ú –ê–î–ú–Ü–ù–ê–ú + –ì–†–£–ü–Ü
                send_to_admins_and_group(error_msg)
            logging.error("Symbol worker error %s %s", symbol, e)

        # –Ω–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞
        time.sleep(SCAN_INTERVAL)

def send_balance_monitoring_thread():
    """–û–∫—Ä–µ–º–∏–π –ø–æ—Ç—ñ–∫ –¥–ª—è –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –±–∞–ª–∞–Ω—Å—É"""
    import threading
    import time
    
    def monitor_balance():
        while True:
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å futures —Ä–∞—Ö—É–Ω–∫—É
                balance_data = get_xt_futures_balance(xt)
                if balance_data and isinstance(balance_data, dict) and balance_data.get('USDT'):
                    usdt_data = balance_data['USDT']
                    if isinstance(usdt_data, dict):
                        total = usdt_data.get('total', 0)
                        available = usdt_data.get('available', 0) 
                        used = usdt_data.get('used', 0)
                    else:
                        total = available = used = 0
                    
                    # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
                    try:
                        # üîß –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û –ë–ï–ó–ü–ï–ß–ù–ò–ô WRAPPER  
                        # Use XT.com positions instead
                        active_positions_list = get_xt_open_positions(xt)
                        position_count = len([pos for pos in active_positions_list if float(pos.get('contracts', 0)) > 0])
                    except:
                        position_count = 0
                    
                    # Send balance update via telegram (using simple send_telegram)
                    balance_msg = f"üí∞ –ë–∞–ª–∞–Ω—Å XT.com:\n‚Ä¢ –ó–∞–≥–∞–ª–æ–º: {total:.2f} USDT\n‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {available:.2f} USDT\n‚Ä¢ –£ –ø–æ–∑–∏—Ü—ñ—è—Ö: {used:.2f} USDT\n‚Ä¢ –ü–æ–∑–∏—Ü—ñ–π: {position_count}"
                    send_telegram(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, balance_msg)
                    
                time.sleep(300)  # –ö–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
            except Exception as e:
                logging.error(f"Balance monitoring error: {e}")
                time.sleep(60)  # –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ - —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É
    
    balance_thread = threading.Thread(target=monitor_balance, daemon=True)
    balance_thread.start()
    logging.info("Balance monitoring thread started")

def start_position_monitoring_thread():
    """üéØ –ó–ê–•–ò–©–ï–ù–ê –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û–ì–û –ó–ê–ö–†–ò–¢–¢–Ø –ü–û–ó–ò–¶–Ü–ô"""
    return start_monitor()  # üõ°Ô∏è –î–µ–ª–µ–≥—É—î–º–æ –Ω–æ–≤—ñ–π –∑–∞—Ö–∏—â–µ–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó

def start_monitor():
    """üõ°Ô∏è THREAD-SAFE –ó–ê–•–ò–©–ï–ù–ò–ô –ó–ê–ü–£–°–ö –ú–û–ù–Ü–¢–û–†–ò–ù–ì–£ (—ñ–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∏–π)"""
    global monitor_thread
    
    with monitor_lifecycle_lock:  # üîí SINGLE-INSTANCE PROTECTION
        logging.warning("üöÄ PROTECTED MONITOR: –ó–∞–ø—É—Å–∫ thread-safe —Å–∏—Å—Ç–µ–º–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...")
        
        # üõ°Ô∏è IDEMPOTENT CHECK: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π –≤–∂–µ
        if monitor_thread and monitor_thread.is_alive():
            logging.warning(f"üéØ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π (thread-{monitor_thread.ident}), –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
            return monitor_thread
        
        # üéØ CLEAN START: –ø–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ Event —Å–∫–∏–Ω—É—Ç–∏–π
        if monitor_stop_event.is_set():
            monitor_stop_event.clear()
            logging.info("üîÑ Event —Å–∫–∏–Ω—É—Ç–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ä—Ç—É")
        
        # üöÄ LAUNCH: –∑–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–∏–π –ø–æ—Ç—ñ–∫ –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º —ñ–º–µ–Ω–µ–º
        monitor_thread = threading.Thread(
            target=monitor_open_positions, 
            daemon=True,
            name="MonitorThread"
        )
        monitor_thread.start()
        
        logging.warning(f"‚úÖ PROTECTED MONITOR: Thread-safe –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω–æ! (thread-{monitor_thread.ident})")
        logging.info(f"   ‚Ä¢ Take Profit: +{TAKE_PROFIT_PCT}%")
        logging.info(f"   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è: ‚â§{CONVERGENCE_SPREAD_PCT}%")
        logging.info(f"   ‚Ä¢ –¢–∞–π–º–µ—Ä: {POSITION_MAX_AGE_SEC}—Å")
        logging.info(f"   ‚Ä¢ –Ü–Ω—Ç–µ—Ä–≤–∞–ª: {MONITOR_INTERVAL_SEC}—Å")
        
        return monitor_thread

def close_position_by_contracts(exchange, symbol, contracts, side):
    """–ó–∞–∫—Ä–∏–≤–∞—î –ø–æ–∑–∏—Ü—ñ—é –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤ (–ù–ï USD!)"""
    if DRY_RUN:
        logging.info(f"DRY RUN: –∑–∞–∫—Ä–∏—Ç–∏ {contracts} –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤ {symbol} {side}")
        return
    
    try:
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω—É —Å—Ç–æ—Ä–æ–Ω—É
        opposite_side = 'sell' if side.upper() == 'LONG' else 'buy'
        
        # –†–æ–∑–º—ñ—â—É—î–º–æ —Ä–∏–Ω–∫–æ–≤–∏–π –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è
        order = exchange.create_market_order(symbol, opposite_side, contracts)
        logging.info(f"‚úÖ –ó–∞–∫—Ä–∏—Ç–æ –ø–æ–∑–∏—Ü—ñ—é: {symbol} {contracts} –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤ ({opposite_side})")
        return order
        
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó {symbol}: {e}")
        raise

def start_workers():
    global _plot_thread
    logging.info("üö® DEBUG: start_workers() –í–ò–ö–õ–ò–ö–ê–Ñ–¢–¨–°–Ø!")
    
    # üéØ –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ü–ï–†–®–ò–ú (–¥–æ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ–π)
    try:
        logging.info("üö® DEBUG: –ü–†–Ü–û–†–ò–¢–ï–¢ 1 - –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø–æ–∑–∏—Ü—ñ–π...")
        logging.info("üéØ –°–¢–ê–†–¢: –ì–æ—Ç—É—é—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü—ñ–π...")
        start_position_monitoring_thread()
        logging.info("üéØ –°–¢–ê–†–¢: –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü—ñ–π –∑–∞–ø—É—â–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ!")
    except Exception as e:
        logging.error(f"üö® DEBUG: –ü–û–ú–ò–õ–ö–ê –≤ start_position_monitoring_thread(): {e}")
        # –ù–µ raise - –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–≤—Å—è
    
    try:
        logging.info("üö® DEBUG: –ü–æ—á–∞—Ç–æ–∫ init_markets()...")
        init_markets()
        logging.info("üö® DEBUG: init_markets() –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    except Exception as e:
        logging.error(f"üö® DEBUG: –ü–û–ú–ò–õ–ö–ê –≤ init_markets(): {e}")
        raise
    
    try:
        logging.info("üö® DEBUG: –ü–æ—á–∞—Ç–æ–∫ send_balance_monitoring_thread()...")
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –±–∞–ª–∞–Ω—Å—É
        send_balance_monitoring_thread()
        logging.info("üö® DEBUG: send_balance_monitoring_thread() –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    except Exception as e:
        logging.error(f"üö® DEBUG: –ü–û–ú–ò–õ–ö–ê –≤ send_balance_monitoring_thread(): {e}")
        raise
    
    # üéØ –ó–ê–ü–£–°–ö: –ù–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–π–∫—Ä–∞—â–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ (–∑–∞–º—ñ—Å—Ç—å –±–∞–≥–∞—Ç—å–æ—Ö)
    best_signal_thread = threading.Thread(target=send_best_opportunity_signal, daemon=True)
    best_signal_thread.start()
    logging.info("üèÜ –°–¢–ê–†–¢: –°–∏—Å—Ç–µ–º–∞ –û–î–ù–û–ì–û –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É –∑–∞–ø—É—â–µ–Ω–∞!")
    
    # —Å—Ç–∞—Ä—Ç plot —Ç—Ä–µ–¥–∞
    _plot_thread = threading.Thread(target=plot_spread_live, args=(spread_store,), daemon=True)
    _plot_thread.start()

    # –∑–∞–ø—É—Å–∫–∞—î–º–æ –∫—ñ–ª—å–∫–∞ worker-—ñ–≤ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ –ø–æ –ø–∞–∫–µ—Ç–∞–º, —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏
    symbols = list(markets.keys())
    for i, sym in enumerate(symbols):
        # –æ–±–º–µ–∂–∏–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö —Ç—Ä–µ–¥—ñ–≤
        while threading.active_count() > MAX_CONCURRENT_SYMBOLS + 5:
            time.sleep(0.2)
        t = threading.Thread(target=symbol_worker, args=(sym,), daemon=True)
        t.start()
        worker_threads.append(t)
        time.sleep(0.05)

if __name__ == "__main__":
    test_telegram_configuration()  # –¢–µ—Å—Ç—É—î–º–æ Telegram –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
    
    # üíæ –ó–ê–í–ê–ù–¢–ê–ñ–£–Ñ–ú–û –ó–ë–ï–†–ï–ñ–ï–ù–Ü –ü–û–ó–ò–¶–Ü–á –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    logging.info("üíæ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π...")
    load_positions_from_file()
    
    # ü§ñ –ó–∞–ø—É—Å–∫ Telegram –∞–¥–º—ñ–Ω-–±–æ—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø—Ä–æ—Ü–µ—Å—ñ
    try:
        from multiprocessing import Process
        telegram_process = Process(target=run_telegram_bot)
        telegram_process.start()
        logging.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø—Ä–æ—Ü–µ—Å—ñ...")
    except ImportError:
        logging.warning("‚ùå Telegram admin bot –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
    
    # üéØ –í–ï–ë–Ü–ù–¢–ï–†–§–ï–ô–° –í–Ü–î–ö–õ–Æ–ß–ï–ù–û –î–õ–Ø –ü–û–¢–£–ñ–ù–û–°–¢–Ü (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –ø—Ä–æ—Å–∏–≤)
    try:
        try:
            # from admin import create_admin_app  # –í–Ü–î–ö–õ–Æ–ß–ï–ù–û
            # admin_app = create_admin_app()  # –í–Ü–î–ö–õ–Æ–ß–ï–ù–û
            from threading import Thread
            # admin_thread = Thread(target=lambda: admin_app.run(host='0.0.0.0', port=5000, debug=False))  # –í–Ü–î–ö–õ–Æ–ß–ï–ù–û
            # admin_thread.daemon = True  # –í–Ü–î–ö–õ–Æ–ß–ï–ù–û (admin_thread –Ω–µ —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è)
            # admin_thread.start()  # –í–Ü–î–ö–õ–Æ–ß–ï–ù–û: —Ç—ñ–ª—å–∫–∏ Telegram –±–æ—Ç
            logging.info("üì± –ü—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ Telegram –±–æ—Ç (–≤–µ–± —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ)")
        except ImportError:
            logging.warning("‚ùå Admin module –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
    except Exception as e:
        logging.warning(f"‚ùå Flask –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        
    start_workers()