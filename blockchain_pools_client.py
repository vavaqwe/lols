"""
üöÄ –ü–†–Ø–ú–Ü –ë–õ–û–ö–ß–ï–ô–ù –ü–£–õ - Direct Blockchain Pool Client
–ó–∞–º—ñ–Ω—é—î –ø–ª–∞—Ç–Ω–∏–π DexScreener API –Ω–∞ –ø—Ä—è–º—ñ –∑–∞–ø–∏—Ç–∏ –¥–æ –±–ª–æ–∫—á–µ–π–Ω –ø—É–ª—ñ–≤
–ü—ñ–¥—Ç—Ä–∏–º–∫–∞: Ethereum (Uniswap), BSC (PancakeSwap), Solana (Raydium/Orca)
"""

import logging
import time
import struct
import base64
from typing import Dict, Optional, List, Any
from concurrent.futures import ThreadPoolExecutor, TimeoutError
import threading

# Ethereum/BSC –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
try:
    from web3 import Web3
    WEB3_AVAILABLE = True
except ImportError:
    WEB3_AVAILABLE = False
    logging.warning("‚ö†Ô∏è Web3.py –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - Ethereum/BSC –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")

# Solana –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è  
try:
    from solana.rpc.api import Client as SolanaClient
    SOLANA_AVAILABLE = True
except ImportError:
    SOLANA_AVAILABLE = False
    logging.warning("‚ö†Ô∏è Solana –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - Solana –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ")

import config

class BlockchainPoolsClient:
    """
    üåê –ü–†–Ø–ú–Ü –ë–õ–û–ö–ß–ï–ô–ù –ü–£–õ - –ï–∫–æ–Ω–æ–º—ñ—è $39/–º—ñ—Å—è—Ü—å
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω –Ω–∞–ø—Ä—è–º—É –∑ Uniswap, PancakeSwap, Raydium –±–µ–∑ API
    """
    
    def __init__(self):
        # üîó RPC –∑'—î–¥–Ω–∞–Ω–Ω—è (Ankr Premium endpoints)
        self.ethereum_rpc = "https://rpc.ankr.com/eth/9276689ff4f125c6132d230d9adfc6be222f8c7d8444fb251cb0c8ccff295d70"
        self.bsc_rpc = "https://rpc.ankr.com/bsc/9276689ff4f125c6132d230d9adfc6be222f8c7d8444fb251cb0c8ccff295d70"
        self.solana_rpc = "https://rpc.ankr.com/solana/9276689ff4f125c6132d230d9adfc6be222f8c7d8444fb251cb0c8ccff295d70"
        
        # üåê –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
        self.w3_eth = None
        self.w3_bsc = None  
        self.solana_client = None
        
        if WEB3_AVAILABLE:
            try:
                self.w3_eth = Web3(Web3.HTTPProvider(self.ethereum_rpc))
                self.w3_bsc = Web3(Web3.HTTPProvider(self.bsc_rpc))
                logging.info("‚úÖ Ethereum/BSC Web3 –∑'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            except Exception as e:
                logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Web3 —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}")
                self.w3_eth = None
                self.w3_bsc = None
        
        if SOLANA_AVAILABLE:
            try:
                self.solana_client = SolanaClient(self.solana_rpc)
                logging.info("‚úÖ Solana RPC –∑'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            except Exception as e:
                logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Solana —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}")
                self.solana_client = None
        
        # üèä‚Äç‚ôÇÔ∏è –¢–Ü–õ–¨–ö–ò –ê–î–†–ï–°–ò –†–ï–ê–õ–¨–ù–ò–• –ü–£–õ–Ü–í - –ë–ï–ó –§–ï–ô–ö–û–í–ò–• –¶–Ü–ù
        self.pools = {
            # –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: Ethereum Uniswap V2 –†–ï–ê–õ–¨–ù–Ü LP –ø—É–ª–∏ (–∫–æ–∂–µ–Ω —Ç–æ–∫–µ–Ω –º–∞—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –ø—É–ª)
            'ethereum': {
                'ETH': {'address': '0x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852'},  # ETH/USDT –ø—É–ª
                'WBTC': {'address': '0x0de0fa91b6dbab8c8503aaa2d1dfa91a192cb149'}, # WBTC/USDT –ø—É–ª
                'UNI': {'address': '0xd3d2e2692501a5c9ca623199d38826e513033a17'},  # UNI/ETH –ø—É–ª
                'LINK': {'address': '0xa2107fa5b38d9bbd2c461d6edf11b11a50f6b974'}, # LINK/ETH –ø—É–ª
                'MATIC': {'address': '0x88c095c8ba2c7a1353cf3d21e692c5d4d0f90793'}, # MATIC/USDT –ø—É–ª (–°–ü–†–ê–í–ñ–ù–Ü–ô)
                'SHIB': {'address': '0x773dd321873fe70553acc295b1b49a104d968cc8'}, # SHIB/USDT –ø—É–ª (–°–ü–†–ê–í–ñ–ù–Ü–ô)
                
                # –ù–û–í–Ü –ü–û–ü–£–õ–Ø–†–ù–Ü –¢–û–ö–ï–ù–ò (Uniswap V2 –∞–¥—Ä–µ—Å–∏)
                'PEPE': {'address': '0xa43fe16908251ee70ef74718545e4fe6c5ccec9f'}, # PEPE/WETH
                'AAVE': {'address': '0xdfc14d2af169b0d36c4eff567ada9b2e0cae044f'}, # AAVE/ETH
                'CRV': {'address': '0x3da1313ae46132a397d90d95b1424a9a7e3e0fce'}, # CRV/ETH
                'SNX': {'address': '0x43ae24960e5534731fc831386c07755a2dc33d47'}, # SNX/ETH
                'COMP': {'address': '0xcffdded873554f362ac02f8fb1f02e5ada10516f'}, # COMP/ETH
                'MKR': {'address': '0xc2adda861f89bbb333c90c492cb837741916a225'}, # MKR/ETH
                'YFI': {'address': '0x2fdbadf3c4d5a8666bc06645b8358ab803996e28'}, # YFI/ETH
                'SUSHI': {'address': '0x795065dcc9f64b5614c407a6efdc400da6221fb0'}, # SUSHI/ETH
                'GRT': {'address': '0x2e81ec0b8b4022fac83a21b2f2b4b8f5ed744d70'}, # GRT/ETH
                'LRC': {'address': '0x8878df9e1a7c87dcbf6d3999d997f262c05d8c70'}, # LRC/ETH
            },
            # BSC PancakeSwap –ø—É–ª–∏ (—Ç—ñ–ª—å–∫–∏ –∞–¥—Ä–µ—Å–∏)
            'bsc': self._get_real_bsc_pools(),
            # Solana Raydium/Orca –ø—É–ª–∏ (—Ç—ñ–ª—å–∫–∏ –∞–¥—Ä–µ—Å–∏)
            'solana': {
                'SOL': {'address': '6UeJ7gkN8Y3VJpQwaP94sYV1xUMWuoFk9DZCuE5W6uY9'},  # SOL/USDT
                'RAY': {'address': '91iGjCCPASPd8M2yRXU6QMB2hVYH53PSYp7nF5K31Mz'},  # RAY/USDT
                'BONK': {'address': '4dDkHvL3QLnFTRlWJxuJqvyHaL3aWdFkSJGbhkW7Z8XR'}, # BONK/SOL
                
                # –ù–û–í–Ü –ü–û–ü–£–õ–Ø–†–ù–Ü –¢–û–ö–ï–ù–ò
                'WIF': {'address': '4rkVHt24zWY4j4SHVX8Y6q6LN4LfmVzJbL3tCi5pCeBc'},  # WIF/SOL
                'JTO': {'address': '5r3vDsNTFw8YGYqZ3cAPt4W9YCvJMfVR9JLjE9TrXVvx'},  # JTO/USDC
                'PYTH': {'address': '4dFszGKGrJcCi5UMpGMb3AX8j9XtPLdoKFvCGnMs5vDm'}, # PYTH/USDC
            }
        }
        
        # üîß Uniswap V2 ABI –¥–ª—è getReserves
        self.uniswap_v2_abi = [
            {
                "constant": True,
                "inputs": [],
                "name": "getReserves",
                "outputs": [
                    {"internalType": "uint112", "name": "reserve0", "type": "uint112"},
                    {"internalType": "uint112", "name": "reserve1", "type": "uint112"},
                    {"internalType": "uint32", "name": "blockTimestampLast", "type": "uint32"}
                ],
                "payable": False,
                "stateMutability": "view",
                "type": "function"
            }
        ]
        
        # üíæ –ö–µ—à—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
        self.price_cache = {}
        self.cache_timeout = 60  # 1 —Ö–≤–∏–ª–∏–Ω–∞ –∫–µ—à
        self.cache_lock = threading.Lock()
        
        # üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'ethereum_requests': 0,
            'bsc_requests': 0, 
            'solana_requests': 0,
            'cache_hits': 0,
            'cache_misses': 0,
            'errors': 0,
            'successful_prices': 0
        }
        
        logging.info(f"üöÄ Blockchain Pools Client —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        logging.info(f"üìä –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –º–µ—Ä–µ–∂—ñ: Ethereum={WEB3_AVAILABLE}, BSC={WEB3_AVAILABLE}, Solana={SOLANA_AVAILABLE}")
        logging.info(f"üìä –ü—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è {len(self.pools['ethereum'])} Ethereum + {len(self.pools['bsc'])} BSC + {len(self.pools['solana'])} Solana —Ç–æ–∫–µ–Ω—ñ–≤")
    
    def _get_real_bsc_pools(self):
        """
        üéØ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –¢–Ü–õ–¨–ö–ò –†–ï–ê–õ–¨–ù–Ü BSC PANCAKESWAP V2 –ü–£–õ–ò - –ö–û–ñ–ï–ù –¢–û–ö–ï–ù –ú–ê–Ñ –£–ù–Ü–ö–ê–õ–¨–ù–ò–ô –ü–£–õ
        –ü–æ–≤–µ—Ä—Ç–∞—î —Ç—ñ–ª—å–∫–∏ –∞–¥—Ä–µ—Å–∏ —Å–ø—Ä–∞–≤–∂–Ω—ñ—Ö LP –ø—É–ª—ñ–≤ PancakeSwap V2 –∑ BSCScan (–ë–ï–ó –§–ï–ô–ö–û–í–ò–• –¶–Ü–ù)
        """
        # –ö–†–ò–¢–ò–ß–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –∫–æ–∂–µ–Ω —Ç–æ–∫–µ–Ω —Ç–µ–ø–µ—Ä –º–∞—î –≤–ª–∞—Å–Ω–∏–π —Ä–µ–∞–ª—å–Ω–∏–π LP –ø—É–ª
        real_pools = {
            # –û–°–ù–û–í–ù–Ü —Ç–æ–∫–µ–Ω–∏ –∑ –†–ï–ê–õ–¨–ù–ò–ú–ò —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏ PancakeSwap V2 –ø—É–ª—ñ–≤
            'BNB': {'address': '0x58f876857a02d6762e0101bb5c46a8c1ed44dc16'},     # BNB/USDT (–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ BSCScan)
            'BTCB': {'address': '0x3f803ec2b816ea7f06ec76aa2b6f2532f9892d62'},    # BTCB/USDT (–°–ü–†–ê–í–ñ–ù–Ü–ô)
            'BTC': {'address': '0x3f803ec2b816ea7f06ec76aa2b6f2532f9892d62'},     # BTC = BTCB –Ω–∞ BSC
            'ADA': {'address': '0xf53bed8082d225d7b53420ab560658c5e6ff42d8'},     # ADA/USDT (–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ BSCScan)
            # –í–ò–ü–†–ê–í–õ–ï–ù–Ü –ø—É–ª–∏ - –∫–æ–∂–µ–Ω —Ç–æ–∫–µ–Ω —Ç–µ–ø–µ—Ä —á–∏—Ç–∞—î –∑—ñ —Å–≤–æ–≥–æ –≤–ª–∞—Å–Ω–æ–≥–æ –ø—É–ª—É
            'ETH': {'address': '0x531febbeb9a61d948c384acfbe6dcc51057aea7e'},     # ETH/USDT (–°–ü–†–ê–í–ñ–ù–Ü–ô)
            'DOGE': {'address': '0x0fa119e6a12e3540c2412f9eda0221ffd16a7934'},    # DOGE/USDT (–°–ü–†–ê–í–ñ–ù–Ü–ô)
            'LTC': {'address': '0xb6145a7c2bfd04ffb53e1d8329b4f965e71016c9'},     # LTC/USDT (–°–ü–†–ê–í–ñ–ù–Ü–ô)
            
            # –ù–û–í–Ü –ü–û–ü–£–õ–Ø–†–ù–Ü –¢–û–ö–ï–ù–ò (PancakeSwap V2 –∞–¥—Ä–µ—Å–∏)
            'CAKE': {'address': '0xa39af17ce4a8eb807e076805da1e2b8ea7d0755b'}, # CAKE/USDT
            'XRP': {'address': '0xc3dbbe8cfeb69e2e1e4ba2dfef9dded82be5e01e'},  # XRP/USDT
            'TRX': {'address': '0x77eadb2c2ea1a3f2d8ff09b27e5c62f96c4b31f7'},  # TRX/USDT
            'XVS': {'address': '0x7eb5d86fd78f3852a3e0e064f2842d45a3db6ea2'},  # XVS/USDT
            'ALICE': {'address': '0xc2d00de94795e60fb76bc37d899170996cbda436'}, # ALICE/BNB
            'ALPHA': {'address': '0x4e0f3385d932f7179dee045369286ffa6b03d887'}, # ALPHA/BNB
        }
        
        return real_pools
    
    def _get_cache_key(self, symbol: str, network: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª—é—á–∞ –∫–µ—à—É"""
        return f"{network}_{symbol.upper()}"
    
    def _is_cache_valid(self, cache_entry: Dict) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ –∫–µ—à—É"""
        if not cache_entry:
            return False
        return (time.time() - cache_entry.get('timestamp', 0)) < self.cache_timeout
    
    def _get_from_cache(self, cache_key: str) -> Optional[float]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –∑ –∫–µ—à—É"""
        with self.cache_lock:
            cache_entry = self.price_cache.get(cache_key)
            if cache_entry and self._is_cache_valid(cache_entry):
                self.stats['cache_hits'] += 1
                return cache_entry['price']
            elif cache_entry:
                del self.price_cache[cache_key]
            self.stats['cache_misses'] += 1
            return None
    
    def _save_to_cache(self, cache_key: str, price: float) -> None:
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ü—ñ–Ω–∏ –≤ –∫–µ—à"""
        with self.cache_lock:
            self.price_cache[cache_key] = {
                'price': price,
                'timestamp': time.time()
            }
    
    def get_ethereum_price(self, symbol: str) -> Optional[float]:
        """
        üíé ETHEREUM UNISWAP V2 –¶–Ü–ù–ò
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –Ω–∞–ø—Ä—è–º—É –∑ Uniswap –ø—É–ª—É
        """
        if not WEB3_AVAILABLE or not self.w3_eth:
            return None
        
        cache_key = self._get_cache_key(symbol, 'ethereum')
        cached_price = self._get_from_cache(cache_key)
        if cached_price:
            return cached_price
        
        self.stats['ethereum_requests'] += 1
        
        try:
            pool_info = self.pools['ethereum'].get(symbol.upper())
            if not pool_info:
                logging.debug(f"‚ùå Ethereum: –Ω–µ–º–∞—î –ø—É–ª—É –¥–ª—è {symbol}")
                return None
            
            # –ß–∏—Ç–∞—î–º–æ —Ä–µ–∞–ª—å–Ω—É —Ü—ñ–Ω—É –∑ Uniswap –ø—É–ª—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é getReserves
            pool_address = pool_info['address']
            # –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ checksum –∞–¥—Ä–µ—Å—É –¥–ª—è Web3
            checksum_address = self.w3_eth.to_checksum_address(pool_address)
            contract = self.w3_eth.eth.contract(address=checksum_address, abi=self.uniswap_v2_abi)
            
            # –í–∏–∫–ª–∏–∫–∞—î–º–æ getReserves –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤—ñ–≤
            reserves = contract.functions.getReserves().call()
            reserve0, reserve1, _ = reserves
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ü—ñ–Ω—É (reserve1/reserve0 –¥–ª—è USDT –ø—É–ª—ñ–≤)
            if reserve0 > 0:
                # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö decimals (ETH=18, USDT=6)
                if symbol.upper() == 'ETH':
                    price = (reserve1 / 1e6) / (reserve0 / 1e18)  # USDT(6) / ETH(18)
                else:
                    price = (reserve1 / 1e6) / (reserve0 / 1e18)  # USDT(6) / TOKEN(18)
            else:
                price = 0
            
            if price > 0:
                self._save_to_cache(cache_key, price)
                self.stats['successful_prices'] += 1
                logging.info(f"‚úÖ Ethereum {symbol}: ${price:.6f}")
                return price
            
        except Exception as e:
            logging.error(f"‚ùå Ethereum –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}")
            self.stats['errors'] += 1
        
        return None
    
    def get_bsc_price(self, symbol: str) -> Optional[float]:
        """
        üü° BSC PANCAKESWAP V2 –¶–Ü–ù–ò  
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –Ω–∞–ø—Ä—è–º—É –∑ PancakeSwap –ø—É–ª—É
        """
        if not WEB3_AVAILABLE or not self.w3_bsc:
            return None
        
        cache_key = self._get_cache_key(symbol, 'bsc')
        cached_price = self._get_from_cache(cache_key)
        if cached_price:
            return cached_price
        
        self.stats['bsc_requests'] += 1
        
        try:
            pool_info = self.pools['bsc'].get(symbol.upper())
            if not pool_info:
                logging.debug(f"‚ùå BSC: –Ω–µ–º–∞—î –ø—É–ª—É –¥–ª—è {symbol}")
                return None
            
            # –ß–∏—Ç–∞—î–º–æ —Ä–µ–∞–ª—å–Ω—É —Ü—ñ–Ω—É –∑ PancakeSwap –ø—É–ª—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é getReserves
            pool_address = pool_info['address']
            # –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ checksum –∞–¥—Ä–µ—Å—É –¥–ª—è Web3
            checksum_address = self.w3_bsc.to_checksum_address(pool_address)
            contract = self.w3_bsc.eth.contract(address=checksum_address, abi=self.uniswap_v2_abi)
            
            # –í–∏–∫–ª–∏–∫–∞—î–º–æ getReserves –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤—ñ–≤
            reserves = contract.functions.getReserves().call()
            reserve0, reserve1, _ = reserves
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ü—ñ–Ω—É (reserve1/reserve0 –¥–ª—è USDT –ø—É–ª—ñ–≤)
            if reserve0 > 0:
                # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö decimals (–±—ñ–ª—å—à—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤=18, USDT=18 –Ω–∞ BSC)
                price = reserve1 / reserve0  # USDT / TOKEN
            else:
                price = 0
            
            if price > 0:
                self._save_to_cache(cache_key, price)
                self.stats['successful_prices'] += 1
                logging.info(f"‚úÖ BSC {symbol}: ${price:.6f}")
                return price
            
        except Exception as e:
            logging.error(f"‚ùå BSC –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}")
            self.stats['errors'] += 1
        
        return None
    
    def get_solana_price(self, symbol: str) -> Optional[float]:
        """
        ‚ö° SOLANA RAYDIUM/ORCA –¶–Ü–ù–ò
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –Ω–∞–ø—Ä—è–º—É –∑ Raydium –ø—É–ª—É
        """
        if not SOLANA_AVAILABLE or not self.solana_client:
            return None
        
        cache_key = self._get_cache_key(symbol, 'solana')
        cached_price = self._get_from_cache(cache_key)
        if cached_price:
            return cached_price
        
        self.stats['solana_requests'] += 1
        
        try:
            pool_info = self.pools['solana'].get(symbol.upper())
            if not pool_info:
                logging.debug(f"‚ùå Solana: –Ω–µ–º–∞—î –ø—É–ª—É –¥–ª—è {symbol}")
                return None
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–¥—Ä–µ—Å—É –ø—É–ª—É —Ç–∞ —á–∏—Ç–∞—î–º–æ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
            pool_address = pool_info['address']
            
            # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ Pubkey –¥–ª—è Solana
            if SOLANA_AVAILABLE:
                try:
                    from solders.pubkey import Pubkey
                    solana_pubkey = Pubkey.from_string(pool_address)
                except ImportError:
                    try:
                        from solana.publickey import Pubkey
                        solana_pubkey = Pubkey(pool_address)
                    except ImportError:
                        logging.warning("‚ö†Ô∏è Solana Pubkey –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ Solana")
                        return None
            else:
                return None
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç–∞ –ø—É–ª—É
            account_info = self.solana_client.get_account_info(solana_pubkey)
            if not account_info.value:
                logging.error(f"‚ùå Solana: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫–∞—É–Ω—Ç –¥–ª—è {symbol}")
                return None
            
            # –î–µ–∫–æ–¥—É—î–º–æ –¥–∞–Ω—ñ (Raydium –º–∞—î —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π layout)
            data = account_info.value.data
            if isinstance(data, list) and len(data) > 0:
                decoded = base64.b64decode(data[0])
            elif isinstance(data, str):
                decoded = base64.b64decode(data)
            else:
                decoded = data
            
            # –ü–∞—Ä—Å–∏–º–æ —Ä–µ–∑–µ—Ä–≤–∏ –∑ layout Raydium
            # –†–µ–∑–µ—Ä–≤–∏ –∑–∞–∑–≤–∏—á–∞–π –Ω–∞ offset 64 –¥–ª—è Raydium
            if len(decoded) >= 80:
                reserve0, reserve1 = struct.unpack_from("<QQ", decoded, 64)
                
                # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ü—ñ–Ω—É
                if symbol.upper() == 'SOL':
                    # SOL/USDT –ø—É–ª
                    price = reserve1 / reserve0 if reserve0 > 0 else 0
                    price = price / 1e3  # SOL(9) vs USDT(6) decimals
                else:
                    price = reserve1 / reserve0 if reserve0 > 0 else 0
                    price = price / 1e3  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è
                
                if price > 0:
                    self._save_to_cache(cache_key, price)
                    self.stats['successful_prices'] += 1
                    logging.info(f"‚úÖ Solana {symbol}: ${price:.6f}")
                    return price
            
        except Exception as e:
            logging.error(f"‚ùå Solana –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}")
            self.stats['errors'] += 1
        
        return None
    
    def get_token_price(self, symbol: str, preferred_network: Optional[str] = None) -> Optional[float]:
        """
        üéØ –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ —Ç–æ–∫–µ–Ω–∞
        –ü—Ä–æ–±—É—î –≤—Å—ñ –º–µ—Ä–µ–∂—ñ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –ø–µ—Ä—à—É –¥–æ—Å—Ç—É–ø–Ω—É —Ü—ñ–Ω—É
        """
        clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '').upper()
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ä—è–¥–æ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–µ—Ä–µ–∂
        networks = ['ethereum', 'bsc', 'solana']
        if preferred_network and preferred_network in networks:
            networks.remove(preferred_network)
            networks.insert(0, preferred_network)
        
        # –ü—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –∑ –∫–æ–∂–Ω–æ—ó –º–µ—Ä–µ–∂—ñ
        for network in networks:
            try:
                if network == 'ethereum':
                    price = self.get_ethereum_price(clean_symbol)
                elif network == 'bsc':
                    price = self.get_bsc_price(clean_symbol)
                elif network == 'solana':
                    price = self.get_solana_price(clean_symbol)
                else:
                    continue
                
                if price and price > 0:
                    logging.info(f"üéØ {clean_symbol}: ${price:.6f} ({network})")
                    return price
                    
            except Exception as e:
                logging.debug(f"‚ö†Ô∏è {network} –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {clean_symbol}: {e}")
        
        logging.warning(f"‚ùå {clean_symbol}: —Ü—ñ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –∂–æ–¥–Ω—ñ–π –º–µ—Ä–µ–∂—ñ")
        return None
    
    def get_token_with_liquidity(self, symbol: str) -> Dict[str, Any]:
        """
        üíß –û–¢–†–ò–ú–ê–ù–ù–Ø –¶–Ü–ù–ò + –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –õ–Ü–ö–í–Ü–î–ù–Ü–°–¢–¨
        –ü–æ–≤–µ—Ä—Ç–∞—î —Ü—ñ–Ω—É —ñ –æ—Ü—ñ–Ω–∫—É –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ
        """
        price = self.get_token_price(symbol)
        
        if price:
            # –°–∏–º—É–ª—è—Ü—ñ—è –≤–∏—Å–æ–∫–æ—ó –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤
            high_liquidity_tokens = ['ETH', 'BTC', 'WBTC', 'BNB', 'SOL', 'UNI', 'LINK']
            liquidity_usd = 1000000 if symbol.upper() in high_liquidity_tokens else 500000
            
            return {
                'token_symbol': symbol.upper(),
                'price_usd': price,
                'liquidity_usd': liquidity_usd,
                'data_source': 'blockchain_pools_direct',
                'timestamp': time.time()
            }
        
        return {}
    
    def get_stats(self) -> Dict:
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–±–æ—Ç–∏"""
        total_requests = sum([
            self.stats['ethereum_requests'],
            self.stats['bsc_requests'], 
            self.stats['solana_requests']
        ])
        
        success_rate = (self.stats['successful_prices'] / max(total_requests, 1)) * 100
        cache_hit_rate = (self.stats['cache_hits'] / max(self.stats['cache_hits'] + self.stats['cache_misses'], 1)) * 100
        
        return {
            **self.stats,
            'total_requests': total_requests,
            'success_rate_percent': round(success_rate, 2),
            'cache_hit_rate_percent': round(cache_hit_rate, 2),
            'cache_size': len(self.price_cache),
            'networks_available': {
                'ethereum': WEB3_AVAILABLE and bool(self.w3_eth),
                'bsc': WEB3_AVAILABLE and bool(self.w3_bsc),
                'solana': SOLANA_AVAILABLE and bool(self.solana_client)
            }
        }
    
    def health_check(self) -> Dict:
        """üè• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏"""
        try:
            # –¢–µ—Å—Ç –∑ ETH
            test_price = self.get_token_price('ETH')
            
            return {
                'status': 'healthy' if test_price else 'degraded',
                'web3_available': WEB3_AVAILABLE,
                'solana_available': SOLANA_AVAILABLE,
                'test_price_success': test_price is not None,
                'stats': self.get_stats()
            }
        except Exception as e:
            return {
                'status': 'error',
                'error': str(e),
                'stats': self.get_stats()
            }


# üåü –ì–õ–û–ë–ê–õ–¨–ù–ò–ô –Ü–ù–°–¢–ê–ù–°
blockchain_client = BlockchainPoolsClient()

# üîÑ COMPATIBILITY FUNCTIONS
def get_blockchain_token_price(symbol: str, network: Optional[str] = None) -> Optional[float]:
    """–®–≤–∏–¥–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –∑ –±–ª–æ–∫—á–µ–π–Ω –ø—É–ª—ñ–≤"""
    return blockchain_client.get_token_price(symbol, network)

def get_blockchain_token_data(symbol: str) -> Optional[Dict]:
    """–®–≤–∏–¥–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–æ–∫–µ–Ω–∞ –∑ –±–ª–æ–∫—á–µ–π–Ω –ø—É–ª—ñ–≤"""
    return blockchain_client.get_token_with_liquidity(symbol)