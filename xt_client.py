import ccxt
import logging
import time
from config import XT_API_KEY, XT_API_SECRET, XT_ACCOUNT_2_API_KEY, XT_ACCOUNT_2_API_SECRET, DRY_RUN, ALLOW_LIVE_TRADING

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–∏–Ω–∫—ñ–≤ XT
xt_markets = {}

def create_xt(api_key=None, api_secret=None, account_name="Account 1"):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è XT –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ
    
    Args:
        api_key: API –∫–ª—é—á (—è–∫—â–æ None, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î XT_API_KEY –∑ config)
        api_secret: API —Å–µ–∫—Ä–µ—Ç (—è–∫—â–æ None, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î XT_API_SECRET –∑ config)
        account_name: –ù–∞–∑–≤–∞ –∞–∫–∞—É–Ω—Ç—É –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    """
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–¥–∞–Ω—ñ –∫–ª—é—á—ñ –∞–±–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∑ config
    key = api_key if api_key is not None else XT_API_KEY
    secret = api_secret if api_secret is not None else XT_API_SECRET
    
    xt = ccxt.xt({
        'apiKey': key,
        'secret': secret,
        'enableRateLimit': True,
        'sandbox': False,
        'options': {
            'defaultType': 'swap',  # Futures –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∏
            'createMarketBuyOrderRequiresPrice': False
        }
    })
    # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ connection pool –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    try:
        import requests.adapters
        if hasattr(xt, 'session') and xt.session:
            # CCXT –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î requests.Session - –Ω–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
            adapter = requests.adapters.HTTPAdapter(
                pool_connections=50,
                pool_maxsize=50,
                pool_block=False
            )
            xt.session.mount('http://', adapter)
            xt.session.mount('https://', adapter)
            logging.info(f"üöÄ XT {account_name} connection pool –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ: 50 connections")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è {account_name}: –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ connection pool: {e}")
    
    logging.info(f"‚úÖ XT {account_name} –∫–ª—ñ—î–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
    return xt

def load_xt_futures_markets(xt):
    """üöÄ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –í–°–Ü futures —Ä–∏–Ω–∫–∏ XT (swap + future –¥–ª—è 700+)"""
    global xt_markets
    
    # üöÄ –†–û–ó–®–ò–†–ï–ù–ò–ô –ü–û–®–£–ö: –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –û–ë–ê —Ç–∏–ø–∏ futures
    # 1. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ perpetual swaps
    swap_markets = xt.load_markets(params={'type':'swap'}, reload=True)
    
    # 2. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ dated futures
    future_markets = xt.load_markets(params={'type':'future'}, reload=True)
    
    # 3. –û–±'—î–¥–Ω—É—î–º–æ –≤—Å—ñ —Ä–∏–Ω–∫–∏
    all_markets = {**swap_markets, **future_markets}
    
    xt_markets = {}
    futures_markets = {}
    count = 0
    futures_count = 0
    spot_count = 0
    
    for symbol, meta in all_markets.items():
        # üöÄ –†–û–ó–®–ò–†–ï–ù–ê –§–Ü–õ–¨–¢–†–ê–¶–Ü–Ø: –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ USDT, USD, USDC
        if (meta.get('active', False) and 
            (meta.get('quote') in ['USDT', 'USD', 'USDC'] or 
             meta.get('settle') in ['USDT', 'USD', 'USDC'])):
            
            market_type = meta.get('type', 'unknown')
            
            # üéØ –ö–†–ò–¢–ò–ß–ù–û: –¢–Ü–õ–¨–ö–ò FUTURES/SWAP (–≤–∏–∫–ª—é—á–∞—î–º–æ SPOT)
            if market_type in ['swap', 'future']:
                futures_markets[symbol] = meta
                xt_markets[symbol] = meta
                count += 1
                futures_count += 1
                
                # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä—à–∏—Ö 15 —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                if count <= 15:
                    settle = meta.get('settle', 'N/A')
                    logging.info(f"‚úÖ XT Futures: {symbol} (type: {market_type}, settle: {settle})")
            elif market_type == 'spot':
                spot_count += 1
    
    logging.info(f"üöÄ XT –†–û–ó–®–ò–†–ï–ù–ò–ô –ü–û–®–£–ö: swap + future markets")
    logging.info(f"üìâ FUTURES —É–≤—ñ–º–∫–Ω–µ–Ω–æ: {futures_count}")
    logging.info(f"üìà SPOT –ø—Ä–æ–ø—É—â–µ–Ω–æ: {spot_count}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    if futures_count >= 700:
        logging.info(f"üéØ –ú–ê–ö–°–ò–ú–£–ú: –ó–Ω–∞–π–¥–µ–Ω–æ {futures_count} –ø–∞—Ä (>=700 –£–°–ü–Ü–•!)")
    elif futures_count >= 500:
        logging.info(f"üéØ –î–û–ë–†–ï: –ó–Ω–∞–π–¥–µ–Ω–æ {futures_count} –ø–∞—Ä (>=500)")
    else:
        logging.warning(f"‚ö†Ô∏è –û—á—ñ–∫—É–≤–∞–ª–æ—Å—è >=700 futures –ø–∞—Ä, –æ—Ç—Ä–∏–º–∞–Ω–æ {futures_count}")
    
    return futures_markets

def fetch_xt_ticker(xt, symbol):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—ñ–∫–µ—Ä–∞ –∑ XT"""
    return xt.fetch_ticker(symbol)

def get_all_xt_futures_pairs(client):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ futures —Ç–æ—Ä–≥–æ–≤—ñ –ø–∞—Ä–∏ –∑ XT.com"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞—î–º–æ –≤—Å—ñ —Ä–∏–Ω–∫–∏
        markets = client.load_markets()
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ futures USDT –ø–∞—Ä–∏
        futures_pairs = []
        
        for symbol, market in markets.items():
            if (market.get('type') == 'swap' and 
                market.get('quote') == 'USDT' and
                market.get('settle') == 'USDT' and
                market.get('active', True)):
                
                # –û—Ç—Ä–∏–º—É—î–º–æ base —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ BTC –∑ BTC/USDT:USDT)
                base = market.get('base', '')
                if base and base not in ['USDT', 'USD']:
                    futures_pairs.append(base)
        
        print(f"üìä XT.com: –∑–Ω–∞–π–¥–µ–Ω–æ {len(futures_pairs)} futures USDT –ø–∞—Ä")
        print(f"üîç –ü–µ—Ä—à—ñ 20: {futures_pairs[:20]}")
        
        return sorted(list(set(futures_pairs)))  # –£–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ç–∞ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è XT –ø–∞—Ä: {e}")
        return []

def fetch_xt_order_book(xt, symbol, depth=10):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–∫–∞–Ω—É –∑ XT"""
    return xt.fetch_order_book(symbol, depth)

def collect_market_depth_data(xt, symbol, depth_levels=20):
    """
    üìä –ó–ë–Ü–† –î–ê–ù–ò–• –ü–†–û –ì–õ–ò–ë–ò–ù–£ –†–ò–ù–ö–£
    –û—Ç—Ä–∏–º—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–±—Å—è–≥–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö —Ä—ñ–≤–Ω—è—Ö —Ü—ñ–Ω
    
    –ü–æ–≤–µ—Ä—Ç–∞—î:
    {
        'symbol': —Å–∏–º–≤–æ–ª,
        'bids': [{'price': —Ü–µ–Ω–∞, 'volume': –æ–±—ä–µ–º, 'total_usd': –∑–∞–≥–∞–ª—å–Ω–∞_—Å—É–º–∞}, ...],
        'asks': [{'price': —Ü–µ–Ω–∞, 'volume': –æ–±—ä–µ–º, 'total_usd': –∑–∞–≥–∞–ª—å–Ω–∞_—Å—É–º–∞}, ...],
        'bid_depth_analysis': –∞–Ω–∞–ª—ñ–∑ –≥–ª–∏–±–∏–Ω–∏ –ø–æ–∫—É–ø–æ–∫,
        'ask_depth_analysis': –∞–Ω–∞–ª—ñ–∑ –≥–ª–∏–±–∏–Ω–∏ –ø—Ä–æ–¥–∞–∂—ñ–≤,
        'total_bid_liquidity': –∑–∞–≥–∞–ª—å–Ω–∞ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫,
        'total_ask_liquidity': –∑–∞–≥–∞–ª—å–Ω–∞ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—ñ–≤,
        'spread_analysis': –∞–Ω–∞–ª—ñ–∑ —Å–ø—Ä–µ–¥—ñ–≤ –º—ñ–∂ —Ä—ñ–≤–Ω—è–º–∏
    }
    """
    try:
        orderbook = fetch_xt_order_book(xt, symbol, depth_levels)
        if not orderbook or 'bids' not in orderbook or 'asks' not in orderbook:
            return None
            
        # –û–±—Ä–æ–±–∫–∞ bids (–∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É)
        processed_bids = []
        total_bid_liquidity = 0
        for price, volume in orderbook['bids'][:depth_levels]:
            price_float = float(price)
            volume_float = float(volume)
            total_usd = price_float * volume_float
            total_bid_liquidity += total_usd
            
            processed_bids.append({
                'price': price_float,
                'volume': volume_float,
                'total_usd': total_usd
            })
        
        # –û–±—Ä–æ–±–∫–∞ asks (–∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂)
        processed_asks = []
        total_ask_liquidity = 0
        for price, volume in orderbook['asks'][:depth_levels]:
            price_float = float(price)
            volume_float = float(volume)
            total_usd = price_float * volume_float
            total_ask_liquidity += total_usd
            
            processed_asks.append({
                'price': price_float,
                'volume': volume_float,
                'total_usd': total_usd
            })
        
        # –ê–Ω–∞–ª—ñ–∑ –≥–ª–∏–±–∏–Ω–∏ –ø–æ —Ä—ñ–≤–Ω—è—Ö
        bid_depth_analysis = _analyze_depth_levels(processed_bids, "bids")
        ask_depth_analysis = _analyze_depth_levels(processed_asks, "asks")
        
        # –ê–Ω–∞–ª—ñ–∑ —Å–ø—Ä–µ–¥—ñ–≤ –º—ñ–∂ —Ä—ñ–≤–Ω—è–º–∏
        spread_analysis = _analyze_level_spreads(processed_bids, processed_asks)
        
        return {
            'symbol': symbol,
            'timestamp': time.time(),
            'bids': processed_bids,
            'asks': processed_asks,
            'bid_depth_analysis': bid_depth_analysis,
            'ask_depth_analysis': ask_depth_analysis,
            'total_bid_liquidity': total_bid_liquidity,
            'total_ask_liquidity': total_ask_liquidity,
            'spread_analysis': spread_analysis
        }
        
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö –≥–ª–∏–±–∏–Ω–∏ —Ä–∏–Ω–∫—É {symbol}: {e}")
        return None

def _analyze_depth_levels(levels, side_name):
    """–ê–Ω–∞–ª—ñ–∑—É—î —Ä–æ–∑–ø–æ–¥—ñ–ª –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ –ø–æ —Ä—ñ–≤–Ω—è—Ö"""
    if not levels or len(levels) < 3:
        return {"quality": "poor", "reason": "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ä—ñ–≤–Ω—ñ–≤"}
    
    # –ê–Ω–∞–ª—ñ–∑ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—ó –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ
    top3_liquidity = sum(level['total_usd'] for level in levels[:3])
    total_liquidity = sum(level['total_usd'] for level in levels)
    
    concentration_pct = (top3_liquidity / total_liquidity * 100) if total_liquidity > 0 else 0
    
    # –ê–Ω–∞–ª—ñ–∑ —Ä–æ–∑–ø–æ–¥—ñ–ª—É –æ–±—Å—è–≥—ñ–≤
    volumes = [level['volume'] for level in levels]
    avg_volume = sum(volumes) / len(volumes) if volumes else 0
    
    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–æ—Å—Ç—ñ –≥–ª–∏–±–∏–Ω–∏
    if concentration_pct > 80:
        quality = "concentrated"  # –õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–æ–≤–∞–Ω–∞ –≤ —Ç–æ–ø-3
    elif concentration_pct > 60:
        quality = "balanced"      # –ó–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª
    else:
        quality = "distributed"   # –†—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–∞
    
    return {
        "quality": quality,
        "levels_count": len(levels),
        "top3_concentration_pct": concentration_pct,
        "avg_volume_per_level": avg_volume,
        "total_liquidity": total_liquidity
    }

def _analyze_level_spreads(bids, asks):
    """–ê–Ω–∞–ª—ñ–∑ —Å–ø—Ä–µ–¥—ñ–≤ –º—ñ–∂ —Ä—ñ–≤–Ω—è–º–∏ —Ü—ñ–Ω"""
    spreads_analysis = {}
    
    # –°–ø—Ä–µ–¥ –º—ñ–∂ –Ω–∞–π–∫—Ä–∞—â–∏–º–∏ bid/ask
    if bids and asks:
        best_bid = bids[0]['price']
        best_ask = asks[0]['price']
        bid_ask_spread = ((best_ask - best_bid) / best_bid) * 100
        spreads_analysis['bid_ask_spread_pct'] = bid_ask_spread
    
    # –°–ø—Ä–µ–¥–∏ –º—ñ–∂ —Ä—ñ–≤–Ω—è–º–∏ –≤ bids
    if len(bids) >= 3:
        bid_spreads = []
        for i in range(len(bids) - 1):
            spread = ((bids[i]['price'] - bids[i+1]['price']) / bids[i]['price']) * 100
            bid_spreads.append(spread)
        spreads_analysis['avg_bid_level_spread_pct'] = sum(bid_spreads) / len(bid_spreads)
        spreads_analysis['max_bid_level_spread_pct'] = max(bid_spreads)
    
    # –°–ø—Ä–µ–¥–∏ –º—ñ–∂ —Ä—ñ–≤–Ω—è–º–∏ –≤ asks  
    if len(asks) >= 3:
        ask_spreads = []
        for i in range(len(asks) - 1):
            spread = ((asks[i+1]['price'] - asks[i]['price']) / asks[i]['price']) * 100
            ask_spreads.append(spread)
        spreads_analysis['avg_ask_level_spread_pct'] = sum(ask_spreads) / len(ask_spreads)
        spreads_analysis['max_ask_level_spread_pct'] = max(ask_spreads)
    
    return spreads_analysis

def analyze_xt_order_book_liquidity(xt, symbol, side, usd_amount, min_liquidity_ratio=2.0):
    """
    üîç –ê–ù–ê–õ–Ü–ó –°–¢–ê–ö–ê–ù–£ XT - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
    - min_liquidity_ratio: –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ –¥–æ —Ä–æ–∑–º—ñ—Ä—É –æ—Ä–¥–µ—Ä–∞ (2.0 = 200%)
    
    –ü–æ–≤–µ—Ä—Ç–∞—î: (can_trade, liquidity_info)
    """
    try:
        orderbook = fetch_xt_order_book(xt, symbol, depth=10)
        if not orderbook or 'bids' not in orderbook or 'asks' not in orderbook:
            return False, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ XT —Å—Ç–∞–∫–∞–Ω"
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        relevant_side = orderbook['asks'] if side == "LONG" else orderbook['bids'] 
        side_name = "asks (–ø—Ä–æ–¥–∞–∂—ñ)" if side == "LONG" else "bids (–ø–æ–∫—É–ø–∫–∏)"
        
        if not relevant_side or len(relevant_side) < 3:
            return False, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ XT –æ—Ä–¥–µ—Ä—ñ–≤ –≤ {side_name}: {len(relevant_side)}"
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5 —Ä—ñ–≤–Ω—ñ–≤ —Å—Ç–∞–∫–∞–Ω—É
        total_liquidity_usd = 0
        levels_analyzed = min(5, len(relevant_side))
        
        for i in range(levels_analyzed):
            price = float(relevant_side[i][0])
            quantity = float(relevant_side[i][1])
            level_usd = price * quantity
            total_liquidity_usd += level_usd
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ
        required_liquidity = usd_amount * min_liquidity_ratio
        liquidity_ok = total_liquidity_usd >= required_liquidity
        
        # –ê–Ω–∞–ª—ñ–∑ —Å–ø—Ä–µ–¥—É –º—ñ–∂ —Ä—ñ–≤–Ω—è–º–∏
        best_price = float(relevant_side[0][0])
        second_price = float(relevant_side[1][0]) if len(relevant_side) > 1 else best_price
        spread_between_levels = abs(second_price - best_price) / best_price * 100
        
        # –î–µ—Ç–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ —Å—Ç–∞–∫–∞–Ω—É
        quality_issues = []
        if total_liquidity_usd < required_liquidity:
            quality_issues.append(f"–ú–∞–ª–∞ XT –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å: ${total_liquidity_usd:.0f} < ${required_liquidity:.0f}")
        if spread_between_levels > 0.5:  # –°–ø—Ä–µ–¥ –º—ñ–∂ —Ä—ñ–≤–Ω—è–º–∏ > 0.5%
            quality_issues.append(f"–í–µ–ª–∏–∫–∏–π XT —Å–ø—Ä–µ–¥ –º—ñ–∂ —Ä—ñ–≤–Ω—è–º–∏: {spread_between_levels:.2f}%")
        if levels_analyzed < 3:
            quality_issues.append(f"–ú–∞–ª–æ XT —Ä—ñ–≤–Ω—ñ–≤: {levels_analyzed}")
        
        if quality_issues:
            return False, f"‚ùå XT –ø—Ä–æ–±–ª–µ–º–∏ —Å—Ç–∞–∫–∞–Ω—É: {'; '.join(quality_issues)}"
        
        return True, f"‚úÖ XT —Å—Ç–∞–∫–∞–Ω –û–ö: –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å ${total_liquidity_usd:.0f} ({total_liquidity_usd/usd_amount:.1f}x), —Å–ø—Ä–µ–¥ {spread_between_levels:.2f}%"
        
    except Exception as e:
        return False, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É XT —Å—Ç–∞–∫–∞–Ω—É: {str(e)}"

def get_xt_futures_balance(xt):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É futures —Ä–∞—Ö—É–Ω–∫—É XT"""
    try:
        if DRY_RUN:
            return {
                'total': 1000.0,
                'free': 950.0,
                'used': 50.0
            }
        
        balance = xt.fetch_balance({'type': 'swap'})
        
        # üîç DEBUG: –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å–∏—Ä–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logging.info(f"üîç RAW XT BALANCE: {balance}")
        
        if 'USDT' in balance and isinstance(balance['USDT'], dict):
            usdt_balance = balance['USDT']
            logging.info(f"üîç USDT BALANCE KEYS: {list(usdt_balance.keys())}")
            logging.info(f"üîç USDT BALANCE DATA: {usdt_balance}")
            
            # üöÄ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –∫–ª—é—á—ñ –¥–ª—è –±–∞–ª–∞–Ω—Å—É
            available = (
                usdt_balance.get('equity') or      # üí∞ –ù–û–í–ï: —Å–ø—Ä–æ–±—É—î–º–æ equity
                usdt_balance.get('wallet_balance') or # üí∞ –ù–û–í–ï: —Å–ø—Ä–æ–±—É—î–º–æ wallet_balance  
                usdt_balance.get('free') or 
                usdt_balance.get('available') or 
                usdt_balance.get('balance') or     # üí∞ –ù–û–í–ï: —Å–ø—Ä–æ–±—É—î–º–æ balance
                (usdt_balance.get('total', 0) - usdt_balance.get('used', 0))
            )
            
            total_balance = (
                usdt_balance.get('equity') or      # üí∞ –ù–û–í–ï: —Å–ø—Ä–æ–±—É—î–º–æ equity –¥–ª—è total
                usdt_balance.get('wallet_balance') or
                usdt_balance.get('total', 0)
            )
            
            logging.info(f"üîç BALANCE PARSING: available={available}, total={total_balance}")
            
            return {
                'total': total_balance,
                'free': available,
                'used': usdt_balance.get('used', 0)
            }
        
        # üöÄ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –Ø–∫—â–æ USDT –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ª–æ–≥—É—î–º–æ –≤—Å—ñ –∫–ª—é—á—ñ
        logging.warning(f"üîç NO USDT KEY FOUND. All balance keys: {list(balance.keys())}")
        return {'total': 0, 'free': 0, 'used': 0}
        
    except Exception as e:
        logging.error(f"XT –±–∞–ª–∞–Ω—Å –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        logging.error(f"XT –±–∞–ª–∞–Ω—Å traceback: {traceback.format_exc()}")
        return {'total': 0, 'free': 0, 'used': 0}

def is_xt_futures_tradeable(symbol):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –º–æ–∂–Ω–∞ —Ç–æ—Ä–≥—É–≤–∞—Ç–∏ —Ç–æ–∫–µ–Ω –Ω–∞ XT futures (USDT, USD, USDC)"""
    try:
        if symbol not in xt_markets:
            return False
        
        market = xt_markets[symbol]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ü–µ –∞–∫—Ç–∏–≤–Ω–∏–π futures —Ä–∏–Ω–æ–∫
        if not market.get('active', False):
            return False
            
        if market.get('type') not in ['swap', 'future']:
            return False
            
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ü–µ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∞ –≤–∞–ª—é—Ç–∞ settle (USDT, USD, USDC)
        settle = market.get('settle', '')
        quote = market.get('quote', '')
        if settle not in ['USDT', 'USD', 'USDC'] and quote not in ['USDT', 'USD', 'USDC']:
            return False
            
        return True
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ XT futures –¥–ª—è {symbol}: {e}")
        return False

def xt_open_market_position(xt, symbol, side, usd_amount, leverage, xt_price_ref=None, dex_price_ref=None, spread_ref=None):
    """
    –°—Ç–≤–æ—Ä—é—î —Ä–∏–Ω–∫–æ–≤–∏–π –æ—Ä–¥–µ—Ä –Ω–∞ XT futures —á–µ—Ä–µ–∑ CCXT (–∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ Gate.io).
    
    IMPORTANT: usd_amount —Ü–µ MARGIN (–º–∞—Ä–∂–∞ —è–∫—É —Ä–∏–∑–∏–∫—É—î–º–æ), –Ω–µ notional value.
    Notional value = margin * leverage
    """
    # üîí –ü–û–î–í–Ü–ô–ù–ò–ô –ó–ê–•–ò–°–¢: DRY_RUN + ALLOW_LIVE_TRADING
    if DRY_RUN:
        logging.info("[XT DRY-RUN] create market %s %s %sUSDT @ lev %s", symbol, side, usd_amount, leverage)
        return {"id":"dry-xt-"+str(time.time()), "price": None}
    
    # üîç DEBUG: –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó  
    logging.info(f"üîç OPEN DEBUG: ALLOW_LIVE_TRADING={ALLOW_LIVE_TRADING}, DRY_RUN={DRY_RUN}")
    
    if not ALLOW_LIVE_TRADING:
        logging.error("[XT SECURITY] üö® LIVE TRADING BLOCKED: ALLOW_LIVE_TRADING=False")
        raise Exception("Live trading not allowed - set ALLOW_LIVE_TRADING=true")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è exception handling
    current_price = 0.0
    instant_price = 0.0
    try:
        # üìä –ö–†–û–ö 1: –û—Ç—Ä–∏–º—É—î–º–æ market metadata –¥–ª—è —Å–∏–º–≤–æ–ª—É
        logging.info(f"[XT {symbol}] üìä –ö–†–û–ö 1: –û—Ç—Ä–∏–º–∞–Ω–Ω—è market metadata...")
        try:
            market = xt.market(symbol)
            logging.info(f"[XT {symbol}] ‚úÖ Market metadata –æ—Ç—Ä–∏–º–∞–Ω–æ: {market.get('id', 'N/A')}")
        except Exception as e:
            error_msg = f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ market metadata: {e}"
            logging.error(f"[XT {symbol}] {error_msg}")
            return None
        
        # üîç –ö–†–û–ö 2: –û—Ç—Ä–∏–º—É—î–º–æ contractSize –∑ market metadata
        contract_size = market.get('contractSize', 1.0)
        logging.info(f"[XT {symbol}] üìè –ö–†–û–ö 2: contractSize = {contract_size}")
        
        # üìè –ö–†–û–ö 3: –û—Ç—Ä–∏–º—É—î–º–æ limits —Ç–∞ precision –∑ market
        exchange_min_size = float(market.get('limits', {}).get('amount', {}).get('min', 0.001))
        amount_precision = market.get('precision', {}).get('amount', 6)
        logging.info(f"[XT {symbol}] üìä –ö–†–û–ö 3: Limits - min_amount={exchange_min_size}, precision={amount_precision}")
        
        # ‚ö° –ö–†–û–ö 4: –û–±–º–µ–∂—É—î–º–æ leverage –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–∑–≤–æ–ª–µ–Ω–æ–≥–æ
        max_leverage = market.get('limits', {}).get('leverage', {}).get('max', leverage)
        if max_leverage is None:
            max_leverage = leverage
        clamped_leverage = min(leverage, max_leverage)
        
        if clamped_leverage != leverage:
            logging.warning(f"[XT {symbol}] ‚ö†Ô∏è –ö–†–û–ö 4: Leverage –æ–±–º–µ–∂–µ–Ω–æ –∑ {leverage}x –¥–æ {clamped_leverage}x (–º–∞–∫—Å–∏–º—É–º –¥–ª—è —Ä–∏–Ω–∫—É)")
        else:
            logging.info(f"[XT {symbol}] ‚úÖ –ö–†–û–ö 4: Leverage {clamped_leverage}x –≤ –º–µ–∂–∞—Ö –¥–æ–∑–≤–æ–ª–µ–Ω–æ–≥–æ (max={max_leverage}x)")
        
        # ‚öôÔ∏è –ö–†–û–ö 5: –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–ª–µ—á–µ –¥–ª—è futures –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
        position_side = "LONG" if side == "LONG" else "SHORT"
        try:
            xt.set_leverage(clamped_leverage, symbol, {"positionSide": position_side})
            logging.info(f"[XT {symbol}] ‚öôÔ∏è –ö–†–û–ö 5: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–µ–≤–µ—Ä–∏–¥–∂ {clamped_leverage}x ({position_side})")
        except Exception as e:
            logging.warning(f"[XT {symbol}] ‚ö†Ô∏è –ö–†–û–ö 5: –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–µ–≤–µ—Ä–∏–¥–∂—É: {e}")
            pass

        # üí∞ –ö–†–û–ö 6: –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ margin —Ç–∞ notional value
        margin_amount = usd_amount
        notional_value = margin_amount * clamped_leverage
        logging.info(f"[XT {symbol}] üí∞ –ö–†–û–ö 6: margin=${margin_amount:.2f}, leverage={clamped_leverage}x ‚Üí notional=${notional_value:.2f}")
        
        # üéØ –ö–†–û–ö 7: –û—Ç—Ä–∏–º—É—î–º–æ –º–∏—Ç—Ç—î–≤—É —Ü—ñ–Ω—É –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É
        logging.info(f"[XT {symbol}] üéØ –ö–†–û–ö 7: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∏—Ç—Ç—î–≤–æ—ó —Ü—ñ–Ω–∏...")
        ticker = fetch_xt_ticker(xt, symbol)
        if not ticker or 'last' not in ticker:
            error_msg = f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤—ñ–∂—É —Ü—ñ–Ω—É –¥–ª—è –æ—Ä–¥–µ—Ä–∞"
            logging.error(f"[XT {symbol}] {error_msg}")
            return None
        
        instant_price = float(ticker['last'])
        logging.info(f"[XT {symbol}] ‚úÖ –ö–†–û–ö 7: instant_price = ${instant_price:.6f}")
        
        # üßÆ –ö–†–û–ö 8: –ü–†–ê–í–ò–õ–¨–ù–ò–ô —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ contracts –∑ contractSize
        # –§–æ—Ä–º—É–ª–∞: contracts = notional_value / (contract_size * price)
        contracts = notional_value / (contract_size * instant_price)
        logging.info(f"[XT {symbol}] üßÆ –ö–†–û–ö 8: –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ contracts = {notional_value:.2f} / ({contract_size} * {instant_price:.6f}) = {contracts:.6f}")
        
        # üîß –ö–†–û–ö 9: –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è amount_to_precision –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è
        logging.info(f"[XT {symbol}] üîß –ö–†–û–ö 9: –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è amount_to_precision...")
        try:
            final_contracts = float(xt.amount_to_precision(symbol, contracts))
            logging.info(f"[XT {symbol}] ‚úÖ –ö–†–û–ö 9: final_contracts (precision) = {final_contracts:.6f}")
        except Exception as e:
            logging.warning(f"[XT {symbol}] ‚ö†Ô∏è –ö–†–û–ö 9: –ü–æ–º–∏–ª–∫–∞ amount_to_precision: {e}, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback")
            final_contracts = round(float(contracts), amount_precision)
            logging.info(f"[XT {symbol}] ‚ö†Ô∏è –ö–†–û–ö 9: final_contracts (fallback) = {final_contracts:.6f}")
        
        # ‚úÖ –ö–†–û–ö 10: –ö–†–ò–¢–ò–ß–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É –ü–ï–†–ï–î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –æ—Ä–¥–µ—Ä–∞
        logging.info(f"[XT {symbol}] ‚úÖ –ö–†–û–ö 10: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É...")
        if final_contracts < exchange_min_size:
            error_msg = f"‚ùå –†–æ–∑–º—ñ—Ä {final_contracts:.6f} –º–µ–Ω—à–∏–π –∑–∞ –º—ñ–Ω—ñ–º—É–º {exchange_min_size:.6f}"
            logging.error(f"[XT {symbol}] {error_msg}")
            logging.error(f"[XT {symbol}] ‚ùå –û–†–î–ï–† –ù–ï –í–Ü–î–ü–†–ê–í–õ–ï–ù–û —á–µ—Ä–µ–∑ –º–∞–ª–∏–π —Ä–æ–∑–º—ñ—Ä")
            return None
        else:
            logging.info(f"[XT {symbol}] ‚úÖ –ö–†–û–ö 10: –†–æ–∑–º—ñ—Ä OK - {final_contracts:.6f} >= {exchange_min_size:.6f}")
        
        # üìä –ö–†–û–ö 11: –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ —Ñ—ñ–Ω–∞–ª—å–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
        final_notional = final_contracts * contract_size * instant_price
        final_margin = final_notional / clamped_leverage
        logging.info(f"[XT {symbol}] üìä –ö–†–û–ö 11: –§—ñ–Ω–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è:")
        logging.info(f"[XT {symbol}]   - contracts: {final_contracts:.6f}")
        logging.info(f"[XT {symbol}]   - notional: ${final_notional:.2f}")
        logging.info(f"[XT {symbol}]   - margin: ${final_margin:.2f}")

        # üéØ –ö–†–û–ö 12: –°–¢–í–û–†–ï–ù–ù–Ø –û–†–î–ï–†–ê
        logging.info(f"[XT {symbol}] üéØ –ö–†–û–ö 12: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±—ñ—Ä–∂—ñ...")
        order = xt.create_order(
            symbol, 
            'market', 
            'buy' if side == "LONG" else 'sell', 
            final_contracts, 
            None,
            {'type': 'swap', 'settle': 'usdt'}
        )
        logging.info(f"[XT FUTURES] ‚úÖ –í—ñ–¥–∫—Ä–∏—Ç–æ {side} –ø–æ–∑–∏—Ü—ñ—é {symbol}: {final_contracts:.6f} –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤ = ${final_notional:.2f} NOTIONAL (margin ${final_margin:.2f})")
        
        # üì± –ö–†–û–ö 13: –í—ñ–¥–ø—Ä–∞–≤–∫–∞ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        logging.info(f"[XT {symbol}] üì± –ö–†–û–ö 13: –í—ñ–¥–ø—Ä–∞–≤–∫–∞ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è...")
        from utils import send_telegram_trade_notification
        send_telegram_trade_notification(
            symbol, side, final_margin, instant_price, 
            action="OPENED (XT)", 
            spread=spread_ref, 
            exchange_price=xt_price_ref or instant_price, 
            dex_price=dex_price_ref
        )
        
        logging.info(f"[XT {symbol}] ‚úÖ –£–°–ü–Ü–•: –û—Ä–¥–µ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return order
    except Exception as e:
        # –î–ï–¢–ê–õ–¨–ù–ï TELEGRAM –°–ü–û–í–Ü–©–ï–ù–ù–Ø –ü–†–û –ü–û–ú–ò–õ–ö–£ –°–¢–í–û–†–ï–ù–ù–Ø XT –û–†–î–ï–†–ê (—è–∫ –ø—Ä–æ—Å–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)
        price_display = instant_price if instant_price > 0 else "N/A"
        error_msg = f"‚ùå **–ü–û–ú–ò–õ–ö–ê –°–¢–í–û–†–ï–ù–ù–Ø XT –û–†–î–ï–†–ê**\n"\
                   f"üìä –°–∏–º–≤–æ–ª: **{symbol.replace('/USDT:USDT', '')}** ({side})\n"\
                   f"üí∞ –†–æ–∑–º—ñ—Ä: **${usd_amount:.2f}**\n"\
                   f"‚ö° –õ–µ–≤–µ—Ä–∏–¥–∂: **{leverage}x**\n"\
                   f"üìâ –¶—ñ–Ω–∞: **${price_display}**\n"\
                   f"üè™ –ë—ñ—Ä–∂–∞: **XT.COM**\n"\
                   f"‚ùå **–ü–û–ú–ò–õ–ö–ê**: `{str(e)[:100]}...`\n"\
                   f"‚è∞ –ß–∞—Å: **{time.strftime('%H:%M:%S')}**"
        from utils import send_telegram
        from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
        # ‚ùå –ü–û–ú–ò–õ–ö–ò –ù–ï –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û –í –ì–†–£–ü–£ - —Ç—ñ–ª—å–∫–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –±–æ—Ç
        send_telegram(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, error_msg)
        logging.error("XT Order create error: %s %s", type(e).__name__, e)
        return None

def xt_close_position_market(xt, symbol, side, usd_amount):
    """
    –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ XT futures.
    
    IMPORTANT: usd_amount —Ü–µ NOTIONAL VALUE (–∑–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ—ó), –Ω–µ margin.
    –¶–µ position['size_usdt'] –∑ –Ω–∞—à–æ—ó —Å–∏—Å—Ç–µ–º–∏.
    """
    # üîí –ü–û–î–í–Ü–ô–ù–ò–ô –ó–ê–•–ò–°–¢: DRY_RUN + ALLOW_LIVE_TRADING
    if DRY_RUN:
        logging.info("[XT DRY-RUN] close %s side %s %sUSDT", symbol, side, usd_amount)
        return True
    
    # üîç DEBUG: –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    logging.info(f"üîç CLOSE DEBUG: ALLOW_LIVE_TRADING={ALLOW_LIVE_TRADING}, DRY_RUN={DRY_RUN}")
    
    if not ALLOW_LIVE_TRADING:
        logging.error("[XT SECURITY] üö® LIVE TRADING BLOCKED: ALLOW_LIVE_TRADING=False")
        return False
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è exception handling  
    instant_price = 0.0
    actual_position = None
    try:
        # üîß –ö–†–ò–¢–ò–ß–ù–û: –û—Ç—Ä–∏–º—É—î–º–æ –°–ü–†–ê–í–ñ–ù–Ü–ô —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó –∑ –±—ñ—Ä–∂—ñ!
        try:
            live_positions = xt.fetch_positions([symbol])
            actual_position = None
            
            for pos in live_positions:
                if (pos.get('symbol') == symbol and 
                    pos.get('side', '').upper() == side.upper() and 
                    abs(float(pos.get('contracts', 0) or pos.get('size', 0))) > 0):
                    actual_position = pos
                    break
                    
            if not actual_position:
                logging.warning(f"[XT {symbol}] ‚ÑπÔ∏è –ü–æ–∑–∏—Ü—ñ—è {side} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ - –º–æ–∂–ª–∏–≤–æ –≤–∂–µ –∑–∞–∫—Ä–∏—Ç–∞")
                return True  # –í–≤–∞–∂–∞—î–º–æ —É—Å–ø—ñ—à–Ω–∏–º —è–∫—â–æ –ø–æ–∑–∏—Ü—ñ—è –≤–∂–µ –∑–∞–∫—Ä–∏—Ç–∞
                
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¢–û–ß–ù–ò–ô —Ä–æ–∑–º—ñ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤ –∑ –±—ñ—Ä–∂—ñ
            exact_contracts = abs(float(actual_position.get('contracts', 0) or actual_position.get('size', 0)))
            
        except Exception as e:
            logging.warning(f"[XT {symbol}] ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è live –ø–æ–∑–∏—Ü—ñ—ó: {e}, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback")
            # FALLBACK: –æ—Ç—Ä–∏–º—É—î–º–æ —Å–≤—ñ–∂—É —Ü—ñ–Ω—É –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
            fallback_ticker = fetch_xt_ticker(xt, symbol)
            if fallback_ticker and 'last' in fallback_ticker:
                fallback_price = float(fallback_ticker['last'])
                exact_contracts = usd_amount / fallback_price
            else:
                logging.error(f"[XT {symbol}] ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –¥–ª—è fallback —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É")
                return False
        
        # üéØ –û–î–ù–ê –¶–Ü–ù–ê –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø: –æ—Ç—Ä–∏–º—É—î–º–æ –º–∏—Ç—Ç—î–≤—É —Ü—ñ–Ω—É –ë–ï–ó–ü–û–°–ï–†–ï–î–ù–¨–û –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä–∏—Ç—Ç—è–º
        ticker = fetch_xt_ticker(xt, symbol)
        if not ticker or 'last' not in ticker:
            logging.error(f"[XT {symbol}] ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∏—Ç—Ç—î–≤—É —Ü—ñ–Ω—É –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è")
            return False
        
        instant_price = float(ticker['last'])  # –ú–ò–¢–¢–Ñ–í–ê –¶–Ü–ù–ê –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ç–æ—á–Ω—ñ—Å—Ç—å –±—ñ—Ä–∂—ñ
        try:
            market = xt.market(symbol)
            contracts_precise = xt.amount_to_precision(symbol, exact_contracts)
            min_amount = market.get('limits', {}).get('amount', {}).get('min', 1)
            
            if float(contracts_precise) < min_amount:
                logging.warning(f"[XT {symbol}] ‚ö†Ô∏è –†–æ–∑–º—ñ—Ä {contracts_precise} < –º—ñ–Ω—ñ–º—É–º {min_amount}")
                contracts_precise = str(min_amount)
                
            contracts_final = float(contracts_precise)
            
        except Exception as e:
            logging.warning(f"[XT {symbol}] ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ market precision: {e}, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback")
            contracts_final = max(1.0, round(exact_contracts))
        
        logging.info(f"[XT {symbol}] üéØ INSTANT CLOSE: exact={exact_contracts:.6f}, final={contracts_final}, instant_price=${instant_price:.6f}")
        
        order = xt.create_order(
            symbol, 
            'market', 
            'sell' if side == "LONG" else 'buy', 
            contracts_final,  # –¢–æ—á–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –∑ –±—ñ—Ä–∂—ñ
            None, 
            {'type': 'swap', 'settle': 'usdt', 'reduceOnly': True}
        )
        logging.info(f"[XT FUTURES] –ó–∞–∫—Ä–∏—Ç–æ {side} –ø–æ–∑–∏—Ü—ñ—é {symbol}: {contracts_final} –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤ (notional=${contracts_final * instant_price:.2f})")
        
        # üî• –†–û–ó–†–ê–•–£–ù–û–ö –†–ï–ê–õ–¨–ù–û–ì–û P&L –¥–ª—è Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        notional_value = contracts_final * instant_price
        
        # üî• –†–û–ë–ê–°–¢–ù–ò–ô P&L –†–û–ó–†–ê–•–£–ù–û–ö (—è–∫ –ø–æ—Ä–∞–¥–∏–≤ architect)
        real_pnl_dollars = 0.0
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ entry_price –∑ live –ø–æ–∑–∏—Ü—ñ—ó –∑–∞–º—ñ—Å—Ç—å bot.active_positions (—É–Ω–∏–∫–∞—î–º–æ —Ü–∏–∫–ª—ñ—á–Ω–æ—ó –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ)
            entry_price = None
            if actual_position and 'entryPrice' in actual_position:
                entry_price = float(actual_position['entryPrice'])
            elif actual_position and 'info' in actual_position and 'avgEntryPrice' in actual_position['info']:
                entry_price = float(actual_position['info']['avgEntryPrice'])
            
            if entry_price and entry_price > 0:
                # SIDE-AWARE P&L —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ (—è–∫ –ø–æ—Ä–∞–¥–∏–≤ architect)
                if side.upper() == "LONG":
                    pnl_usd = (instant_price - entry_price) * exact_contracts
                else:  # SHORT
                    pnl_usd = (entry_price - instant_price) * exact_contracts
                
                real_pnl_dollars = pnl_usd
                pnl_pct = (pnl_usd / notional_value) * 100 if notional_value > 0 else 0
                
                logging.info(f"[XT {symbol}] üí∞ P&L –†–û–ë–ê–°–¢–ù–ò–ô: entry=${entry_price:.6f}, exit=${instant_price:.6f}, contracts={exact_contracts:.6f}, PnL=${real_pnl_dollars:.2f} ({pnl_pct:.2f}%)")
            else:
                logging.warning(f"[XT {symbol}] ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ entry_price –∑ live –ø–æ–∑–∏—Ü—ñ—ó")
        except Exception as e:
            logging.warning(f"[XT {symbol}] ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ä–æ–±–∞—Å—Ç–Ω–æ–≥–æ P&L —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É: {e}")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑ —Ä–µ–∞–ª—å–Ω–∏–º P&L
        from utils import send_telegram_trade_notification
        send_telegram_trade_notification(symbol, side, notional_value, instant_price, action="CLOSED (XT)", profit=real_pnl_dollars)
        
        return True
    except Exception as e:
        # –î–ï–¢–ê–õ–¨–ù–ï TELEGRAM –°–ü–û–í–Ü–©–ï–ù–ù–Ø –ü–†–û –ü–û–ú–ò–õ–ö–£ –ó–ê–ö–†–ò–¢–¢–Ø XT –ü–û–ó–ò–¶–Ü–á (—è–∫ –ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)
        price_display = instant_price if instant_price > 0 else "N/A"
        error_msg = f"‚ùå **–ü–û–ú–ò–õ–ö–ê –ó–ê–ö–†–ò–¢–¢–Ø XT –ü–û–ó–ò–¶–Ü–á**\n"\
                   f"üìä –°–∏–º–≤–æ–ª: **{symbol.replace('/USDT:USDT', '')}** ({side})\n"\
                   f"üí∞ –†–æ–∑–º—ñ—Ä: **${usd_amount:.2f}**\n"\
                   f"üìâ –¶—ñ–Ω–∞: **${price_display}**\n"\
                   f"üè™ –ë—ñ—Ä–∂–∞: **XT.COM**\n"\
                   f"‚ùå **–ü–û–ú–ò–õ–ö–ê**: `{str(e)[:100]}...`\n"\
                   f"‚è∞ –ß–∞—Å: **{time.strftime('%H:%M:%S')}**"
        from utils import send_telegram
        from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
        # ‚ùå –ü–û–ú–ò–õ–ö–ò –ù–ï –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û –í –ì–†–£–ü–£ - —Ç—ñ–ª—å–∫–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –±–æ—Ç
        send_telegram(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, error_msg)
        logging.error("XT Close order error: %s %s", type(e).__name__, e)
        return False

def get_xt_price(xt, symbol):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏ –∑ XT"""
    try:
        ticker = fetch_xt_ticker(xt, symbol)
        if ticker and 'last' in ticker:
            return float(ticker['last'])
        return None
    except Exception as e:
        logging.debug(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è XT —Ü—ñ–Ω–∏ –¥–ª—è {symbol}: {e}")
        return None

def get_xt_open_positions(xt):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö futures –ø–æ–∑–∏—Ü—ñ–π XT"""
    try:
        if DRY_RUN:
            return []
        
        # XT.com –º–æ–∂–µ –≤–∏–º–∞–≥–∞—Ç–∏ —ñ–Ω—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        positions = xt.fetch_positions()
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó –∑ —Ä–æ–∑–º—ñ—Ä–æ–º > 0
        open_positions = []
        
        if not positions:
            return []
            
        for pos in positions:
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ –ø–æ–ª—è –¥–ª—è —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó
                size = float(pos.get('size', 0) or 0)
                contracts = float(pos.get('contracts', 0) or 0)
                notional = float(pos.get('notional', 0) or 0)
                
                # üîß –§–Ü–ö–° –ü–†–ò–ó–†–ê–ß–ù–ò–• –ü–û–ó–ò–¶–Ü–ô: –ø–æ–∑–∏—Ü—ñ—è –≤—ñ–¥–∫—Ä–∏—Ç–∞ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –º–∞—î —Ä–µ–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å
                # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä–µ–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ—ó –≤ USDT  
                real_value = abs(notional) if abs(notional) > 0 else 0
                if real_value == 0 and abs(contracts) > 0:
                    # –Ø–∫—â–æ notional=0, –∞–ª–µ —î –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∏ - —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —á–µ—Ä–µ–∑ —Ü—ñ–Ω—É
                    mark_price_temp = float(pos.get('markPrice', 0) or pos.get('mark_price', 0) or 0)
                    if mark_price_temp == 0 and pos.get('symbol'):
                        try:
                            mark_price_temp = get_xt_price(xt, pos.get('symbol')) or 0
                        except:
                            mark_price_temp = 0
                    real_value = abs(contracts) * mark_price_temp
                
                # –ü–æ–∑–∏—Ü—ñ—è —Ä–µ–∞–ª—å–Ω–∞ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å > $0.01 (1 —Ü–µ–Ω—Ç)
                if real_value > 0.01:
                    # –ë–µ–∑–ø–µ—á–Ω–æ –æ—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –æ–±—Ä–æ–±–∫–æ—é None
                    symbol = pos.get('symbol', '') or ''
                    side = pos.get('side', 'long') or 'long'
                    unrealized_pnl = float(pos.get('unrealizedPnl', 0) or 0)
                    percentage = float(pos.get('percentage', 0) or 0)
                    entry_price = float(pos.get('entryPrice', 0) or pos.get('entry_price', 0) or 0)
                    mark_price = float(pos.get('markPrice', 0) or pos.get('mark_price', 0) or 0)
                    
                    # üîß –§–Ü–ö–° XT markPrice=0.0: –æ—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∞–ª—å–Ω—É —Ü—ñ–Ω—É –∑ —Ç—ñ–∫–µ—Ä–∞
                    if mark_price == 0.0 and symbol:
                        try:
                            real_price = get_xt_price(xt, symbol)
                            if real_price and real_price > 0:
                                mark_price = real_price
                                logging.info(f"üîß XT –§–Ü–ö–° [{symbol}]: markPrice=0.0 ‚Üí –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ticker={mark_price}")
                            else:
                                logging.warning(f"‚ö†Ô∏è XT [{symbol}]: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –∑ —Ç—ñ–∫–µ—Ä–∞")
                        except Exception as price_error:
                            logging.warning(f"‚ö†Ô∏è XT [{symbol}]: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏: {price_error}")
                            pass
                    
                    # üîß –§–Ü–ö–° –†–û–ó–ú–Ü–†–£ –ü–û–ó–ò–¶–Ü–ô: –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –≤ –¥–æ–ª–∞—Ä–∞—Ö –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è
                    calculated_size = abs(contracts) if abs(contracts) > 0 else abs(size)
                    # –†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó –≤ –¥–æ–ª–∞—Ä–∞—Ö = –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∏ * —Ü—ñ–Ω–∞ (–¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è)
                    size_usdt = calculated_size * mark_price if mark_price > 0 else abs(notional)
                    
                    # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å –∫–æ–∂–Ω–æ—ó –º–æ–Ω–µ—Ç–∫–∏
                    base_asset = symbol.replace('/USDT:USDT', '').replace('/USDT', '')
                    asset_balance = calculated_size  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç–æ–∫
                    margin = float(pos.get('collateral', 0) or pos.get('initialMargin', 0) or 0)
                    leverage = float(pos.get('leverage', 1) or 1)
                    
                    open_positions.append({
                        'symbol': symbol,
                        'side': side.upper(),
                        'size': calculated_size,  # –†–æ–∑–º—ñ—Ä –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö
                        'size_usdt': size_usdt,   # üîß –§–Ü–ö–°: –†–æ–∑–º—ñ—Ä –≤ –¥–æ–ª–∞—Ä–∞—Ö –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è!
                        'asset_balance': asset_balance,  # üí∞ –ë–ê–õ–ê–ù–° –ö–û–ñ–ù–û–á –ú–û–ù–ï–¢–ö–ò
                        'base_asset': base_asset,        # üí∞ –ù–ê–ó–í–ê –ú–û–ù–ï–¢–ö–ò  
                        'margin': margin,                # üí∞ –ú–ê–†–ñ–ê –í USDT
                        'leverage': leverage,            # üí∞ –ü–õ–ï–ß–ï
                        'unrealizedPnl': unrealized_pnl,
                        'percentage': percentage,
                        'entryPrice': entry_price,
                        'markPrice': mark_price,
                        'notional': abs(notional)
                    })
            except (ValueError, TypeError) as ve:
                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –∑ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
                logging.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é XT –∑ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏: {ve}")
                continue
                
        logging.info(f"XT.com –∑–Ω–∞–π–¥–µ–Ω–æ {len(open_positions)} –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π")
        return open_positions
        
    except Exception as e:
        logging.error(f"XT –ø–æ–∑–∏—Ü—ñ—ó –ø–æ–º–∏–ª–∫–∞: {e}")
        return []