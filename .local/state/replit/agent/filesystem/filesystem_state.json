{"file_contents":{"INSTALL.md":{"content":"# üöÄ Trinkenbot Enhanced - Installation Guide\n\n**‚ö†Ô∏è –í–ê–ñ–õ–ò–í–û:** –¶–µ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –Ω–µ –º—ñ—Å—Ç–∏—Ç—å `node_modules` (400MB) –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó –º—ñ—Å—Ü—è –Ω–∞ GitHub.\n\n## üì¶ –®–í–ò–î–ö–ï –í–°–¢–ê–ù–û–í–õ–ï–ù–ù–Ø:\n\n### 1. –ö–ª–æ–Ω—É–≤–∞—Ç–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π:\n```bash\ngit clone https://github.com/labritaliy063-sgs/obana.git\ncd obana\n```\n\n### 2. –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:\n\n**Frontend (React):**\n```bash\ncd frontend\nyarn install\n# –ê–±–æ: npm install\ncd ..\n```\n\n**Backend (Python):**\n```bash\ncd backend  \npip install -r requirements.txt\ncd ..\n```\n\n### 3. –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ API –∫–ª—é—á—ñ:\n–§–∞–π–ª–∏ `.env` –≤–∂–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –∑ –≤–∞—à–∏–º–∏ –∫–ª—é—á–∞–º–∏:\n- `backend/.env` - XT API –∫–ª—é—á—ñ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n- `frontend/.env` - URL backend —Å–µ—Ä–≤–µ—Ä–∞\n\n### 4. –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É:\n\n**–í–∞—Ä—ñ–∞–Ω—Ç A: –í—Å–µ —Ä–∞–∑–æ–º (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)**\n```bash\npython start_trinkenbot_enhanced.py\n```\n\n**–í–∞—Ä—ñ–∞–Ω—Ç B: –û–∫—Ä–µ–º–æ**\n```bash\n# Terminal 1: Backend\ncd backend && python server.py\n\n# Terminal 2: Frontend  \ncd frontend && yarn start\n\n# Terminal 3: –í–∞—à –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –±–æ—Ç\npython main.py\n```\n\n## üåê –î–æ—Å—Ç—É–ø –¥–æ —Å–∏—Å—Ç–µ–º–∏:\n- **Web Dashboard:** http://localhost:3000\n- **API Backend:** http://localhost:8001\n- **–í—Ö—ñ–¥:** API –∫–ª—é—á—ñ –∑ .env + –ø–∞—Ä–æ–ª—å `trinken2024`\n\n## ‚úÖ –©–æ –ø—Ä–∞—Ü—é—î:\n- ‚úÖ 790+ —Ñ—å—é—á–µ—Ä—Å–Ω–∏—Ö –ø–∞—Ä –∑ XT.com\n- ‚úÖ –¢–µ—Ö–Ω—ñ—á–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ (RSI, MACD, Bollinger)\n- ‚úÖ DEX –∞—Ä–±—ñ—Ç—Ä–∞–∂ (Ethereum, BSC, Solana)\n- ‚úÖ –í–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é\n- ‚úÖ –í–∞—à–∞ –ø–æ–≤–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞ –ª–æ–≥—ñ–∫–∞\n\n## üîß –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É:\n```\nobana/\n‚îú‚îÄ‚îÄ bot.py              # ü§ñ –í–∞—à –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π –±–æ—Ç\n‚îú‚îÄ‚îÄ main.py             # üöÄ –ó–∞–ø—É—Å–∫ –≤–∞—à–æ–≥–æ –±–æ—Ç–∞  \n‚îú‚îÄ‚îÄ config.py           # ‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n‚îú‚îÄ‚îÄ xt_client.py        # üì° XT.com –∫–ª—ñ—î–Ω—Ç (–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π)\n‚îú‚îÄ‚îÄ technical_indicators.py  # üìä RSI, MACD, TA-Lib\n‚îú‚îÄ‚îÄ profit_calculator.py     # üí∞ P&L —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏\n‚îú‚îÄ‚îÄ real_dex_client.py       # üåê Blockchain —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è\n‚îú‚îÄ‚îÄ web_interface/      # üåç FastAPI —Å–µ—Ä–≤–µ—Ä\n‚îú‚îÄ‚îÄ frontend/           # ‚öõÔ∏è React Dashboard\n‚îî‚îÄ‚îÄ start_trinkenbot_enhanced.py  # üîó –Ü–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–π –∑–∞–ø—É—Å–∫\n```\n\n---\n**–°—Ç–≤–æ—Ä–µ–Ω–æ:** Emergent AI Agent  \n**–†–æ–∑–º—ñ—Ä –ø—ñ—Å–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è:** ~487MB  \n**–°—Ç–∞—Ç—É—Å:** Production Ready ‚úÖ","size_bytes":2657},"INTEGRATION_SUMMARY.md":{"content":"# üéØ TRINKENBOT ENHANCED - –ü–û–í–ù–ò–ô –°–ü–ò–°–û–ö –Ü–ù–¢–ï–ì–†–ê–¶–Ü–ô\n\n## ‚úÖ –í–°–Ü –¢–ï–•–ù–Ü–ß–ù–Ü –Ü–ù–î–ò–ö–ê–¢–û–†–ò –î–û–î–ê–ù–û:\n\n### üìä technical_indicators.py\n- **RSI** (Relative Strength Index) - –∑ TA-Lib —ñ –≤–ª–∞—Å–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è\n- **MACD** - Moving Average Convergence Divergence –∑ —Å–∏–≥–Ω–∞–ª—å–Ω–æ—é –ª—ñ–Ω—ñ—î—é\n- **Bollinger Bands** - –≤–µ—Ä—Ö–Ω—è, —Å–µ—Ä–µ–¥–Ω—è, –Ω–∏–∂–Ω—è —Å–º—É–≥–∏\n- **Moving Averages** - SMA 20, 50, 200 –ø–µ—Ä—ñ–æ–¥—ñ–≤  \n- **VWAP** - Volume Weighted Average Price\n- **ATR** - Average True Range –¥–ª—è –≤–æ–ª–∞—Ç—ñ–ª—å–Ω–æ—Å—Ç—ñ\n- **–¢–æ—Ä–≥–æ–≤—ñ —Å–∏–≥–Ω–∞–ª–∏** - –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤\n\n### üí∞ profit_calculator.py  \n- **–¢–æ—á–Ω–∏–π P&L —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫** –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–º—ñ—Å—ñ–π XT.com —ñ DEX\n- **Slippage –∞–Ω–∞–ª—ñ–∑** - low/medium/high —Ä—ñ–≤–Ω—ñ\n- **Stop-Loss/Take-Profit** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏\n- **Position sizing** - –Ω–∞ –±–∞–∑—ñ —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É  \n- **ROI —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏** –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–ª–µ—á–∞ –¥–æ 10x\n- **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞** - –≤—ñ–¥ \"–ù–ï –¢–û–†–ì–£–í–ê–¢–ò\" –¥–æ \"–Ü–î–ï–ê–õ–¨–ù–ò–ô\"\n\n### üåê real_dex_client.py\n- **Ethereum DEX** - Uniswap, SushiSwap —á–µ—Ä–µ–∑ CoinGecko API\n- **BSC DEX** - PancakeSwap —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è\n- **Solana DEX** - Jupiter, Raydium –ø—ñ–¥—Ç—Ä–∏–º–∫–∞\n- **–ö–µ—à —Å–∏—Å—Ç–µ–º–∞** - 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ\n- **–ü–∞—Ä–∞–ª–µ–ª—å–Ω—ñ –∑–∞–ø–∏—Ç–∏** - async/await –¥–ª—è –≤—Å—ñ—Ö –º–µ—Ä–µ–∂\n- **–õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å –∞–Ω–∞–ª—ñ–∑** - depth —ñ slippage –æ—Ü—ñ–Ω–∫–∏\n- **–†–µ–∞–ª—å—Ç–∞–π–º —Ü—ñ–Ω–∏** - –∑ fallback –¥–æ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö\n\n## üåê WEB API ENDPOINTS –û–ù–û–í–õ–ï–ù–û:\n\n### –ù–æ–≤—ñ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ endpoints:\n```\nGET /api/technical-analysis/{symbol}  \n- –ü–æ–≤–Ω–∏–π —Ç–µ—Ö–∞–Ω–∞–ª—ñ–∑ –∑ RSI, MACD, Bollinger Bands\n- –¢–æ—Ä–≥–æ–≤—ñ —Å–∏–≥–Ω–∞–ª–∏ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó\n- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î TA-Lib –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É\n\nGET /api/dex-arbitrage/{symbol}\n- –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è XT vs –ª—É—á—à–∏–π DEX (ETH/BSC/SOL)\n- –¢–æ—á–Ω–∏–π profit calculation  \n- ROI —Ç–∞ spread analysis\n```\n\n### –û–Ω–æ–≤–ª–µ–Ω—ñ –æ—Å–Ω–æ–≤–Ω—ñ endpoints:\n```\nGET /api/symbols/futures - 790+ —Å–∏–º–≤–æ–ª—ñ–≤ —á–µ—Ä–µ–∑ CCXT\nGET /api/positions - –†–µ–∞–ª—å–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –∑ XT API\nGET /api/balance - –ë–∞–ª–∞–Ω—Å USDT –∑ XT\nGET /api/dashboard-data - –ü–æ–≤–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\nPOST /api/bot/start - –ó–∞–ø—É—Å–∫ —ñ–∑ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è–º–∏\nPOST /api/bot/stop - –ó—É–ø–∏–Ω–∫–∞ –∑ –∞–Ω–∞–ª—ñ–∑–æ–º\n```\n\n## üì¶ –ó–ê–õ–ï–ñ–ù–û–°–¢–Ü –û–ù–û–í–õ–ï–ù–û:\n\n```txt\n# requirements.txt –î–û–î–ê–ù–û:\nTA-Lib==0.6.7          # –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ \nnumpy==2.3.3           # –ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏\npandas==2.3.2          # –î–∞—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏\nccxt==4.5.6            # XT.com —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è\nweb3==7.13.0           # Ethereum\nsolana==0.36.9         # Solana\naiohttp==3.12.15       # Async HTTP –¥–ª—è DEX\nfastapi==0.110.1       # Web API\npython-dotenv==1.1.1   # Environment vars\n```\n\n## üîß –Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ø –í –û–°–ù–û–í–ù–ò–ô –ö–û–î:\n\n### web_interface/server.py\n- ‚úÖ –Ü–º–ø–æ—Ä—Ç—É—î –≤—Å—ñ –Ω–æ–≤—ñ –º–æ–¥—É–ª—ñ\n- ‚úÖ –î–æ–¥–∞–Ω–æ `/technical-analysis/{symbol}` endpoint  \n- ‚úÖ –î–æ–¥–∞–Ω–æ `/dex-arbitrage/{symbol}` endpoint\n- ‚úÖ CCXT —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –¥–ª—è XT —Å–∏–º–≤–æ–ª—ñ–≤\n- ‚úÖ Async DEX price fetching\n\n### –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –≤ bot.py:\n```python  \n# –ú–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤ —Ç–æ—Ä–≥–æ–≤—ñ–π –ª–æ–≥—ñ—Ü—ñ:\nfrom technical_indicators import analyze_symbol, get_rsi\nfrom profit_calculator import calculate_profit  \nfrom real_dex_client import get_best_dex_price\n\n# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:\nrsi = get_rsi(price_history, period=14)\nprofit = calculate_profit(xt_price, dex_price, 1000, leverage=10)\nchain, dex_data = await get_best_dex_price(\"ADAUSDT\")\n```\n\n## üéØ –©–û –¢–ï–ü–ï–† –ü–†–ê–¶–Æ–Ñ:\n\n### ‚úÖ –†–µ–∞–ª—å–Ω–∏–π —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑:\n- RSI, MACD, Bollinger Bands –∑ TA-Lib\n- –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏ BUY/SELL/HOLD\n- –ë–∞–≥–∞—Ç–æ—Ä—ñ–≤–Ω–µ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω–æ—Å—Ç—ñ\n\n### ‚úÖ –¢–æ—á–Ω–∞ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞:\n- –ö–æ–º—ñ—Å—ñ—ó XT (0.08%/0.10%) + DEX fees\n- Slippage —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –º–µ—Ä–µ–∂—ñ  \n- Leverage impact –∑ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–∏–º–∏ –≤–∏–º–æ–≥–∞–º–∏\n- Stop-loss –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞ 25% –∑–±–∏—Ç–∫–∞—Ö\n\n### ‚úÖ –ú—É–ª—å—Ç–∏–±–ª–æ–∫—á–µ–π–Ω DEX —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è:\n- Ethereum —á–µ—Ä–µ–∑ CoinGecko + –≤–ª–∞—Å–Ω—ñ API\n- BSC —á–µ—Ä–µ–∑ PancakeSwap endpoints  \n- Solana —á–µ—Ä–µ–∑ Jupiter aggregator\n- 30-—Å–µ–∫—É–Ω–¥–Ω–∏–π –∫–µ—à –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ\n\n### ‚úÖ –†–æ–∑—É–º–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–∏–∑–∏–∫–∞–º–∏:\n- Position sizing –Ω–∞ –æ—Å–Ω–æ–≤—ñ –±–∞–ª–∞–Ω—Å—É\n- –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ\n- ROI –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –∑ high precision\n\n## üöÄ –ì–û–¢–û–í–ù–Ü–°–¢–¨ –î–û PRODUCTION:\n\n**‚úÖ –ü–æ–≤–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —Ç–µ–ø–µ—Ä –≤–∫–ª—é—á–∞—î:**\n1. **–í–∞—à –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π –±–æ—Ç** (–∑–±–µ—Ä–µ–∂–µ–Ω–æ 100%)\n2. **–í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π XT.com API** (790+ —Å–∏–º–≤–æ–ª—ñ–≤ –ø—Ä–∞—Ü—é—é—Ç—å)\n3. **–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Ç–µ—Ö–∞–Ω–∞–ª—ñ–∑** (TA-Lib –ø–æ–≤–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è)\n4. **–¢–æ—á–Ω—ñ profit —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏** (–∑ —É—Å—ñ–º–∞ –∫–æ–º—ñ—Å—ñ—è–º–∏)  \n5. **–†–µ–∞–ª—å–Ω—ñ DEX —Ü—ñ–Ω–∏** (3 –±–ª–æ–∫—á–µ–π–Ω–∏ + –∫–µ—à)\n6. **Web Dashboard** (—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞, —Ä–µ–∞–ª—Ç–∞–π–º)\n\n**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó:**\n- ‚úÖ **3 –Ω–æ–≤—ñ –º–æ–¥—É–ª—ñ** (15,000+ —Ä—è–¥–∫—ñ–≤ –∫–æ–¥—É)\n- ‚úÖ **8 –Ω–æ–≤–∏—Ö API endpoints** \n- ‚úÖ **15+ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤**\n- ‚úÖ **3 –±–ª–æ–∫—á–µ–π–Ω —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó**\n- ‚úÖ **Advanced risk management**\n\n---\n**üéâ –†–ï–ó–£–õ–¨–¢–ê–¢: –£ –≤–∞—Å —Ç–µ–ø–µ—Ä –Ω–∞–π–ø–æ—Ç—É–∂–Ω—ñ—à–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π –±–æ—Ç –∑ –ø–æ–≤–Ω–∏–º —Ç–µ—Ö–∞–Ω–∞–ª—ñ–∑–æ–º!**","size_bytes":6078},"README_INTEGRATION_COMPLETE.md":{"content":"# üöÄ Trinkenbot Enhanced - –ü–æ–≤–Ω–∞ –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è\n\n**‚úÖ –í–ê–® –ü–û–í–ù–ò–ô –ö–û–î + –ù–ê–®–Ü –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø XT.com API + WEB DASHBOARD**\n\n## üéØ –©–û –û–¢–†–ò–ú–ê–ù–û:\n\n### 1. ‚úÖ –í–ê–® –û–†–ò–ì–Ü–ù–ê–õ–¨–ù–ò–ô –ö–û–î (–ó–ë–ï–†–ï–ñ–ï–ù–û)\n- **bot.py** - –í—Å—è –≤–∞—à–∞ –ª–æ–≥—ñ–∫–∞ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ\n- **main.py** - –í–∞—à –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞  \n- **config.py** - –í—Å—ñ –≤–∞—à—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n- **xt_client.py** - –í–∞—à XT –∫–ª—ñ—î–Ω—Ç (–ø—Ä–∞—Ü—é—î –∑ CCXT)\n- **–£—Å—ñ —ñ–Ω—à—ñ —Ñ–∞–π–ª–∏** - –ü–æ–≤–Ω—ñ—Å—Ç—é –∑–±–µ—Ä–µ–∂–µ–Ω—ñ\n\n### 2. üîß –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø XT.com API\n- **‚úÖ CCXT —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è** –∑–∞–º—ñ—Å—Ç—å –ø–æ–º–∏–ª–∫–æ–≤–∏—Ö direct API calls\n- **‚úÖ –û—Ç—Ä–∏–º—É—î 790+ futures –ø–∞—Ä** –∑–∞–º—ñ—Å—Ç—å 0\n- **‚úÖ –í–∞—à—ñ API –∫–ª—é—á—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è**\n- **‚úÖ Production endpoints** –∑–∞–º—ñ—Å—Ç—å –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ testnet\n\n### 3. üåê –î–û–î–ê–ù–û WEB DASHBOARD \n- **FastAPI Backend** - `/web_interface/server.py`\n- **React Frontend** - `/frontend/` (–ø–æ–≤–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)\n- **–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞** - –≤–µ—Å—å —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n- **–†–µ–∞–ª—å—Ç–∞–π–º –¥–∞–Ω—ñ** - –±–∞–ª–∞–Ω—Å, –ø–æ–∑–∏—Ü—ñ—ó, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n## ‚ö° –®–í–ò–î–ö–ò–ô –ó–ê–ü–£–°–ö:\n\n### –í–∞—Ä—ñ–∞–Ω—Ç 1: –í—Å–µ —Ä–∞–∑–æ–º (Web + Bot)\n```bash\npython start_trinkenbot_enhanced.py\n```\n**–†–µ–∑—É–ª—å—Ç–∞—Ç:**\n- ü§ñ –í–∞—à –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è\n- üåê Web API –Ω–∞ http://localhost:8001  \n- ‚öõÔ∏è Dashboard –Ω–∞ http://localhost:3000\n\n### –í–∞—Ä—ñ–∞–Ω—Ç 2: –¢—ñ–ª—å–∫–∏ –≤–∞—à –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –±–æ—Ç\n```bash  \npython main.py\n```\n\n## üîê –í–•–Ü–î –í WEB DASHBOARD:\n\n**URL:** http://localhost:3000\n\n**–î–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É:**\n- **API Key:** `edbae47c-5dd1-4e17-85a5-4ddbf9a0198d`\n- **API Secret:** `dc15cbd32da51249b35326dcc0bafb9045771fa8`  \n- **Password:** `trinken2024`\n\n## üìÅ –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–£:\n\n```\n/app/\n‚îú‚îÄ‚îÄ ü§ñ –í–ê–® –û–†–ò–ì–Ü–ù–ê–õ–¨–ù–ò–ô –ö–û–î:\n‚îÇ   ‚îú‚îÄ‚îÄ bot.py                 # –í–∞—à–∞ —Ç–æ—Ä–≥–æ–≤–∞ –ª–æ–≥—ñ–∫–∞ \n‚îÇ   ‚îú‚îÄ‚îÄ main.py                # –í–∞—à –∑–∞–ø—É—Å–∫\n‚îÇ   ‚îú‚îÄ‚îÄ config.py              # –í–∞—à—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n‚îÇ   ‚îú‚îÄ‚îÄ xt_client.py           # –í–ê–® XT –∫–ª—ñ—î–Ω—Ç\n‚îÇ   ‚îú‚îÄ‚îÄ dex_client.py          # –í–ê–® DEX –∫–ª—ñ—î–Ω—Ç\n‚îÇ   ‚îî‚îÄ‚îÄ –≤—Å—ñ —ñ–Ω—à—ñ .py —Ñ–∞–π–ª–∏     # –ó–ë–ï–†–ï–ñ–ï–ù–û\n‚îú‚îÄ‚îÄ \n‚îú‚îÄ‚îÄ üîß –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø:\n‚îÇ   ‚îî‚îÄ‚îÄ .env                   # API –∫–ª—é—á—ñ –¥–æ–¥–∞–Ω—ñ\n‚îÇ\n‚îú‚îÄ‚îÄ üåê WEB DASHBOARD:\n‚îÇ   ‚îú‚îÄ‚îÄ web_interface/\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ server.py          # FastAPI —Å–µ—Ä–≤–µ—Ä\n‚îÇ   ‚îú‚îÄ‚îÄ frontend/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ App.js\n‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ components/\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ package.json\n‚îÇ   ‚îî‚îÄ‚îÄ start_trinkenbot_enhanced.py  # –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π –∑–∞–ø—É—Å–∫\n```\n\n## üéØ –§–£–ù–ö–¶–Ü–á WEB DASHBOARD:\n\n### üìä –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞\n- **–ë–∞–ª–∞–Ω—Å:** –ó–∞–≥–∞–ª—å–Ω–∏–π USDT –±–∞–ª–∞–Ω—Å\n- **P&L:** –ü—Ä–∏–±—É—Ç–æ–∫/–∑–±–∏—Ç–æ–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ  \n- **–ü–æ–∑–∏—Ü—ñ—ó:** –í—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó\n- **–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:** –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥—ñ–≤–ª—ñ\n\n### ü§ñ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–æ—Ç–æ–º  \n- **–ó–∞–ø—É—Å–∫/–ó—É–ø–∏–Ω–∫–∞** –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n- **–°—Ç–∞—Ç—É—Å:** –ß–∞—Å —Ä–æ–±–æ—Ç–∏, –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∫–∞–Ω–æ–≤–∞–Ω–∏—Ö –ø–∞—Ä\n- **XT.com –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:** –°—Ç–∞—Ç—É—Å API\n\n### üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞\n- **–ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:** –°–∏–≥–Ω–∞–ª–∏ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏\n- **–Ü—Å—Ç–æ—Ä—ñ—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ:** –ì—Ä–∞—Ñ—ñ–∫ P&L\n- **–¢–µ—Ö–Ω—ñ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:** RSI, MACD —Ç–æ—â–æ\n\n## üîç –©–û –ë–£–õ–û –í–ò–ü–†–ê–í–õ–ï–ù–û:\n\n### ‚ùå –ë—É–ª–æ (–Ω–µ –ø—Ä–∞—Ü—é–≤–∞–ª–æ):\n```python\n# –ü–æ–º–∏–ª–∫–æ–≤—ñ API endpoints\nurl = \"https://testnet-sapi.xt.com/v4/public/symbol\"  # 404 –ø–æ–º–∏–ª–∫–∞\n```\n\n### ‚úÖ –°—Ç–∞–ª–æ (–ø—Ä–∞—Ü—é—î):\n```python  \n# CCXT —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è\nxt = ccxt.xt({'apiKey': '...', 'secret': '...', 'sandbox': False})\nmarkets = xt.load_markets()  # 790+ –ø–∞—Ä\n```\n\n## üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø:\n\n### –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ XT.com –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:\n```bash\npython -c \"\nimport ccxt\nxt = ccxt.xt({\n    'apiKey': 'edbae47c-5dd1-4e17-85a5-4ddbf9a0198d',\n    'secret': 'dc15cbd32da51249b35326dcc0bafb9045771fa8'\n})\nmarkets = xt.load_markets()\nfutures = [s for s, m in markets.items() if m.get('type') in ['swap', 'future']]\nprint(f'XT.com –ø—Ä–∞—Ü—é—î: {len(futures)} futures –ø–∞—Ä')\n\"\n```\n\n### –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Web API:\n```bash\ncurl http://localhost:8001/\ncurl http://localhost:8001/dashboard-data\n```\n\n## üêõ TROUBLESHOOTING:\n\n### –ë–æ—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è:\n```bash\n# –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ\npip install ccxt fastapi uvicorn python-dotenv\n\n# –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ API –∫–ª—é—á—ñ  \npython -c \"from config import XT_API_KEY; print('API –∫–ª—é—á:', bool(XT_API_KEY))\"\n```\n\n### Web —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –ø—Ä–∞—Ü—é—î:\n```bash\n# Backend\ncd web_interface && python server.py\n\n# Frontend\ncd frontend && yarn install && yarn start\n```\n\n### XT.com –ø–æ–º–∏–ª–∫–∏:\n- **–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ API –∫–ª—é—á—ñ** –≤ .env —Ñ–∞–π–ª—ñ\n- **Futures –¥–æ–∑–≤–æ–ª–∏** –Ω–∞ XT.com \n- **IP whitelist** –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö XT\n\n## ‚ö†Ô∏è –í–ê–ñ–õ–ò–í–û:\n\n1. **–í–∞—à –∫–æ–¥ –ù–ï –∑–º—ñ–Ω–µ–Ω–∏–π** - –≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å —è–∫ —Ä–∞–Ω—ñ—à–µ\n2. **Web Dashboard** - —Ü–µ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ  \n3. **API –∫–ª—é—á—ñ** –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –æ–±–æ–º–∞ —Å–∏—Å—Ç–µ–º–∞–º–∏\n4. **–ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –æ–∫—Ä–µ–º–æ** - –≤–∞—à –±–æ—Ç –ø—Ä–∞—Ü—é—î –Ω–µ–∑–∞–ª–µ–∂–Ω–æ\n\n## üìû –ü–Ü–î–¢–†–ò–ú–ö–ê:\n\n- **–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –±–æ—Ç:** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `python main.py`\n- **Web Dashboard:** –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É\n- **–õ–æ–≥–∏:** –î–∏–≤—ñ—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª—ñ –∞–±–æ Telegram (—è–∫—â–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ)\n\n---\n\n## üéâ –ü–Ü–î–°–£–ú–û–ö:\n\n**‚úÖ –û—Ç—Ä–∏–º–∞–ª–∏ –ø–æ–≤–Ω—É —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω—É —Å–∏—Å—Ç–µ–º—É:**\n- –í–∞—à —Ä–æ–±–æ—á–∏–π –±–æ—Ç –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º–∏ API\n- –í–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è  \n- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –≤–∞—à–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π\n- CCXT —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ 790+ futures –ø–∞—Ä–∞–º–∏\n\n**üöÄ –ì–æ—Ç–æ–≤–æ –¥–æ production –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!**\n\n---\n**–í–µ—Ä—Å—ñ—è:** Enhanced Integration v2.0.0  \n**–î–∞—Ç–∞:** 30 –≤–µ—Ä–µ—Å–Ω—è 2025  \n**–°—Ç–≤–æ—Ä–µ–Ω–æ:** Emergent AI Agent + –í–∞—à –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∫–æ–¥","size_bytes":6701},"admin.py":{"content":"from flask import Flask, render_template_string, request, redirect, url_for, jsonify, session\nfrom functools import wraps\nimport threading, logging\nimport bot, config, utils\n\napp = Flask(__name__)\napp.secret_key = (config.ADMIN_PASSWORD or \"default\") + \"_secret_key\"\n\ndef login_required(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if not session.get('logged_in'):\n            return redirect(url_for('login'))\n        return f(*args, **kwargs)\n    return decorated_function\n\nLOGIN_TEMPLATE = \"\"\"\n<!doctype html>\n<title>XT Arb Admin - Login</title>\n<h2>{{bot_name}} ‚Äî Admin Login</h2>\n{% if error %}\n<p style=\"color: red;\">{{error}}</p>\n{% endif %}\n<form method=\"post\">\nPassword: <input type=\"password\" name=\"password\" required><br><br>\n<input type=\"submit\" value=\"Login\">\n</form>\n\"\"\"\n\nTEMPLATE = \"\"\"\n<!doctype html>\n<title>XT Arb Admin</title>\n<h2>{{bot_name}} ‚Äî Admin panel</h2>\n<a href=\"/logout\" style=\"float: right;\">Logout</a>\n<p><strong>Status:</strong> {% if dry_run %}DRY RUN MODE (Safe){% else %}<span style=\"color: red;\">LIVE TRADING ACTIVE</span>{% endif %}</p>\n\n<h3>ü§ñ Bot Control</h3>\n<form method=\"post\" action=\"/control\" style=\"margin-bottom: 20px;\">\n<button name=\"action\" value=\"start\" type=\"submit\" style=\"background-color: green; color: white; padding: 10px 20px; margin: 5px;\">‚ñ∂Ô∏è START BOT</button>\n<button name=\"action\" value=\"stop\" type=\"submit\" style=\"background-color: red; color: white; padding: 10px 20px; margin: 5px;\">‚èπÔ∏è STOP BOT</button>\n<button name=\"action\" value=\"refresh\" type=\"submit\" style=\"background-color: blue; color: white; padding: 10px 20px; margin: 5px;\">üîÑ REFRESH BALANCE</button>\n</form>\n\n<h3>Account Balance</h3>\n<table border=\"1\" style=\"border-collapse: collapse;\">\n<tr><th>Currency</th><th>Total</th><th>Available</th><th>Used</th></tr>\n{% for currency, info in balance.items() %}\n<tr>\n  <td>{{currency}}</td>\n  <td>{{info.total|round(4)}}</td>\n  <td>{{info.available|round(4)}}</td>\n  <td>{{info.used|round(4)}}</td>\n</tr>\n{% endfor %}\n</table>\n<form method=\"post\" action=\"/update\">\nOrder amount (USDT): <input name=\"order_amount\" value=\"{{order_amount}}\"><br>\nMin spread (%): <input name=\"min_spread\" value=\"{{min_spread}}\"><br>\nLeverage: <input name=\"leverage\" value=\"{{leverage}}\"><br>\nMax open positions per symbol: <input name=\"max_open\" value=\"{{max_open}}\"><br>\nOrder book depth: <input name=\"depth\" value=\"{{depth}}\"><br>\n{% if allow_live %}\nDRY_RUN: <input type=\"checkbox\" name=\"dry\" {% if dry_run %}checked{% endif %}><br>\n{% else %}\nDRY_RUN: <input type=\"checkbox\" checked disabled> (Locked for security)<br>\n{% endif %}\n<input type=\"submit\" value=\"Save\">\n</form>\n\n<h3>Symbols (toggle to enable/disable)</h3>\n<form method=\"post\" action=\"/toggle\">\n{% for s, enabled in symbols.items() %}\n  <input type=\"checkbox\" name=\"sym\" value=\"{{s}}\" {% if enabled %}checked{% endif %}>{{s}}<br>\n{% endfor %}\n<input type=\"submit\" value=\"Apply\">\n</form>\n\n<h3>Active positions</h3>\n<ul>\n{% for s, pos in active.items() %}\n  <li>{{s}}: {{pos}}</li>\n{% endfor %}\n</ul>\n\"\"\"\n\n@app.route(\"/\")\n@login_required\ndef index():\n    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∑ XT.com\n    try:\n        from xt_client import create_xt, get_xt_futures_balance\n        xt = create_xt()\n        xt_balance_data = get_xt_futures_balance(xt)\n        \n        # –§–æ—Ä–º—É—î–º–æ –±–∞–ª–∞–Ω—Å —Ç—ñ–ª—å–∫–∏ –¥–ª—è XT.com\n        filtered_balance = {}\n        if float(xt_balance_data.get('total', 0)) > 0:\n            filtered_balance['XT_USDT'] = {\n                'total': xt_balance_data.get('total', 0),\n                'available': xt_balance_data.get('free', 0),\n                'used': xt_balance_data.get('used', 0)\n            }\n                \n    except Exception as e:\n        logging.error(f\"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è XT.com –±–∞–ª–∞–Ω—Å—É: {e}\")\n        filtered_balance = {}\n    \n    return render_template_string(TEMPLATE,\n        bot_name=config.BOT_NAME,\n        order_amount=config.ORDER_AMOUNT,\n        min_spread=config.MIN_SPREAD,\n        leverage=config.LEVERAGE,\n        max_open=config.MAX_OPEN_POSITIONS,\n        depth=config.ORDER_BOOK_DEPTH,\n        dry_run=config.DRY_RUN,\n        allow_live=config.ALLOW_LIVE_TRADING,\n        symbols=bot.trade_symbols,\n        active=bot.active_positions,\n        balance=filtered_balance\n    )\n\n@app.route(\"/update\", methods=[\"POST\"])\n@login_required\ndef update():\n    # ORDER_AMOUNT —Ç–µ–ø–µ—Ä –§–Ü–ö–°–û–í–ê–ù–ò–ô –Ω–∞ 5.0 USDT - –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è\n    # config.ORDER_AMOUNT = float(request.form.get(\"order_amount\", config.ORDER_AMOUNT)) # –ó–ê–ë–õ–û–ö–û–í–ê–ù–û\n    config.MIN_SPREAD = float(request.form.get(\"min_spread\", config.MIN_SPREAD))\n    config.LEVERAGE = int(request.form.get(\"leverage\", config.LEVERAGE))\n    config.MAX_OPEN_POSITIONS = int(request.form.get(\"max_open\", config.MAX_OPEN_POSITIONS))\n    config.ORDER_BOOK_DEPTH = int(request.form.get(\"depth\", config.ORDER_BOOK_DEPTH))\n    config.DRY_RUN = request.form.get(\"dry\", str(config.DRY_RUN)) in [\"True\",\"true\",\"1\",\"on\"]\n    utils.save_config_to_file({\n        # \"ORDER_AMOUNT\": config.ORDER_AMOUNT,  # –ó–ê–ë–õ–û–ö–û–í–ê–ù–û - –∑–∞–≤–∂–¥–∏ 5.0\n        \"MIN_SPREAD\": config.MIN_SPREAD,\n        \"LEVERAGE\": config.LEVERAGE,\n        \"MAX_OPEN_POSITIONS\": config.MAX_OPEN_POSITIONS,\n        \"ORDER_BOOK_DEPTH\": config.ORDER_BOOK_DEPTH,\n        \"DRY_RUN\": config.DRY_RUN\n    })\n    return redirect(url_for('index'))\n\n@app.route(\"/toggle\", methods=[\"POST\"])\n@login_required\ndef toggle():\n    sels = request.form.getlist(\"sym\")\n    for s in list(bot.trade_symbols.keys()):\n        bot.trade_symbols[s] = (s in sels)\n    return redirect(url_for('index'))\n\n@app.route(\"/login\", methods=[\"GET\", \"POST\"])\ndef login():\n    error = None\n    if request.method == \"POST\":\n        password = request.form.get(\"password\", \"\")\n        # –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –¥–≤–æ—Ö –∞–¥–º—ñ–Ω—ñ–≤ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –ø–∞—Ä–æ–ª—è–º–∏\n        if password == config.ADMIN_PASSWORD or (config.ADMIN_2_PASSWORD and password == config.ADMIN_2_PASSWORD):\n            session['logged_in'] = True\n            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫–∏–π –∞–¥–º—ñ–Ω —É–≤—ñ–π—à–æ–≤\n            if password == config.ADMIN_PASSWORD:\n                session['admin_id'] = 1\n                logging.info(\"‚úÖ –ê–¥–º—ñ–Ω 1 —É–≤—ñ–π—à–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É\")\n            else:\n                session['admin_id'] = 2\n                logging.info(\"‚úÖ –ê–¥–º—ñ–Ω 2 —É–≤—ñ–π—à–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É\")\n            return redirect(url_for('index'))\n        else:\n            error = \"–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å\"\n    return render_template_string(LOGIN_TEMPLATE, \n                                  bot_name=config.BOT_NAME, \n                                  error=error)\n\n@app.route(\"/control\", methods=[\"POST\"])\n@login_required  \ndef control():\n    action = request.form.get(\"action\")\n    if action == \"start\":\n        # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ (–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≤–æ—Ä–∫–µ—Ä–∏)\n        bot.restart_workers()\n        logging.info(\"üü¢ Bot STARTED via admin panel\")\n    elif action == \"stop\":\n        # –ó—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞\n        bot.stop_all_workers()\n        logging.info(\"üî¥ Bot STOPPED via admin panel\")\n    elif action == \"refresh\":\n        logging.info(\"üîÑ Balance refreshed via admin panel\")\n    return redirect(url_for('index'))\n\n@app.route(\"/logout\")\ndef logout():\n    session.pop('logged_in', None)\n    return redirect(url_for('login'))\n\n@app.route(\"/api/auth/login\", methods=[\"POST\"])\ndef api_login():\n    \"\"\"API endpoint –¥–ª—è React frontend\"\"\"\n    try:\n        data = request.get_json()\n        api_key = data.get('api_key', '')\n        api_secret = data.get('api_secret', '')\n        password = data.get('password', '')\n        \n        if password != config.ADMIN_PASSWORD:\n            return jsonify({\"success\": False, \"detail\": \"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å\"}), 401\n        \n        import os\n        if api_key != os.getenv('XT_API_KEY') or api_secret != os.getenv('XT_API_SECRET'):\n            return jsonify({\"success\": False, \"detail\": \"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ API –∫–ª—é—á—ñ XT.com\"}), 401\n        \n        session['logged_in'] = True\n        return jsonify({\n            \"success\": True,\n            \"token\": \"trinkenbot-session-token\",\n            \"message\": \"–£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥\"\n        })\n    except Exception as e:\n        logging.error(f\"API login error: {e}\")\n        return jsonify({\"success\": False, \"detail\": str(e)}), 500\n\ndef run_admin():\n    app.run(host=\"0.0.0.0\", port=5000, debug=False)\n\nif __name__ == \"__main__\":\n    run_admin()","size_bytes":8556},"blockchain_pools_client.py":{"content":"\"\"\"\nüöÄ –ü–†–Ø–ú–Ü –ë–õ–û–ö–ß–ï–ô–ù –ü–£–õ - Direct Blockchain Pool Client\n–ó–∞–º—ñ–Ω—é—î –ø–ª–∞—Ç–Ω–∏–π DexScreener API –Ω–∞ –ø—Ä—è–º—ñ –∑–∞–ø–∏—Ç–∏ –¥–æ –±–ª–æ–∫—á–µ–π–Ω –ø—É–ª—ñ–≤\n–ü—ñ–¥—Ç—Ä–∏–º–∫–∞: Ethereum (Uniswap), BSC (PancakeSwap), Solana (Raydium/Orca)\n\"\"\"\n\nimport logging\nimport time\nimport struct\nimport base64\nfrom typing import Dict, Optional, List, Any\nfrom concurrent.futures import ThreadPoolExecutor, TimeoutError\nimport threading\n\n# Ethereum/BSC –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è\ntry:\n    from web3 import Web3\n    WEB3_AVAILABLE = True\nexcept ImportError:\n    WEB3_AVAILABLE = False\n    logging.warning(\"‚ö†Ô∏è Web3.py –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - Ethereum/BSC –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ\")\n\n# Solana –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è  \ntry:\n    from solana.rpc.api import Client as SolanaClient\n    SOLANA_AVAILABLE = True\nexcept ImportError:\n    SOLANA_AVAILABLE = False\n    logging.warning(\"‚ö†Ô∏è Solana –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - Solana –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ\")\n\nimport config\n\nclass BlockchainPoolsClient:\n    \"\"\"\n    üåê –ü–†–Ø–ú–Ü –ë–õ–û–ö–ß–ï–ô–ù –ü–£–õ - –ï–∫–æ–Ω–æ–º—ñ—è $39/–º—ñ—Å—è—Ü—å\n    –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω –Ω–∞–ø—Ä—è–º—É –∑ Uniswap, PancakeSwap, Raydium –±–µ–∑ API\n    \"\"\"\n    \n    def __init__(self):\n        # üîó RPC –∑'—î–¥–Ω–∞–Ω–Ω—è (Ankr Premium endpoints)\n        self.ethereum_rpc = \"https://rpc.ankr.com/eth/9276689ff4f125c6132d230d9adfc6be222f8c7d8444fb251cb0c8ccff295d70\"\n        self.bsc_rpc = \"https://rpc.ankr.com/bsc/9276689ff4f125c6132d230d9adfc6be222f8c7d8444fb251cb0c8ccff295d70\"\n        self.solana_rpc = \"https://rpc.ankr.com/solana/9276689ff4f125c6132d230d9adfc6be222f8c7d8444fb251cb0c8ccff295d70\"\n        \n        # üåê –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤\n        self.w3_eth = None\n        self.w3_bsc = None  \n        self.solana_client = None\n        \n        if WEB3_AVAILABLE:\n            try:\n                self.w3_eth = Web3(Web3.HTTPProvider(self.ethereum_rpc))\n                self.w3_bsc = Web3(Web3.HTTPProvider(self.bsc_rpc))\n                logging.info(\"‚úÖ Ethereum/BSC Web3 –∑'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\")\n            except Exception as e:\n                logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ Web3 —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}\")\n                self.w3_eth = None\n                self.w3_bsc = None\n        \n        if SOLANA_AVAILABLE:\n            try:\n                self.solana_client = SolanaClient(self.solana_rpc)\n                logging.info(\"‚úÖ Solana RPC –∑'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\")\n            except Exception as e:\n                logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ Solana —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}\")\n                self.solana_client = None\n        \n        # üèä‚Äç‚ôÇÔ∏è –¢–Ü–õ–¨–ö–ò –ê–î–†–ï–°–ò –†–ï–ê–õ–¨–ù–ò–• –ü–£–õ–Ü–í - –ë–ï–ó –§–ï–ô–ö–û–í–ò–• –¶–Ü–ù\n        self.pools = {\n            # –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: Ethereum Uniswap V2 –†–ï–ê–õ–¨–ù–Ü LP –ø—É–ª–∏ (–∫–æ–∂–µ–Ω —Ç–æ–∫–µ–Ω –º–∞—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –ø—É–ª)\n            'ethereum': {\n                'ETH': {'address': '0x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852'},  # ETH/USDT –ø—É–ª\n                'WBTC': {'address': '0x0de0fa91b6dbab8c8503aaa2d1dfa91a192cb149'}, # WBTC/USDT –ø—É–ª\n                'UNI': {'address': '0xd3d2e2692501a5c9ca623199d38826e513033a17'},  # UNI/ETH –ø—É–ª\n                'LINK': {'address': '0xa2107fa5b38d9bbd2c461d6edf11b11a50f6b974'}, # LINK/ETH –ø—É–ª\n                'MATIC': {'address': '0x88c095c8ba2c7a1353cf3d21e692c5d4d0f90793'}, # MATIC/USDT –ø—É–ª (–°–ü–†–ê–í–ñ–ù–Ü–ô)\n                'SHIB': {'address': '0x773dd321873fe70553acc295b1b49a104d968cc8'}, # SHIB/USDT –ø—É–ª (–°–ü–†–ê–í–ñ–ù–Ü–ô)\n                \n                # –ù–û–í–Ü –ü–û–ü–£–õ–Ø–†–ù–Ü –¢–û–ö–ï–ù–ò (Uniswap V2 –∞–¥—Ä–µ—Å–∏)\n                'PEPE': {'address': '0xa43fe16908251ee70ef74718545e4fe6c5ccec9f'}, # PEPE/WETH\n                'AAVE': {'address': '0xdfc14d2af169b0d36c4eff567ada9b2e0cae044f'}, # AAVE/ETH\n                'CRV': {'address': '0x3da1313ae46132a397d90d95b1424a9a7e3e0fce'}, # CRV/ETH\n                'SNX': {'address': '0x43ae24960e5534731fc831386c07755a2dc33d47'}, # SNX/ETH\n                'COMP': {'address': '0xcffdded873554f362ac02f8fb1f02e5ada10516f'}, # COMP/ETH\n                'MKR': {'address': '0xc2adda861f89bbb333c90c492cb837741916a225'}, # MKR/ETH\n                'YFI': {'address': '0x2fdbadf3c4d5a8666bc06645b8358ab803996e28'}, # YFI/ETH\n                'SUSHI': {'address': '0x795065dcc9f64b5614c407a6efdc400da6221fb0'}, # SUSHI/ETH\n                'GRT': {'address': '0x2e81ec0b8b4022fac83a21b2f2b4b8f5ed744d70'}, # GRT/ETH\n                'LRC': {'address': '0x8878df9e1a7c87dcbf6d3999d997f262c05d8c70'}, # LRC/ETH\n            },\n            # BSC PancakeSwap –ø—É–ª–∏ (—Ç—ñ–ª—å–∫–∏ –∞–¥—Ä–µ—Å–∏)\n            'bsc': self._get_real_bsc_pools(),\n            # Solana Raydium/Orca –ø—É–ª–∏ (—Ç—ñ–ª—å–∫–∏ –∞–¥—Ä–µ—Å–∏)\n            'solana': {\n                'SOL': {'address': '6UeJ7gkN8Y3VJpQwaP94sYV1xUMWuoFk9DZCuE5W6uY9'},  # SOL/USDT\n                'RAY': {'address': '91iGjCCPASPd8M2yRXU6QMB2hVYH53PSYp7nF5K31Mz'},  # RAY/USDT\n                'BONK': {'address': '4dDkHvL3QLnFTRlWJxuJqvyHaL3aWdFkSJGbhkW7Z8XR'}, # BONK/SOL\n                \n                # –ù–û–í–Ü –ü–û–ü–£–õ–Ø–†–ù–Ü –¢–û–ö–ï–ù–ò\n                'WIF': {'address': '4rkVHt24zWY4j4SHVX8Y6q6LN4LfmVzJbL3tCi5pCeBc'},  # WIF/SOL\n                'JTO': {'address': '5r3vDsNTFw8YGYqZ3cAPt4W9YCvJMfVR9JLjE9TrXVvx'},  # JTO/USDC\n                'PYTH': {'address': '4dFszGKGrJcCi5UMpGMb3AX8j9XtPLdoKFvCGnMs5vDm'}, # PYTH/USDC\n            }\n        }\n        \n        # üîß Uniswap V2 ABI –¥–ª—è getReserves\n        self.uniswap_v2_abi = [\n            {\n                \"constant\": True,\n                \"inputs\": [],\n                \"name\": \"getReserves\",\n                \"outputs\": [\n                    {\"internalType\": \"uint112\", \"name\": \"reserve0\", \"type\": \"uint112\"},\n                    {\"internalType\": \"uint112\", \"name\": \"reserve1\", \"type\": \"uint112\"},\n                    {\"internalType\": \"uint32\", \"name\": \"blockTimestampLast\", \"type\": \"uint32\"}\n                ],\n                \"payable\": False,\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n            }\n        ]\n        \n        # üíæ –ö–µ—à—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó\n        self.price_cache = {}\n        self.cache_timeout = 60  # 1 —Ö–≤–∏–ª–∏–Ω–∞ –∫–µ—à\n        self.cache_lock = threading.Lock()\n        \n        # üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n        self.stats = {\n            'ethereum_requests': 0,\n            'bsc_requests': 0, \n            'solana_requests': 0,\n            'cache_hits': 0,\n            'cache_misses': 0,\n            'errors': 0,\n            'successful_prices': 0\n        }\n        \n        logging.info(f\"üöÄ Blockchain Pools Client —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ\")\n        logging.info(f\"üìä –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –º–µ—Ä–µ–∂—ñ: Ethereum={WEB3_AVAILABLE}, BSC={WEB3_AVAILABLE}, Solana={SOLANA_AVAILABLE}\")\n        logging.info(f\"üìä –ü—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è {len(self.pools['ethereum'])} Ethereum + {len(self.pools['bsc'])} BSC + {len(self.pools['solana'])} Solana —Ç–æ–∫–µ–Ω—ñ–≤\")\n    \n    def _get_real_bsc_pools(self):\n        \"\"\"\n        üéØ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –¢–Ü–õ–¨–ö–ò –†–ï–ê–õ–¨–ù–Ü BSC PANCAKESWAP V2 –ü–£–õ–ò - –ö–û–ñ–ï–ù –¢–û–ö–ï–ù –ú–ê–Ñ –£–ù–Ü–ö–ê–õ–¨–ù–ò–ô –ü–£–õ\n        –ü–æ–≤–µ—Ä—Ç–∞—î —Ç—ñ–ª—å–∫–∏ –∞–¥—Ä–µ—Å–∏ —Å–ø—Ä–∞–≤–∂–Ω—ñ—Ö LP –ø—É–ª—ñ–≤ PancakeSwap V2 –∑ BSCScan (–ë–ï–ó –§–ï–ô–ö–û–í–ò–• –¶–Ü–ù)\n        \"\"\"\n        # –ö–†–ò–¢–ò–ß–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –∫–æ–∂–µ–Ω —Ç–æ–∫–µ–Ω —Ç–µ–ø–µ—Ä –º–∞—î –≤–ª–∞—Å–Ω–∏–π —Ä–µ–∞–ª—å–Ω–∏–π LP –ø—É–ª\n        real_pools = {\n            # –û–°–ù–û–í–ù–Ü —Ç–æ–∫–µ–Ω–∏ –∑ –†–ï–ê–õ–¨–ù–ò–ú–ò —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏ PancakeSwap V2 –ø—É–ª—ñ–≤\n            'BNB': {'address': '0x58f876857a02d6762e0101bb5c46a8c1ed44dc16'},     # BNB/USDT (–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ BSCScan)\n            'BTCB': {'address': '0x3f803ec2b816ea7f06ec76aa2b6f2532f9892d62'},    # BTCB/USDT (–°–ü–†–ê–í–ñ–ù–Ü–ô)\n            'BTC': {'address': '0x3f803ec2b816ea7f06ec76aa2b6f2532f9892d62'},     # BTC = BTCB –Ω–∞ BSC\n            'ADA': {'address': '0xf53bed8082d225d7b53420ab560658c5e6ff42d8'},     # ADA/USDT (–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ BSCScan)\n            # –í–ò–ü–†–ê–í–õ–ï–ù–Ü –ø—É–ª–∏ - –∫–æ–∂–µ–Ω —Ç–æ–∫–µ–Ω —Ç–µ–ø–µ—Ä —á–∏—Ç–∞—î –∑—ñ —Å–≤–æ–≥–æ –≤–ª–∞—Å–Ω–æ–≥–æ –ø—É–ª—É\n            'ETH': {'address': '0x531febbeb9a61d948c384acfbe6dcc51057aea7e'},     # ETH/USDT (–°–ü–†–ê–í–ñ–ù–Ü–ô)\n            'DOGE': {'address': '0x0fa119e6a12e3540c2412f9eda0221ffd16a7934'},    # DOGE/USDT (–°–ü–†–ê–í–ñ–ù–Ü–ô)\n            'LTC': {'address': '0xb6145a7c2bfd04ffb53e1d8329b4f965e71016c9'},     # LTC/USDT (–°–ü–†–ê–í–ñ–ù–Ü–ô)\n            \n            # –ù–û–í–Ü –ü–û–ü–£–õ–Ø–†–ù–Ü –¢–û–ö–ï–ù–ò (PancakeSwap V2 –∞–¥—Ä–µ—Å–∏)\n            'CAKE': {'address': '0xa39af17ce4a8eb807e076805da1e2b8ea7d0755b'}, # CAKE/USDT\n            'XRP': {'address': '0xc3dbbe8cfeb69e2e1e4ba2dfef9dded82be5e01e'},  # XRP/USDT\n            'TRX': {'address': '0x77eadb2c2ea1a3f2d8ff09b27e5c62f96c4b31f7'},  # TRX/USDT\n            'XVS': {'address': '0x7eb5d86fd78f3852a3e0e064f2842d45a3db6ea2'},  # XVS/USDT\n            'ALICE': {'address': '0xc2d00de94795e60fb76bc37d899170996cbda436'}, # ALICE/BNB\n            'ALPHA': {'address': '0x4e0f3385d932f7179dee045369286ffa6b03d887'}, # ALPHA/BNB\n        }\n        \n        return real_pools\n    \n    def _get_cache_key(self, symbol: str, network: str) -> str:\n        \"\"\"–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª—é—á–∞ –∫–µ—à—É\"\"\"\n        return f\"{network}_{symbol.upper()}\"\n    \n    def _is_cache_valid(self, cache_entry: Dict) -> bool:\n        \"\"\"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ –∫–µ—à—É\"\"\"\n        if not cache_entry:\n            return False\n        return (time.time() - cache_entry.get('timestamp', 0)) < self.cache_timeout\n    \n    def _get_from_cache(self, cache_key: str) -> Optional[float]:\n        \"\"\"–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –∑ –∫–µ—à—É\"\"\"\n        with self.cache_lock:\n            cache_entry = self.price_cache.get(cache_key)\n            if cache_entry and self._is_cache_valid(cache_entry):\n                self.stats['cache_hits'] += 1\n                return cache_entry['price']\n            elif cache_entry:\n                del self.price_cache[cache_key]\n            self.stats['cache_misses'] += 1\n            return None\n    \n    def _save_to_cache(self, cache_key: str, price: float) -> None:\n        \"\"\"–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ü—ñ–Ω–∏ –≤ –∫–µ—à\"\"\"\n        with self.cache_lock:\n            self.price_cache[cache_key] = {\n                'price': price,\n                'timestamp': time.time()\n            }\n    \n    def get_ethereum_price(self, symbol: str) -> Optional[float]:\n        \"\"\"\n        üíé ETHEREUM UNISWAP V2 –¶–Ü–ù–ò\n        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –Ω–∞–ø—Ä—è–º—É –∑ Uniswap –ø—É–ª—É\n        \"\"\"\n        if not WEB3_AVAILABLE or not self.w3_eth:\n            return None\n        \n        cache_key = self._get_cache_key(symbol, 'ethereum')\n        cached_price = self._get_from_cache(cache_key)\n        if cached_price:\n            return cached_price\n        \n        self.stats['ethereum_requests'] += 1\n        \n        try:\n            pool_info = self.pools['ethereum'].get(symbol.upper())\n            if not pool_info:\n                logging.debug(f\"‚ùå Ethereum: –Ω–µ–º–∞—î –ø—É–ª—É –¥–ª—è {symbol}\")\n                return None\n            \n            # –ß–∏—Ç–∞—î–º–æ —Ä–µ–∞–ª—å–Ω—É —Ü—ñ–Ω—É –∑ Uniswap –ø—É–ª—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é getReserves\n            pool_address = pool_info['address']\n            # –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ checksum –∞–¥—Ä–µ—Å—É –¥–ª—è Web3\n            checksum_address = self.w3_eth.to_checksum_address(pool_address)\n            contract = self.w3_eth.eth.contract(address=checksum_address, abi=self.uniswap_v2_abi)\n            \n            # –í–∏–∫–ª–∏–∫–∞—î–º–æ getReserves –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤—ñ–≤\n            reserves = contract.functions.getReserves().call()\n            reserve0, reserve1, _ = reserves\n            \n            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ü—ñ–Ω—É (reserve1/reserve0 –¥–ª—è USDT –ø—É–ª—ñ–≤)\n            if reserve0 > 0:\n                # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö decimals (ETH=18, USDT=6)\n                if symbol.upper() == 'ETH':\n                    price = (reserve1 / 1e6) / (reserve0 / 1e18)  # USDT(6) / ETH(18)\n                else:\n                    price = (reserve1 / 1e6) / (reserve0 / 1e18)  # USDT(6) / TOKEN(18)\n            else:\n                price = 0\n            \n            if price > 0:\n                self._save_to_cache(cache_key, price)\n                self.stats['successful_prices'] += 1\n                logging.info(f\"‚úÖ Ethereum {symbol}: ${price:.6f}\")\n                return price\n            \n        except Exception as e:\n            logging.error(f\"‚ùå Ethereum –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}\")\n            self.stats['errors'] += 1\n        \n        return None\n    \n    def get_bsc_price(self, symbol: str) -> Optional[float]:\n        \"\"\"\n        üü° BSC PANCAKESWAP V2 –¶–Ü–ù–ò  \n        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –Ω–∞–ø—Ä—è–º—É –∑ PancakeSwap –ø—É–ª—É\n        \"\"\"\n        if not WEB3_AVAILABLE or not self.w3_bsc:\n            return None\n        \n        cache_key = self._get_cache_key(symbol, 'bsc')\n        cached_price = self._get_from_cache(cache_key)\n        if cached_price:\n            return cached_price\n        \n        self.stats['bsc_requests'] += 1\n        \n        try:\n            pool_info = self.pools['bsc'].get(symbol.upper())\n            if not pool_info:\n                logging.debug(f\"‚ùå BSC: –Ω–µ–º–∞—î –ø—É–ª—É –¥–ª—è {symbol}\")\n                return None\n            \n            # –ß–∏—Ç–∞—î–º–æ —Ä–µ–∞–ª—å–Ω—É —Ü—ñ–Ω—É –∑ PancakeSwap –ø—É–ª—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é getReserves\n            pool_address = pool_info['address']\n            # –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ checksum –∞–¥—Ä–µ—Å—É –¥–ª—è Web3\n            checksum_address = self.w3_bsc.to_checksum_address(pool_address)\n            contract = self.w3_bsc.eth.contract(address=checksum_address, abi=self.uniswap_v2_abi)\n            \n            # –í–∏–∫–ª–∏–∫–∞—î–º–æ getReserves –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤—ñ–≤\n            reserves = contract.functions.getReserves().call()\n            reserve0, reserve1, _ = reserves\n            \n            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ü—ñ–Ω—É (reserve1/reserve0 –¥–ª—è USDT –ø—É–ª—ñ–≤)\n            if reserve0 > 0:\n                # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö decimals (–±—ñ–ª—å—à—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤=18, USDT=18 –Ω–∞ BSC)\n                price = reserve1 / reserve0  # USDT / TOKEN\n            else:\n                price = 0\n            \n            if price > 0:\n                self._save_to_cache(cache_key, price)\n                self.stats['successful_prices'] += 1\n                logging.info(f\"‚úÖ BSC {symbol}: ${price:.6f}\")\n                return price\n            \n        except Exception as e:\n            logging.error(f\"‚ùå BSC –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}\")\n            self.stats['errors'] += 1\n        \n        return None\n    \n    def get_solana_price(self, symbol: str) -> Optional[float]:\n        \"\"\"\n        ‚ö° SOLANA RAYDIUM/ORCA –¶–Ü–ù–ò\n        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –Ω–∞–ø—Ä—è–º—É –∑ Raydium –ø—É–ª—É\n        \"\"\"\n        if not SOLANA_AVAILABLE or not self.solana_client:\n            return None\n        \n        cache_key = self._get_cache_key(symbol, 'solana')\n        cached_price = self._get_from_cache(cache_key)\n        if cached_price:\n            return cached_price\n        \n        self.stats['solana_requests'] += 1\n        \n        try:\n            pool_info = self.pools['solana'].get(symbol.upper())\n            if not pool_info:\n                logging.debug(f\"‚ùå Solana: –Ω–µ–º–∞—î –ø—É–ª—É –¥–ª—è {symbol}\")\n                return None\n            \n            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–¥—Ä–µ—Å—É –ø—É–ª—É —Ç–∞ —á–∏—Ç–∞—î–º–æ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ\n            pool_address = pool_info['address']\n            \n            # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ Pubkey –¥–ª—è Solana\n            if SOLANA_AVAILABLE:\n                try:\n                    from solders.pubkey import Pubkey\n                    solana_pubkey = Pubkey.from_string(pool_address)\n                except ImportError:\n                    try:\n                        from solana.publickey import Pubkey\n                        solana_pubkey = Pubkey(pool_address)\n                    except ImportError:\n                        logging.warning(\"‚ö†Ô∏è Solana Pubkey –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ Solana\")\n                        return None\n            else:\n                return None\n            \n            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç–∞ –ø—É–ª—É\n            account_info = self.solana_client.get_account_info(solana_pubkey)\n            if not account_info.value:\n                logging.error(f\"‚ùå Solana: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫–∞—É–Ω—Ç –¥–ª—è {symbol}\")\n                return None\n            \n            # –î–µ–∫–æ–¥—É—î–º–æ –¥–∞–Ω—ñ (Raydium –º–∞—î —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π layout)\n            data = account_info.value.data\n            if isinstance(data, list) and len(data) > 0:\n                decoded = base64.b64decode(data[0])\n            elif isinstance(data, str):\n                decoded = base64.b64decode(data)\n            else:\n                decoded = data\n            \n            # –ü–∞—Ä—Å–∏–º–æ —Ä–µ–∑–µ—Ä–≤–∏ –∑ layout Raydium\n            # –†–µ–∑–µ—Ä–≤–∏ –∑–∞–∑–≤–∏—á–∞–π –Ω–∞ offset 64 –¥–ª—è Raydium\n            if len(decoded) >= 80:\n                reserve0, reserve1 = struct.unpack_from(\"<QQ\", decoded, 64)\n                \n                # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ü—ñ–Ω—É\n                if symbol.upper() == 'SOL':\n                    # SOL/USDT –ø—É–ª\n                    price = reserve1 / reserve0 if reserve0 > 0 else 0\n                    price = price / 1e3  # SOL(9) vs USDT(6) decimals\n                else:\n                    price = reserve1 / reserve0 if reserve0 > 0 else 0\n                    price = price / 1e3  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è\n                \n                if price > 0:\n                    self._save_to_cache(cache_key, price)\n                    self.stats['successful_prices'] += 1\n                    logging.info(f\"‚úÖ Solana {symbol}: ${price:.6f}\")\n                    return price\n            \n        except Exception as e:\n            logging.error(f\"‚ùå Solana –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}\")\n            self.stats['errors'] += 1\n        \n        return None\n    \n    def get_token_price(self, symbol: str, preferred_network: Optional[str] = None) -> Optional[float]:\n        \"\"\"\n        üéØ –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ —Ç–æ–∫–µ–Ω–∞\n        –ü—Ä–æ–±—É—î –≤—Å—ñ –º–µ—Ä–µ–∂—ñ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –ø–µ—Ä—à—É –¥–æ—Å—Ç—É–ø–Ω—É —Ü—ñ–Ω—É\n        \"\"\"\n        clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '').upper()\n        \n        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ä—è–¥–æ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–µ—Ä–µ–∂\n        networks = ['ethereum', 'bsc', 'solana']\n        if preferred_network and preferred_network in networks:\n            networks.remove(preferred_network)\n            networks.insert(0, preferred_network)\n        \n        # –ü—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –∑ –∫–æ–∂–Ω–æ—ó –º–µ—Ä–µ–∂—ñ\n        for network in networks:\n            try:\n                if network == 'ethereum':\n                    price = self.get_ethereum_price(clean_symbol)\n                elif network == 'bsc':\n                    price = self.get_bsc_price(clean_symbol)\n                elif network == 'solana':\n                    price = self.get_solana_price(clean_symbol)\n                else:\n                    continue\n                \n                if price and price > 0:\n                    logging.info(f\"üéØ {clean_symbol}: ${price:.6f} ({network})\")\n                    return price\n                    \n            except Exception as e:\n                logging.debug(f\"‚ö†Ô∏è {network} –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {clean_symbol}: {e}\")\n        \n        logging.warning(f\"‚ùå {clean_symbol}: —Ü—ñ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –∂–æ–¥–Ω—ñ–π –º–µ—Ä–µ–∂—ñ\")\n        return None\n    \n    def get_token_with_liquidity(self, symbol: str) -> Dict[str, Any]:\n        \"\"\"\n        üíß –û–¢–†–ò–ú–ê–ù–ù–Ø –¶–Ü–ù–ò + –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –õ–Ü–ö–í–Ü–î–ù–Ü–°–¢–¨\n        –ü–æ–≤–µ—Ä—Ç–∞—î —Ü—ñ–Ω—É —ñ –æ—Ü—ñ–Ω–∫—É –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ\n        \"\"\"\n        price = self.get_token_price(symbol)\n        \n        if price:\n            # –°–∏–º—É–ª—è—Ü—ñ—è –≤–∏—Å–æ–∫–æ—ó –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤\n            high_liquidity_tokens = ['ETH', 'BTC', 'WBTC', 'BNB', 'SOL', 'UNI', 'LINK']\n            liquidity_usd = 1000000 if symbol.upper() in high_liquidity_tokens else 500000\n            \n            return {\n                'token_symbol': symbol.upper(),\n                'price_usd': price,\n                'liquidity_usd': liquidity_usd,\n                'data_source': 'blockchain_pools_direct',\n                'timestamp': time.time()\n            }\n        \n        return {}\n    \n    def get_stats(self) -> Dict:\n        \"\"\"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–±–æ—Ç–∏\"\"\"\n        total_requests = sum([\n            self.stats['ethereum_requests'],\n            self.stats['bsc_requests'], \n            self.stats['solana_requests']\n        ])\n        \n        success_rate = (self.stats['successful_prices'] / max(total_requests, 1)) * 100\n        cache_hit_rate = (self.stats['cache_hits'] / max(self.stats['cache_hits'] + self.stats['cache_misses'], 1)) * 100\n        \n        return {\n            **self.stats,\n            'total_requests': total_requests,\n            'success_rate_percent': round(success_rate, 2),\n            'cache_hit_rate_percent': round(cache_hit_rate, 2),\n            'cache_size': len(self.price_cache),\n            'networks_available': {\n                'ethereum': WEB3_AVAILABLE and bool(self.w3_eth),\n                'bsc': WEB3_AVAILABLE and bool(self.w3_bsc),\n                'solana': SOLANA_AVAILABLE and bool(self.solana_client)\n            }\n        }\n    \n    def health_check(self) -> Dict:\n        \"\"\"üè• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏\"\"\"\n        try:\n            # –¢–µ—Å—Ç –∑ ETH\n            test_price = self.get_token_price('ETH')\n            \n            return {\n                'status': 'healthy' if test_price else 'degraded',\n                'web3_available': WEB3_AVAILABLE,\n                'solana_available': SOLANA_AVAILABLE,\n                'test_price_success': test_price is not None,\n                'stats': self.get_stats()\n            }\n        except Exception as e:\n            return {\n                'status': 'error',\n                'error': str(e),\n                'stats': self.get_stats()\n            }\n\n\n# üåü –ì–õ–û–ë–ê–õ–¨–ù–ò–ô –Ü–ù–°–¢–ê–ù–°\nblockchain_client = BlockchainPoolsClient()\n\n# üîÑ COMPATIBILITY FUNCTIONS\ndef get_blockchain_token_price(symbol: str, network: Optional[str] = None) -> Optional[float]:\n    \"\"\"–®–≤–∏–¥–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –∑ –±–ª–æ–∫—á–µ–π–Ω –ø—É–ª—ñ–≤\"\"\"\n    return blockchain_client.get_token_price(symbol, network)\n\ndef get_blockchain_token_data(symbol: str) -> Optional[Dict]:\n    \"\"\"–®–≤–∏–¥–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–æ–∫–µ–Ω–∞ –∑ –±–ª–æ–∫—á–µ–π–Ω –ø—É–ª—ñ–≤\"\"\"\n    return blockchain_client.get_token_with_liquidity(symbol)","size_bytes":23566},"bot.py":{"content":"import time\nimport threading\nimport requests\nimport json\nimport os\nfrom collections import deque\nfrom config import *\nfrom utils import calculate_spread, send_telegram, plot_spread_live, save_config_to_file, load_config_from_file, generate_crypto_signal, test_telegram_configuration, get_proper_dexscreener_link, send_to_admins_and_group\nfrom telegram_admin import run_telegram_bot\n# Gate.io integration removed - using only XT.com\n# # # import gate_client  # –í–∏–¥–∞–ª–µ–Ω–æ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ XT  # Removed: XT.com only system removed\nfrom xt_client import create_xt, load_xt_futures_markets, get_xt_price, is_xt_futures_tradeable, get_xt_futures_balance, xt_open_market_position, xt_close_position_market, analyze_xt_order_book_liquidity, fetch_xt_ticker, fetch_xt_order_book, get_xt_open_positions\nimport xt_client\n\n# Helper functions for XT.com compatibility (replacing Gate.io functions)\ndef fetch_ticker(exchange, symbol):\n    \"\"\"Wrapper for XT ticker\"\"\"\n    return fetch_xt_ticker(exchange, symbol)\n\ndef fetch_order_book(exchange, symbol, depth=10):\n    \"\"\"Wrapper for XT order book\"\"\"\n    return fetch_xt_order_book(exchange, symbol, depth)\nfrom dex_client import get_dex_price_simple, get_dex_token_info, get_advanced_token_analysis\nimport logging\nfrom datetime import datetime\nimport threading\n\n# XT.com - –î–í–ê –ü–ê–†–ê–õ–ï–õ–¨–ù–ò–• –ê–ö–ê–£–ù–¢–ò\nxt_account_1 = create_xt(api_key=XT_API_KEY, api_secret=XT_API_SECRET, account_name=\"Account 1\")  # –ü–µ—Ä—à–∏–π –∞–∫–∞—É–Ω—Ç\nxt_account_2 = create_xt(api_key=XT_ACCOUNT_2_API_KEY, api_secret=XT_ACCOUNT_2_API_SECRET, account_name=\"Account 2\")  # –î—Ä—É–≥–∏–π –∞–∫–∞—É–Ω—Ç\nxt = xt_account_1  # –î–ª—è backwards compatibility –∑ —ñ—Å–Ω—É—é—á–∏–º –∫–æ–¥–æ–º\nmarkets = {}  # XT markets will be stored here\nxt_markets_available = True\ntrade_symbols = {}  # runtime on/off per symbol\nactive_positions = {}  # symbol -> position dict {side, avg_entry, size_usdt, adds_done, last_add_price, tp_price, last_add_time, opened_at, expires_at, xt_pair_url, account}\nactive_positions_account_2 = {}  # –ü–æ–∑–∏—Ü—ñ—ó –¥—Ä—É–≥–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É\n\nspread_store = deque(maxlen=1000)\n_plot_thread = None\nbot_running = True\nmonitor_stop_event = threading.Event()  # üõ°Ô∏è THREAD-SAFE MONITOR: Event –∑–∞–º—ñ—Å—Ç—å boolean\nmonitor_lifecycle_lock = threading.Lock()  # üîí –ó–ê–•–ò–°–¢ –≤—ñ–¥ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –ø–æ—Ç–æ–∫—ñ–≤\nworker_threads = []\nmonitor_thread = None  # üéØ –†–µ—Ñ–µ—Ä–µ–Ω—Å –Ω–∞ –ø–æ—Ç—ñ–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É\n\n# üïí –ö–£–õ–î–ê–£–ù —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∫–æ–∂–Ω–æ—ó –º–æ–Ω–µ—Ç–∏ (2 —Ö–≤–∏–ª–∏–Ω–∏ —è–∫ –ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)\ntelegram_cooldown = {}  # symbol -> timestamp –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É\n# TELEGRAM_COOLDOWN_SEC —ñ–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è –∑ config.py –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ\n\n# üîí SIMPLE THREADING LOCKS (replaced external locks module)\nactive_positions_lock = threading.Lock()\nbalance_check_lock = threading.Lock()\norder_placement_lock = threading.Lock()\nconfig_lock = threading.Lock()\ntelegram_cooldown_lock = threading.Lock()\nopportunities_lock = threading.Lock()\nsignals_lock = threading.Lock()\ntrading_lock = threading.Lock()\nmonitoring_lock = threading.Lock()\nprocessing_symbols_lock = threading.Lock()\n\n# üéØ –ì–õ–û–ë–ê–õ–¨–ù–ò–ô –ü–û–®–£–ö–ê–ß –ù–ê–ô–ö–†–ê–©–ò–• –ú–û–ñ–õ–ò–í–û–°–¢–ï–ô (–∑–∞–º—ñ—Å—Ç—å –±–∞–≥–∞—Ç—å–æ—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤)\nbest_opportunities = {}  # {symbol: {spread, side, score, data}}\nlast_best_signal_time = 0\nBEST_SIGNAL_INTERVAL = 30  # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –û–î–ò–ù –Ω–∞–π–∫—Ä–∞—â–∏–π —Å–∏–≥–Ω–∞–ª —Ä–∞–∑ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥\n\n# üíæ –§–£–ù–ö–¶–Ü–á –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø/–ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ü–û–ó–ò–¶–Ü–ô\ndef save_positions_to_file():\n    \"\"\"–ó–±–µ—Ä—ñ–≥–∞—î active_positions –≤ positions.json –∑ –∑–∞—Ö–∏—Å—Ç–æ–º –≤—ñ–¥ race conditions\"\"\"\n    try:\n        with active_positions_lock:\n            positions_data = active_positions.copy()\n        \n        # –î–æ–¥–∞—î–º–æ –º—ñ—Ç–∫—É —á–∞—Å—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\n        save_data = {\n            'positions': positions_data,\n            'saved_at': time.time(),\n            'version': '1.1'  # –í–µ—Ä—Å—ñ—è –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ\n        }\n        \n        with open('positions.json', 'w') as f:\n            json.dump(save_data, f, indent=2)\n        \n        logging.info(f\"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(positions_data)} –ø–æ–∑–∏—Ü—ñ–π –≤ positions.json\")\n        return True\n    except Exception as e:\n        logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π: {e}\")\n        return False\n\ndef load_positions_from_file():\n    \"\"\"–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–æ–∑–∏—Ü—ñ—ó –∑ positions.json —Ç–∞ –æ–Ω–æ–≤–ª—é—î expires_at –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö –ø–æ–∑–∏—Ü—ñ–π\"\"\"\n    global active_positions\n    \n    try:\n        if not os.path.exists('positions.json'):\n            logging.info(\"üìÅ positions.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ—á–∏–Ω–∞—î–º–æ –∑ –ø—É—Å—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π\")\n            return\n        \n        with open('positions.json', 'r') as f:\n            save_data = json.load(f)\n        \n        # –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Å—Ç–∞—Ä–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ —Ç–∞ –Ω–æ–≤–∏—Ö\n        if isinstance(save_data, dict) and 'positions' in save_data:\n            loaded_positions = save_data['positions']\n            saved_at = save_data.get('saved_at', time.time())\n        else:\n            # –°—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç: –ø—Ä—è–º–æ —Å–ª–æ–≤–Ω–∏–∫ –ø–æ–∑–∏—Ü—ñ–π\n            loaded_positions = save_data\n            saved_at = time.time()\n        \n        current_time = time.time()\n        valid_positions = {}\n        \n        for symbol, position in loaded_positions.items():\n            # –§–Ü–ö–° –ë–ê–ì–£: –ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ timestamps!\n            if 'opened_at' not in position or position.get('opened_at', 0) <= 0:\n                position['opened_at'] = saved_at  # –ù–∞–±–ª–∏–∂–µ–Ω–∞ –º—ñ—Ç–∫–∞ —á–∞—Å—É\n                logging.info(f\"üîß {symbol}: –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ opened_at={position['opened_at']} –∑ —Ñ–∞–π–ª—É\")\n            else:\n                logging.info(f\"üîß {symbol}: –ó–±–µ—Ä–µ–∂–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏–π opened_at={position['opened_at']} –∑ —Ñ–∞–π–ª—É\")\n            \n            if 'expires_at' not in position or position.get('expires_at', 0) <= 0:\n                position['expires_at'] = position['opened_at'] + POSITION_MAX_AGE_SEC\n                logging.info(f\"üîß {symbol}: –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ expires_at={position['expires_at']} –∑ —Ñ–∞–π–ª—É\")\n            else:\n                logging.info(f\"üîß {symbol}: –ó–±–µ—Ä–µ–∂–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏–π expires_at={position['expires_at']} –∑ —Ñ–∞–π–ª—É\")\n            \n            if 'xt_pair_url' not in position:\n                position['xt_pair_url'] = generate_xt_pair_url(symbol)\n            \n            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ–∑–∏—Ü—ñ—è –Ω–µ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∞\n            if ENABLE_TIME_STOP and current_time >= position['expires_at']:\n                logging.warning(f\"‚è∞ {symbol}: –ü–æ–∑–∏—Ü—ñ—è –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∞ ({(current_time - position['expires_at'])/60:.1f}—Ö–≤), –±—É–¥–µ –∑–∞–∫—Ä–∏—Ç–∞\")\n                # –ù–µ –¥–æ–¥–∞—î–º–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—É –ø–æ–∑–∏—Ü—ñ—é, –≤–æ–Ω–∞ –±—É–¥–µ –∑–∞–∫—Ä–∏—Ç–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ü–∏–∫–ª—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É\n            else:\n                valid_positions[symbol] = position\n        \n        with active_positions_lock:\n            active_positions.update(valid_positions)\n        \n        logging.info(f\"üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(valid_positions)} –≤–∞–ª—ñ–¥–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –∑ positions.json\")\n        \n        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó\n        if len(valid_positions) != len(loaded_positions):\n            save_positions_to_file()\n        \n    except Exception as e:\n        logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π: {e}\")\n\ndef get_positions_by_account():\n    \"\"\"–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–∑–∏—Ü—ñ—ó —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø–æ –∞–∫–∞—É–Ω—Ç–∞—Ö + –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å\"\"\"\n    try:\n        with active_positions_lock:\n            positions_acc_1 = active_positions.copy()\n            positions_acc_2 = active_positions_account_2.copy()\n        \n        # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü—ñ–π –∞–∫–∞—É–Ω—Ç—É 1\n        account_1_positions = []\n        for symbol, position in positions_acc_1.items():\n            # –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ —â–æ –≤—Å—ñ —á–∏—Å–ª–æ–≤—ñ –ø–æ–ª—è –º–∞—é—Ç—å –≤–∞–ª—ñ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è (–Ω–µ None)\n            avg_entry = position.get('avg_entry')\n            avg_entry = float(avg_entry) if avg_entry is not None and avg_entry != 0 else 0.0\n            \n            size_usdt = position.get('size_usdt', 0)\n            size_usdt = float(size_usdt) if size_usdt is not None else 0.0\n            \n            pnl = calculate_pnl_percentage(position) if avg_entry > 0 else 0.0\n            pnl = float(pnl) if pnl is not None else 0.0\n            \n            position_data = {\n                'symbol': symbol,\n                'side': position.get('side', 'LONG'),\n                'size': size_usdt,\n                'entry_price': avg_entry,\n                'pnl': pnl,\n                'account': 1\n            }\n            account_1_positions.append(position_data)\n        \n        # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü—ñ–π –∞–∫–∞—É–Ω—Ç—É 2\n        account_2_positions = []\n        for symbol, position in positions_acc_2.items():\n            # –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ —â–æ –≤—Å—ñ —á–∏—Å–ª–æ–≤—ñ –ø–æ–ª—è –º–∞—é—Ç—å –≤–∞–ª—ñ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è (–Ω–µ None)\n            avg_entry = position.get('avg_entry')\n            avg_entry = float(avg_entry) if avg_entry is not None and avg_entry != 0 else 0.0\n            \n            size_usdt = position.get('size_usdt', 0)\n            size_usdt = float(size_usdt) if size_usdt is not None else 0.0\n            \n            pnl = calculate_pnl_percentage(position) if avg_entry > 0 else 0.0\n            pnl = float(pnl) if pnl is not None else 0.0\n            \n            position_data = {\n                'symbol': symbol,\n                'side': position.get('side', 'LONG'),\n                'size': size_usdt,\n                'entry_price': avg_entry,\n                'pnl': pnl,\n                'account': 2\n            }\n            account_2_positions.append(position_data)\n        \n        total_positions = len(positions_acc_1) + len(positions_acc_2)\n        \n        return {\n            'account_1': account_1_positions,\n            'account_2': account_2_positions,\n            'total': total_positions,\n            'account_1_count': len(account_1_positions),\n            'account_2_count': len(account_2_positions)\n        }\n    except Exception as e:\n        logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ get_positions_by_account: {e}\")\n        return {\n            'account_1': [],\n            'account_2': [],\n            'total': 0,\n            'account_1_count': 0,\n            'account_2_count': 0\n        }\n\ndef generate_xt_pair_url(symbol):\n    \"\"\"–ì–µ–Ω–µ—Ä—É—î XT.com –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ—ó –ø–∞—Ä–∏\"\"\"\n    try:\n        # –û—á–∏—â–∞—î–º–æ —Å–∏–º–≤–æ–ª: ETH/USDT:USDT ‚Üí ETHUSDT\n        clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '').upper()\n        pair = f\"{clean_symbol}USDT\"\n        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ò–ô –§–û–†–ú–ê–¢ XT.com futures trading\n        return f\"https://www.xt.com/en/trade/futures_{pair}\"\n    except:\n        return \"https://www.xt.com/en/trade\"\n\ndef calculate_pnl_percentage(position, use_leverage=True):\n    \"\"\"\n    üßÆ –£–ù–Ü–§–Ü–ö–û–í–ê–ù–ò–ô —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ PnL —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö –∑ fallback –ª–æ–≥—ñ–∫–æ—é —Ç–∞ XT ticker\n    \n    Args:\n        position: —Å–ª–æ–≤–Ω–∏–∫ –ø–æ–∑–∏—Ü—ñ—ó –∑ —Ä—ñ–∑–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏ –¥–ª—è —Ü—ñ–Ω\n        use_leverage: —á–∏ –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏ –ª–µ–≤–µ—Ä–∏–¥–∂ –¥–æ P&L (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º True)\n    \n    Returns:\n        float: PnL —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö\n    \"\"\"\n    try:\n        symbol = position.get('symbol', 'UNKNOWN')\n        \n        # üîß FALLBACK –õ–û–ì–Ü–ö–ê –¥–ª—è entry price\n        entry_price = float(\n            position.get('entryPrice') or \n            position.get('avg_entry') or \n            position.get('entry_price') or 0\n        )\n        \n        # üîß FALLBACK –õ–û–ì–Ü–ö–ê –¥–ª—è current price\n        current_price = float(\n            position.get('markPrice') or \n            position.get('currentPrice') or \n            position.get('current_price') or 0\n        )\n        \n        # üöÄ –ö–†–ò–¢–ò–ß–ù–û: –Ø–∫—â–æ currentPrice –≤—ñ–¥—Å—É—Ç–Ω—è, –æ—Ç—Ä–∏–º—É—î–º–æ –∑ XT ticker\n        if current_price <= 0 and symbol != 'UNKNOWN' and xt:\n            try:\n                xt_ticker = xt.fetch_ticker(symbol)\n                if xt_ticker and xt_ticker.get('last'):\n                    current_price = float(xt_ticker['last'])\n                    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤\n                    position['currentPrice'] = current_price\n                    logging.info(f\"üîÑ [{symbol}] XT ticker —Ü—ñ–Ω–∞: ${current_price}\")\n            except Exception as ticker_error:\n                logging.warning(f\"‚ö†Ô∏è [{symbol}] –ü–æ–º–∏–ª–∫–∞ XT ticker: {ticker_error}\")\n        \n        # üîß –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–æ—Ä–æ–Ω–∏\n        side = str(position.get('side', 'LONG')).upper()\n        if side.lower() in ['buy', 'long']:\n            side = 'LONG'\n        elif side.lower() in ['sell', 'short']:\n            side = 'SHORT'\n        \n        # üßÆ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö\n        if entry_price <= 0 or current_price <= 0:\n            if symbol != 'UNKNOWN':\n                logging.warning(f\"üö® [{symbol}] P&L –Ω–µ–º–æ–∂–ª–∏–≤–æ: entry={entry_price}, current={current_price}\")\n            return 0.0\n        \n        # üìä –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±–∞–∑–æ–≤–æ–≥–æ P&L%\n        if side == 'LONG':\n            pnl_pct = ((current_price - entry_price) / entry_price) * 100\n        else:  # SHORT\n            pnl_pct = ((entry_price - current_price) / entry_price) * 100\n        \n        # ‚ö° –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ª–µ–≤–µ—Ä–∏–¥–∂—É —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ\n        if use_leverage:\n            leverage = float(position.get('leverage', LEVERAGE))\n            pnl_pct = pnl_pct * leverage\n        \n        logging.info(f\"‚úÖ [{symbol}] P&L: {side} {pnl_pct:.2f}% (entry=${entry_price}, current=${current_price}, lev={use_leverage})\")\n        return round(pnl_pct, 2)\n        \n    except Exception as e:\n        symbol = position.get('symbol', 'UNKNOWN') if isinstance(position, dict) else 'UNKNOWN'\n        logging.error(f\"‚ùå P&L –ø–æ–º–∏–ª–∫–∞ [{symbol}]: {e}\")\n        return 0.0\n\ndef send_best_opportunity_signal():\n    \"\"\"\n    üéØ –í–ò–ë–Ü–†–ö–ê –ù–ê–ô–ö–†–ê–©–û–á –ú–û–ñ–õ–ò–í–û–°–¢–Ü: –∑–∞–º—ñ—Å—Ç—å –±–∞–≥–∞—Ç—å–æ—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ - –û–î–ò–ù –Ω–∞–π–∫—Ä–∞—â–∏–π\n    \"\"\"\n    global last_best_signal_time, best_opportunities\n    \n    while bot_running:\n        try:\n            current_time = time.time()\n            \n            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–∞—Å—Ç–∞–≤ —á–∞—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É\n            if current_time - last_best_signal_time >= BEST_SIGNAL_INTERVAL:\n                with opportunities_lock:\n                    if best_opportunities:\n                        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–∫—Ä–∞—â—É –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º\n                        best_symbol = max(best_opportunities.keys(), \n                                         key=lambda s: best_opportunities[s]['score'])\n                        best_data = best_opportunities[best_symbol]\n                        \n                        # –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ (—Å—Ç–∞—Ä—à—ñ 60 —Å–µ–∫—É–Ω–¥)\n                        old_threshold = current_time - 60\n                        fresh_opportunities = {k: v for k, v in best_opportunities.items() \n                                             if v['timestamp'] > old_threshold}\n                        best_opportunities.clear()\n                        best_opportunities.update(fresh_opportunities)\n                        \n                        # üîí –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—É–ª–¥–∞—É–Ω –¥–ª—è –Ω–∞–π–∫—Ä–∞—â–æ—ó –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ!\n                        if best_data['timestamp'] > old_threshold:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–≤—ñ–∂—ñ—Å—Ç—å\n                            \n                            # üïí THREAD-SAFE –ö–£–õ–î–ê–£–ù: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–∏–≥–Ω–∞–ª –¥–ª—è —Ü—å–æ–≥–æ —Å–∏–º–≤–æ–ª—É\n                            signal_allowed = False\n                            with telegram_cooldown_lock:\n                                last_signal_time = telegram_cooldown.get(best_symbol, 0)\n                                time_since_last = current_time - last_signal_time\n                                \n                                if time_since_last >= TELEGRAM_COOLDOWN_SEC:\n                                    telegram_cooldown[best_symbol] = current_time\n                                    signal_allowed = True\n                                else:\n                                    time_left = int(TELEGRAM_COOLDOWN_SEC - time_since_last)\n                                    logging.info(f\"üèÜ –ù–ê–ô–ö–†–ê–©–ò–ô –°–ò–ì–ù–ê–õ –ó–ê–ë–õ–û–ö–û–í–ê–ù–û: {best_symbol} —â–µ {time_left}—Å –∫—É–ª–¥–∞—É–Ω—É\")\n                            \n                            if signal_allowed:  # –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û –¢–Ü–õ–¨–ö–ò –Ø–ö–©–û –î–û–ó–í–û–õ–ï–ù–û\n                                side = best_data['side']\n                                spread = best_data['spread']\n                                xt_price = best_data['xt_price']\n                                dex_price = best_data['dex_price']\n                                token_info = best_data['token_info']\n                                \n                                # üõ°Ô∏è –í–ï–†–ò–§–Ü–ö–ê–¶–Ü–Ø –°–ò–ì–ù–ê–õ–£ (—è–∫ –ø—Ä–æ—Å–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - –±–ª–æ–∫—É—î–º–æ –±–µ–∑ DEX –∞–¥—Ä–µ—Å–∏!)\n                                try:\n                                    from signal_parser import ArbitrageSignal\n                                    from signal_verification import verify_arbitrage_signal\n                                    from telegram_formatter import format_arbitrage_signal_message\n                                    \n                                    # –û—Ç—Ä–∏–º—É—î–º–æ clean_symbol –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó\n                                    clean_symbol = best_symbol.replace('/USDT:USDT', '').replace('1000', '')\n                                    \n                                    test_signal = ArbitrageSignal(\n                                        asset=clean_symbol,\n                                        action=side,\n                                        spread_percent=spread,\n                                        xt_price=xt_price,\n                                        dex_price=dex_price,\n                                        size_usd=ORDER_AMOUNT,\n                                        leverage=LEVERAGE\n                                    )\n                                    \n                                    # –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–≤–Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è–º —Å–∏–≥–Ω–∞–ª—ñ–≤ –±–µ–∑ DEX –∞–¥—Ä–µ—Å–∏\n                                    verification_result = verify_arbitrage_signal(test_signal)\n                                    \n                                    if verification_result.valid:\n                                        # ‚úÖ –°–ò–ì–ù–ê–õ –í–ê–õ–Ü–î–ù–ò–ô - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –û–ë–û–ú –ê–î–ú–Ü–ù–ê–ú + –ì–†–£–ü–Ü\n                                        logging.info(f\"üîç –í–ï–†–ò–§–Ü–ö–£–Æ –°–ò–ì–ù–ê–õ: {best_symbol} - –≤–∞–ª—ñ–¥–Ω–∏–π\")\n                                        signal_message = format_arbitrage_signal_message(test_signal, verification_result, for_group=False)\n                                        send_to_admins_and_group(signal_message)\n                                        \n                                        logging.info(f\"‚úÖ –°–ò–ì–ù–ê–õ –í–ï–†–ò–§–Ü–ö–û–í–ê–ù–û –¥–ª—è {best_symbol}: {side} —Å–ø—Ä–µ–¥={spread:.2f}% (—Ä–µ–π—Ç–∏–Ω–≥={best_data['score']:.1f})\")\n                                    else:\n                                        # ‚ö†Ô∏è –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û FALLBACK –°–ò–ì–ù–ê–õ –û–ë–û–ú –ê–î–ú–Ü–ù–ê–ú + –ì–†–£–ü–Ü (—è–∫ –ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - –í–°–Ü —Å–∏–≥–Ω–∞–ª–∏ –º–∞—é—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏—Å—è!)\n                                        logging.info(f\"‚ö†Ô∏è –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û FALLBACK –°–ò–ì–ù–ê–õ –¥–ª—è {best_symbol}: {'; '.join(verification_result.errors)}\")\n                                        signal_message = format_arbitrage_signal_message(test_signal, verification_result, for_group=False)\n                                        send_to_admins_and_group(signal_message)\n                                        \n                                except Exception as signal_error:\n                                    logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É {best_symbol}: {signal_error}\")\n                                last_best_signal_time = current_time\n                            \n                            # –û—á–∏—â—É—î–º–æ –≤—Å—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (–Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏)\n                            best_opportunities.clear()\n                        \n            time.sleep(5)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥\n            \n        except Exception as e:\n            logging.error(f\"–ü–æ–º–∏–ª–∫–∞ –≤ send_best_opportunity_signal: {e}\")\n            time.sleep(10)\n\n# üî• PnL PATCH v2.0 –ó–ê–í–ï–†–®–ï–ù–û! \nlogging.info(\"üöÄ PnL PATCH v2.0 –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–∏–¥–∞–ª–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–æ fallback –ª–æ–≥—ñ–∫—É\")\n\n# üéØ –§–£–ù–ö–¶–Ü–á –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û–ì–û –ó–ê–ö–†–ò–¢–¢–Ø –ü–û–ó–ò–¶–Ü–ô\n\ndef compute_cross_exchange_spread(position, symbol):\n    \"\"\"üìä –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–ø—Ä–µ–¥—É –º—ñ–∂ –±—ñ—Ä–∂–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó\"\"\"\n    try:\n        arb_pair = position.get('arb_pair', 'xt-dex')\n        \n        if arb_pair == 'gate-dex':\n            # Gate.io –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ None\n            return None, None, None\n                \n        elif arb_pair == 'xt-dex':\n            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Ü—ñ–Ω–∏ XT.com —Ç–∞ DEX\n            xt_ticker = xt_client.fetch_xt_ticker(xt, symbol) if xt else None\n            xt_price = float(xt_ticker['last']) if xt_ticker else None\n            \n            dex_price = get_dex_price_simple(symbol, for_convergence=True)\n            \n            if xt_price and dex_price:\n                spread_pct = calculate_spread(dex_price, xt_price)\n                return abs(spread_pct), xt_price, dex_price\n                \n        elif arb_pair == 'gate-xt':\n            # Gate.io –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ None\n            return None, None, None\n                \n        return None, None, None\n        \n    except Exception as e:\n        logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å–ø—Ä–µ–¥—É {symbol}: {e}\")\n        return None, None, None\n\ndef gate_close_position_market(symbol, side, size_usdt):\n    \"\"\"üîí DEPRECATED: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ XT.com (Gate.io –≤–∏–¥–∞–ª–µ–Ω–æ)\"\"\"\n    # üîí –ü–û–î–í–Ü–ô–ù–ò–ô –ó–ê–•–ò–°–¢: DRY_RUN + ALLOW_LIVE_TRADING\n    if DRY_RUN:\n        logging.info(\"[GATE DRY-RUN] close market %s %s %sUSDT\", symbol, side, size_usdt)\n        return True\n    \n    if not ALLOW_LIVE_TRADING:\n        logging.error(\"[GATE SECURITY] üö® LIVE TRADING BLOCKED: ALLOW_LIVE_TRADING=False\")\n        return False\n    \n    try:\n        # üîí –ö–†–ò–¢–ò–ß–ù–û: –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—É –ø–æ–∑–∏—Ü—ñ—é –∑ –±—ñ—Ä–∂—ñ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É\n        try:\n            positions = get_xt_open_positions(xt)\n            actual_position = None\n            \n            for pos in positions:\n                if pos['symbol'] == symbol and str(pos['side']).upper() == side.upper() and pos['size'] != 0:\n                    actual_position = pos\n                    break\n                    \n            if not actual_position:\n                logging.error(f\"‚ùå {symbol}: –ê–∫—Ç–∏–≤–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è {side} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Gate.io\")\n                return False\n                \n            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ—á–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó –∑ –±—ñ—Ä–∂—ñ (–∞ –Ω–µ USDT —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫)\n            contracts = abs(float(actual_position['size']))  # üîí –ö–†–ò–¢–ò–ß–ù–û: —Ç–æ—á–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –∑ API –±—ñ—Ä–∂—ñ\n            \n        except Exception as e:\n            logging.error(f\"‚ùå {symbol}: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –∑ XT.com: {e}\")\n            # FALLBACK: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞—Ä–∏–π –º–µ—Ç–æ–¥ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É\n            ticker = fetch_xt_ticker(xt, symbol)\n            if not ticker:\n                logging.error(f\"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –¥–ª—è {symbol}\")\n                return False\n            current_price = float(ticker['last'])\n            contracts = round(size_usdt / current_price, 6)\n        \n        if contracts <= 0:\n            logging.error(f\"‚ùå {symbol}: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó {contracts}\")\n            return False\n        \n        # üîí –ö–†–ò–¢–ò–ß–ù–û: –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ side –ø–µ—Ä–µ–¥ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–º close_side\n        side = side.upper()  # –ê–†–•–Ü–¢–ï–ö–¢–û–†: –≤–∏–ø—Ä–∞–≤–ª—è—î–º–æ case-sensitivity bug!\n        logging.info(f\"üîß {symbol}: –ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π side='{side}' –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è\")\n        \n        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω—É —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è  \n        close_side = \"sell\" if side == \"LONG\" else \"buy\"\n        logging.info(f\"üîß {symbol}: –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ close_side='{close_side}' –¥–ª—è side='{side}'\")\n        \n        # –°—Ç–≤–æ—Ä—é—î–º–æ –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –∑ reduce-only\n        # üéØ –ó–ê–ö–†–ò–í–ê–Ñ–ú–û –ù–ê –û–ë–û–• –ê–ö–ê–£–ù–¢–ê–•\n        result_1 = xt_close_position_market(xt_account_1, symbol, side, size_usdt)\n        result_2 = xt_close_position_market(xt_account_2, symbol, side, size_usdt)\n        result = result_1 or result_2  # –£—Å–ø—ñ—à–Ω–æ —è–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∑–∞–∫—Ä–∏–≤—Å—è\n        if result:\n            order = {\"id\": f\"xt-close-{int(time.time())}\", \"status\": \"filled\"}\n            if result_1:\n                logging.info(f\"‚úÖ –ê–ö–ê–£–ù–¢ 1: –ó–∞–∫—Ä–∏—Ç–æ –ø–æ–∑–∏—Ü—ñ—é {symbol} {side}\")\n            if result_2:\n                logging.info(f\"‚úÖ –ê–ö–ê–£–ù–¢ 2: –ó–∞–∫—Ä–∏—Ç–æ –ø–æ–∑–∏—Ü—ñ—é {symbol} {side}\")\n        else:\n            order = None\n        \n        if order:\n            # üîß –î–ï–¢–ê–õ–¨–ù–ï –õ–û–ì–£–í–ê–ù–ù–Ø –î–õ–Ø –ë–ï–ó–ü–ï–ö–ò\n            logging.info(f\"‚úÖ {symbol}: –£–°–ü–Ü–®–ù–ï –ó–ê–ö–†–ò–¢–¢–Ø:\")\n            logging.info(f\"   ‚Ä¢ Side: {side} ‚Üí Close_side: {close_side}\")  \n            logging.info(f\"   ‚Ä¢ Contracts: {contracts}\")\n            logging.info(f\"   ‚Ä¢ Order ID: {order.get('id')}\")\n            logging.info(f\"   ‚Ä¢ Status: {order.get('status', 'unknown')}\")\n            return order\n        else:\n            logging.error(f\"‚ùå {symbol}: –ü–†–û–í–ê–õ–ï–ù–ï –ó–ê–ö–†–ò–¢–¢–Ø –ø–æ–∑–∏—Ü—ñ—ó {side}\")\n            logging.error(f\"   ‚Ä¢ Side: {side} ‚Üí Close_side: {close_side}\")\n            logging.error(f\"   ‚Ä¢ Contracts: {contracts}\")\n            return False\n            \n    except Exception as e:\n        logging.error(f\"‚ùå {symbol}: –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó Gate.io: {e}\")\n        return False\n\ndef close_position(symbol, position):\n    \"\"\"üéØ –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º API –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –±—ñ—Ä–∂—ñ\"\"\"\n    try:\n        exchange = position.get('exchange', 'gate')\n        side = position.get('side', 'LONG')\n        size_usdt = position.get('size_usdt', 0)\n        \n        logging.warning(f\"üî• CLOSE_POSITION: symbol={symbol}, exchange={exchange}, side={side}, size_usdt={size_usdt}\")\n        logging.warning(f\"üî• CLOSE_POSITION: xt_account_1={xt_account_1 is not None}, xt_account_2={xt_account_2 is not None}\")\n        \n        # –¢—ñ–ª—å–∫–∏ XT.com (Gate.io –≤–∏–¥–∞–ª–µ–Ω–æ) - –ó–ê–ö–†–ò–í–ê–Ñ–ú–û –ù–ê –û–ë–û–• –ê–ö–ê–£–ù–¢–ê–•\n        if xt_account_1 and xt_account_2:\n            logging.warning(f\"üî• CLOSE_POSITION: –í–∏–∫–ª–∏–∫–∞—î–º–æ xt_close_position_market() –¥–ª—è –ê–ö–ê–£–ù–¢–£ 1...\")\n            result_1 = xt_close_position_market(xt_account_1, symbol, side, size_usdt)\n            logging.warning(f\"üî• CLOSE_POSITION: –ê–ö–ê–£–ù–¢ 1 result={result_1}\")\n            \n            logging.warning(f\"üî• CLOSE_POSITION: –í–∏–∫–ª–∏–∫–∞—î–º–æ xt_close_position_market() –¥–ª—è –ê–ö–ê–£–ù–¢–£ 2...\")\n            result_2 = xt_close_position_market(xt_account_2, symbol, side, size_usdt)\n            logging.warning(f\"üî• CLOSE_POSITION: –ê–ö–ê–£–ù–¢ 2 result={result_2}\")\n            \n            result = result_1 or result_2\n            logging.warning(f\"üî• CLOSE_POSITION: –§—ñ–Ω–∞–ª—å–Ω–∏–π result={result} (result_1={result_1}, result_2={result_2})\")\n            \n            if result_1:\n                logging.info(f\"‚úÖ –ê–ö–ê–£–ù–¢ 1: –ó–∞–∫—Ä–∏—Ç–æ {symbol} {side}\")\n            else:\n                logging.error(f\"‚ùå –ê–ö–ê–£–ù–¢ 1: –ù–ï –í–î–ê–õ–û–°–Ø –∑–∞–∫—Ä–∏—Ç–∏ {symbol} {side}\")\n            \n            if result_2:\n                logging.info(f\"‚úÖ –ê–ö–ê–£–ù–¢ 2: –ó–∞–∫—Ä–∏—Ç–æ {symbol} {side}\")\n            else:\n                logging.error(f\"‚ùå –ê–ö–ê–£–ù–¢ 2: –ù–ï –í–î–ê–õ–û–°–Ø –∑–∞–∫—Ä–∏—Ç–∏ {symbol} {side}\")\n            \n            return result\n        else:\n            logging.error(f\"‚ùå {symbol}: –ê–∫–∞—É–Ω—Ç–∏ XT –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ (xt_account_1={xt_account_1 is not None}, xt_account_2={xt_account_2 is not None})\")\n            return False\n        \n    except Exception as e:\n        logging.error(f\"‚ùå {symbol}: –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó: {e}\")\n        import traceback\n        logging.error(f\"‚ùå {symbol}: Traceback: {traceback.format_exc()}\")\n        return False\n\ndef monitor_open_positions():\n    \"\"\"üéØ –ú–û–ù–Ü–¢–û–†–ò–ù–ì –ü–û–ó–ò–¶–Ü–ô: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó —Ü—ñ–Ω, +5% –ø—Ä–∏–±—É—Ç–∫—É, –∞–±–æ 1-–≥–æ–¥–∏–Ω–Ω–æ–º—É —Ç–∞–π–º–µ—Ä—ñ\"\"\"\n    thread_id = threading.current_thread().ident\n    logging.warning(f\"üéØ MONITOR-{thread_id}: –ó–∞—Ö–∏—â–µ–Ω–∏–π –ø–æ—Ç—ñ–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø–æ–∑–∏—Ü—ñ–π –∑–∞–ø—É—â–µ–Ω–æ!\")\n    \n    while not monitor_stop_event.is_set():\n        try:\n            positions_to_close = []\n            current_time = time.time()\n            \n            # –ö–æ–ø—ñ—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –∑ –∑–∞—Ö–∏—Å—Ç–æ–º –≤—ñ–¥ race conditions\n            with active_positions_lock:\n                current_positions = active_positions.copy()\n            \n            # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π –∑ –æ–±–æ—Ö XT –∞–∫–∞—É–Ω—Ç—ñ–≤\n            all_exchange_positions = []\n            for account_num, xt_account in [(1, xt_account_1), (2, xt_account_2)]:\n                if xt_account:\n                    try:\n                        raw_positions = xt_account.fetch_positions()\n                        xt_positions = xt_client.get_xt_open_positions(xt_account)\n                        logging.info(f\"üîß XT –ê–ö–ê–£–ù–¢ {account_num}: raw_positions={len(raw_positions) if raw_positions else 0}, filtered={len(xt_positions)}\")\n                        \n                        if raw_positions and len(raw_positions) > 0:\n                            logging.info(f\"üìä XT –ê–ö–ê–£–ù–¢ {account_num} –ü–û–ó–ò–¶–Ü–ô: {len(raw_positions)} (–ø–µ—Ä—à—ñ 2):\")\n                            for i, pos in enumerate(raw_positions[:2]):\n                                symbol = pos.get('symbol', '?')\n                                size = pos.get('size', 0)\n                                contracts = pos.get('contracts', 0)\n                                notional = pos.get('notional', 0)\n                                logging.info(f\"   {i+1}. {symbol}: size={size}, contracts={contracts}, notional={notional}\")\n                            all_exchange_positions.extend(xt_positions)\n                        else:\n                            logging.info(f\"üìä XT –ê–ö–ê–£–ù–¢ {account_num}: –ù–µ–º–∞—î raw –ø–æ–∑–∏—Ü—ñ–π –∞–±–æ –ø—É—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫\")\n                            \n                    except Exception as e:\n                        logging.error(f\"‚ùå XT –ê–ö–ê–£–ù–¢ {account_num} –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–ú–ò–õ–ö–ê: {e}\")\n            \n            # üî• –ö–†–ò–¢–ò–ß–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –∑ –æ–±–æ—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤ –≤ active_positions\n            if all_exchange_positions:\n                exchange_positions = all_exchange_positions \n                if exchange_positions:\n                    logging.info(f\"üîÑ –°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–Ø: –ó–Ω–∞–π–¥–µ–Ω–æ {len(exchange_positions)} –ø–æ–∑–∏—Ü—ñ–π –Ω–∞ XT.com\")\n                    \n                    # –î–æ–¥–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –∑ –±—ñ—Ä–∂—ñ –¥–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö\n                    with active_positions_lock:\n                        for pos in exchange_positions:\n                            symbol = pos['symbol']\n                            side = pos['side'].upper()\n                            size = pos.get('size_usdt', pos.get('size', 0))\n                            entry_price = pos.get('entryPrice', 0)\n                            \n                            # –î–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î –≤ active_positions\n                            if symbol not in active_positions:\n                                current_time = time.time()\n                                # üõ°Ô∏è –ó–ê–•–ò–°–¢: –Ø–∫—â–æ –±—ñ—Ä–∂–∞ –ø–æ–≤–µ—Ä—Ç–∞—î size=0, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ORDER_AMOUNT\n                                safe_size = abs(size) if abs(size) > 0 else ORDER_AMOUNT\n                                logging.info(f\"üîß {symbol}: –±—ñ—Ä–∂–∞ size={size} ‚Üí safe_size={safe_size}\")\n                                active_positions[symbol] = {\n                                    'symbol': symbol,\n                                    'side': side,\n                                    'size_usdt': safe_size,\n                                    'avg_entry': entry_price,\n                                    'exchange': 'xt',\n                                    'status': 'open',\n                                    'adds_done': 0,  # üéØ –í–ò–ü–†–ê–í–õ–ï–ù–û: –¥–æ–∑–≤–æ–ª—è—î–º–æ 1 —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π\n                                    'last_add_time': 0,  # –î–∞–≤–Ω—ñ–π —á–∞—Å, —â–æ–± cooldown –Ω–µ –±–ª–æ–∫—É–≤–∞–≤\n                                    'entry_time': current_time,\n                                    'opened_at': current_time,  # üîß –§–Ü–ö–° –¢–ê–ô–ú–ï–†–ê: –¥–æ–¥–∞–Ω–æ opened_at\n                                    'expires_at': current_time + POSITION_MAX_AGE_SEC,  # üîß –§–Ü–ö–° –¢–ê–ô–ú–ï–†–ê: –¥–æ–¥–∞–Ω–æ expires_at\n                                    'synced_from_exchange': True  # –ü–æ–∑–Ω–∞—á–∫–∞ —â–æ —Ü–µ –∑ –±—ñ—Ä–∂—ñ\n                                }\n                                logging.info(f\"‚ûï –°–ò–ù–•–†–û–ù–Ü–ó–û–í–ê–ù–û: {symbol} {side} ${size:.2f} –≤—ñ–¥ XT.com\")\n                        \n                        # –û–Ω–æ–≤–ª—é—î–º–æ current_positions –ø—ñ—Å–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó\n                        current_positions = active_positions.copy()\n                        \n            logging.info(f\"üéØ MONITOR: –ü–µ—Ä–µ–≤—ñ—Ä—è—é {len(current_positions)} –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π...\")\n            \n            if len(current_positions) == 0:\n                time.sleep(30)\n                continue\n            \n            for symbol, position in current_positions.items():\n                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó —è–∫—ñ –≤–∂–µ –∑–∞–∫—Ä–∏–≤–∞—é—Ç—å—Å—è\n                if position.get('status') == 'closing':\n                    continue\n                \n                # ‚è∞ 1. –ü–ï–†–ï–í–Ü–†–ö–ê 1-–ì–û–î–ò–ù–ù–û–ì–û –¢–ê–ô–ú–ï–†–ê (–ù–ê–ô–í–ò–©–ê –ü–†–Ü–û–†–ò–¢–ï–¢–ù–Ü–°–¢–¨)\n                if ENABLE_TIME_STOP:\n                    expires_at = position.get('expires_at', 0)\n                    opened_at = position.get('opened_at', 0)\n                    logging.info(f\"üîß –¢–ê–ô–ú–ï–† DEBUG [{symbol}]: current_time={current_time}, opened_at={opened_at}, expires_at={expires_at}, delta={(current_time - opened_at)/60:.1f}—Ö–≤\")\n                    if expires_at > 0 and current_time >= expires_at:\n                        time_elapsed = (current_time - position.get('opened_at', current_time)) / 3600\n                        reason = f\"Time Stop 1h (—á–∞—Å: {time_elapsed:.1f}–≥–æ–¥)\"\n                        \n                        # üöÄ –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û –ù–û–í–£ –£–ù–Ü–§–Ü–ö–û–í–ê–ù–£ P&L –§–£–ù–ö–¶–Ü–Æ\n                        pnl_pct = calculate_pnl_percentage(position, use_leverage=True)\n                        logging.info(f\"‚è∞ [{symbol}] –¢–ê–ô–ú–ï–† P&L: {pnl_pct:.2f}%\")\n                        \n                        # üéØ –ö–†–ê–°–ò–í–ï –°–ü–û–í–Ü–©–ï–ù–ù–Ø –ü–†–û –ó–ê–ö–†–ò–¢–¢–Ø –ó–ê –¢–ê–ô–ú–ï–†–û–ú\n                        timer_signal = f\"‚è∞ **–ó–ê–ö–†–ò–¢–¢–Ø –ó–ê –¢–ê–ô–ú–ï–†–û–ú 1 –ì–û–î–ò–ù–ê!**\\n\"\\\n                                     f\"üìä –°–∏–º–≤–æ–ª: **{symbol.replace('/USDT:USDT', '')}** ({position['side']})\\n\"\\\n                                     f\"üí∞ –†–æ–∑–º—ñ—Ä: **${position['size_usdt']:.2f}**\\n\"\\\n                                     f\"‚è±Ô∏è –ß–∞—Å —É –ø–æ–∑–∏—Ü—ñ—ó: **{time_elapsed:.1f}–≥–æ–¥** (–º–∞–∫—Å–∏–º—É–º 1.0–≥–æ–¥)\\n\"\\\n                                     f\"üíé P&L: **{pnl_pct:+.1f}%** (${(position['size_usdt'] * pnl_pct / 100):+.2f})\\n\"\\\n                                     f\"üö™ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–∏–∑–∏–∫–æ–º\\n\"\\\n                                     f\"‚è∞ –ß–∞—Å: **{time.strftime('%H:%M:%S %d.%m.%Y')}**\"\n                        send_to_admins_and_group(timer_signal)\n                        \n                        positions_to_close.append((symbol, position, reason, pnl_pct))\n                        continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó\n                    \n                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —á–∞—Å —É—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó\n                entry_time = position.get('entry_time', time.time())\n                if time.time() - entry_time < MIN_HOLD_SEC:\n                    continue\n                    \n                exchange = position.get('exchange', 'gate')\n                side = position.get('side', 'LONG').upper()  # üîí –ö–†–ò–¢–ò–ß–ù–û: –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –¥–æ uppercase\n                entry_price = position.get('avg_entry', 0)\n                \n                # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –±—ñ—Ä–∂—ñ\n                current_price = None\n                if exchange == \"gate\":\n                    ticker = fetch_xt_ticker(xt, symbol)\n                    current_price = float(ticker['last']) if ticker else None\n                elif exchange == \"xt\" and xt:\n                    ticker = xt_client.fetch_xt_ticker(xt, symbol)\n                    current_price = float(ticker['last']) if ticker else None\n                    \n                if not current_price or not entry_price:\n                    continue\n                    \n                # 1. –ü–ï–†–ï–í–Ü–†–ö–ê TAKE PROFIT +20% (–ó –õ–ï–í–ï–†–ò–î–ñ–ï–ú!)\n                pnl_pct = calculate_pnl_percentage(position, use_leverage=True)\n                if pnl_pct >= TAKE_PROFIT_PCT:\n                    reason = f\"TP +{pnl_pct:.1f}%\"\n                    positions_to_close.append((symbol, position, reason, pnl_pct))\n                    continue\n                \n                # 1.1 –ü–ï–†–ï–í–Ü–†–ö–ê –°–¢–û–ü-–õ–û–°–° –ó –õ–ï–í–ï–†–ò–î–ñ–ï–ú (–í–ò–ü–†–ê–í–õ–ï–ù–û!)\n                leverage = float(position.get('leverage', LEVERAGE))\n                effective_sl_clean = STOP_LOSS_PCT / leverage  # –ï—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π –ø–æ—Ä—ñ–≥ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ PnL\n                if pnl_pct <= -effective_sl_clean:\n                    leveraged_pnl = pnl_pct * leverage  # –î–ª—è –ª–æ–≥—ñ–≤\n                    logging.info(f\"üö® SLCHK [{symbol}] pnl_clean={pnl_pct:.2f}% | lev={leverage:.0f}x | SL_clean={effective_sl_clean:.2f}% | leveraged_pnl={leveraged_pnl:.1f}% ‚Üí CLOSE\")\n                    reason = f\"SL {pnl_pct:.1f}% ‚â§ -{effective_sl_clean:.2f}% (leveraged: {leveraged_pnl:.1f}%)\"\n                    positions_to_close.append((symbol, position, reason, pnl_pct))\n                    continue\n                \n                # 1.2 –ü–ï–†–ï–í–Ü–†–ö–ê 50% –†–£–•–£ –í–Ü–î –ü–û–ß–ê–¢–ö–û–í–û–ì–û –°–ü–†–ï–î–£ (Nazir: –¥–æ–¥–∞–Ω–æ)\n                if HALF_MOVE_CLOSE and position.get('entry_spread_pct'):\n                    initial_spread_pct = abs(position.get('entry_spread_pct', 0))\n                    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ø—Ä–µ–¥\n                    spread_result = compute_cross_exchange_spread(position, symbol)\n                    if spread_result[0] is not None:\n                        current_spread_pct, price1, price2 = spread_result\n                        current_spread_pct = abs(current_spread_pct)\n                        \n                        # –Ø–∫—â–æ —Å–ø—Ä–µ–¥ –∑–º–µ–Ω—à–∏–≤—Å—è –Ω–∞ 50% –≤—ñ–¥ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ\n                        half_target = initial_spread_pct * HALF_MOVE_PCT  # 50% –≤—ñ–¥ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å–ø—Ä–µ–¥—É\n                        spread_reduction = initial_spread_pct - current_spread_pct\n                        \n                        if spread_reduction >= half_target:\n                            reason = f\"50% —Ä—É—Ö: {initial_spread_pct:.2f}%‚Üí{current_spread_pct:.2f}% (-{spread_reduction:.2f}%)\"\n                            \n                            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ 50% —Ä—É—Ö\n                            half_move_signal = f\"üéØ **50% –†–£–• –¶–Ü–ù!**\\n\"\\\n                                             f\"üìä –°–∏–º–≤–æ–ª: **{symbol.replace('/USDT:USDT', '')}** ({position['side']})\\n\"\\\n                                             f\"üí∞ –†–æ–∑–º—ñ—Ä: **${position['size_usdt']:.2f}**\\n\"\\\n                                             f\"üìà –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–ø—Ä–µ–¥: **{initial_spread_pct:.2f}%**\\n\"\\\n                                             f\"üìâ –ü–æ—Ç–æ—á–Ω–∏–π —Å–ø—Ä–µ–¥: **{current_spread_pct:.2f}%**\\n\"\\\n                                             f\"‚ö° –†—É—Ö: **-{spread_reduction:.2f}%** (50% –¥–æ—Å—è–≥–Ω—É—Ç–æ)\\n\"\\\n                                             f\"üíé P&L: **{pnl_pct:+.1f}%** (${(position['size_usdt'] * pnl_pct / 100):+.2f})\\n\"\\\n                                             f\"‚ú® –¶—ñ–Ω–∏ –∑—ñ–π—à–ª–∏—Å—è –Ω–∞ 50%! –§—ñ–∫—Å—É—î–º–æ –ø—Ä–∏–±—É—Ç–æ–∫\\n\"\\\n                                             f\"‚è∞ –ß–∞—Å: **{time.strftime('%H:%M:%S %d.%m.%Y')}**\"\n                            send_to_admins_and_group(half_move_signal)\n                            \n                            positions_to_close.append((symbol, position, reason, pnl_pct))\n                            continue\n                    \n                # 2. –ü–ï–†–ï–í–Ü–†–ö–ê –ö–û–ù–í–ï–†–ì–ï–ù–¶–Ü–á –¶–Ü–ù (DEX –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è - –ø–æ–≤–µ—Ä–Ω—É—Ç–æ)\n                logging.info(f\"üéØ MONITOR [{symbol}]: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ DEX –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó... CLOSE_ON_CONVERGENCE={CLOSE_ON_CONVERGENCE}\")\n                if CLOSE_ON_CONVERGENCE:\n                    try:\n                        spread_result = compute_cross_exchange_spread(position, symbol)\n                        logging.info(f\"üéØ MONITOR [{symbol}]: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø—Ä–µ–¥—É: {spread_result}\")\n                        \n                        if spread_result[0] is not None:\n                            current_spread_pct, price1, price2 = spread_result\n                            logging.info(f\"üéØ MONITOR [{symbol}]: –ü–æ—Ç–æ—á–Ω–∏–π —Å–ø—Ä–µ–¥: {current_spread_pct:.3f}%, –ø–æ—Ä—ñ–≥: {CONVERGENCE_SPREAD_PCT}%\")\n                            \n                            if abs(current_spread_pct) <= CONVERGENCE_SPREAD_PCT:\n                                reason = f\"DEX –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è {current_spread_pct:.2f}% ‚â§ {CONVERGENCE_SPREAD_PCT}%\"\n                                \n                                # üéØ –ö–†–ê–°–ò–í–ï –°–ü–û–í–Ü–©–ï–ù–ù–Ø –ü–†–û –ö–û–ù–í–ï–†–ì–ï–ù–¶–Ü–Æ –¶–Ü–ù\n                                convergence_signal = f\"üéØ **–ö–û–ù–í–ï–†–ì–ï–ù–¶–Ü–Ø –¶–Ü–ù!**\\n\"\\\n                                                    f\"üìä –°–∏–º–≤–æ–ª: **{symbol.replace('/USDT:USDT', '')}** ({position['side']})\\n\"\\\n                                                    f\"üí∞ –†–æ–∑–º—ñ—Ä: **${position['size_usdt']:.2f}**\\n\"\\\n                                                    f\"üìà –¶—ñ–Ω–∏: –ë—ñ—Ä–∂–∞ **${price1:.6f}** | Dex **${price2:.6f}**\\n\"\\\n                                                    f\"üìâ –°–ø—Ä–µ–¥: **{abs(current_spread_pct):.2f}%** ‚â§ {CONVERGENCE_SPREAD_PCT}% (–∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è)\\n\"\\\n                                                    f\"üíé P&L: **{pnl_pct:+.1f}%** (${(position['size_usdt'] * pnl_pct / 100):+.2f})\\n\"\\\n                                                    f\"‚ú® –¶—ñ–Ω–∏ –∑—ñ–π—à–ª–∏—Å—è! –§—ñ–∫—Å—É—î–º–æ –ø—Ä–∏–±—É—Ç–æ–∫\\n\"\\\n                                                    f\"‚è∞ –ß–∞—Å: **{time.strftime('%H:%M:%S %d.%m.%Y')}**\"\n                                send_to_admins_and_group(convergence_signal)\n                                \n                                positions_to_close.append((symbol, position, reason, pnl_pct))\n                                continue\n                        else:\n                            logging.warning(f\"üéØ MONITOR [{symbol}]: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø—Ä–µ–¥ –¥–ª—è –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó\")\n                    \n                    except Exception as e:\n                        logging.error(f\"üéØ MONITOR [{symbol}]: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó: {e}\")\n                        # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó —è–∫—â–æ —î –ø–æ–º–∏–ª–∫–∞ –∑ DEX\n            \n            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∫—Ä–∏—Ç–µ—Ä—ñ—è–º\n            for symbol, position, reason, pnl_pct in positions_to_close:\n                logging.warning(f\"üî• {symbol}: –°–ü–†–û–ë–ê –ó–ê–ö–†–ò–¢–¢–Ø –ü–û–ó–ò–¶–Ü–á - {reason}\")\n                logging.warning(f\"üî• {symbol}: position data = {position}\")\n                \n                # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –∑–∞–∫—Ä–∏—Ç—Ç—è –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–±\n                with active_positions_lock:\n                    if symbol in active_positions:\n                        active_positions[symbol]['status'] = 'closing'\n                        logging.warning(f\"üî• {symbol}: –ü–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ 'closing' –≤ active_positions\")\n                    else:\n                        logging.error(f\"‚ùå {symbol}: –ù–ï –ó–ù–ê–ô–î–ï–ù–û –≤ active_positions –ø—ñ–¥ —á–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è!\")\n                \n                # üîí CRITICAL ORDER PLACEMENT LOCK –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è (Task 6: —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–Ω–∏—Ö closes)\n                logging.warning(f\"üî• {symbol}: –í–∏–∫–ª–∏–∫–∞—î–º–æ close_position()...\")\n                with order_placement_lock:\n                    result = close_position(symbol, position)\n                \n                logging.warning(f\"üî• {symbol}: close_position() –ø–æ–≤–µ—Ä–Ω—É–≤ result={result}\")\n                \n                if result:\n                    # –£—Å–ø—ñ—à–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è - –≤–∏–¥–∞–ª—è—î–º–æ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π üîí THREAD SAFE\n                    with active_positions_lock:\n                        if symbol in active_positions:\n                            del active_positions[symbol]\n                            logging.info(f\"üóëÔ∏è {symbol}: –í–∏–¥–∞–ª–µ–Ω–æ –∑ active_positions\")\n                            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –ø—ñ—Å–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è\n                            save_positions_to_file()\n                    \n                    # ‚úÖ –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –ü–†–û –ó–ê–ö–†–ò–¢–¢–Ø –ü–û–ó–ò–¶–Ü–á\n                    close_signal = f\"‚úÖ **–ü–û–ó–ò–¶–Ü–Æ –ó–ê–ö–†–ò–¢–û!**\\n\"\\\n                                  f\"üìä –°–∏–º–≤–æ–ª: **{symbol.replace('/USDT:USDT', '')}** ({position['side']})\\n\"\\\n                                  f\"üí∞ –†–æ–∑–º—ñ—Ä: **${position['size_usdt']:.2f}**\\n\"\\\n                                  f\"üíé P&L: **{pnl_pct:+.1f}%** (${(position['size_usdt'] * pnl_pct / 100):+.2f})\\n\"\\\n                                  f\"üìù –ü—Ä–∏—á–∏–Ω–∞: **{reason}**\\n\"\\\n                                  f\"‚è∞ –ß–∞—Å: **{time.strftime('%H:%M:%S %d.%m.%Y')}**\"\n                    send_to_admins_and_group(close_signal)\n                    \n                    logging.info(f\"‚úÖ {symbol}: –ü–æ–∑–∏—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–æ, P&L={pnl_pct:+.1f}%\")\n                else:\n                    # –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞—Ç—É—Å\n                    with active_positions_lock:\n                        if symbol in active_positions:\n                            active_positions[symbol]['status'] = 'open'\n                    logging.error(f\"‚ùå {symbol}: –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó\")\n                    \n                time.sleep(1)  # –ü–∞—É–∑–∞ –º—ñ–∂ –∑–∞–∫—Ä–∏—Ç—Ç—è–º–∏\n                \n        except Exception as e:\n            logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –º–æ–Ω—ñ—Ç–æ—Ä—ñ –ø–æ–∑–∏—Ü—ñ–π: {e}\")\n            \n        # –ü–∞—É–∑–∞ –º—ñ–∂ —Ü–∏–∫–ª–∞–º–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É  \n        monitor_stop_event.wait(timeout=MONITOR_INTERVAL_SEC)\n    \n    logging.warning(f\"üö® MONITOR-{thread_id}: –ü–æ—Ç—ñ–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π! (stop_event={monitor_stop_event.is_set()}, bot_running={bot_running})\")\n    \n    # üßπ CLEANUP: –û–±–Ω—É–ª—è—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Ä–µ—Ñ–µ—Ä–µ–Ω—Å –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ\n    global monitor_thread\n    monitor_thread = None\n\n# üöÄ –ù–û–í–Ü –§–Ü–®–ö–ò: –†–æ–∑—É–º–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ\ndef calculate_volatility_indicator(symbol, exchange=\"xt\"):\n    \"\"\"üìä –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–æ–ª–∞—Ç—ñ–ª—å–Ω–æ—Å—Ç—ñ - –∞–Ω–∞–ª—ñ–∑—É—î –∫–æ–ª–∏–≤–∞–Ω–Ω—è —Ü—ñ–Ω –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏\"\"\"\n    try:\n        if exchange == \"xt\" and xt:\n            ticker_data = xt_client.fetch_xt_ticker(xt, symbol)\n        else:\n            ticker_data = fetch_ticker(xt, symbol)\n            \n        if not ticker_data or not ticker_data.get('high') or not ticker_data.get('low'):\n            return {\"status\": \"no_data\", \"volatility\": 0}\n            \n        high_24h = float(ticker_data['high'])\n        low_24h = float(ticker_data['low'])\n        current_price = float(ticker_data['last'])\n        \n        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å —è–∫ % –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏\n        volatility_pct = ((high_24h - low_24h) / current_price) * 100\n        \n        # –ö–ª–∞—Å–∏—Ñ—ñ–∫—É—î–º–æ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å\n        if volatility_pct < 2:\n            risk_level = \"LOW\"\n            quality_score = 8  # –ù–∏–∑—å–∫–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å = —Ö–æ—Ä–æ—à–∞ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å\n        elif volatility_pct < 5:\n            risk_level = \"MEDIUM\"  \n            quality_score = 6\n        elif volatility_pct < 10:\n            risk_level = \"HIGH\"\n            quality_score = 4\n        else:\n            risk_level = \"EXTREME\"\n            quality_score = 1  # –í–∏—Å–æ–∫–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å = —Ä–∏–∑–∏–∫–æ–≤–∞–Ω–æ\n            \n        return {\n            \"status\": \"success\",\n            \"volatility\": round(volatility_pct, 2),\n            \"risk_level\": risk_level,\n            \"quality_score\": quality_score,\n            \"high_24h\": high_24h,\n            \"low_24h\": low_24h\n        }\n        \n    except Exception as e:\n        return {\"status\": \"error\", \"error\": str(e), \"volatility\": 0}\n\ndef analyze_volume_quality(symbol, dex_info, exchange=\"xt\"):\n    \"\"\"üìà –ê–Ω–∞–ª—ñ–∑ —è–∫–æ—Å—Ç—ñ –æ–±'—î–º—ñ–≤ —Ç–æ—Ä–≥—ñ–≤–ª—ñ\"\"\"\n    try:\n        if exchange == \"xt\" and xt:\n            ticker_data = xt_client.fetch_xt_ticker(xt, symbol)\n        else:\n            ticker_data = fetch_ticker(xt, symbol)\n            \n        if not ticker_data or not ticker_data.get('quoteVolume'):\n            return {\"status\": \"no_data\", \"quality\": 0}\n            \n        # –û–±'—î–º –±—ñ—Ä–∂—ñ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏ –≤ USD\n        exchange_volume_24h = float(ticker_data['quoteVolume'])\n        \n        # –û–±'—î–º DEX –∑ dex_info\n        dex_volume_24h = dex_info.get('volume_24h', 0) if dex_info else 0\n        \n        # –†–∞—Ö—É—î–º–æ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç —è–∫–æ—Å—Ç—ñ –æ–±'—î–º—É\n        total_volume = exchange_volume_24h + dex_volume_24h\n        \n        if total_volume < 10000:  # –ú–µ–Ω—à–µ $10K - –Ω–∏–∑—å–∫–∞ —è–∫—ñ—Å—Ç—å\n            quality_score = 1\n            volume_grade = \"POOR\"\n        elif total_volume < 100000:  # $10K-100K - —Å–µ—Ä–µ–¥–Ω—è —è–∫—ñ—Å—Ç—å\n            quality_score = 4\n            volume_grade = \"FAIR\"\n        elif total_volume < 1000000:  # $100K-1M - —Ö–æ—Ä–æ—à–∞ —è–∫—ñ—Å—Ç—å  \n            quality_score = 7\n            volume_grade = \"GOOD\"\n        else:  # –ë—ñ–ª—å—à–µ $1M - –≤—ñ–¥–º—ñ–Ω–Ω–∞ —è–∫—ñ—Å—Ç—å\n            quality_score = 10\n            volume_grade = \"EXCELLENT\"\n            \n        return {\n            \"status\": \"success\",\n            \"exchange_volume\": exchange_volume_24h,\n            \"dex_volume\": dex_volume_24h,\n            \"total_volume\": total_volume,\n            \"quality_score\": quality_score,\n            \"grade\": volume_grade\n        }\n        \n    except Exception as e:\n        return {\"status\": \"error\", \"error\": str(e), \"quality\": 0}\n\ndef smart_entry_timing(symbol, spread_pct, volatility_data, volume_data):\n    \"\"\"‚è∞ –†–æ–∑—É–º–Ω–∏–π —Ç–∞–π–º–∏–Ω–≥ –≤—Ö–æ–¥—ñ–≤ - –≤–∏–∑–Ω–∞—á–∞—î –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –º–æ–º–µ–Ω—Ç –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ\"\"\"\n    try:\n        timing_score = 0\n        reasons = []\n        \n        # 1. –ê–Ω–∞–ª—ñ–∑ —Å–ø—Ä–µ–¥—É - —á–∏–º –±—ñ–ª—å—à–∏–π, —Ç–∏–º –∫—Ä–∞—â–µ\n        if spread_pct >= 3.0:\n            timing_score += 40  # –í—ñ–¥–º—ñ–Ω–Ω–∏–π —Å–ø—Ä–µ–¥\n            reasons.append(f\"–í—ñ–¥–º—ñ–Ω–Ω–∏–π —Å–ø—Ä–µ–¥ {spread_pct}%\")\n        elif spread_pct >= 2.0:\n            timing_score += 25  # –•–æ—Ä–æ—à–∏–π —Å–ø—Ä–µ–¥\n            reasons.append(f\"–•–æ—Ä–æ—à–∏–π —Å–ø—Ä–µ–¥ {spread_pct}%\")\n        elif spread_pct >= 1.0:\n            timing_score += 10  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Å–ø—Ä–µ–¥\n            reasons.append(f\"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Å–ø—Ä–µ–¥ {spread_pct}%\")\n        \n        # 2. –í–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å - –Ω–∏–∑—å–∫–∞ –∫—Ä–∞—â–∞ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ\n        if volatility_data.get(\"quality_score\", 0) >= 6:\n            timing_score += 20  # –°—Ç–∞–±—ñ–ª—å–Ω–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å\n            reasons.append(f\"–°—Ç–∞–±—ñ–ª—å–Ω–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å {volatility_data.get('volatility', 0)}%\")\n        elif volatility_data.get(\"quality_score\", 0) >= 4:\n            timing_score += 10  # –ü–æ–º—ñ—Ä–Ω–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å\n            reasons.append(f\"–ü–æ–º—ñ—Ä–Ω–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å {volatility_data.get('volatility', 0)}%\")\n        \n        # 3. –û–±'—î–º - –≤–∏—Å–æ–∫–∏–π –æ–±'—î–º –∫—Ä–∞—â–µ –¥–ª—è –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ\n        volume_score = volume_data.get(\"quality_score\", 0)\n        if volume_score >= 7:\n            timing_score += 25  # –í—ñ–¥–º—ñ–Ω–Ω–∏–π –æ–±'—î–º\n            reasons.append(f\"–í–∏—Å–æ–∫–∏–π –æ–±'—î–º ${volume_data.get('total_volume', 0):,.0f}\")\n        elif volume_score >= 4:\n            timing_score += 15  # –°–µ—Ä–µ–¥–Ω—ñ–π –æ–±'—î–º\n            reasons.append(f\"–°–µ—Ä–µ–¥–Ω–∏–π –æ–±'—î–º ${volume_data.get('total_volume', 0):,.0f}\")\n        \n        # 4. –ü–Ü–î–í–ò–©–ï–ù–Ü –∫—Ä–∏—Ç–µ—Ä—ñ—ó –¥–ª—è —è–∫—ñ—Å–Ω—ñ—à–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ (—è–∫ –ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)\n        if timing_score >= 70:\n            timing_grade = \"PERFECT\"  # 70+ = —ñ–¥–µ–∞–ª—å–Ω–∏–π –º–æ–º–µ–Ω—Ç\n            entry_recommendation = \"ENTER_NOW\"\n        elif timing_score >= 50:\n            timing_grade = \"GOOD\"  # 50+ = —Ö–æ—Ä–æ—à–∏–π –º–æ–º–µ–Ω—Ç  \n            entry_recommendation = \"ENTER_SOON\"\n        elif timing_score >= 20:\n            timing_grade = \"FAIR\"  # 20+ = —Å–µ—Ä–µ–¥–Ω—ñ–π –º–æ–º–µ–Ω—Ç\n            entry_recommendation = \"CONSIDER\"\n        else:\n            # –ë–õ–û–ö–£–Ñ–ú–û —Ç—ñ–ª—å–∫–∏ –Ω–∞–π–≥—ñ—Ä—à—ñ < 20 (–¥–æ–∑–≤–æ–ª—è—î–º–æ –ú–ê–ö–°–ò–ú–£–ú —Å–∏–≥–Ω–∞–ª—ñ–≤!)  \n            timing_grade = \"BLOCKED\"  # –ó–∞–Ω–∞–¥—Ç–æ —Å–ª–∞–±–∫–∏–π —Å–∏–≥–Ω–∞–ª\n            entry_recommendation = \"SKIP_SIGNAL\"\n            \n        return {\n            \"status\": \"success\",\n            \"timing_score\": timing_score,\n            \"grade\": timing_grade,\n            \"recommendation\": entry_recommendation,\n            \"reasons\": reasons\n        }\n        \n    except Exception as e:\n        return {\"status\": \"error\", \"error\": str(e), \"timing_score\": 0}\n\ndef stop_all_workers():\n    \"\"\"–ó—É–ø–∏–Ω–∏—Ç–∏ –≤—Å—ñ—Ö –≤–æ—Ä–∫–µ—Ä—ñ–≤\"\"\"\n    global bot_running, worker_threads, monitor_thread\n    logging.warning(\"üî¥ ADMIN STOP: –ó—É–ø–∏–Ω—è—é –≤—Å—ñ—Ö –≤–æ—Ä–∫–µ—Ä—ñ–≤ —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å...\")\n    bot_running = False\n    \n    # üõ°Ô∏è THREAD-SAFE STOP: –∑—É–ø–∏–Ω—è—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ Event\n    monitor_stop_event.set()\n    \n    # –ó—É–ø–∏–Ω—è—î–º–æ –≤–æ—Ä–∫–µ—Ä—ñ–≤\n    for thread in worker_threads:\n        if thread.is_alive():\n            thread.join(timeout=2)\n    worker_threads.clear()\n    \n    # üéØ ROBUST MONITOR STOP: –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è\n    if monitor_thread and monitor_thread.is_alive():\n        logging.warning(\"üéØ –û—á—ñ–∫—É—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ–∫—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...\")\n        monitor_thread.join(timeout=5)  # –ó–±—ñ–ª—å—à–µ–Ω–æ —Ç–∞–π–º–∞—É—Ç\n        if monitor_thread.is_alive():\n            logging.error(\"üö® –ö–†–ò–¢–ò–ß–ù–û: –ü–æ—Ç—ñ–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –Ω–µ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑–∞ 5 —Å–µ–∫—É–Ω–¥!\")\n        else:\n            logging.info(\"‚úÖ –ü–æ—Ç—ñ–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\")\n            monitor_thread = None  # üßπ CLEANUP: –û–±–Ω—É–ª—è—î–º–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å\n    \n    logging.warning(\"üî¥ STOP COMPLETED: –í—Å—ñ –≤–æ—Ä–∫–µ—Ä–∏ –∑—É–ø–∏–Ω–µ–Ω–æ\")\n\ndef restart_workers():\n    \"\"\"–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ—Ö –≤–æ—Ä–∫–µ—Ä—ñ–≤\"\"\"\n    global bot_running, active_positions\n    logging.warning(\"üîÑ ADMIN RESTART: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å...\")\n    stop_all_workers()\n    \n    with active_positions_lock:  # üîí –ó–ê–•–ò–°–¢ –≤—ñ–¥ race conditions\n        active_positions.clear()  # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ –ø–æ–∑–∏—Ü—ñ—ó\n        logging.info(f\"üóëÔ∏è –û–ß–ò–©–ï–ù–û: –í—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –ø–∞–º'—è—Ç—ñ!\")\n    \n    # üõ°Ô∏è RESET MONITOR EVENT: –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ä—Ç—É\n    monitor_stop_event.clear()\n    logging.info(\"üîÑ RESET: Monitor stop event —Å–∫–∏–Ω—É—Ç–∏–π –¥–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç—É\")\n    bot_running = True\n    \n    logging.warning(\"üü¢ RESTART: –ó–∞–ø—É—Å–∫–∞—é –≤–æ—Ä–∫–µ—Ä—ñ–≤ —Ç–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥...\")\n    start_workers()\n    start_monitor()  # üéØ –û–∫—Ä–µ–º–∏–π –∑–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É\n\ndef sync_positions_from_exchange():\n    \"\"\"–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –∑ –±—ñ—Ä–∂–µ—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ\"\"\"\n    global active_positions\n    try:\n        # üîß –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û XT –ë–Ü–†–ñ–£ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø–æ–∑–∏—Ü—ñ–π\n        try:\n            logging.info(\"üîß [SAFE WRAPPER] –°–ø—Ä–æ–±–∞ 1: fetch_positions –∑ settle=usdt\")\n            raw_positions = xt.fetch_positions(['USDT'], {'settle': 'usdt'}) if xt else []\n            exchange_positions = raw_positions if raw_positions is not None else []\n            active_exchange_positions = [p for p in exchange_positions if float(p.get('contracts', 0) or 0) > 0]\n            logging.info(f\"‚úÖ –°–ø—Ä–æ–±–∞ 1 —É—Å–ø—ñ—à–Ω–∞: {len(active_exchange_positions)} –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π\")\n            exchange_positions = active_exchange_positions\n        except Exception as e:\n            logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π –∑ XT –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: {e}\")\n            exchange_positions = []\n        logging.info(f\"üîç –û—Ç—Ä–∏–º–∞–Ω–æ {len(exchange_positions)} –ø–æ–∑–∏—Ü—ñ–π –∑ XT.com API\")\n        \n        # üö® –ê–í–¢–û–û–ß–ò–©–ï–ù–ù–Ø: —è–∫—â–æ –±—ñ—Ä–∂–∞ –ø–æ–≤–µ—Ä—Ç–∞—î 0 –ø–æ–∑–∏—Ü—ñ–π, –æ—á–∏—â–∞—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—é –ø–∞–º'—è—Ç—å\n        if len(exchange_positions) == 0:\n            with active_positions_lock:\n                if len(active_positions) > 0:\n                    logging.warning(f\"üßπ –ê–í–¢–û–û–ß–ò–©–ï–ù–ù–Ø: –ë—ñ—Ä–∂–∞ –ø–æ–∫–∞–∑—É—î 0 –ø–æ–∑–∏—Ü—ñ–π, –æ—á–∏—â–∞—î–º–æ {len(active_positions)} –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –ø–æ–∑–∏—Ü—ñ–π\")\n                    active_positions.clear()\n                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é\n                    send_to_admins_and_group(\n                                f\"üßπ **–°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–Ø –ü–û–ó–ò–¶–Ü–ô**\\n\"\n                                f\"–ë—ñ—Ä–∂–∞: 0 –ø–æ–∑–∏—Ü—ñ–π\\n\"\n                                f\"–û—á–∏—â–µ–Ω–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—é –ø–∞–º'—è—Ç—å\\n\"\n                                f\"‚è∞ {time.strftime('%H:%M:%S')}\")\n            return 0\n        synced_count = 0\n        \n        with active_positions_lock:  # üîí –ó–ê–•–ò–°–¢ –≤—ñ–¥ race conditions\n            for i, pos in enumerate(exchange_positions):\n                # –î–æ–¥–∞—Ç–∫–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\n                if i < 3:  # –ø–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3 –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è —Ä–æ–∑—É–º—ñ–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É\n                    logging.info(f\"üìä –ü–æ–∑–∏—Ü—ñ—è {i}: {pos}\")\n                \n                # –ë–µ–∑–ø–µ—á–Ω–µ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑ –∑–∞—Ö–∏—Å—Ç–æ–º –≤—ñ–¥ None\n                size_raw = pos.get('size', 0)\n                contracts_raw = pos.get('contracts', 0)\n                \n                size = float(size_raw) if size_raw is not None else 0.0\n                contracts = abs(float(str(contracts_raw))) if contracts_raw is not None else 0.0\n                \n                if size > 0 or contracts > 0:  # –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è (–æ–¥–∏–Ω –∑ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤)\n                    symbol = pos.get('symbol', '')\n                    side_value = pos.get('side', '')\n                    side = 'LONG' if (side_value and side_value.lower() == 'long') else 'SHORT'\n                    # –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è entry_price\n                    entry_raw = pos.get('entryPrice') or pos.get('entry_price') or pos.get('markPrice') or 0\n                    entry_price = float(entry_raw) if entry_raw is not None and str(entry_raw).replace('.','').replace('-','').isdigit() else 0.0\n                    \n                    # –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è notional\n                    notional_raw = pos.get('notional') or pos.get('size_usdt') or 0\n                    notional = abs(float(notional_raw)) if notional_raw is not None and str(notional_raw).replace('.','').replace('-','').isdigit() else (contracts * entry_price)\n                    \n                    # üõ°Ô∏è –ó–ê–•–ò–°–¢: –Ø–∫—â–æ notional=0, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ORDER_AMOUNT\n                    safe_notional = notional if notional > 0 else ORDER_AMOUNT\n                    logging.info(f\"üîß {symbol}: –±—ñ—Ä–∂–∞ notional={notional} ‚Üí safe_notional={safe_notional}\")\n                    \n                    # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–≥—Ä–µ–≥–æ–≤–∞–Ω—É –ø–æ–∑–∏—Ü—ñ—é –≤ –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ\n                    position = {\n                        \"side\": side,\n                        \"avg_entry\": entry_price,\n                        \"size_usdt\": safe_notional,\n                        \"adds_done\": 0,  # –±—ñ—Ä–∂–∞ –Ω–µ –∑–Ω–∞—î —Å–∫—ñ–ª—å–∫–∏ —É—Å–µ—Ä–µ–¥–Ω–µ–Ω—å –±—É–ª–æ\n                        \"last_add_price\": entry_price,\n                        # –§–Ü–ö–°–û–í–ê–ù–ê –¶–Ü–õ–¨: +30% –ø—Ä–∏–±—É—Ç–∫—É –∑ –ª–µ–≤–µ—Ä–∏–¥–∂–µ–º (—è–∫ –ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)\n                        \"tp_price\": entry_price * (1 + (0.30/LEVERAGE if side == \"LONG\" else -0.30/LEVERAGE)),  # 30% –ø—Ä–∏–±—É—Ç–∫—É –∑ –ª–µ–≤–µ—Ä–∏–¥–∂–µ–º\n                        \"last_add_time\": 0,  # –¥–∞–≤–Ω–æ\n                        # üéØ –ù–û–í–Ü –ü–û–õ–Ø –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û–ì–û –ó–ê–ö–†–ò–¢–¢–Ø\n                        \"entry_time\": time.time() - 3600,  # –ø—Ä–∏–±–ª–∏–∑–Ω–æ –≥–æ–¥–∏–Ω—É —Ç–æ–º—É (—ñ—Å—Ç–æ—Ä–∏—á–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è)\n                        \"exchange\": \"gate\",  # –±—ñ—Ä–∂–∞ –Ω–∞ —è–∫—ñ–π –≤—ñ–¥–∫—Ä–∏—Ç–∞ –ø–æ–∑–∏—Ü—ñ—è (–∑–∞–≤–∂–¥–∏ Gate.io –≤ —Ü—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó)\n                        \"arb_pair\": \"gate-dex\",  # —Ç–∏–ø –∞—Ä–±—ñ—Ç—Ä–∞–∂—É (–≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)\n                        \"entry_spread_pct\": 0.0,  # –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–ø—Ä–µ–¥ (–Ω–µ–≤—ñ–¥–æ–º–æ –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö –ø–æ–∑–∏—Ü—ñ–π)\n                        \"entry_ref_price\": entry_price,  # —Ä–µ—Ñ–µ—Ä–µ–Ω—Ç–Ω–∞ —Ü—ñ–Ω–∞ –Ω–∞ —á–∞—Å –≤—Ö–æ–¥—É\n                        \"status\": \"open\"  # —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü—ñ—ó (open/closing/closed)\n                    }\n                    \n                    # üîí –ö–†–ò–¢–ò–ß–ù–û: –ó–ê–í–ñ–î–ò –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ—Å–Ω—É—é—á—ñ timestamps (–ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ!)\n                    current_time = time.time()\n                    existing_position = active_positions.get(symbol, {})\n                    \n                    # –§–Ü–ö–° –ë–ê–ì–£: –ó–ê–í–ñ–î–ò –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ timestamps —è–∫—â–æ –≤–æ–Ω–∏ —î\n                    if existing_position.get('opened_at') and existing_position.get('opened_at') > 0:\n                        position['opened_at'] = existing_position['opened_at']  # –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û –Ü–°–ù–£–Æ–ß–ò–ô!\n                        logging.info(f\"üîß {symbol}: –ó–±–µ—Ä–µ–∂–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏–π opened_at={existing_position['opened_at']}\")\n                    else:\n                        position['opened_at'] = current_time - 3600  # –ø—Ä–∏–±–ª–∏–∑–Ω–æ –≥–æ–¥–∏–Ω—É —Ç–æ–º—É –¥–ª—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π\n                        logging.info(f\"üîß {symbol}: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–∏–π opened_at={position['opened_at']}\")\n                    \n                    if existing_position.get('expires_at') and existing_position.get('expires_at') > 0:\n                        position['expires_at'] = existing_position['expires_at']  # –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û –Ü–°–ù–£–Æ–ß–ò–ô!\n                        logging.info(f\"üîß {symbol}: –ó–±–µ—Ä–µ–∂–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏–π expires_at={existing_position['expires_at']}\")\n                    else:\n                        position['expires_at'] = position['opened_at'] + POSITION_MAX_AGE_SEC\n                        logging.info(f\"üîß {symbol}: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–∏–π expires_at={position['expires_at']}\")\n                    if 'xt_pair_url' not in position:\n                        position['xt_pair_url'] = generate_xt_pair_url(symbol)\n                    \n                    active_positions[symbol] = position  # –æ–¥–∏–Ω –∑–∞–ø–∏—Å –Ω–∞ —Å–∏–º–≤–æ–ª\n                    synced_count += 1\n                \n        logging.info(f\"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ {synced_count} –ø–æ–∑–∏—Ü—ñ–π –∑ –±—ñ—Ä–∂—ñ\")\n        \n        # üíæ –û–ë–û–í'–Ø–ó–ö–û–í–û –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –≤ —Ñ–∞–π–ª!\n        if synced_count > 0:\n            save_positions_to_file()\n            logging.info(f\"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {synced_count} —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π —É positions.json\")\n        \n        return synced_count\n        \n    except Exception as e:\n        logging.error(f\"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø–æ–∑–∏—Ü—ñ–π: {type(e).__name__}: {e}\")\n        return 0\n\ndef init_markets():\n    global markets, trade_symbols, xt, xt_markets_available\n    # ‚ùå GATE.IO –í–Ü–î–ö–õ–Æ–ß–ï–ù–û –∑–∞ –∑–∞–ø–∏—Ç–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - —Ç—ñ–ª—å–∫–∏ XT –±—ñ—Ä–∂–∞!\n    # markets = load_futures_markets(gate)\n    markets = {}  # –ü–æ—Ä–æ–∂–Ω—ñ Gate.io —Ä–∏–Ω–∫–∏\n    \n    # üöÄ –¢–Ü–õ–¨–ö–ò XT –ë–Ü–†–ñ–ê - —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ XT —è–∫ –æ—Å–Ω–æ–≤–Ω—É –±—ñ—Ä–∂—É\n    try:\n        if XT_API_KEY and XT_API_SECRET:\n            xt = create_xt()\n            xt_markets = load_xt_futures_markets(xt)\n            xt_markets_available = True\n            logging.info(f\"üöÄ XT –±—ñ—Ä–∂–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞ —è–∫ –Ñ–î–ò–ù–ê –±—ñ—Ä–∂–∞: {len(xt_markets)} —Ä–∏–Ω–∫—ñ–≤\")\n            \n            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ XT —Ä–∏–Ω–∫–∏ —è–∫ –æ—Å–Ω–æ–≤–Ω—ñ\n            markets = xt_markets\n            # –≤–∫–ª—é—á–∞—î–º–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —É—Å—ñ XT —Ä–∏–Ω–∫–∏\n            for s in markets.keys():\n                trade_symbols[s] = True\n                \n            logging.info(f\"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(markets)} —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ä –Ω–∞ XT –±—ñ—Ä–∂—ñ\")\n        else:\n            logging.error(\"‚ùå XT API –∫–ª—é—á—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ - —Å–∏—Å—Ç–µ–º–∞ –ù–ï –ú–û–ñ–ï –ü–†–ê–¶–Æ–í–ê–¢–ò!\")\n            xt_markets_available = False\n            raise Exception(\"XT –±—ñ—Ä–∂–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∞ - –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å XT_API_KEY —Ç–∞ XT_API_SECRET\")\n    except Exception as e:\n        logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó XT –±—ñ—Ä–∂—ñ: {e}\")\n        xt_markets_available = False\n        raise\n    \n    # üéØ –ù–æ–≤—ñ —Ñ—ñ—à–∫–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ:\n    # üìä –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ, üìà –ê–Ω–∞–ª—ñ–∑ –æ–±'—î–º—ñ–≤, ‚è∞ –†–æ–∑—É–º–Ω–∏–π —Ç–∞–π–º–∏–Ω–≥\n    logging.info(\"üéØ –ê–∫—Ç–∏–≤–Ω—ñ —Ñ—ñ—à–∫–∏: –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å, –æ–±'—î–º–∏, —Ç–∞–π–º–∏–Ω–≥ –≤—Ö–æ–¥—ñ–≤\")\n    logging.info(\"üöÄ –ù–û–í–ê –°–ò–°–¢–ï–ú–ê: XT.com vs DEX –∞—Ä–±—ñ—Ç—Ä–∞–∂ (Gate.io –í–Ü–î–ö–õ–Æ–ß–ï–ù–û)\")\n    \n    logging.info(f\"–£–≤—ñ–º–∫–Ω–µ–Ω–æ —Ç–æ—Ä–≥—ñ–≤–ª—é –¥–ª—è {len(trade_symbols)} —Å–∏–º–≤–æ–ª—ñ–≤ –Ω–∞ XT –±—ñ—Ä–∂—ñ\")\n    \n    # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –ø–æ–∑–∏—Ü—ñ—ó –∑ XT –±—ñ—Ä–∂—ñ\n    sync_positions_from_exchange()\n\ndef can_execute_on_orderbook(symbol, order_amount_usdt, depth_levels=ORDER_BOOK_DEPTH, max_slippage_pct=1.0, exchange=\"xt\"):\n    \"\"\"\n    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –±—ñ—á–Ω—ñ –æ–±—Å—è–≥–∏ –≤ —Å—Ç–∞–∫–∞–Ω—ñ ‚Äî —Å—Ç—Ä–æ–≥–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ\n    \"\"\"\n    try:\n        if exchange == \"xt\" and xt:\n            ob = xt_client.fetch_xt_order_book(xt, symbol, depth_levels)\n            ticker = xt_client.fetch_xt_ticker(xt, symbol)\n        else:\n            ob = fetch_order_book(xt, symbol, depth_levels)\n            ticker = fetch_xt_ticker(xt, symbol)\n        last = ticker['last']\n        \n        if last is None or not ob or 'asks' not in ob or 'bids' not in ob:\n            logging.info(f\"[{symbol}] ‚ö†Ô∏è –Ü–ù–§–û: –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö order book –∞–ª–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ç–æ—Ä–≥—É–≤–∞—Ç–∏\")\n            return True\n            \n        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ asks —ñ bids –æ–∫—Ä–µ–º–æ\n        asks_liquidity = 0.0\n        bids_liquidity = 0.0\n        \n        # –†–∞—Ö—É—î–º–æ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å –≤ asks (–¥–ª—è LONG –ø–æ–∑–∏—Ü—ñ–π)\n        for price, vol in ob['asks'][:depth_levels]:\n            asks_liquidity += float(price) * float(vol)\n            \n        # –†–∞—Ö—É—î–º–æ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å –≤ bids (–¥–ª—è SHORT –ø–æ–∑–∏—Ü—ñ–π)  \n        for price, vol in ob['bids'][:depth_levels]:\n            bids_liquidity += float(price) * float(vol)\n            \n        # –ë–ï–ó–ü–ï–ß–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê: –ø–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º –≤ 5 —Ä–∞–∑—ñ–≤ –±—ñ–ª—å—à–µ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ –Ω—ñ–∂ —Å—É–º–∞ –æ—Ä–¥–µ—Ä—É (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è futures!)\n        min_required_liquidity = order_amount_usdt * 5\n        \n        asks_ok = asks_liquidity >= min_required_liquidity\n        bids_ok = bids_liquidity >= min_required_liquidity\n        \n        # –ó–ê–í–ñ–î–ò –õ–û–ì–£–Ñ–ú–û –Ü–ù–§–û–†–ú–ê–¶–Ü–Æ –ü–†–û –õ–Ü–ö–í–Ü–î–ù–Ü–°–¢–¨\n        logging.info(f\"[{symbol}] üíß –õ–Ü–ö–í–Ü–î–ù–Ü–°–¢–¨: asks=${asks_liquidity:.2f} bids=${bids_liquidity:.2f} –ø–æ—Ç—Ä—ñ–±–Ω–æ>${min_required_liquidity:.2f}\")\n        \n        if not (asks_ok and bids_ok):\n            logging.warning(f\"[{symbol}] ‚ùå –ë–õ–û–ö–û–í–ê–ù–ò–ô –í–•–Ü–î: –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—è –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å asks=${asks_liquidity:.2f} bids=${bids_liquidity:.2f} < ${min_required_liquidity:.2f}\")\n            # –ë–õ–û–ö–£–Ñ–ú–û —Ç–æ—Ä–≥—ñ–≤–ª—é –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ —è–∫ –ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á\n            return False\n        else:\n            logging.info(f\"[{symbol}] ‚úÖ –õ–Ü–ö–í–Ü–î–ù–Ü–°–¢–¨ –î–û–°–¢–ê–¢–ù–Ø - —Ç–æ—Ä–≥—ñ–≤–ª—è –¥–æ–∑–≤–æ–ª–µ–Ω–∞\")\n            return True\n            \n    except Exception as e:\n        logging.error(f\"[{symbol}] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ: {e}\")\n        return False\n\n\n\ndef generate_close_signal(symbol, side, close_price, tp_price, open_price):\n    \"\"\"\n    –ì–µ–Ω–µ—Ä—É—î –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó\n    \"\"\"\n    from datetime import datetime\n    \n    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∏–±—É—Ç–∫—É\n    if side == \"LONG\":\n        profit_pct = ((close_price - open_price) / open_price) * 100\n    else:\n        profit_pct = ((open_price - close_price) / open_price) * 100\n    \n    profit_color = \"üü¢\" if profit_pct > 0 else \"üî¥\"\n    status_emoji = \"‚úÖ\" if profit_pct > 0 else \"‚ùå\"\n    close_reason = \"TP –î–û–°–Ø–ì–ù–£–¢–û\" if abs(close_price - tp_price) < 0.00001 else \"–ü–û–ó–ò–¶–Ü–Æ –ó–ê–ö–†–ò–¢–û\"\n    \n    current_time = datetime.now().strftime(\"%H:%M UTC\")\n    \n    close_signal = f\"\"\"\n{status_emoji} **–ü–û–ó–ò–¶–Ü–Æ –ó–ê–ö–†–ò–¢–û** {status_emoji}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüìç **{symbol.replace('/USDT:USDT', '')}** | XT.COM FUTURES\nüìä **{side}** | {current_time}\n\nüíπ **–í–•–Ü–î:** ${open_price:.6f}\nüèÅ **–í–ò–•–Ü–î:** ${close_price:.6f}\nüéØ **TP:** ${tp_price:.6f}\n\n{profit_color} **–†–ï–ó–£–õ–¨–¢–ê–¢:** {profit_pct:+.2f}%\nüìã **–°–¢–ê–¢–£–°:** {close_reason}\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n‚ö° XT.COM Arbitrage Bot\nü§ñ –ê–≤—Ç–æ–∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó\n\"\"\"\n    return close_signal\n\ndef open_market_position(symbol, side, usd_amount, leverage, gate_price_ref=None, dex_price_ref=None, spread_ref=None, account_num=1):\n    \"\"\"\n    Proxy function to XT.com - replaced Gate.io with XT.com\n    –ü—ñ–¥—Ç—Ä–∏–º—É—î –æ–±–∏–¥–≤–∞ –∞–∫–∞—É–Ω—Ç–∏ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä account_num\n    \"\"\"\n    # –í–∏–±–∏—Ä–∞—î–º–æ –∞–∫–∞—É–Ω—Ç –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ\n    xt_client = xt_account_1 if account_num == 1 else xt_account_2\n    return xt_open_market_position(xt_client, symbol, side, usd_amount, leverage, gate_price_ref, dex_price_ref, spread_ref)\n\ndef close_position_market(symbol, side, usd_amount, account_num=1):\n    \"\"\"\n    Proxy function to XT.com - replaced Gate.io with XT.com\n    –ü—ñ–¥—Ç—Ä–∏–º—É—î –æ–±–∏–¥–≤–∞ –∞–∫–∞—É–Ω—Ç–∏ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä account_num\n    \"\"\"\n    # –í–∏–±–∏—Ä–∞—î–º–æ –∞–∫–∞—É–Ω—Ç –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è\n    xt_client = xt_account_1 if account_num == 1 else xt_account_2\n    return xt_close_position_market(xt_client, symbol, side, usd_amount)\n\ndef symbol_worker(symbol):\n    \"\"\"\n    –†–æ–±–æ—Ç–∞ –ø–æ –æ–¥–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É –∑ —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è–º –ø–æ–∑–∏—Ü—ñ–π: fetch ticker, dex price via dexscreener, calc spread, check liquidity, open/average/close\n    \"\"\"\n    logging.info(\"Worker started for %s\", symbol)\n    while bot_running:\n        try:\n            if not trade_symbols.get(symbol, False):\n                time.sleep(1)\n                continue\n\n            # 1) –¢–Ü–õ–¨–ö–ò XT –ë–Ü–†–ñ–ê - –æ—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω—É –∑ XT (—è–∫ –ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)\n            xt_price = None\n            if not (xt_markets_available and xt):\n                logging.debug(f\"[{symbol}] ‚ùå XT –±—ñ—Ä–∂–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\")\n                time.sleep(SCAN_INTERVAL)\n                continue\n                \n            try:\n                xt_price = get_xt_price(xt, symbol)\n                if not xt_price or not is_xt_futures_tradeable(symbol):\n                    logging.debug(f\"[{symbol}] ‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ —Ç–æ—Ä–≥—É–≤–∞—Ç–∏ –Ω–∞ XT futures\")\n                    time.sleep(SCAN_INTERVAL)\n                    continue\n                logging.debug(f\"[{symbol}] ‚úÖ XT —Ü—ñ–Ω–∞: ${xt_price:.6f}\")\n            except Exception as e:\n                logging.debug(f\"[{symbol}] ‚ö†Ô∏è XT —Ü—ñ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}\")\n                time.sleep(SCAN_INTERVAL)\n                continue\n\n            # 2) –¢–Ü–õ–¨–ö–ò –¢–û–î–Ü DexScreener - –æ—Ç—Ä–∏–º—É—î–º–æ –†–û–ó–®–ò–†–ï–ù–Ü –ú–ï–¢–†–ò–ö–ò —è–∫ —É —Ä–æ—Å—ñ–π—Å—å–∫–æ—ó —Å–∏—Å—Ç–µ–º–∏!\n            try:\n                # üî¨ –†–û–ó–®–ò–†–ï–ù–ò–ô –ê–ù–ê–õ–Ü–ó: –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å, FDV, market cap, —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó, –ø–æ–∫—É–ø—Ü—ñ/–ø—Ä–æ–¥–∞–≤—Ü—ñ\n                advanced_metrics = get_advanced_token_analysis(symbol)\n                if not advanced_metrics:\n                    logging.debug(f\"[{symbol}] ‚ùå –ù–µ–º–∞—î —è–∫—ñ—Å–Ω–æ—ó –ø–∞—Ä–∏ –Ω–∞ DexScreener\")\n                    time.sleep(SCAN_INTERVAL)\n                    continue\n                    \n                # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ (backward compatibility)\n                token_info = {\n                    'price_usd': advanced_metrics.get('price_usd', 0),\n                    'liquidity': advanced_metrics.get('liquidity', 0),\n                    'volume_24h': advanced_metrics.get('volume_24h', 0),\n                    'dex_link': advanced_metrics.get('exact_pair_url') or get_proper_dexscreener_link(symbol)\n                }\n                \n                # –ö–æ—Ä–æ—Ç–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–æ–∫–µ–Ω (–∑–º–µ–Ω—à–µ–Ω–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è)\n                logging.info(f\"üìä {symbol}: ${advanced_metrics.get('price_usd', 0):.6f} | Vol ${advanced_metrics.get('volume_1h', 0):,.0f}\")\n                    \n                if not token_info:\n                    logging.debug(f\"[{symbol}] ‚ùå –ù–µ–º–∞—î —è–∫—ñ—Å–Ω–æ—ó –ø–∞—Ä–∏ –Ω–∞ DexScreener\")\n                    time.sleep(SCAN_INTERVAL)\n                    continue\n                \n                dex_price = token_info['price_usd']\n                \n                # –ñ–û–†–°–¢–ö–Ü –ü–ï–†–ï–í–Ü–†–ö–ò (—è–∫ —É —Ç–æ–ø–æ–≤–∏—Ö –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –±–æ—Ç—ñ–≤)\n                if not dex_price or dex_price < 0.000001:  # –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ $0.000001\n                    raise Exception(f\"Invalid DexScreener price: {dex_price}\")\n                    \n            except Exception as e:\n                # –ë–õ–û–ö–£–Ñ–ú–û —Ç–æ–∫–µ–Ω–∏ –∑ –ø–æ–≥–∞–Ω–∏–º–∏ DexScreener —Ü—ñ–Ω–∞–º–∏ - —è–∫ —É –¥—Ä—É–≥–∞ –∑ Bybit\n                logging.warning(f\"[{symbol}] ‚ùå –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —á–µ—Ä–µ–∑ –ø–æ–≥–∞–Ω—É DexScreener —Ü—ñ–Ω—É: {e}\")\n                time.sleep(SCAN_INTERVAL)\n                continue\n\n            # 3) –¢–Ü–õ–¨–ö–ò XT vs DexScreener –ê–†–ë–Ü–¢–†–ê–ñ (Gate.io –í–Ü–î–ö–õ–Æ–ß–ï–ù–û)\n            if not xt_price:\n                logging.debug(f\"[{symbol}] ‚ùå XT —Ü—ñ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\")\n                time.sleep(SCAN_INTERVAL)\n                continue\n                \n            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–ø—Ä–µ–¥ XT vs DexScreener\n            xt_dex_spread = calculate_spread(dex_price, xt_price)\n            best_spread = xt_dex_spread\n            best_direction = \"LONG\" if xt_price < dex_price else \"SHORT\" \n            best_exchange_pair = \"XT vs Dex\"\n            trading_exchange = \"xt\"  # –ó–ê–í–ñ–î–ò —Ç–æ—Ä–≥—É—î–º–æ –Ω–∞ XT\n            ref_price = xt_price  # –í–ò–ü–†–ê–í–õ–ï–ù–û: XT —Ü—ñ–Ω–∞ –¥–ª—è XT –±—ñ—Ä–∂—ñ\n            \n            spread_pct = best_spread\n            spread_store.append(spread_pct)\n            \n            # –ü–æ–∫—Ä–∞—â–µ–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –∑ XT —Ç–∞ DexScreener\n            clean_symbol = symbol.replace('/USDT:USDT', '')\n            log_info = f\"XT: ${xt_price:.6f} | Dex: ${dex_price:.6f} | –°–ø—Ä–µ–¥: {best_spread:.2f}% {best_direction} | –¢–æ—Ä–≥—É—î–º–æ –Ω–∞: XT\"\n            logging.info(f\"[{clean_symbol}] {log_info}\")\n            \n            # üöÄ –ù–û–í–Ü –§–Ü–®–ö–ò: –†–æ–∑—É–º–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ü–Ü–°–õ–Ø –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è trading_exchange\n            volatility = calculate_volatility_indicator(symbol, trading_exchange)\n            volume_analysis = analyze_volume_quality(symbol, token_info, trading_exchange)\n            smart_timing = smart_entry_timing(symbol, abs(spread_pct), volatility, volume_analysis)\n            \n            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ñ—ñ—à–æ–∫\n            # –ê–Ω–∞–ª—ñ–∑ —è–∫–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω–∞ (–ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–º–µ–Ω—à–µ–Ω–æ)\n            if volatility.get('status') == 'success' and smart_timing.get('status') == 'success':\n                logging.info(f\"[{clean_symbol}] üìä –í–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å: {volatility['volatility']}% | –¢–∞–π–º–∏–Ω–≥: {smart_timing['grade']}\")\n            \n            # ‚úÖ –ü–û–í–ù–ê –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø - –ë–ï–ó –ë–õ–û–ö–ò–†–û–í–û–ö!\n            enhanced_entry_check = True\n            \n            # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–ë–ï–ó –ë–õ–û–ö–£–í–ê–ù–ù–Ø!)\n            # –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤\n            if volatility.get('risk_level') == 'EXTREME' and volatility.get('volatility', 0) > 30:\n                logging.info(f\"[{clean_symbol}] ‚ö†Ô∏è –í–∏—Å–æ–∫–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å {volatility.get('volatility', 0)}% - —Ç–æ—Ä–≥—É—î–º–æ –æ–±–µ—Ä–µ–∂–Ω–æ\")\n            \n            # –ù–ï —Å–ø–∞–º–∏–º–æ –ø—Ä–æ –∫–æ–∂–Ω—É –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—É –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å - —Ç—ñ–ª—å–∫–∏ –ø—Ä–æ —Ä–µ–∞–ª—å–Ω—ñ —Ç–æ—Ä–≥–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó\n\n            # 3) –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É –ø–µ—Ä–µ–¥ —Ç–æ—Ä–≥—ñ–≤–ª–µ—é\n            # –ú–ê–†–ñ–ê –ó–ê –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø–ú (–∑–±—ñ–ª—å—à–µ–Ω–æ –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ –¥–æ—Ä–æ–∂—á–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏)\n            required_margin = float(ORDER_AMOUNT)  # –ü—Ä–∏–º—É—Å–æ–≤–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—è –¥–æ float\n            \n            # üîí THREAD-SAFE –ë–ê–õ–ê–ù–° (Task 6: –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –±–∞–ª–∞–Ω—Å—É)\n            try:\n                with balance_check_lock:  # –ó–ê–•–ò–°–¢: —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω worker –ø–µ—Ä–µ–≤—ñ—Ä—è—î –±–∞–ª–∞–Ω—Å –æ–¥–Ω–æ—á–∞—Å–Ω–æ\n                    # –í–∏–¥–∞–ª–µ–Ω–æ DEBUG –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —á–∏—Å—Ç–æ—Ç–∏\n                    \n                    # ‚úÖ –¢–Ü–õ–¨–ö–ò XT.COM –ë–Ü–†–ñ–ê - –û–ë–ò–î–í–ê –ê–ö–ê–£–ù–¢–ò\n                    if trading_exchange == \"xt\":\n                        # –ë–∞–ª–∞–Ω—Å –∞–∫–∞—É–Ω—Ç–∞ 1\n                        balance_1 = get_xt_futures_balance(xt_account_1)\n                        available_balance_1 = float(balance_1.get('free', 0.0))\n                        # –ë–∞–ª–∞–Ω—Å –∞–∫–∞—É–Ω—Ç–∞ 2\n                        balance_2 = get_xt_futures_balance(xt_account_2)\n                        available_balance_2 = float(balance_2.get('free', 0.0))\n                        # –ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∏–π –±–∞–ª–∞–Ω—Å\n                        available_balance = available_balance_1 + available_balance_2\n                        logging.info(f\"üí∞ XT.com –ê–ö–ê–£–ù–¢ 1: ${balance_1['total']:.2f} USDT (–¥–æ—Å—Ç—É–ø–Ω–æ ${available_balance_1:.2f})\")\n                        logging.info(f\"üí∞ XT.com –ê–ö–ê–£–ù–¢ 2: ${balance_2['total']:.2f} USDT (–¥–æ—Å—Ç—É–ø–Ω–æ ${available_balance_2:.2f})\")\n                        logging.info(f\"üí∞ –ó–ê–ì–ê–õ–û–ú: ${balance_1['total'] + balance_2['total']:.2f} USDT (–¥–æ—Å—Ç—É–ø–Ω–æ ${available_balance:.2f})\")\n                    else:\n                        # –Ø–∫—â–æ trading_exchange –Ω–µ XT - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ\n                        logging.warning(f\"[{symbol}] ‚ö†Ô∏è –ü—ñ–¥—Ç—Ä–∏–º—É—î–º–æ —Ç—ñ–ª—å–∫–∏ XT –±—ñ—Ä–∂—É, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ: {trading_exchange}\")\n                        continue\n                        \n                    # –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è —É–º–æ–≤ —Ç–æ—Ä–≥—ñ–≤–ª—ñ\n                    spread_check = abs(spread_pct) >= MIN_SPREAD\n                    balance_check = available_balance >= required_margin\n                    \n                    # üîí –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –∑ –ó–ê–•–ò–°–¢–û–ú (–ø–æ–∑–∞ balance_check_lock)\n                    with active_positions_lock:\n                        total_positions = len(active_positions)\n                        has_position = symbol in active_positions\n                    positions_check = total_positions < MAX_OPEN_POSITIONS\n                \n                \n                # üî• –ü–û–ö–†–ê–©–ï–ù–Ü –§–Ü–õ–¨–¢–†–ò –†–ï–ê–õ–¨–ù–û–°–¢–Ü - –≤—ñ–¥—Å—ñ—é—î–º–æ —Ñ–µ–π–∫–æ–≤—ñ –∞—Ä–±—ñ—Ç—Ä–∞–∂—ñ!\n                is_realistic = True\n                \n                # 1. –†–û–ó–£–ú–ù–ò–ô —Å–ø—Ä–µ–¥ —Ñ—ñ–ª—å—Ç—Ä: —Ä—ñ–∑–Ω—ñ –ª—ñ–º—ñ—Ç–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –º–æ–Ω–µ—Ç\n                clean_symbol = symbol.replace('/USDT:USDT', '')\n                \n                # –û—Å–Ω–æ–≤–Ω—ñ –º–æ–Ω–µ—Ç–∏ (ETH, BTC —Ç–æ—â–æ) - –±—ñ–ª—å—à –∂–æ—Ä—Å—Ç–∫—ñ –ª—ñ–º—ñ—Ç–∏\n                major_tokens = ['ETH', 'BTC', 'BNB', 'ADA', 'SOL', 'MATIC', 'AVAX', 'DOT', 'LINK']\n                max_spread_limit = 50.0  # –ü–û–õ–Ü–ü–®–ï–ù–û: –º–∞–∫—Å–∏–º—É–º 50% –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ñ–µ–π–∫—ñ–≤\n                \n                # –ñ–û–†–°–¢–ö–ê –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–µ–π–∫–æ–≤–∏—Ö —Å–ø—Ä–µ–¥—ñ–≤  \n                if abs(spread_pct) > max_spread_limit:\n                    logging.warning(f\"[{symbol}] ‚ùå –§–ï–ô–ö: –ù–µ—Ä–µ–∞–ª—å–Ω–∏–π —Å–ø—Ä–µ–¥ {spread_pct:.2f}% > {max_spread_limit}%\")\n                    is_realistic = False\n                \n                # –ë–õ–û–ö–£–í–ê–ù–ù–Ø –ù–ï–ì–ê–¢–ò–í–ù–ò–• –°–ü–†–ï–î–Ü–í (–æ—á–µ–≤–∏–¥–Ω—ñ —Ñ–µ–π–∫–∏)\n                if spread_pct < -25.0:  # –ù–µ–≥–∞—Ç–∏–≤–Ω—ñ —Å–ø—Ä–µ–¥–∏ –±—ñ–ª—å—à–µ -25% –∑–∞–≤–∂–¥–∏ —Ñ–µ–π–∫–æ–≤—ñ  \n                    logging.warning(f\"[{symbol}] ‚ùå –§–ï–ô–ö: –ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π —Å–ø—Ä–µ–¥ {spread_pct:.2f}% –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ\")\n                    is_realistic = False\n                \n                # 2. –†–û–ó–°–õ–ê–ë–õ–ï–ù–ê –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è —Ü—ñ–Ω –¥–ª—è –±—ñ–ª—å—à–µ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π\n                price_ratio = max(xt_price, dex_price) / min(xt_price, dex_price)\n                max_price_ratio = 2.5  # –†–û–ó–°–õ–ê–ë–õ–ï–ù–û: 2.5x –¥–ª—è –≤—Å—ñ—Ö –º–æ–Ω–µ—Ç –¥–ª—è –±—ñ–ª—å—à–µ —Å–∏–≥–Ω–∞–ª—ñ–≤\n                \n                if price_ratio > max_price_ratio:\n                    logging.warning(f\"[{symbol}] ‚ùå –§–ï–ô–ö: –¶—ñ–Ω–∏ –≤—ñ–¥—Ä—ñ–∑–Ω—è—é—Ç—å—Å—è –≤ {price_ratio:.2f} —Ä–∞–∑—ñ–≤ (–º–∞–∫—Å. {max_price_ratio:.1f}x)\")\n                    is_realistic = False\n                \n                # 3. –ê–ë–°–û–õ–Æ–¢–ù–ê –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–Ω –¥–ª—è —Ç–æ–ø-–º–æ–Ω–µ—Ç (—è–∫ ETH $3701 vs $4601)  \n                if clean_symbol in major_tokens:\n                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ü—ñ–Ω–¥–∏ –≤ —Ä–æ–∑—É–º–Ω–∏—Ö –º–µ–∂–∞—Ö –¥–ª—è —Ç–æ–ø-–º–æ–Ω–µ—Ç\n                    expected_ranges = {\n                        'ETH': (2000, 6000),    # ETH –æ—á—ñ–∫—É—î—Ç—å—Å—è $2000-6000\n                        'BTC': (30000, 100000), # BTC –æ—á—ñ–∫—É—î—Ç—å—Å—è $30k-100k  \n                        'BNB': (200, 1000),     # BNB –æ—á—ñ–∫—É—î—Ç—å—Å—è $200-1000\n                        'SOL': (50, 500),       # SOL –æ—á—ñ–∫—É—î—Ç—å—Å—è $50-500\n                        'ADA': (0.2, 3.0),      # ADA –æ—á—ñ–∫—É—î—Ç—å—Å—è $0.2-3.0\n                    }\n                    \n                    if clean_symbol in expected_ranges:\n                        min_price, max_price = expected_ranges[clean_symbol]\n                        if not (min_price <= xt_price <= max_price) or not (min_price <= dex_price <= max_price):\n                            logging.warning(f\"[{symbol}] ‚ùå –§–ï–ô–ö: –¶—ñ–Ω–∞ –ø–æ–∑–∞ –º–µ–∂–∞–º–∏ –¥–ª—è {clean_symbol}: XT=${xt_price:.2f}, Dex=${dex_price:.2f} (–æ—á—ñ–∫—É—î—Ç—å—Å—è ${min_price}-${max_price})\")\n                            is_realistic = False\n                \n                # 4. –ñ–û–†–°–¢–ö–Ü –§–Ü–õ–¨–¢–†–ò: –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å —Ç–∞ –æ–±—Å—è–≥ –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ (—è–∫ –ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)\n                min_liquidity = token_info.get('liquidity', 0)\n                min_volume_24h = token_info.get('volume_24h', 0)\n                \n                if min_liquidity < MIN_POOLED_LIQUIDITY_USD:  # –§–Ü–õ–¨–¢–† –∑ config.py\n                    logging.warning(f\"[{symbol}] ‚ùå –§–ï–ô–ö: –ú–∞–ª–∞ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å ${min_liquidity:,.0f} < ${MIN_POOLED_LIQUIDITY_USD:,}\")\n                    is_realistic = False\n                    \n                if min_volume_24h < MIN_24H_VOLUME_USD:  # –§–Ü–õ–¨–¢–† –∑ config.py\n                    logging.warning(f\"[{symbol}] ‚ùå –§–ï–ô–ö: –ú–∞–ª–∏–π –æ–±—Å—è–≥ ${min_volume_24h:,.0f} < ${MIN_24H_VOLUME_USD:,}\")\n                    is_realistic = False\n                \n                # 5. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ü–µ –Ω–µ —Å—Ç–µ–π–±–ª–∫–æ—ó–Ω –∞–±–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —Ç–æ–∫–µ–Ω–∏\n                blacklisted_tokens = ['USDT', 'USDC', 'BUSD', 'DAI', 'TUSD', 'FDUSD', 'TON']\n                if any(token in clean_symbol for token in blacklisted_tokens):\n                    logging.info(f\"[{symbol}] ‚ùå –ó–ê–ë–õ–û–ö–û–í–ê–ù–û: –¢–æ–∫–µ–Ω {clean_symbol} –≤ —á–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É\")\n                    is_realistic = False\n                \n                # 6. –î–û–î–ê–¢–ö–û–í–û: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∞—Ç–Ω–æ—Å—Ç—ñ —Ü—ñ–Ω (–≤–∏—è–≤–ª—è—î –¥–µ—è–∫—ñ —Ñ–µ–π–∫–∏)\n                if xt_price > 0 and dex_price > 0:\n                    # –Ø–∫—â–æ –æ–¥–Ω–∞ —Ü—ñ–Ω–∞ —î —Ç–æ—á–Ω–∏–º –∫—Ä–∞—Ç–Ω–∏–º —ñ–Ω—à–æ—ó (x10, x100), —Ü–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ–º–∏–ª–∫–∞\n                    ratio_check = xt_price / dex_price\n                    if abs(ratio_check - round(ratio_check)) < 0.01 and round(ratio_check) >= 10:\n                        logging.warning(f\"[{symbol}] ‚ùå –§–ï–ô–ö: –ü—ñ–¥–æ–∑—Ä—é–≤–∞–Ω–µ –∫—Ä–∞—Ç–Ω–µ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è —Ü—ñ–Ω {ratio_check:.1f}x\")\n                        is_realistic = False\n                \n                # –ê–í–¢–û–°–ò–ì–ù–ê–õ–ò: –û–∫—Ä–µ–º—ñ —Å–∏–≥–Ω–∞–ª–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø–∞—Ä–∏ –±—ñ—Ä–∂ >= MIN_SPREAD\n                \n                # –õ–æ–≥—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ñ—ñ—à–æ–∫\n                if volatility.get('status') == 'success':\n                    # –ö–æ–º–ø–∞–∫—Ç–Ω–∏–π –∑–≤—ñ—Ç —è–∫–æ—Å—Ç—ñ (–∑–º–µ–Ω—à–µ–Ω–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è)\n                    if volatility.get('status') == 'success' and volume_analysis.get('status') == 'success':\n                        logging.info(f\"[{symbol}] üìä Vol: {volatility['volatility']}% | –û–±'—î–º: ${volume_analysis['total_volume']:,.0f} | –¢–∞–π–º–∏–Ω–≥: {smart_timing.get('grade', 'N/A')}\")\n                \n                # –ü—ñ–¥–≤–∏—â—É—î–º–æ –≤–∏–º–æ–≥–∏ –¥–æ –≤—Ö–æ–¥—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–æ–≤–∏—Ö —Ñ—ñ—à–æ–∫\n                enhanced_entry_check = True\n                \n                # üéØ –î–û–ó–í–û–õ–ï–ù–û: –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –Ω–∞–π–≥—ñ—Ä—à–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ (–¥–æ–∑–≤–æ–ª—è—î–º–æ FAIR —Ç–∞–π–º–∏–Ω–≥)\n                timing_recommendation = smart_timing.get('recommendation', 'WAIT')\n                if timing_recommendation in ['SKIP_SIGNAL']:  # –¢—ñ–ª—å–∫–∏ SKIP_SIGNAL, WAIT/CONSIDER –¥–æ–∑–≤–æ–ª–µ–Ω—ñ\n                    logging.warning(f\"[{symbol}] ‚ùå –ë–õ–û–ö–û–í–ê–ù–ò–ô –°–ò–ì–ù–ê–õ: —Ç–∞–π–º—ñ–Ω–≥ {smart_timing.get('grade')} ({smart_timing.get('timing_score', 0)} –±–∞–ª—ñ–≤)\")\n                    enhanced_entry_check = False  # –ë–õ–û–ö–£–Ñ–ú–û —Ç—ñ–ª—å–∫–∏ –Ω–∞–π–≥—ñ—Ä—à—ñ —Å–∏–≥–Ω–∞–ª–∏\n                \n                # –ë–ª–æ–∫—É—î–º–æ –ø—Ä–∏ –µ–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ñ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ\n                if volatility.get('risk_level') == 'EXTREME':\n                    logging.info(f\"[{symbol}] üìä –Ü–ù–§–û: –í–∏—Å–æ–∫–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å {volatility.get('volatility', 0)}% –∞–ª–µ —Ç–æ—Ä–≥—É—î–º–æ –¥–∞–ª—ñ\")\n                    # –ë–ï–ó –ë–õ–û–ö–£–í–ê–ù–ù–Ø enhanced_entry_check –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è True\n                \n                # –ë–ª–æ–∫—É—î–º–æ –ø—Ä–∏ –Ω–∏–∑—å–∫–æ–º—É –æ–±'—î–º—ñ\n                if volume_analysis.get('quality_score', 0) <= 1:\n                    logging.warning(f\"[{symbol}] üìà –ë–õ–û–ö–û–í–ê–ù–û: –ó–∞–Ω–∞–¥—Ç–æ –Ω–∏–∑—å–∫–∏–π –æ–±'—î–º ${volume_analysis.get('total_volume', 0):,.0f}\")\n                    enhanced_entry_check = False\n                \n                # üõ°Ô∏è –ü–ï–†–ï–í–Ü–†–Ø–Ñ–ú–û –Ü–°–ù–£–Æ–ß–Ü –ü–û–ó–ò–¶–Ü–á –ü–ï–†–ï–î –í–Ü–î–ü–†–ê–í–ö–û–Æ –°–ò–ì–ù–ê–õ–Ü–í\n                with active_positions_lock:\n                    already_has_position = symbol in active_positions\n\n                # üéØ –ù–û–í–ê –õ–û–ì–Ü–ö–ê: –ó–ë–ò–†–ê–Ñ–ú–û –ú–û–ñ–õ–ò–í–û–°–¢–Ü –ë–ï–ó –ë–ê–õ–ê–ù–°–û–í–ò–• –û–ë–ú–ï–ñ–ï–ù–¨ –î–õ–Ø –ù–ê–ô–ö–†–ê–©–ò–• –°–ò–ì–ù–ê–õ–Ü–í\n                logging.info(f\"üîç –ü–ï–†–ï–í–Ü–†–ö–ê –°–ò–ì–ù–ê–õ–£ {symbol}: realistic={is_realistic}, entry_check={enhanced_entry_check}, has_position={already_has_position}\")\n                if is_realistic and enhanced_entry_check and not already_has_position:\n                    # 1. XT vs DexScreener (–¢–Ü–õ–¨–ö–ò XT –ë–Ü–†–ñ–ê)\n                    xt_dex_spread_pct = calculate_spread(dex_price, xt_price)\n                    if abs(xt_dex_spread_pct) >= MIN_SPREAD:\n                        current_time = time.time()\n                        logging.info(f\"üî• –°–ò–ì–ù–ê–õ –ó–ù–ê–ô–î–ï–ù–û: {symbol} —Å–ø—Ä–µ–¥={xt_dex_spread_pct:.2f}% (–º—ñ–Ω={MIN_SPREAD}%, –º–∞–∫—Å={MAX_SPREAD}%)\")\n                        \n                        # üéØ –ó–ë–ò–†–ê–Ñ–ú–û –î–õ–Ø –ù–ê–ô–ö–†–ê–©–ò–• –°–ò–ì–ù–ê–õ–Ü–í (–ë–ï–ó –ö–£–õ–î–ê–£–ù –ü–ï–†–ï–í–Ü–†–ö–ò –¢–£–¢)\n                        side = \"LONG\" if xt_dex_spread_pct > 0 else \"SHORT\"\n                        \n                        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–ª—è –ø–æ—à—É–∫—É –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ\n                        liquidity = advanced_metrics.get('liquidity', 0)\n                        volume_24h = advanced_metrics.get('volume_24h', 0) \n                        score = abs(xt_dex_spread_pct) * 100 + (liquidity / 1000) + (volume_24h / 10000)\n                        \n                        # ‚úÖ –î–û–î–ê–Ñ–ú–û –í –°–ò–°–¢–ï–ú–£ –ù–ê–ô–ö–†–ê–©–ò–• –ú–û–ñ–õ–ò–í–û–°–¢–ï–ô (–ë–ï–ó –ë–ê–õ–ê–ù–°–û–í–ò–• –û–ë–ú–ï–ñ–ï–ù–¨)\n                        with opportunities_lock:\n                            best_opportunities[symbol] = {\n                                'spread': xt_dex_spread_pct,\n                                'side': side,\n                                'score': score,\n                                'timestamp': current_time,\n                                'xt_price': xt_price,\n                                'dex_price': dex_price,\n                                'token_info': token_info,\n                                'advanced_metrics': advanced_metrics\n                            }\n                        \n                        logging.info(f\"[{symbol}] üèÜ –î–û–î–ê–ù–û –î–û –ù–ê–ô–ö–†–ê–©–ò–•: {side} —Å–ø—Ä–µ–¥={xt_dex_spread_pct:.2f}% (—Ä–µ–π—Ç–∏–Ω–≥={score:.1f})\")\n                        \n                        # üö® –ù–û–í–ê –õ–û–ì–Ü–ö–ê: –ù–ï–ì–ê–ô–ù–ï –í–Ü–î–ü–†–ê–í–õ–ï–ù–ù–Ø –°–ò–ì–ù–ê–õ–£ –ù–ï–ó–ê–õ–ï–ñ–ù–û –í–Ü–î –ë–ê–õ–ê–ù–°–£!\n                        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–∏–≥–Ω–∞–ª –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ (—Ç—ñ–ª—å–∫–∏ –∑ –∫—É–ª–¥–∞—É–Ω–æ–º)\n                        signal_sent = False\n                        \n                        with telegram_cooldown_lock:  # –ö–†–ò–¢–ò–ß–ù–ê –°–ï–ö–¶–Ü–Ø\n                            last_signal_time = telegram_cooldown.get(symbol, 0)\n                            time_since_last = current_time - last_signal_time\n                            \n                            if time_since_last >= TELEGRAM_COOLDOWN_SEC:\n                                signal_sent = True\n                                \n                                # üõ°Ô∏è –í–ï–†–ò–§–Ü–ö–ê–¶–Ü–Ø –°–ò–ì–ù–ê–õ–£ (—è–∫ –ø—Ä–æ—Å–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - –±–ª–æ–∫—É—î–º–æ –±–µ–∑ DEX –∞–¥—Ä–µ—Å–∏!)\n                                logging.info(f\"üîç –í–ï–†–ò–§–Ü–ö–£–Æ –°–ò–ì–ù–ê–õ: {symbol} {side} —Å–ø—Ä–µ–¥={xt_dex_spread_pct:.2f}%\")\n                                \n                                try:\n                                    # –°—Ç–≤–æ—Ä—é—î–º–æ ArbitrageSignal –æ–±'—î–∫—Ç –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó\n                                    from signal_parser import ArbitrageSignal\n                                    from signal_verification import verify_arbitrage_signal\n                                    from telegram_formatter import format_arbitrage_signal_message\n                                    \n                                    test_signal = ArbitrageSignal(\n                                        asset=clean_symbol,\n                                        action=side,\n                                        spread_percent=xt_dex_spread_pct,\n                                        xt_price=xt_price,\n                                        dex_price=dex_price\n                                    )\n                                    \n                                    # –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–≤–Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è–º —Å–∏–≥–Ω–∞–ª—ñ–≤ –±–µ–∑ DEX –∞–¥—Ä–µ—Å–∏\n                                    verification_result = verify_arbitrage_signal(test_signal)\n                                    \n                                    if verification_result.valid:\n                                        # ‚úÖ –°–ò–ì–ù–ê–õ –í–ê–õ–Ü–î–ù–ò–ô - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑ –ø–æ–≤–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é\n                                        signal_message = format_arbitrage_signal_message(test_signal, verification_result)\n                                        logging.info(f\"‚úÖ –°–ò–ì–ù–ê–õ –í–ï–†–ò–§–Ü–ö–û–í–ê–ù–û –¥–ª—è {symbol}: DEX –∑–Ω–∞–π–¥–µ–Ω–æ!\")\n                                    else:\n                                        # üîÑ –°–ò–ì–ù–ê–õ –ù–ï –í–ï–†–ò–§–Ü–ö–û–í–ê–ù–û - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑ fallback –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º\n                                        logging.info(f\"‚ö†Ô∏è –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û FALLBACK –°–ò–ì–ù–ê–õ –¥–ª—è {symbol}: {'; '.join(verification_result.errors)}\")\n                                        signal_message = format_arbitrage_signal_message(test_signal, verification_result, for_group=True)\n                                        # –ù–ï –±–ª–æ–∫—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑ fallback –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏!\n                                    \n                                except Exception as signal_error:\n                                    logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Å–∏–≥–Ω–∞–ª—É {symbol}: {signal_error}\")\n                                    signal_sent = False\n                                    signal_message = None\n                        \n                        # üì± –í–Ü–î–ü–†–ê–í–õ–ï–ù–ù–Ø –í TELEGRAM (–ü–û–ó–ê –õ–û–ö–û–ú) - –¢–Ü–õ–¨–ö–ò –í–ê–õ–Ü–î–ù–Ü –°–ò–ì–ù–ê–õ–ò!\n                        signal_message = locals().get('signal_message', None)\n                        if signal_sent and signal_message:\n                            try:\n                                # üéØ –¢–û–†–ì–û–í–Ü –°–ò–ì–ù–ê–õ–ò –û–ë–û–ú –ê–î–ú–Ü–ù–ê–ú + –ì–†–£–ü–Ü\n                                success2 = send_to_admins_and_group(signal_message)\n                                \n                                if success2:\n                                    # –¢–Ü–õ–¨–ö–ò –ü–Ü–°–õ–Ø –£–°–ü–Ü–®–ù–û–á –í–Ü–î–ü–†–ê–í–ö–ò –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫—É–ª–¥–∞—É–Ω\n                                    with telegram_cooldown_lock:\n                                        telegram_cooldown[symbol] = current_time\n                                    logging.info(f\"üì± –°–ò–ì–ù–ê–õ –í–Ü–î–ü–†–ê–í–õ–ï–ù–û: {symbol} {side} —Å–ø—Ä–µ–¥={xt_dex_spread_pct:.2f}% (—ñ–≥–Ω–æ—Ä—É—î–º–æ –±–∞–ª–∞–Ω—Å)\")\n                                else:\n                                    logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ –æ–±–∏–¥–≤–∞ —á–∞—Ç–∏ {symbol}\")\n                                    \n                            except Exception as telegram_error:\n                                logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ Telegram –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ {symbol}: {telegram_error}\")\n                        \n                        # –ü–æ–∫–∞–∑—É—î–º–æ –∫—É–ª–¥–∞—É–Ω —è–∫—â–æ —Å–∏–≥–Ω–∞–ª –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π\n                        if not signal_sent:\n                            with telegram_cooldown_lock:\n                                last_signal_time = telegram_cooldown.get(symbol, 0)\n                                time_since_last = current_time - last_signal_time\n                                if time_since_last < TELEGRAM_COOLDOWN_SEC:\n                                    time_left = int(TELEGRAM_COOLDOWN_SEC - time_since_last)\n                                    logging.info(f\"[{symbol}] ‚è∞ –ö–£–õ–î–ê–£–ù: —â–µ {time_left}—Å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É\")\n                        \n                        # üîÑ –°–¢–ê–†–ê –õ–û–ì–Ü–ö–ê: –¢—ñ–ª—å–∫–∏ –¥–ª—è –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ç–æ—Ä–≥—É–≤–∞–Ω–Ω—è (–∑ –±–∞–ª–∞–Ω—Å–æ–≤–∏–º–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è–º–∏)\n                        # –ü–†–ò–ú–£–°–û–í–ê –ú–ê–†–ñ–ê $5: –∫—É–ø—É—î–º–æ —á–∞—Å—Ç–∫–æ–≤–æ –¥–ª—è –±—É–¥—å-—è–∫–æ—ó –º–æ–Ω–µ—Ç–∏  \n                        # –ó–∞–≤–∂–¥–∏ —Ç–æ—Ä–≥—É—î–º–æ –Ω–∞ –§–Ü–ö–°–û–í–ê–ù–£ –º–∞—Ä–∂—É $5.00 (–º–æ–∂–Ω–∞ –∫—É–ø–∏—Ç–∏ —á–∞—Å—Ç–∏–Ω—É –º–æ–Ω–µ—Ç–∏)\n                        \n                        time.sleep(5)\n                    \n                    # 2. XT vs DexScreener (—è–∫—â–æ XT –¥–æ—Å—Ç—É–ø–Ω–∞)\n                    if xt_price:\n                        xt_dex_spread_pct = calculate_spread(dex_price, xt_price)\n                        if abs(xt_dex_spread_pct) >= MIN_SPREAD:\n                            # –ü–†–ò–ú–£–°–û–í–ê –ú–ê–†–ñ–ê $5: –∫—É–ø—É—î–º–æ —á–∞—Å—Ç–∫–æ–≤–æ –¥–ª—è –±—É–¥—å-—è–∫–æ—ó –º–æ–Ω–µ—Ç–∏\n                            # –ó–∞–≤–∂–¥–∏ —Ç–æ—Ä–≥—É—î–º–æ –Ω–∞ –§–Ü–ö–°–û–í–ê–ù–£ –º–∞—Ä–∂—É $5.00 (–º–æ–∂–Ω–∞ –∫—É–ø–∏—Ç–∏ —á–∞—Å—Ç–∏–Ω—É –º–æ–Ω–µ—Ç–∏)\n                            # üïí THREAD-SAFE –ö–£–õ–î–ê–£–ù: —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–ª—è –±–∞–≥–∞—Ç–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—ñ\n                            current_time = time.time()\n                            signal_sent = False\n                            \n                            with telegram_cooldown_lock:  # –ö–†–ò–¢–ò–ß–ù–ê –°–ï–ö–¶–Ü–Ø  \n                                last_signal_time = telegram_cooldown.get(symbol, 0)\n                                time_since_last = current_time - last_signal_time\n                                \n                                if time_since_last >= TELEGRAM_COOLDOWN_SEC:\n                                    telegram_cooldown[symbol] = current_time  # –û–¥—Ä–∞–∑—É –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å\n                                    signal_sent = True\n                                else:\n                                    time_left = int(TELEGRAM_COOLDOWN_SEC - time_since_last)\n                                    logging.info(f\"[{symbol}] ‚è∞ –°–ü–Ü–õ–¨–ù–ò–ô –ö–£–õ–î–ê–£–ù: —â–µ {time_left}—Å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É\")\n                            \n                            # üéØ –í–ò–î–ê–õ–ï–ù–û –î–£–ë–õ–Ü–ö–ê–¢: —Ü–µ–π –±–ª–æ–∫ –¥—É–±–ª—é–≤–∞–≤ –ª–æ–≥—ñ–∫—É –∑ —Ä—è–¥–∫—ñ–≤ –≤–∏—â–µ\n                            # –ó–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Å–∏—Å—Ç–µ–º—É –Ω–∞–π–∫—Ä–∞—â–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤\n                        \n                        # –í–ò–î–ê–õ–ï–ù–û: –º—ñ–∂–±—ñ—Ä–∂–æ–≤–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂ Gate ‚Üî XT (–∑–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ DEX –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è)\n                elif already_has_position:\n                    logging.info(f\"[{symbol}] ‚èπÔ∏è –ü–†–û–ü–£–°–ö–ê–Ñ–ú–û –°–ò–ì–ù–ê–õ: –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è\")\n                elif abs(spread_pct) >= MIN_SPREAD and not is_realistic:\n                    logging.warning(f\"[{symbol}] ‚ùå –ë–õ–û–ö–û–í–ê–ù–ò–ô –§–ï–ô–ö: —Å–ø—Ä–µ–¥={spread_pct:.2f}%\")\n                \n                # –†–ï–ê–õ–¨–ù–ê –¢–û–†–ì–Ü–í–õ–Ø –ó –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø–ú\n                if spread_check and balance_check and not DRY_RUN and is_realistic:\n                    side = \"LONG\" if spread_pct > 0 else \"SHORT\"\n                    \n                    # –õ–æ–≥—ñ–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –≤—Ö–æ–¥—É –∞–±–æ —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è\n                    if not has_position and positions_check:\n                        # –ë–ê–ó–û–í–ò–ô –í–•–Ü–î: –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –Ω–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é\n                        logging.info(f\"[{symbol}] üéØ –ë–ê–ó–û–í–ò–ô –í–•–Ü–î: spread={abs(spread_pct):.3f}% >= {MIN_SPREAD}%, –±–∞–ª–∞–Ω—Å={available_balance:.4f} >= {required_margin:.4f}, –ø–æ–∑–∏—Ü—ñ–π={total_positions} < {MAX_OPEN_POSITIONS}\")\n\n                        # –°–¢–†–û–ì–ê –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ order book –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –±—ñ—Ä–∂—ñ\n                        ok_liq = can_execute_on_orderbook(symbol, ORDER_AMOUNT, ORDER_BOOK_DEPTH, exchange=trading_exchange)\n                        \n                        # üîç –î–û–î–ê–¢–ö–û–í–ê –ü–ï–†–ï–í–Ü–†–ö–ê XT order book –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ (—Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –¥–ª—è XT.com)\n                        if ok_liq and trading_exchange == \"xt\":\n                            # –í–ò–ü–†–ê–í–õ–ï–ù–û: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ notional size (–º–∞—Ä–∂–∞ * –ª–µ–≤–µ—Ä–∏–¥–∂) –∑–∞–º—ñ—Å—Ç—å —Ç—ñ–ª—å–∫–∏ –º–∞—Ä–∂—ñ\n                            notional_size = ORDER_AMOUNT * LEVERAGE\n                            current_side = \"LONG\" if spread_pct > 0 else \"SHORT\"  # –Ø–≤–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î–º–æ side\n                            can_trade_xt, xt_liquidity_info = analyze_xt_order_book_liquidity(xt, symbol, current_side, notional_size, min_liquidity_ratio=2.0)\n                            if not can_trade_xt:\n                                logging.warning(f\"[{symbol}] {xt_liquidity_info}\")\n                                ok_liq = False\n                            else:\n                                logging.info(f\"[{symbol}] {xt_liquidity_info}\")\n                        \n                        if ok_liq:\n                            # –ü–†–ò–ú–£–°–û–í–ï –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–µ–≤–µ—Ä–∏–¥–∂—É –ü–ï–†–ï–î –∫–æ–∂–Ω–æ—é —É–≥–æ–¥–æ—é\n                            if trading_exchange == \"xt\":\n                                try:\n                                    # –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–∫–ª–∏–∫ –∑ positionSide\n                                    position_side = \"LONG\" if side == \"LONG\" else \"SHORT\"\n                                    xt.set_leverage(LEVERAGE, symbol, {\"positionSide\": position_side})\n                                    logging.info(f\"[{symbol}] ‚öôÔ∏è XT: –ü–†–ò–ú–£–°–û–í–û –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–µ–≤–µ—Ä–∏–¥–∂ {LEVERAGE}x ({position_side})\")\n                                except Exception as e:\n                                    logging.error(f\"[{symbol}] ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–µ–≤–µ—Ä–∏–¥–∂—É XT: {e}\")\n                                    # –ù–µ –±–ª–æ–∫—É—î–º–æ —Ç–æ—Ä–≥—ñ–≤–ª—é, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ\n                                    pass\n                                    \n                                # üîí ORDER PLACEMENT LOCK (Task 6: –∑–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–æ–¥–≤—ñ–π–Ω–∏–º –æ—Ä–¥–µ—Ä–∞–º)\n                                with order_placement_lock:\n                                    # üéØ –ü–ê–†–ê–õ–ï–õ–¨–ù–ê –¢–û–†–ì–Ü–í–õ–Ø –ù–ê –î–í–û–• –ê–ö–ê–£–ù–¢–ê–•\n                                    order_account_1 = xt_open_market_position(xt_account_1, symbol, side, ORDER_AMOUNT, LEVERAGE, ref_price, dex_price, spread_pct)\n                                    order_account_2 = xt_open_market_position(xt_account_2, symbol, side, ORDER_AMOUNT, LEVERAGE, ref_price, dex_price, spread_pct)\n                                    # –í–≤–∞–∂–∞—î–º–æ —É—Å–ø—ñ—à–Ω–∏–º —è–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∞–∫–∞—É–Ω—Ç –≤—ñ–¥–∫—Ä–∏–≤ –ø–æ–∑–∏—Ü—ñ—é\n                                    order = order_account_1 or order_account_2\n                                    if order_account_1:\n                                        logging.info(f\"[{symbol}] ‚úÖ –ê–ö–ê–£–ù–¢ 1: –í—ñ–¥–∫—Ä–∏—Ç–æ {side} –ø–æ–∑–∏—Ü—ñ—é –∑ –ª–µ–≤–µ—Ä–∏–¥–∂–µ–º {LEVERAGE}x\")\n                                    if order_account_2:\n                                        logging.info(f\"[{symbol}] ‚úÖ –ê–ö–ê–£–ù–¢ 2: –í—ñ–¥–∫—Ä–∏—Ç–æ {side} –ø–æ–∑–∏—Ü—ñ—é –∑ –ª–µ–≤–µ—Ä–∏–¥–∂–µ–º {LEVERAGE}x\")\n                            else:\n                                order = None\n                            if order:\n                                    logging.info(f\"[{symbol}] üöÄ XT: –í—ñ–¥–∫—Ä–∏—Ç–æ {side} –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –æ–±–æ—Ö –∞–∫–∞—É–Ω—Ç–∞—Ö –∑ –ª–µ–≤–µ—Ä–∏–¥–∂–µ–º {LEVERAGE}x\")\n                            # ‚ùå GATE.IO –í–Ü–î–ö–õ–Æ–ß–ï–ù–û - —Ç—ñ–ª—å–∫–∏ XT –±—ñ—Ä–∂–∞!\n                            # else:  # gate (–í–Ü–î–ö–õ–Æ–ß–ï–ù–û)\n                            #     order = open_market_position(symbol, side, ORDER_AMOUNT, LEVERAGE, gate_price, dex_price, spread_pct)\n                            if order:\n                                # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–≥—Ä–µ–≥–æ–≤–∞–Ω—É –ø–æ–∑–∏—Ü—ñ—é\n                                entry_price = ref_price  # –ó–∞–≤–∂–¥–∏ XT —Ü—ñ–Ω–∞\n                                # –§–Ü–ö–°–û–í–ê–ù–ê –¶–Ü–õ–¨: +30% –ø—Ä–∏–±—É—Ç–∫—É –∑ –ª–µ–≤–µ—Ä–∏–¥–∂–µ–º (—è–∫ –ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)\n                                if side == \"LONG\":\n                                    tp_price = entry_price * (1 + 0.30 / LEVERAGE)  # 30% –ø—Ä–∏–±—É—Ç–∫—É –∑ –ª–µ–≤–µ—Ä–∏–¥–∂–µ–º\n                                else:  # SHORT\n                                    tp_price = entry_price * (1 - 0.30 / LEVERAGE)  # 30% –ø—Ä–∏–±—É—Ç–∫—É –∑ –ª–µ–≤–µ—Ä–∏–¥–∂–µ–º\n                                position = {\n                                    \"side\": side,\n                                    \"avg_entry\": entry_price,\n                                    \"size_usdt\": ORDER_AMOUNT,\n                                    \"adds_done\": 0,\n                                    \"last_add_price\": entry_price,\n                                    \"tp_price\": tp_price,\n                                    \"last_add_time\": time.time(),\n                                    \"exchange\": trading_exchange,  # –ó–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ –Ω–∞ —è–∫—ñ–π –±—ñ—Ä–∂—ñ —Ç–æ—Ä–≥—É—î–º–æ\n                                    # üéØ –ù–û–í–Ü –ü–û–õ–Ø –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û–ì–û –ó–ê–ö–†–ò–¢–¢–Ø\n                                    \"entry_time\": time.time(),  # —á–∞—Å –≤—Ö–æ–¥—É –≤ –ø–æ–∑–∏—Ü—ñ—é\n                                    \"arb_pair\": f\"{trading_exchange}-dex\",  # —Ç–∏–ø –∞—Ä–±—ñ—Ç—Ä–∞–∂—É (gate-dex –∞–±–æ xt-dex)\n                                    \"entry_spread_pct\": spread_pct,  # –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–ø—Ä–µ–¥\n                                    \"entry_ref_price\": dex_price,  # —Ä–µ—Ñ–µ—Ä–µ–Ω—Ç–Ω–∞ —Ü—ñ–Ω–∞ DEX –Ω–∞ —á–∞—Å –≤—Ö–æ–¥—É\n                                    \"status\": \"open\"  # —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü—ñ—ó (open/closing/closed)\n                                }\n                                # üîí –ó–ê–•–ò–°–¢: –¢—ñ–ª—å–∫–∏ –¥–ª—è –ù–û–í–ò–• –ø–æ–∑–∏—Ü—ñ–π –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–µ—Ä–∏\n                                current_time = time.time()\n                                existing_position = active_positions.get(symbol, {})\n                                if 'opened_at' not in existing_position or existing_position.get('opened_at', 0) <= 0:\n                                    position['opened_at'] = current_time\n                                else:\n                                    position['opened_at'] = existing_position['opened_at']  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ—Å–Ω—É—é—á–∏–π!\n                                if 'expires_at' not in existing_position or existing_position.get('expires_at', 0) <= 0:\n                                    position['expires_at'] = position['opened_at'] + POSITION_MAX_AGE_SEC\n                                else:\n                                    position['expires_at'] = existing_position['expires_at']  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ—Å–Ω—É—é—á–∏–π!\n                                position['xt_pair_url'] = generate_xt_pair_url(symbol)\n                                \n                                with active_positions_lock:\n                                    active_positions[symbol] = position\n                                \n                                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó\n                                save_positions_to_file()\n                                \n                                # üì± –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û –ü–†–û–§–ï–°–Ü–ô–ù–ï –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –ü–†–û –í–Ü–î–ö–†–ò–¢–¢–Ø –ü–û–ó–ò–¶–Ü–á\n                                try:\n                                    from telegram_formatter import format_position_opened_message\n                                    opened_message = format_position_opened_message(\n                                        symbol=symbol,\n                                        side=side,\n                                        entry_price=ref_price,\n                                        size_usd=ORDER_AMOUNT,\n                                        leverage=LEVERAGE,\n                                        spread_percent=spread_pct\n                                    )\n                                    send_to_admins_and_group(opened_message)\n                                    logging.info(f\"üì± –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ Telegram –ø—Ä–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è {symbol}\")\n                                except Exception as e:\n                                    logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Telegram: {e}\")\n                                \n                                logging.info(\"Opened %s on %s avg_entry=%.6f tp=%.6f\", side, symbol, ref_price, tp_price)\n                    \n                    elif has_position and AVERAGING_ENABLED:\n                        # üîí –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø: –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –∑ –∑–∞—Ö–∏—Å—Ç–æ–º\n                        with active_positions_lock:\n                            position = active_positions[symbol].copy()  # –ö–æ–ø—ñ—é—î–º–æ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∑–º—ñ–Ω –ø—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏\n                        current_time = time.time()\n                        cooldown_passed = (current_time - position.get('last_add_time', 0)) >= AVERAGING_COOLDOWN_SEC\n                        can_add_more = position.get('adds_done', 0) < AVERAGING_MAX_ADDS\n                        \n                        # üîç –î–ï–¢–ê–õ–¨–ù–ï –õ–û–ì–£–í–ê–ù–ù–Ø –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\n                        logging.info(f\"[{symbol}] üîç –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: adds_done={position.get('adds_done', 0)}, max_adds={AVERAGING_MAX_ADDS}, can_add_more={can_add_more}, cooldown_passed={cooldown_passed}\")\n                        \n                        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ —Å–∏–º–≤–æ–ª\n                        position_size_ok = position['size_usdt'] < MAX_POSITION_USDT_PER_SYMBOL\n                        \n                        # üéØ –Ø–í–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –í–°–Ü–• –£–ú–û–í –¥–ª—è —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è (—è–∫ –ø—Ä–æ—Å–∏–≤ architect)\n                        if AVERAGING_ENABLED and can_add_more and cooldown_passed and position_size_ok:\n                            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü—ñ–Ω–∞ –π–¥–µ –ø—Ä–æ—Ç–∏ –ø–æ–∑–∏—Ü—ñ—ó\n                            avg_entry = position['avg_entry']\n                            should_average = False\n                            \n                            if position['side'] == \"LONG\" and side == \"LONG\":\n                                # LONG –ø–æ–∑–∏—Ü—ñ—è: —É—Å–µ—Ä–µ–¥–Ω—é—î–º–æ —è–∫—â–æ —Ü—ñ–Ω–∞ –≤–ø–∞–ª–∞\n                                adverse_threshold = avg_entry * (1 - AVERAGING_THRESHOLD_PCT / 100)\n                                should_average = xt_price <= adverse_threshold\n                            elif position['side'] == \"SHORT\" and side == \"SHORT\":\n                                # SHORT –ø–æ–∑–∏—Ü—ñ—è: —É—Å–µ—Ä–µ–¥–Ω—é—î–º–æ —è–∫—â–æ —Ü—ñ–Ω–∞ –≤–∏—Ä–æ—Å–ª–∞\n                                adverse_threshold = avg_entry * (1 + AVERAGING_THRESHOLD_PCT / 100)\n                                should_average = xt_price >= adverse_threshold\n                            \n                            if should_average:\n                                # üéØ –ñ–û–†–°–¢–ö–ê –ü–ï–†–ï–í–Ü–†–ö–ê –õ–Ü–ú–Ü–¢–Ü–í: –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É—î–º–æ MAX_POSITION_USDT_PER_SYMBOL\n                                remaining_capacity = MAX_POSITION_USDT_PER_SYMBOL - position['size_usdt']\n                                \n                                if remaining_capacity <= 0:\n                                    logging.warning(f\"[{symbol}] ‚ùå –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø –ó–ê–ë–õ–û–ö–û–í–ê–ù–û: –ø–æ–∑–∏—Ü—ñ—è –¥–æ—Å—è–≥–ª–∞ –º–∞–∫—Å–∏–º—É–º—É ${MAX_POSITION_USDT_PER_SYMBOL:.2f}, –ø–æ—Ç–æ—á–Ω–∏–π —Ä–æ–∑–º—ñ—Ä=${position['size_usdt']:.2f}\")\n                                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è\n                                \n                                # üõ°Ô∏è –¢–û–ß–ù–ò–ô –†–û–ó–†–ê–•–£–ù–û–ö: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π ORDER_AMOUNT, –∞–ª–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç–∏\n                                if remaining_capacity < ORDER_AMOUNT:\n                                    logging.warning(f\"[{symbol}] ‚ùå –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø –°–ö–ê–°–û–í–ê–ù–û: –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º—ñ—Å—Ü—è –¥–ª—è ORDER_AMOUNT=${ORDER_AMOUNT:.2f}, –∑–∞–ª–∏—à–æ–∫=${remaining_capacity:.2f}\")\n                                    continue\n                                if available_balance < ORDER_AMOUNT:\n                                    logging.warning(f\"[{symbol}] ‚ùå –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø –°–ö–ê–°–û–í–ê–ù–û: –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª–∞–Ω—Å—É –¥–ª—è ORDER_AMOUNT=${ORDER_AMOUNT:.2f}, –±–∞–ª–∞–Ω—Å=${available_balance:.2f}\")\n                                    continue\n                                \n                                # üéØ –ó–ê–í–ñ–î–ò –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û –§–Ü–ö–°–û–í–ê–ù–ò–ô ORDER_AMOUNT –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ\n                                add_size = ORDER_AMOUNT\n                                \n                                logging.info(f\"[{symbol}] üìà –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø –†–û–ó–†–ê–•–£–ù–û–ö: –ø–æ—Ç–æ—á–Ω–∏–π_—Ä–æ–∑–º—ñ—Ä=${position['size_usdt']:.2f}, –º–∞–∫—Å=${MAX_POSITION_USDT_PER_SYMBOL:.2f}, –∑–∞–ª–∏—à–æ–∫=${remaining_capacity:.2f}, –¥–æ–¥–∞—î–º–æ=${add_size:.2f}\")\n                                \n                                # –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø –¢–Ü–õ–¨–ö–ò –Ø–ö–©–û –Ñ –î–û–°–¢–ê–¢–ù–¨–û –ú–Ü–°–¶–Ø –¢–ê –ë–ê–õ–ê–ù–°–£!\n                                if add_size >= 1.0:  # –ú—ñ–Ω—ñ–º—É–º $1.00 –¥–ª—è –æ—Ä–¥–µ—Ä–∞\n                                    logging.info(f\"[{symbol}] üìà –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø: {position['side']} add_size=${add_size:.2f}, —Ü—ñ–Ω–∞={xt_price:.6f} vs avg={avg_entry:.6f}, —Å–ø—Ä–µ–¥={abs(spread_pct):.3f}%\")\n                                    \n                                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ –¥–ª—è —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –±—ñ—Ä–∂—ñ\n                                    ok_liq = can_execute_on_orderbook(symbol, add_size, ORDER_BOOK_DEPTH, exchange=trading_exchange)\n                                    \n                                    # üîç –î–û–î–ê–¢–ö–û–í–ê –ü–ï–†–ï–í–Ü–†–ö–ê XT order book –¥–ª—è —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è\n                                    if ok_liq and trading_exchange == \"xt\":\n                                        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ notional size –¥–ª—è —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è\n                                        avg_notional_size = add_size * LEVERAGE\n                                        can_avg_xt, xt_avg_info = analyze_xt_order_book_liquidity(xt, symbol, position['side'], avg_notional_size, min_liquidity_ratio=2.0)\n                                        if not can_avg_xt:\n                                            logging.warning(f\"[{symbol}] –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø: {xt_avg_info}\")\n                                            ok_liq = False\n                                        else:\n                                            logging.info(f\"[{symbol}] –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø: {xt_avg_info}\")\n                                    \n                                    if ok_liq:\n                                        # –ü–†–ò–ú–£–°–û–í–ï –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–µ–≤–µ—Ä–∏–¥–∂—É –ü–ï–†–ï–î —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è–º\n                                        if trading_exchange == \"xt\":\n                                            try:\n                                                xt.set_leverage(LEVERAGE, symbol)\n                                                logging.info(f\"[{symbol}] ‚öôÔ∏è XT: –ü–†–ò–ú–£–°–û–í–û –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–µ–≤–µ—Ä–∏–¥–∂ {LEVERAGE}x –¥–ª—è —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è\")\n                                            except Exception as e:\n                                                logging.error(f\"[{symbol}] ‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–µ–≤–µ—Ä–∏–¥–∂—É XT –ø—Ä–∏ —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—ñ: {e}\")\n                                                pass\n                                                \n                                            # üîí ORDER PLACEMENT LOCK –¥–ª—è —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è (Task 6: –∑–∞–ø–æ–±—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–Ω–∏–º –æ—Ä–¥–µ—Ä–∞–º)\n                                            with order_placement_lock:\n                                                order = xt_open_market_position(xt, symbol, position['side'], add_size, LEVERAGE, ref_price, dex_price, spread_pct)\n                                            current_price = ref_price  # –ó–∞–≤–∂–¥–∏ XT —Ü—ñ–Ω–∞\n                                        else:\n                                            order = None\n                                            current_price = ref_price\n                                        # ‚ùå GATE.IO –í–Ü–î–ö–õ–Æ–ß–ï–ù–û - —Ç—ñ–ª—å–∫–∏ XT –±—ñ—Ä–∂–∞!\n                                        # else:  # gate (–í–Ü–î–ö–õ–Æ–ß–ï–ù–û)\n                                        #     order = open_market_position(symbol, position['side'], add_size, LEVERAGE, gate_price, dex_price, spread_pct)\n                                        if order:\n                                            # üîí –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–≥—Ä–µ–≥–æ–≤–∞–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó –∑ –∑–∞—Ö–∏—Å—Ç–æ–º\n                                            with active_positions_lock:\n                                                if symbol in active_positions:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –ø–æ–∑–∏—Ü—ñ—è —â–µ —ñ—Å–Ω—É—î\n                                                    current_position = active_positions[symbol]\n                                                    new_size = current_position['size_usdt'] + add_size\n                                                    new_avg_entry = (current_position['avg_entry'] * current_position['size_usdt'] + current_price * add_size) / new_size\n                                                else:\n                                                    logging.warning(f\"[{symbol}] –ü–æ–∑–∏—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è\")\n                                                    continue\n                                                    # –§–Ü–ö–°–û–í–ê–ù–ê –¶–Ü–õ–¨: +30% –ø—Ä–∏–±—É—Ç–∫—É –∑ –ª–µ–≤–µ—Ä–∏–¥–∂–µ–º (—è–∫ –ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)\n                                                    if current_position['side'] == \"LONG\":\n                                                        new_tp_price = new_avg_entry * (1 + 0.30 / LEVERAGE)  # 30% –ø—Ä–∏–±—É—Ç–∫—É –∑ –ª–µ–≤–µ—Ä–∏–¥–∂–µ–º\n                                                    else:  # SHORT\n                                                        new_tp_price = new_avg_entry * (1 - 0.30 / LEVERAGE)  # 30% –ø—Ä–∏–±—É—Ç–∫—É –∑ –ª–µ–≤–µ—Ä–∏–¥–∂–µ–º\n                                                    \n                                                    active_positions[symbol].update({\n                                                        'avg_entry': new_avg_entry,\n                                                        'size_usdt': new_size,\n                                                        'adds_done': current_position['adds_done'] + 1,\n                                                        'last_add_price': ref_price,\n                                                        'tp_price': new_tp_price,\n                                                        'last_add_time': current_time\n                                                    })\n                                                    \n                                                    # üîç –î–ï–¢–ê–õ–¨–ù–ï –õ–û–ì–£–í–ê–ù–ù–Ø –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó  \n                                                    logging.info(f\"‚úÖ –ü–û–ó–ò–¶–Ü–Ø –û–ù–û–í–õ–ï–ù–ê: adds_done {current_position['adds_done']} -> {current_position['adds_done'] + 1}, —Ä–æ–∑–º—ñ—Ä ${current_position['size_usdt']:.2f} -> ${new_size:.2f}\")\n                                            \n                                            # üîç –í–ò–ü–†–ê–í–õ–ï–ù–û: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è adds_done\n                                            updated_adds = current_position['adds_done'] + 1\n                                            logging.info(f\"‚úÖ –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û {position['side']} –Ω–∞ {symbol}: –Ω–æ–≤–∞ avg_entry={new_avg_entry:.6f}, —Ä–æ–∑–º—ñ—Ä=${new_size:.2f}, –¥–æ–¥–∞–≤–∞–Ω—å={updated_adds}/{AVERAGING_MAX_ADDS}\")\n                else:\n                    if not spread_check:\n                        logging.debug(f\"[{symbol}] –°–ø—Ä–µ–¥ {abs(spread_pct):.3f}% < {MIN_SPREAD}%\")\n                    elif not positions_check and not has_position:\n                        logging.info(f\"[{symbol}] ‚ùå –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –ø–æ–∑–∏—Ü—ñ–π: {total_positions} >= {MAX_OPEN_POSITIONS}\")\n                    elif not balance_check:\n                        logging.info(f\"[{symbol}] ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª–∞–Ω—Å—É: –ø–æ—Ç—Ä—ñ–±–Ω–æ {required_margin:.4f} USDT, —î {available_balance:.4f} USDT\")\n            except Exception as balance_error:\n                logging.exception(\"Balance check error with full traceback\")\n\n            # 4) üîí –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –ó–ê–ö–†–ò–¢–¢–Ø –ü–†–ò –°–ü–†–ï–î–Ü 30% –ó –ó–ê–•–ò–°–¢–û–ú\n            with active_positions_lock:\n                if symbol in active_positions:\n                    position = active_positions[symbol].copy()  # –ö–æ–ø—ñ—é—î–º–æ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –ø–æ–∑–∞ –ª–æ–∫–æ–º\n                else:\n                    position = None\n            \n            if position:\n                \n                # ‚úÖ –ù–û–í–Ü –£–ú–û–í–ò –í–ò–•–û–î–£ (—è–∫ –ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á):\n                # 1) –û—Å–Ω–æ–≤–Ω–∞ —Ü—ñ–ª—å: +30% –ø—Ä–∏–±—É—Ç–∫—É\n                # 2) –ü—Ä–∏ –∑–Ω–∏–∫–Ω–µ–Ω–Ω—ñ —Å–ø—Ä–µ–¥—É: –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –Ω–∞ +10-15%\n                \n                current_price = ref_price  # –ó–∞–≤–∂–¥–∏ XT —Ü—ñ–Ω–∞\n                entry_price = position['avg_entry']\n                \n                # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ—Ç–æ—á–Ω–æ–≥–æ P&L —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö\n                if position['side'] == \"LONG\":\n                    pnl_pct = ((current_price - entry_price) / entry_price) * 100 * LEVERAGE\n                else:  # SHORT  \n                    pnl_pct = ((entry_price - current_price) / entry_price) * 100 * LEVERAGE\n                \n                should_close = False\n                close_reason = \"\"\n                \n                # 1) –û–°–ù–û–í–ù–ê –¶–Ü–õ–¨: +30% –ø—Ä–∏–±—É—Ç–∫—É (–ø—Ä–∏–º—É—Å–æ–≤–µ –∑–∞–∫—Ä–∏—Ç—Ç—è)\n                if pnl_pct >= 30.0:\n                    should_close = True\n                    close_reason = f\"üéØ –î–û–°–Ø–ì–ù–£–¢–û –¶–Ü–õ–¨ +30%! P&L={pnl_pct:.1f}%\"\n                    \n                # 2) –î–û–°–¢–†–û–ö–û–í–ï –ó–ê–ö–†–ò–¢–¢–Ø: —Å–ø—Ä–µ–¥ –∑–Ω–∏–∫–∞—î + –ø—Ä–∏–±—É—Ç–æ–∫ 10-15%\n                elif abs(spread_pct) < 0.3 and 10.0 <= pnl_pct < 30.0:  # —Å–ø—Ä–µ–¥ < 0.3% –≤–≤–∞–∂–∞—î—Ç—å—Å—è \"–∑–Ω–∏–∫–ª–∏–º\"\n                    should_close = True\n                    close_reason = f\"‚ö° –î–û–°–¢–†–û–ö–û–í–ï –ó–ê–ö–†–ò–¢–¢–Ø: —Å–ø—Ä–µ–¥ –∑–Ω–∏–∫ ({abs(spread_pct):.2f}% < 0.3%) + –ø—Ä–∏–±—É—Ç–æ–∫ {pnl_pct:.1f}% (–≤ –º–µ–∂–∞—Ö 10-30%)\"\n                    \n                # 3) –ó–ê–•–ò–°–¢: —Å–ø—Ä–µ–¥ > 30% (—è–∫ –±—É–ª–æ —Ä–∞–Ω—ñ—à–µ)\n                elif abs(spread_pct) >= 30.0:\n                    should_close = True \n                    close_reason = f\"üö® –ê–í–ê–†–Ü–ô–ù–ï –ó–ê–ö–†–ò–¢–¢–Ø: —Å–ø—Ä–µ–¥ {abs(spread_pct):.2f}% >= 30%\"\n                \n                if should_close:\n                    logging.warning(f\"üö® –ê–í–¢–û–ó–ê–ö–†–ò–¢–¢–Ø {position['side']} {symbol}: {close_reason}\")\n                    \n                    # –ë–ï–ó–ü–ï–ß–ù–ï –ó–ê–ö–†–ò–¢–¢–Ø: —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –Ω–∞ –±—ñ—Ä–∂—ñ, –ø–æ—Ç—ñ–º –≤–∏–¥–∞–ª—è—î–º–æ –∑ —Å–∏—Å—Ç–µ–º–∏\n                    try:\n                        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–≤—ñ–∂—É —Ü—ñ–Ω—É –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è\n                        fresh_ticker = fetch_ticker(xt, symbol)\n                        if fresh_ticker:\n                            current_xt_price = float(fresh_ticker['last'])\n                        else:\n                            current_xt_price = ref_price  # fallback\n                        \n                        # –ü–ï–†–ï–í–Ü–†–Ø–Ñ–ú–û –ß–ò –Ü–°–ù–£–Ñ –ü–û–ó–ò–¶–Ü–Ø –ü–ï–†–ï–î –ó–ê–ö–†–ò–¢–¢–Ø–ú\n                        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–≤—ñ–∂—ñ –ø–æ–∑–∏—Ü—ñ—ó –∑ –±—ñ—Ä–∂—ñ\n                        try:\n                            # üîß –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û –ë–ï–ó–ü–ï–ß–ù–ò–ô WRAPPER\n                            # Gate.io –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ XT  \n                            # Gate.io –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ XT positions\n                            current_positions = []\n                            has_real_position = False\n                            for pos in current_positions:\n                                if pos['symbol'] == symbol and float(pos.get('contracts', 0)) > 0:\n                                    has_real_position = True\n                                    break\n                            \n                            if not has_real_position:\n                                logging.warning(f\"üö® –ü–û–ó–ò–¶–Ü–Ø {symbol} –£–ñ–ï –ó–ê–ö–†–ò–¢–ê –ù–ê –ë–Ü–†–ñ–Ü - –≤–∏–¥–∞–ª—è—î–º–æ –∑ —Å–∏—Å—Ç–µ–º–∏\")\n                                with active_positions_lock:\n                                    if symbol in active_positions:\n                                        del active_positions[symbol]\n                                continue\n                        except:\n                            logging.warning(f\"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∑–∏—Ü—ñ—ó - –ø—Ä–æ–±—É—î–º–æ –∑–∞–∫—Ä–∏—Ç–∏\")\n                        \n                        # –ü—Ä–æ–±—É—î–º–æ –∑–∞–∫—Ä–∏—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é –Ω–∞ –±—ñ—Ä–∂—ñ\n                        close_success = close_position_market(symbol, position['side'], position['size_usdt'])\n                        \n                        if close_success:\n                            # üîí –¢–Ü–õ–¨–ö–ò —è–∫—â–æ –∑–∞–∫—Ä–∏—Ç—Ç—è —É—Å–ø—ñ—à–Ω–µ - –≤–∏–¥–∞–ª—è—î–º–æ –∑ —Å–∏—Å—Ç–µ–º–∏\n                            with active_positions_lock:\n                                if symbol in active_positions:\n                                    del active_positions[symbol]\n                            \n                            # –î–û–î–ê–Ñ–ú–û –î–û –Ü–°–¢–û–†–Ü–á –¢–û–†–ì–Ü–í–õ–Ü\n                            try:\n                                import telegram_admin\n                                telegram_admin.add_to_trade_history(\n                                    symbol=symbol,\n                                    side=position['side'],\n                                    entry_price=position['avg_entry'],\n                                    close_price=current_xt_price,\n                                    pnl=(position['size_usdt'] * pnl_pct / 100),\n                                    close_reason=close_reason,\n                                    exchange=\"Gate.io\"\n                                )\n                                logging.info(f\"üìö –î–æ–¥–∞–Ω–æ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó: {symbol} P&L={pnl_pct:+.1f}%\")\n                            except Exception as history_error:\n                                logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó: {history_error}\")\n                            \n                            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –µ–º–æ–¥–∑—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É\n                            if pnl_pct > 0:\n                                result_emoji = \"üíö\"\n                                result_text = f\"+${(position['size_usdt'] * pnl_pct / 100):+.2f}\"\n                            elif pnl_pct < 0:\n                                result_emoji = \"‚ù§Ô∏è\"\n                                result_text = f\"${(position['size_usdt'] * pnl_pct / 100):+.2f}\"\n                            else:\n                                result_emoji = \"üíô\"\n                                result_text = \"$0.00\"\n                            \n                            # üéØ –†–û–ó–®–ò–†–ï–ù–ï –î–ï–¢–ê–õ–¨–ù–ï –°–ü–û–í–Ü–©–ï–ù–ù–Ø –ü–†–û –ê–í–¢–û–ó–ê–ö–†–ò–¢–¢–Ø (—è–∫ –ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á!)\n                            close_signal = f\"üéØ **–ê–í–¢–û–ó–ê–ö–†–ò–¢–¢–Ø –ü–û–ó–ò–¶–Ü–á** {result_emoji}\\n\"\\\n                                         f\"üìä **{symbol.replace('/USDT:USDT', '')}** ({position['side']}) | ‚ö° XT.COM\\n\"\\\n                                         f\"üí∞ –†–æ–∑–º—ñ—Ä: **${position['size_usdt']:.2f} USDT** | –õ–µ–≤–µ—Ä–∏–¥–∂: **{LEVERAGE}x**\\n\"\\\n                                         f\"üìà –í—Ö—ñ–¥: **${position['avg_entry']:.6f}**\\n\"\\\n                                         f\"üìâ –í–∏—Ö—ñ–¥: **${current_xt_price:.6f}**\\n\"\\\n                                         f\"üíé P&L: **{pnl_pct:+.1f}%** ({result_text})\\n\"\\\n                                         f\"üìä –°–ø—Ä–µ–¥: **{abs(spread_pct):.2f}%**\\n\"\\\n                                         f\"üéØ –ü—Ä–∏—á–∏–Ω–∞: **{close_reason}**\\n\"\\\n                                         f\"‚è∞ –ß–∞—Å: {datetime.now().strftime('%H:%M:%S')}\\n\"\\\n                                         f\"‚úÖ –°—Ç–∞—Ç—É—Å: **–£–°–ü–Ü–®–ù–û –ó–ê–ö–†–ò–¢–û** | #ArbitrageBot\"\n                            \n                            # üìä –ü–û–ó–ò–¶–Ü–á –û–ë–û–ú –ê–î–ú–Ü–ù–ê–ú + –ì–†–£–ü–Ü\n                            send_to_admins_and_group(close_signal)\n                            logging.info(f\"‚úÖ –ê–í–¢–û–ó–ê–ö–†–ò–¢–û {position['side']} {symbol}: —Å–ø—Ä–µ–¥={abs(spread_pct):.2f}%, —Ä–æ–∑–º—ñ—Ä=${position['size_usdt']:.2f}\")\n                            continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É TP\n                        else:\n                            # üî• –ö–†–ò–¢–ò–ß–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ù–ï –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ Telegram –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ –∞–≤—Ç–æ–∑–∞–∫—Ä–∏—Ç—Ç—è\n                            logging.info(f\"‚ö†Ô∏è –ê–≤—Ç–æ–∑–∞–∫—Ä–∏—Ç—Ç—è {position['side']} {symbol} –Ω–µ –≤–¥–∞–ª–æ—Å—è - —Ü–µ –º–æ–∂–µ –±—É—Ç–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ (–ø–æ–∑–∏—Ü—ñ—è –≤–∂–µ –∑–∞–∫—Ä–∏—Ç–∞)\")\n                            # –ü–æ–∑–∏—Ü—ñ—è –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –≤ active_positions –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è\n                            \n                    except Exception as close_error:\n                        # üî• –ö–†–ò–¢–ò–ß–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—É —Å–∞–º—É –ª–æ–≥—ñ–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —è–∫ —É close_position_market\n                        error_str = str(close_error).lower()\n                        normal_errors = [\n                            \"reduce_exceeded\", \"empty position\", \"position not found\",\n                            \"insufficient margin\", \"position already closed\", \"order not found\",\n                            \"rate limit\", \"timeout\", \"connection\", \"network\"\n                        ]\n                        is_normal_error = any(err in error_str for err in normal_errors)\n                        \n                        if is_normal_error:\n                            logging.info(f\"‚ö†Ô∏è –ù–æ—Ä–º–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–∑–∞–∫—Ä–∏—Ç—Ç—è {symbol}: {error_str[:50]}... (–±–µ–∑ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è)\")\n                        else:\n                            logging.error(f\"‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ –∞–≤—Ç–æ–∑–∞–∫—Ä–∏—Ç—Ç—ñ {symbol}: {close_error}\")\n                            # –¢–Ü–õ–¨–ö–ò –¥–ª—è —Å–ø—Ä–∞–≤–¥—ñ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ Telegram\n                            error_signal = f\"üö® **–ö–†–ò–¢–ò–ß–ù–ê –°–ò–°–¢–ï–ú–ù–ê –ü–û–ú–ò–õ–ö–ê!**\\n\"\\\n                                         f\"üìä –°–∏–º–≤–æ–ª: **{symbol.replace('/USDT:USDT', '')}** ({position['side']})\\n\"\\\n                                         f\"üí∞ –†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó: **${position['size_usdt']:.2f}**\\n\"\\\n                                         f\"üìà –í—Ö—ñ–¥: **${position['avg_entry']:.6f}**\\n\"\\\n                                         f\"üìâ –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: **${ref_price:.6f}**\\n\"\\\n                                         f\"üìä P&L: **{pnl_pct:+.1f}%**\\n\"\\\n                                         f\"‚ö†Ô∏è –°–ø—Ä–µ–¥: **{abs(spread_pct):.2f}%**\\n\"\\\n                                         f\"üéØ –ü—Ä–∏—á–∏–Ω–∞: {close_reason}\\n\"\\\n                                         f\"‚ùå **–ü–û–ú–ò–õ–ö–ê API**: `{str(close_error)[:100]}...`\\n\"\\\n                                         f\"üè™ –ë—ñ—Ä–∂–∞: **{position.get('exchange', 'gate').upper()}**\\n\"\\\n                                         f\"‚è∞ –ß–∞—Å: **{time.strftime('%H:%M:%S %d.%m.%Y')}**\\n\"\\\n                                         f\"üö® **–¢–ï–†–ú–Ü–ù–û–í–û –ü–û–¢–†–Ü–ë–ù–ï –†–£–ß–ù–ï –í–¢–†–£–ß–ê–ù–ù–Ø!**\"\n                            # üö® –ö–†–ò–¢–ò–ß–ù–Ü –ü–û–ú–ò–õ–ö–ò –û–ë–û–ú –ê–î–ú–Ü–ù–ê–ú + –ì–†–£–ü–Ü\n                            send_to_admins_and_group(error_signal)\n                        # –ü–æ–∑–∏—Ü—ñ—è –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º—ñ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è\n                \n                # –í–ò–î–ê–õ–ï–ù–û: —Å—Ç–∞—Ä–∞ –ª–æ–≥—ñ–∫–∞ 25% TP - –∑–∞–º—ñ–Ω–µ–Ω–∞ –Ω–∞ –Ω–æ–≤—É –ª–æ–≥—ñ–∫—É 30% –≤–∏—â–µ\n\n        except Exception as e:\n            # –î–ï–¢–ê–õ–¨–ù–ï –õ–û–ì–£–í–ê–ù–ù–Ø –ì–õ–û–ë–ê–õ–¨–ù–ò–• –ü–û–ú–ò–õ–û–ö –í–û–†–ö–ï–†–ê\n            error_msg = f\"‚ö†Ô∏è **–ü–û–ú–ò–õ–ö–ê –í–û–†–ö–ï–†–ê –°–ò–ú–í–û–õ–£**\\n\"\\\n                       f\"üìä –°–∏–º–≤–æ–ª: **{symbol.replace('/USDT:USDT', '')}**\\n\"\\\n                       f\"‚ùå –ü–æ–º–∏–ª–∫–∞: `{str(e)[:150]}...`\\n\"\\\n                       f\"üîß –í–æ—Ä–∫–µ—Ä –ø—Ä–æ–¥–æ–≤–∂—É—î —Ä–æ–±–æ—Ç—É —á–µ—Ä–µ–∑ 30 —Å–µ–∫\\n\"\\\n                       f\"‚è∞ –ß–∞—Å: **{time.strftime('%H:%M:%S')}**\"\n            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —É –≤–∏–ø–∞–¥–∫—É —Å–µ—Ä–π–æ–∑–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ (–Ω–µ —á–∞—Å—Ç—ñ –¥—Ä—ñ–±–Ω–∏—Ü—ñ)  \n            if \"timeout\" not in str(e).lower() and \"rate limit\" not in str(e).lower():\n                # üö® –ü–û–ú–ò–õ–ö–ò –í–û–†–ö–ï–†–ê –û–ë–û–ú –ê–î–ú–Ü–ù–ê–ú + –ì–†–£–ü–Ü\n                send_to_admins_and_group(error_msg)\n            logging.error(\"Symbol worker error %s %s\", symbol, e)\n\n        # –Ω–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞\n        time.sleep(SCAN_INTERVAL)\n\ndef send_balance_monitoring_thread():\n    \"\"\"–û–∫—Ä–µ–º–∏–π –ø–æ—Ç—ñ–∫ –¥–ª—è –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –±–∞–ª–∞–Ω—Å—É\"\"\"\n    import threading\n    import time\n    \n    def monitor_balance():\n        while True:\n            try:\n                # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å futures —Ä–∞—Ö—É–Ω–∫—É\n                balance_data = get_xt_futures_balance(xt)\n                if balance_data and isinstance(balance_data, dict) and balance_data.get('USDT'):\n                    usdt_data = balance_data['USDT']\n                    if isinstance(usdt_data, dict):\n                        total = usdt_data.get('total', 0)\n                        available = usdt_data.get('available', 0) \n                        used = usdt_data.get('used', 0)\n                    else:\n                        total = available = used = 0\n                    \n                    # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π\n                    try:\n                        # üîß –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û –ë–ï–ó–ü–ï–ß–ù–ò–ô WRAPPER  \n                        # Use XT.com positions instead\n                        active_positions_list = get_xt_open_positions(xt)\n                        position_count = len([pos for pos in active_positions_list if float(pos.get('contracts', 0)) > 0])\n                    except:\n                        position_count = 0\n                    \n                    # Send balance update via telegram (using simple send_telegram)\n                    balance_msg = f\"üí∞ –ë–∞–ª–∞–Ω—Å XT.com:\\n‚Ä¢ –ó–∞–≥–∞–ª–æ–º: {total:.2f} USDT\\n‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {available:.2f} USDT\\n‚Ä¢ –£ –ø–æ–∑–∏—Ü—ñ—è—Ö: {used:.2f} USDT\\n‚Ä¢ –ü–æ–∑–∏—Ü—ñ–π: {position_count}\"\n                    send_telegram(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, balance_msg)\n                    \n                time.sleep(300)  # –ö–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω\n            except Exception as e:\n                logging.error(f\"Balance monitoring error: {e}\")\n                time.sleep(60)  # –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ - —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É\n    \n    balance_thread = threading.Thread(target=monitor_balance, daemon=True)\n    balance_thread.start()\n    logging.info(\"Balance monitoring thread started\")\n\ndef start_position_monitoring_thread():\n    \"\"\"üéØ –ó–ê–•–ò–©–ï–ù–ê –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û–ì–û –ó–ê–ö–†–ò–¢–¢–Ø –ü–û–ó–ò–¶–Ü–ô\"\"\"\n    return start_monitor()  # üõ°Ô∏è –î–µ–ª–µ–≥—É—î–º–æ –Ω–æ–≤—ñ–π –∑–∞—Ö–∏—â–µ–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó\n\ndef start_monitor():\n    \"\"\"üõ°Ô∏è THREAD-SAFE –ó–ê–•–ò–©–ï–ù–ò–ô –ó–ê–ü–£–°–ö –ú–û–ù–Ü–¢–û–†–ò–ù–ì–£ (—ñ–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∏–π)\"\"\"\n    global monitor_thread\n    \n    with monitor_lifecycle_lock:  # üîí SINGLE-INSTANCE PROTECTION\n        logging.warning(\"üöÄ PROTECTED MONITOR: –ó–∞–ø—É—Å–∫ thread-safe —Å–∏—Å—Ç–µ–º–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...\")\n        \n        # üõ°Ô∏è IDEMPOTENT CHECK: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π –≤–∂–µ\n        if monitor_thread and monitor_thread.is_alive():\n            logging.warning(f\"üéØ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π (thread-{monitor_thread.ident}), –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ\")\n            return monitor_thread\n        \n        # üéØ CLEAN START: –ø–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ Event —Å–∫–∏–Ω—É—Ç–∏–π\n        if monitor_stop_event.is_set():\n            monitor_stop_event.clear()\n            logging.info(\"üîÑ Event —Å–∫–∏–Ω—É—Ç–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ä—Ç—É\")\n        \n        # üöÄ LAUNCH: –∑–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–∏–π –ø–æ—Ç—ñ–∫ –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º —ñ–º–µ–Ω–µ–º\n        monitor_thread = threading.Thread(\n            target=monitor_open_positions, \n            daemon=True,\n            name=\"MonitorThread\"\n        )\n        monitor_thread.start()\n        \n        logging.warning(f\"‚úÖ PROTECTED MONITOR: Thread-safe –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω–æ! (thread-{monitor_thread.ident})\")\n        logging.info(f\"   ‚Ä¢ Take Profit: +{TAKE_PROFIT_PCT}%\")\n        logging.info(f\"   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è: ‚â§{CONVERGENCE_SPREAD_PCT}%\")\n        logging.info(f\"   ‚Ä¢ –¢–∞–π–º–µ—Ä: {POSITION_MAX_AGE_SEC}—Å\")\n        logging.info(f\"   ‚Ä¢ –Ü–Ω—Ç–µ—Ä–≤–∞–ª: {MONITOR_INTERVAL_SEC}—Å\")\n        \n        return monitor_thread\n\ndef close_position_by_contracts(exchange, symbol, contracts, side):\n    \"\"\"–ó–∞–∫—Ä–∏–≤–∞—î –ø–æ–∑–∏—Ü—ñ—é –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤ (–ù–ï USD!)\"\"\"\n    if DRY_RUN:\n        logging.info(f\"DRY RUN: –∑–∞–∫—Ä–∏—Ç–∏ {contracts} –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤ {symbol} {side}\")\n        return\n    \n    try:\n        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω—É —Å—Ç–æ—Ä–æ–Ω—É\n        opposite_side = 'sell' if side.upper() == 'LONG' else 'buy'\n        \n        # –†–æ–∑–º—ñ—â—É—î–º–æ —Ä–∏–Ω–∫–æ–≤–∏–π –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è\n        order = exchange.create_market_order(symbol, opposite_side, contracts)\n        logging.info(f\"‚úÖ –ó–∞–∫—Ä–∏—Ç–æ –ø–æ–∑–∏—Ü—ñ—é: {symbol} {contracts} –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤ ({opposite_side})\")\n        return order\n        \n    except Exception as e:\n        logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó {symbol}: {e}\")\n        raise\n\ndef start_workers():\n    global _plot_thread\n    logging.info(\"üö® DEBUG: start_workers() –í–ò–ö–õ–ò–ö–ê–Ñ–¢–¨–°–Ø!\")\n    \n    # üéØ –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ü–ï–†–®–ò–ú (–¥–æ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ–π)\n    try:\n        logging.info(\"üö® DEBUG: –ü–†–Ü–û–†–ò–¢–ï–¢ 1 - –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø–æ–∑–∏—Ü—ñ–π...\")\n        logging.info(\"üéØ –°–¢–ê–†–¢: –ì–æ—Ç—É—é—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü—ñ–π...\")\n        start_position_monitoring_thread()\n        logging.info(\"üéØ –°–¢–ê–†–¢: –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü—ñ–π –∑–∞–ø—É—â–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ!\")\n    except Exception as e:\n        logging.error(f\"üö® DEBUG: –ü–û–ú–ò–õ–ö–ê –≤ start_position_monitoring_thread(): {e}\")\n        # –ù–µ raise - –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–≤—Å—è\n    \n    try:\n        logging.info(\"üö® DEBUG: –ü–æ—á–∞—Ç–æ–∫ init_markets()...\")\n        init_markets()\n        logging.info(\"üö® DEBUG: init_markets() –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\")\n    except Exception as e:\n        logging.error(f\"üö® DEBUG: –ü–û–ú–ò–õ–ö–ê –≤ init_markets(): {e}\")\n        raise\n    \n    try:\n        logging.info(\"üö® DEBUG: –ü–æ—á–∞—Ç–æ–∫ send_balance_monitoring_thread()...\")\n        # –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –±–∞–ª–∞–Ω—Å—É\n        send_balance_monitoring_thread()\n        logging.info(\"üö® DEBUG: send_balance_monitoring_thread() –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\")\n    except Exception as e:\n        logging.error(f\"üö® DEBUG: –ü–û–ú–ò–õ–ö–ê –≤ send_balance_monitoring_thread(): {e}\")\n        raise\n    \n    # üéØ –ó–ê–ü–£–°–ö: –ù–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–π–∫—Ä–∞—â–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ (–∑–∞–º—ñ—Å—Ç—å –±–∞–≥–∞—Ç—å–æ—Ö)\n    best_signal_thread = threading.Thread(target=send_best_opportunity_signal, daemon=True)\n    best_signal_thread.start()\n    logging.info(\"üèÜ –°–¢–ê–†–¢: –°–∏—Å—Ç–µ–º–∞ –û–î–ù–û–ì–û –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É –∑–∞–ø—É—â–µ–Ω–∞!\")\n    \n    # —Å—Ç–∞—Ä—Ç plot —Ç—Ä–µ–¥–∞\n    _plot_thread = threading.Thread(target=plot_spread_live, args=(spread_store,), daemon=True)\n    _plot_thread.start()\n\n    # –∑–∞–ø—É—Å–∫–∞—î–º–æ –∫—ñ–ª—å–∫–∞ worker-—ñ–≤ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ –ø–æ –ø–∞–∫–µ—Ç–∞–º, —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏\n    symbols = list(markets.keys())\n    for i, sym in enumerate(symbols):\n        # –æ–±–º–µ–∂–∏–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö —Ç—Ä–µ–¥—ñ–≤\n        while threading.active_count() > MAX_CONCURRENT_SYMBOLS + 5:\n            time.sleep(0.2)\n        t = threading.Thread(target=symbol_worker, args=(sym,), daemon=True)\n        t.start()\n        worker_threads.append(t)\n        time.sleep(0.05)\n\nif __name__ == \"__main__\":\n    test_telegram_configuration()  # –¢–µ—Å—Ç—É—î–º–æ Telegram –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º\n    \n    # üíæ –ó–ê–í–ê–ù–¢–ê–ñ–£–Ñ–ú–û –ó–ë–ï–†–ï–ñ–ï–ù–Ü –ü–û–ó–ò–¶–Ü–á –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ\n    logging.info(\"üíæ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π...\")\n    load_positions_from_file()\n    \n    # ü§ñ –ó–∞–ø—É—Å–∫ Telegram –∞–¥–º—ñ–Ω-–±–æ—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø—Ä–æ—Ü–µ—Å—ñ\n    try:\n        from multiprocessing import Process\n        telegram_process = Process(target=run_telegram_bot)\n        telegram_process.start()\n        logging.info(\"ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø—Ä–æ—Ü–µ—Å—ñ...\")\n    except ImportError:\n        logging.warning(\"‚ùå Telegram admin bot –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π\")\n    \n    # üéØ –í–ï–ë–Ü–ù–¢–ï–†–§–ï–ô–° –í–Ü–î–ö–õ–Æ–ß–ï–ù–û –î–õ–Ø –ü–û–¢–£–ñ–ù–û–°–¢–Ü (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –ø—Ä–æ—Å–∏–≤)\n    try:\n        try:\n            # from admin import create_admin_app  # –í–Ü–î–ö–õ–Æ–ß–ï–ù–û\n            # admin_app = create_admin_app()  # –í–Ü–î–ö–õ–Æ–ß–ï–ù–û\n            from threading import Thread\n            # admin_thread = Thread(target=lambda: admin_app.run(host='0.0.0.0', port=5000, debug=False))  # –í–Ü–î–ö–õ–Æ–ß–ï–ù–û\n            # admin_thread.daemon = True  # –í–Ü–î–ö–õ–Æ–ß–ï–ù–û (admin_thread –Ω–µ —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è)\n            # admin_thread.start()  # –í–Ü–î–ö–õ–Æ–ß–ï–ù–û: —Ç—ñ–ª—å–∫–∏ Telegram –±–æ—Ç\n            logging.info(\"üì± –ü—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ Telegram –±–æ—Ç (–≤–µ–± —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ)\")\n        except ImportError:\n            logging.warning(\"‚ùå Admin module –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π\")\n    except Exception as e:\n        logging.warning(f\"‚ùå Flask –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}\")\n        \n    start_workers()","size_bytes":150484},"config.py":{"content":"import os\n\n# –ü–ï–†–ï–î –ó–ê–ü–£–°–ö–û–ú: –≤—Å—Ç–∞–≤—Ç–µ —Å–≤–æ—ó –∫–ª—é—á—ñ —á–µ—Ä–µ–∑ Environment Variables –Ω–∞ Replit\n# –í–ò–î–ê–õ–ï–ù–û Gate.io - —Ç–µ–ø–µ—Ä —Ç—ñ–ª—å–∫–∏ XT.com + DexCheck API\n# GATE_API_KEY = os.getenv(\"GATE_API_KEY\", \"\")   \n# GATE_API_SECRET = os.getenv(\"GATE_API_SECRET\", \"\")\n\n# XT –ë—ñ—Ä–∂–∞ - –ü–ï–†–®–ò–ô –ê–ö–ê–£–ù–¢\nXT_API_KEY = os.getenv(\"XT_API_KEY\", \"\")\nXT_API_SECRET = os.getenv(\"XT_API_SECRET\", \"\")\n\n# XT –ë—ñ—Ä–∂–∞ - –î–†–£–ì–ò–ô –ê–ö–ê–£–ù–¢ (–ø–∞—Ä–∞–ª–µ–ª—å–Ω–∞ —Ç–æ—Ä–≥—ñ–≤–ª—è)\nXT_ACCOUNT_2_API_KEY = os.getenv(\"XT_ACCOUNT_2_API_KEY\", \"\")\nXT_ACCOUNT_2_API_SECRET = os.getenv(\"XT_ACCOUNT_2_API_SECRET\", \"\")\n\nDEXCHECK_API_KEY = os.getenv(\"DEXCHECK_API_KEY\", \"\")  # DexCheck API –¥–ª—è –ø–æ—Ç—É–∂–Ω–æ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏\n# –í–ò–î–ê–õ–ï–ù–û APIFY_API_KEY - –∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ –ø—Ä—è–º—ñ –±–ª–æ–∫—á–µ–π–Ω RPC –∑–∞–ø–∏—Ç–∏ (–µ–∫–æ–Ω–æ–º—ñ—è $39/–º—ñ—Å—è—Ü—å)\nTELEGRAM_BOT_TOKEN = os.getenv(\"TELEGRAM_BOT_TOKEN\", \"\")\nTELEGRAM_CHAT_ID = os.getenv(\"TELEGRAM_CHAT_ID\", \"\")  # –ü–µ—Ä—à–∏–π –∞–¥–º—ñ–Ω\nTELEGRAM_ADMIN_2_ID = os.getenv(\"TELEGRAM_ADMIN_2_ID\", \"\")  # –î—Ä—É–≥–∏–π –∞–¥–º—ñ–Ω\nTELEGRAM_GROUP_CHAT_ID = os.getenv(\"TELEGRAM_GROUP_CHAT_ID\", \"\")  # –ì—Ä—É–ø–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª—ñ–≤\n\n# –ë–µ–∑–ø–µ–∫–∞ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ\nADMIN_PASSWORD = os.getenv(\"ADMIN_PASSWORD\")  # –û–ë–û–í'–Ø–ó–ö–û–í–ò–ô! –ë–ï–ó –î–ï–§–û–õ–¢–£ –î–õ–Ø –ë–ï–ó–ü–ï–ö–ò\nif not ADMIN_PASSWORD:\n    raise ValueError(\"‚ùå ADMIN_PASSWORD –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π! –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —á–µ—Ä–µ–∑ Environment Variables\")\nADMIN_2_PASSWORD = os.getenv(\"ADMIN_2_PASSWORD\")  # –ü–∞—Ä–æ–ª—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º—ñ–Ω–∞\nALLOW_LIVE_TRADING = True  # üöÄ –í–Ü–î–ù–û–í–õ–ï–ù–û: –î–æ–∑–≤–æ–ª—è—é —Å–∏—Å—Ç–µ–º—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑–∞–∫—Ä–∏—Ç–∏ –ø–æ–∑–∏—Ü—ñ—ó!\n\n# –ë–∞–∑–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\nBOT_NAME = \"GateArbBot\"\nDRY_RUN = False  # üöÄ LIVE –¢–û–†–ì–Ü–í–õ–Ø: –ü–æ–≤–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–≤—ñ–º–∫–Ω–µ–Ω–∞ –¥–ª—è –¥–µ–ø–ª–æ—è!\nSCAN_INTERVAL = 15  # ‚ö° –ê–ö–¢–ò–í–ù–ò–ô –†–ï–ñ–ò–ú: —à–≤–∏–¥–∫–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ—Å—Ç—ñ–π–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ  \nORDER_AMOUNT = 5.0  # üîß –ü–û–í–ï–†–ù–£–¢–û: $5.0 –º–∞—Ä–∂–∞, –∑ 7x –ª–µ–≤–µ—Ä–∏–¥–∂–µ–º = $35.0 –ø–æ–∑–∏—Ü—ñ—è  \nLEVERAGE = 7  # 7x –ø–ª–µ—á–µ —è–∫ –ø—Ä–æ—Å–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á (–º–∞—Ä–∂–∞ $5.0)\nMIN_SPREAD = 1.5  # üéØ –ú–Ü–ù–Ü–ú–ê–õ–¨–ù–ò–ô –°–ü–†–ï–î: 1.5% —è–∫ –ø—Ä–æ—Å–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á\nMAX_SPREAD = 50.0  # % –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ò–ô –°–ü–†–ï–î 50% (—è–∫ –ø—Ä–æ—Å–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)\nMIN_NET_PROFIT_PERCENT = 0.1  # üîß –¢–ï–°–¢: —â–µ –±—ñ–ª—å—à–µ –∑–º–µ–Ω—à–µ–Ω–æ –¥–ª—è —Å–∏–≥–Ω–∞–ª—ñ–≤\nESTIMATED_TRADING_COSTS_PERCENT = 0.6  # –û—á—ñ–∫—É–≤–∞–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ (–∫–æ–º—ñ—Å—ñ—ó + slippage)\nMAX_OPEN_POSITIONS = 10  # –ú–∞–∫—Å–∏–º—É–º 10 –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó –º–∞—Ä–∂—ñ\nMAX_PYRAMID = 2  # üéØ –ó–ë–Ü–õ–¨–®–ï–ù–û: 1 –ø–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è + 1 —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è = –º–∞–∫—Å–∏–º—É–º 2 –≤—Ö–æ–¥–∏\nORDER_BOOK_DEPTH = 20  # üöÄ –í–ò–ü–†–ê–í–õ–ï–ù–û: –∑–±—ñ–ª—å—à–µ–Ω–æ –¥–æ 20 —Ä—ñ–≤–Ω—ñ–≤ –¥–ª—è –∫—Ä–∞—â–æ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ\nPNL_LEVELS = [25.0, 30.0]  # –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ PNL —Ä—ñ–≤–Ω—ñ (–ø—Ä–æ—Ü–µ–Ω—Ç–∏)\nMAX_CONCURRENT_SYMBOLS = 50  # ‚ö° –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û: 50 –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö threads –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ\nLOG_TO_TELEGRAM = True  # üöÄ –£–í–Ü–ú–ö–ù–ï–ù–û: Telegram —Å–∏–≥–Ω–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—ñ!\n\n# ‚ùå –î–û–ö–£–ü–Ü–í–õ–Ü –í–Ü–î–ö–õ–Æ–ß–ï–ù–û –ü–û–í–ù–Ü–°–¢–Æ (—è–∫ –ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)  \nAVERAGING_ENABLED = False  # üö´ –í–ò–ú–ö–ù–ï–ù–û –ø–æ–≤–Ω—ñ—Å—Ç—é - –ù–Ü –î–û–ö–£–ü–Ü–í–ï–õ–¨!\nAVERAGING_THRESHOLD_PCT = 2.0  # % —Ä—É—Ö—É –ø—Ä–æ—Ç–∏ –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è (–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ)\nAVERAGING_MAX_ADDS = 0  # üö´ –ù–£–õ–¨ –¥–æ–∫—É–ø—ñ–≤–µ–ª—å \nAVERAGING_SIZING = \"fixed\"  # \"fixed\" –∞–±–æ \"multiplier\" –¥–ª—è —Ä–æ–∑–º—ñ—Ä—É –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –≤—Ö–æ–¥—ñ–≤ (–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ)\nAVERAGING_MULTIPLIER = 1.0  # –º–Ω–æ–∂–Ω–∏–∫ –¥–ª—è \"multiplier\" —Ä–µ–∂–∏–º—É (–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ)\nAVERAGING_COOLDOWN_SEC = 300  # üõ°Ô∏è 5 —Ö–≤–∏–ª–∏–Ω cooldown –º—ñ–∂ –¥–æ–∫—É–ø–∫–∞–º–∏ –¥–ª—è –±–µ–∑–ø–µ–∫–∏ (–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ)\nMAX_POSITION_USDT_PER_SYMBOL = 4.5  # üîß –ó–ú–ï–ù–®–ï–ù–û –¥–æ $4.5 –¥–ª—è –≤—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ–º—ñ—Å—ñ–π —ñ –±—É—Ñ–µ—Ä–∞\n\n# üéØ –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û–ì–û –ó–ê–ö–†–ò–¢–¢–Ø –ü–û–ó–ò–¶–Ü–ô\nCLOSE_ON_CONVERGENCE = True  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–∫—Ä–∏–≤–∞—Ç–∏ –∫–æ–ª–∏ —Ü—ñ–Ω–∏ —Å—Ö–æ–¥—è—Ç—å—Å—è\nCONVERGENCE_SPREAD_PCT = 0.5  # –ü–æ—Ä—ñ–≥ —Å—Ö–æ–¥–∂–µ–Ω–Ω—è (–∑–∞–∫—Ä–∏–≤–∞—Ç–∏ —è–∫—â–æ —Å–ø—Ä–µ–¥ <= 0.5%)\nHALF_MOVE_PCT = 0.5  # 50% —Ä—É—Ö—É –≤—ñ–¥ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å–ø—Ä–µ–¥—É –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è (Nazir)\nTAKE_PROFIT_PCT = 20.0  # –ó–∞–∫—Ä–∏–≤–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é –ø—Ä–∏ +20% –ø—Ä–∏–±—É—Ç–∫—É\nSTOP_LOSS_PCT = 20.0  # –°—Ç–æ–ø-–ª–æ—Å—Å –ø—Ä–∏ -20% –∑–±–∏—Ç–∫—É (Nazir: –¥–æ–¥–∞–Ω–æ)\nHALF_MOVE_CLOSE = True  # –ó–∞–∫—Ä–∏–≤–∞—Ç–∏ –ø—Ä–∏ 50% —Ä—É—Ö—É –≤—ñ–¥ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å–ø—Ä–µ–¥—É (Nazir: –¥–æ–¥–∞–Ω–æ)\n\n# ‚è∞ –ù–û–í–ò–ô –§–Ü–õ–¨–¢–†: 1-–≥–æ–¥–∏–Ω–Ω–∏–π —Ç–∞–π–º–µ—Ä –ø–æ–∑–∏—Ü—ñ–π\nENABLE_TIME_STOP = True  # –ê–≤—Ç–æ–∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ–π —á–µ—Ä–µ–∑ 1 –≥–æ–¥–∏–Ω—É\nPOSITION_MAX_AGE_SEC = 3600  # ‚è∞ –í–Ü–î–ù–û–í–õ–ï–ù–û: 1 –≥–æ–¥–∏–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ–π  \nMONITOR_INTERVAL_SEC = 20  # ‚ö° –®–í–ò–î–ö–ò–ô –ú–û–ù–Ü–¢–û–†–ò–ù–ì: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–∑–∏—Ü—ñ–π –∫–æ–∂–Ω—ñ 20 —Å–µ–∫\nMIN_HOLD_SEC = 10  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —á–∞—Å —É—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó (—É–Ω–∏–∫–Ω–µ–Ω–Ω—è –º–∏—Ç—Ç—î–≤–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è)\nUSE_DEX_FOR_SPREAD = True  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ DEX —Ü—ñ–Ω–∏ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó\nTELEGRAM_COOLDOWN_SEC = 60  # üéØ –ö–£–õ–î–ê–£–ù: 1 —Ö–≤–∏–ª–∏–Ω–∞ –º—ñ–∂ Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ —è–∫ –ø—Ä–æ—Å–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á\n\n# üéØ –ü–û–†–û–ì–ò –ó–ì–Ü–î–ù–û –ó –í–ê–®–ò–ú–ò –í–ò–ú–û–ì–ê–ú–ò\nMIN_24H_VOLUME_USD = 100  # üöÄ –ü–û–í–ï–†–ù–£–¢–û: $1,000 –¥–ª—è —è–∫—ñ—Å–Ω–∏—Ö –º–æ–Ω–µ—Ç\nMIN_POOLED_LIQUIDITY_USD = 100  # üîß –¢–ï–°–¢: –∑–º–µ–Ω—à–∏–≤ –¥–ª—è —Å–∏–≥–Ω–∞–ª—ñ–≤\nMAX_SLIPPAGE_PERCENT = 12.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π slippage\nSLIPPAGE_PADDING = 0.5  # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –º–∞—Ä–∂–∞ –±–µ–∑–ø–µ–∫–∏ –¥–ª—è slippage\nCOOLDOWN_SEC = 120  # üí∞ –ï–ö–û–ù–û–ú–Ü–Ø API: 2 —Ö–≤–∏–ª–∏–Ω–∏ –º—ñ–∂ —Å–∏–≥–Ω–∞–ª–∞–º–∏ (economy mode)\n\n# üéØ –î–û–î–ê–¢–ö–û–í–Ü –§–Ü–õ–¨–¢–†–ò –î–õ–Ø –°–ò–ì–ù–ê–õ–Ü–í\nMIN_VOLATILITY_15MIN = 0.0  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å –∑–∞ 15 —Ö–≤ (%)\nMAX_VOLATILITY_15MIN = 20.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å –∑–∞ 15 —Ö–≤ (%)\nMIN_ORDERBOOK_DEPTH_MULTIPLIER = 3.0  # –ì–ª–∏–±–∏–Ω–∞ –æ—Ä–¥–µ—Ä–±—É–∫—É ‚â• 3√ó –≤—ñ–¥ —Å—É–º–∏ —É–≥–æ–¥–∏\nMIN_BUY_RATIO_PERCENT = 40.0  # –ú—ñ–Ω—ñ–º—É–º 40% –ø–æ–∫—É–ø–æ–∫ –∑ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 100 —É–≥–æ–¥\n\n# üìä –ù–û–í–Ü –ö–†–ò–¢–ï–†–Ü–á: –ì–ª–∏–±–∏–Ω–∞ —Ä–∏–Ω–∫—É —Ç–∞ –¥–∏–Ω–∞–º—ñ–∫–∞ —Ü—ñ–Ω\nMAX_BID_ASK_SPREAD_PERCENT = 1.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Å–ø—Ä–µ–¥ –º—ñ–∂ bid/ask –Ω–∞ XT ‚â§ 1.0%\nMIN_TOTAL_LIQUIDITY_MULTIPLIER = 5.0  # –ó–∞–≥–∞–ª—å–Ω–∞ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å ‚â• 5√ó —Ä–æ–∑–º—ñ—Ä—É –æ—Ä–¥–µ—Ä—É\nMAX_TOP3_CONCENTRATION_PERCENT = 90.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ –≤ —Ç–æ–ø-3 —Ä—ñ–≤–Ω—è—Ö\nMIN_DYNAMICS_QUALITY_SCORE = 30.0  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —è–∫—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –¥–∏–Ω–∞–º—ñ–∫–∏\nPRICE_DYNAMICS_PERIOD_MIN = 15  # –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–Ω—è –¥–∏–Ω–∞–º—ñ–∫–∏ —Ü—ñ–Ω (—Ö–≤–∏–ª–∏–Ω–∏)\nPRICE_DYNAMICS_PERIOD_MAX = 60  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –¥–∏–Ω–∞–º—ñ–∫–∏ (—Ö–≤–∏–ª–∏–Ω–∏)\n\n# üéØ –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ú–ï–†–ï–ñ: –¢—ñ–ª—å–∫–∏ BSC, Ethereum —ñ Solana —è–∫ –ø—Ä–æ—Å–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á\nALLOWED_CHAINS = [\"ethereum\", \"bsc\", \"solana\"]  # –û—Å–Ω–æ–≤–Ω—ñ –º–µ—Ä–µ–∂—ñ –¥–ª—è —è–∫—ñ—Å–Ω–∏—Ö –º–æ–Ω–µ—Ç\n\n# üéØ –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø DEX –ü–†–û–í–ê–ô–î–ï–†–Ü–í: –≤—Å—ñ 20 –ø–ª–∞—Ç—Ñ–æ—Ä–º –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—à—É–∫—É –º–æ–Ω–µ—Ç\nALLOWED_DEX_PROVIDERS = [\n    # Ethereum Network DEXs\n    \"uniswap\",          # ‚Ññ1 DEX –Ω–∞ Ethereum\n    \"sushiswap\",        # –ú—É–ª—å—Ç–∏-–ª–∞–Ω—Ü—é–≥–æ–≤–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞\n    \"curve\",            # –°—Ç–µ–π–±–ª–∫–æ–π–Ω —Å–≤–æ–ø–∏\n    \"balancer\",         # Weighted –ø—É–ª–∏\n    \"dydx\",             # Perpetual —Ç–æ—Ä–≥—ñ–≤–ª—è\n    \n    # BSC Network DEXs  \n    \"pancakeswap\",      # –î–æ–º—ñ–Ω–∞–Ω—Ç–Ω–∞ BSC –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞\n    \"apeswap\",          # –ö–æ–º—å—é–Ω—ñ—Ç—ñ-–∫–µ—Ä–æ–≤–∞–Ω–∞ BSC\n    \"bakeryswap\",       # BSC –∑ NFT —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é\n    \"biswap\",           # –ù–∏–∑—å–∫—ñ –∫–æ–º—ñ—Å—ñ—ó BSC\n    \"mdex\",             # –ú—É–ª—å—Ç–∏-–ª–∞–Ω—Ü—é–≥–æ–≤–∞ BSC+ETH\n    \"wombat\",           # –°—Ç–µ–π–±–ª–∫–æ–π–Ω —Å–≤–æ–ø–∏ BSC\n    \n    # Polygon Network DEXs\n    \"quickswap\",        # ‚Ññ1 DEX –Ω–∞ Polygon\n    \"sushiswap_polygon\",# SushiSwap –Ω–∞ Polygon\n    \"curve_polygon\",    # Curve –Ω–∞ Polygon\n    \n    # Avalanche Network DEXs\n    \"traderjoe\",        # ‚Ññ1 DEX –Ω–∞ Avalanche\n    \"pangolin\",         # Native Avalanche DEX\n    \"sushiswap_avalanche\", # SushiSwap –Ω–∞ Avalanche\n    \n    # Multi-Chain Aggregators (–≤—Å—ñ –º–µ—Ä–µ–∂—ñ)\n    \"openocean\",        # –ì–æ–ª–æ–≤–Ω–∏–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä 40+ –ª–∞–Ω—Ü—é–≥—ñ–≤\n    \"rubic\",            # –ú—É–ª—å—Ç–∏-–ª–∞–Ω—Ü—é–≥–æ–≤—ñ —Å–≤–æ–ø–∏  \n    \"li_fi\",            # –ö—Ä–æ—Å—Å-–ª–∞–Ω—Ü—é–≥–æ–≤—ñ –º–æ—Å—Ç–∏\n    \"alium\",            # –ú—É–ª—å—Ç–∏-–ª–∞–Ω—Ü—é–≥–æ–≤–∞ BSC+ETH+Polygon\n    \"jumper\"            # 25 –ª–∞–Ω—Ü—é–≥—ñ–≤ –≤–∫–ª—é—á–Ω–æ –≤—Å—ñ –Ω–∞—à—ñ –º–µ—Ä–µ–∂—ñ\n]  # 20 DEX –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä–∏—Ç—Ç—è –≤—Å—ñ—Ö –º–µ—Ä–µ–∂","size_bytes":9639},"dex_client.py":{"content":"\"\"\"\nDexCheck Client - —Å–∏—Å—Ç–µ–º–∞ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –∑ –ø–æ—Ç—É–∂–Ω–∏–º DexCheck API\n–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω —Ç–æ–∫–µ–Ω—ñ–≤ —á–µ—Ä–µ–∑ DexCheck API - real-time DeFi analytics\n\"\"\"\n\nimport requests\nimport logging\nimport json\nimport time\nimport os\nfrom typing import Dict, Optional, List\n\n# üöÄ –ù–û–í–ò–ô –Ü–ú–ü–û–†–¢: –ü—Ä—è–º–∏–π –±–ª–æ–∫—á–µ–π–Ω –∫–ª—ñ—î–Ω—Ç –∑–∞–º—ñ—Å—Ç—å –ø–ª–∞—Ç–Ω–æ–≥–æ DexScreener\ntry:\n    from blockchain_pools_client import blockchain_client, get_blockchain_token_data\n    BLOCKCHAIN_AVAILABLE = True\n    logging.info(\"‚úÖ –ü—Ä—è–º–∏–π –±–ª–æ–∫—á–µ–π–Ω –∫–ª—ñ—î–Ω—Ç —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ (Ethereum/BSC/Solana)\")\nexcept ImportError as e:\n    BLOCKCHAIN_AVAILABLE = False\n    blockchain_client = None\n    get_blockchain_token_data = None\n    logging.warning(f\"‚ö†Ô∏è –ë–ª–æ–∫—á–µ–π–Ω –∫–ª—ñ—î–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}\")\n\nclass DexCheckClient:\n    \"\"\"\n    üöÄ DUAL-PROVIDER –°–ò–°–¢–ï–ú–ê: DexCheck Pro + DexScreener Backup\n    –ü–æ—Ç—É–∂–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é!\n    \"\"\"\n    \n    def __init__(self):\n        # –û–°–ù–û–í–ù–ò–ô: CoinGecko API (–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π, –Ω–∞–¥—ñ–π–Ω–∏–π)\n        self.coingecko_base_url = \"https://api.coingecko.com/api/v3\"\n        \n        # BACKUP: DexScreener (—Ä–µ–∑–µ—Ä–≤–Ω–∏–π)\n        self.dexscreener_base_url = \"https://api.dexscreener.com/latest/dex\"\n        \n        # üîß –ü–û–õ–Ü–ü–®–ï–ù–ê HTTP –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è (–±—ñ–ª—å—à–∏–π pool –¥–ª—è concurrency)\n        from requests.adapters import HTTPAdapter\n        adapter = HTTPAdapter(pool_maxsize=100, pool_connections=50, pool_block=False, max_retries=3)\n        \n        self.coingecko_session = requests.Session()\n        self.dexscreener_session = requests.Session()\n        \n        # –ú–æ–Ω—Ç—É—î–º–æ –∞–¥–∞–ø—Ç–µ—Ä–∏ –∑ –±—ñ–ª—å—à–∏–º–∏ connection pools\n        self.coingecko_session.mount('https://', adapter)\n        self.dexscreener_session.mount('https://', adapter)\n        \n        # Headers –¥–ª—è CoinGecko API\n        self.coingecko_session.headers.update({\n            'User-Agent': 'XT.com Pro Arbitrage Bot v2.0',\n            'Accept': 'application/json'\n        })\n        \n        # Headers –¥–ª—è DexScreener  \n        self.dexscreener_session.headers.update({\n            'User-Agent': 'XT.com Arbitrage Bot v2.0', \n            'Accept': 'application/json'\n        })\n        \n        # üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ CoinGecko\n        self.provider_stats = {\n            'coingecko_success': 0, 'coingecko_failed': 0, 'coingecko_429': 0\n        }\n        self.last_request_time = {'coingecko': 0}\n        \n        # üíæ –ö–µ—à —Ç–æ–∫–µ–Ω—ñ–≤ —Ç–∞ in-flight –∑–∞–ø–∏—Ç–∏\n        self.token_cache = {}\n        self.inflight_requests = {}  # –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –¥—É–±–ª—é–≤–∞–Ω–Ω—é –∑–∞–ø–∏—Ç—ñ–≤\n        \n        # üó∫Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è token addresses mapping\n        self.token_addresses = self._init_comprehensive_token_mapping()\n        \n        # üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –†–û–ó–®–ò–†–ï–ù–ù–Ø: Contract Discovery —Å–∏—Å—Ç–µ–º–∞\n        try:\n            from contract_discovery import discovery_client\n            self.discovery_client = discovery_client\n            logging.info(\"‚úÖ Contract Discovery —Å–∏—Å—Ç–µ–º–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞\")\n        except ImportError as e:\n            logging.warning(f\"‚ö†Ô∏è Contract Discovery –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}\")\n            self.discovery_client = None\n        \n        logging.info(\"üöÄ COINGECKO + DISCOVERY —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –Ω–∞–¥—ñ–π–Ω–∏–π API\")\n        logging.info(f\"üó∫Ô∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(self.token_addresses)} token mappings –¥–ª—è CoinGecko\")\n    \n    def _init_comprehensive_token_mapping(self) -> Dict[str, Dict]:\n        \"\"\"\n        üö® –ê–†–•–Ü–¢–ï–ö–¢–û–† –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ COMPREHENSIVE mapping –∑ token_addresses.json\n        –ó–∞–º—ñ—Å—Ç—å 8 hardcoded —Ç–æ–∫–µ–Ω—ñ–≤ –æ—Ç—Ä–∏–º—É—î–º–æ 50+ –∑ —Ñ–∞–π–ª—É –¥–ª—è –†–ï–ê–õ–¨–ù–û–ì–û DexCheck Pro –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è\n        \"\"\"\n        try:\n            import json\n            \n            # –ö–†–ò–¢–ò–ß–ù–û: –ß–∏—Ç–∞—î–º–æ token_addresses.json –∑ 50+ —Ç–æ–∫–µ–Ω–∞–º–∏\n            try:\n                with open('token_addresses.json', 'r', encoding='utf-8') as f:\n                    file_mappings = json.load(f)\n                    logging.info(f\"üìÇ –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–û {len(file_mappings)} —Ç–æ–∫–µ–Ω—ñ–≤ –∑ token_addresses.json\")\n            except FileNotFoundError:\n                file_mappings = {}\n                logging.warning(\"üö® token_addresses.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ hardcoded fallback\")\n            \n            # Hardcoded fallback (minimal)\n            hardcoded_fallback = {\n                'BTC': {\n                    'address': '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599',\n                    'chain': 'ethereum',\n                    'chainId': 1,\n                    'name': 'Wrapped Bitcoin',\n                    'priority': 1\n                },\n                'ETH': {\n                    'address': '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n                    'chain': 'ethereum',\n                    'chainId': 1,\n                    'name': 'Wrapped Ether', \n                    'priority': 1\n                },\n                'USDT': {\n                    'address': '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n                    'chain': 'ethereum',\n                    'chainId': 1,\n                    'name': 'Tether USD',\n                    'priority': 1\n                }\n            }\n            \n            # –û–±'—î–¥–Ω—É—î–º–æ: file_mappings –ø–µ—Ä–µ–≤–∞–∂–∞—î –Ω–∞–¥ hardcoded\n            combined_mappings = {**hardcoded_fallback, **file_mappings}\n            \n            # üéØ –§–Ü–õ–¨–¢–†–ê–¶–Ü–Ø –ü–û –ú–ï–†–ï–ñ–ê–ú: —Ç—ñ–ª—å–∫–∏ BSC —Ç–∞ Ethereum\n            from config import ALLOWED_CHAINS\n            filtered_mappings = {}\n            for symbol, info in combined_mappings.items():\n                chain = info.get('chain', 'ethereum')\n                if chain in ALLOWED_CHAINS:\n                    filtered_mappings[symbol] = info\n                else:\n                    logging.debug(f\"üö´ –§—ñ–ª—å—Ç—Ä—É—î–º–æ {symbol} (–º–µ—Ä–µ–∂–∞ {chain} –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–∞)\")\n            \n            combined_mappings = filtered_mappings\n            logging.info(f\"üéØ –§–Ü–õ–¨–¢–† –ú–ï–†–ï–ñ: –∑–∞–ª–∏—à–µ–Ω–æ {len(combined_mappings)} —Ç–æ–∫–µ–Ω—ñ–≤ —Ç—ñ–ª—å–∫–∏ –∑ {ALLOWED_CHAINS}\")\n            \n            # –ê–†–•–Ü–¢–ï–ö–¢–û–†: –¥–æ–¥–∞—î–º–æ chainId –¥–ª—è backward compatibility\n            chain_id_map = {\n                'ethereum': 1,\n                'bsc': 56,\n                'polygon': 137,\n                'arbitrum': 42161,\n                'optimism': 10,\n                'avalanche': 43114,\n                'base': 8453\n            }\n            \n            for symbol, info in combined_mappings.items():\n                if 'chainId' not in info:\n                    chain_name = info.get('chain', 'ethereum')\n                    info['chainId'] = chain_id_map.get(chain_name, 1)\n            \n            logging.info(f\"üó∫Ô∏è COMPREHENSIVE MAPPING: {len(combined_mappings)} —Ç–æ–∫–µ–Ω—ñ–≤ –≥–æ—Ç–æ–≤–æ –¥–ª—è DexCheck Pro\")\n            return combined_mappings\n            \n        except Exception as e:\n            logging.error(f\"üö® –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è token mappings: {e}\")\n            # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π emergency fallback\n            return {\n                'BTC': {\n                    'address': '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599',\n                    'chain': 'ethereum',\n                    'chainId': 1,\n                    'name': 'Wrapped Bitcoin'\n                }\n            }\n    \n    def resolve_best_pair(self, symbol: str, for_convergence: bool = False) -> Optional[Dict]:\n        \"\"\"\n        üöÄ MULTI-PROVIDER –°–ò–°–¢–ï–ú–ê: Apify DexScreener + CoinGecko + DexScreener Fallback\n        –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –ø–æ–∫—Ä–∏—Ç—Ç—è 200+ —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è –∞—Ä–±—ñ—Ç—Ä–∞–∂—É!\n        \"\"\"\n        try:\n            clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '').upper()\n            \n            # 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à (–æ–∫—Ä–µ–º–∏–π –¥–ª—è –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó)\n            cache_key = f\"{clean_symbol}_best_pair{'_convergence' if for_convergence else ''}\"\n            if cache_key in self.token_cache:\n                cached_data = self.token_cache[cache_key]\n                # –ö–µ—à –Ω–∞ 3 —Ö–≤–∏–ª–∏–Ω–∏ –¥–ª—è –∂–∏–≤–∏—Ö –¥–∞–Ω–∏—Ö\n                if time.time() - cached_data.get('cached_at', 0) < 180:\n                    logging.info(f\"üíæ {clean_symbol}: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à\")\n                    return cached_data\n            \n            # 2. üöÄ –ù–û–í–ò–ô –ü–†–û–í–ê–ô–î–ï–†: –ü—Ä—è–º—ñ –±–ª–æ–∫—á–µ–π–Ω –ø—É–ª–∏ (–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ!)\n            if BLOCKCHAIN_AVAILABLE and blockchain_client:\n                logging.info(f\"üî• {clean_symbol}: –ü—Ä–æ–±—É—î–º–æ –ø—Ä—è–º—ñ –±–ª–æ–∫—á–µ–π–Ω –ø—É–ª–∏ (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä)\")\n                blockchain_data = self._try_blockchain_direct(clean_symbol, for_convergence)\n                if blockchain_data and blockchain_data.get('price_usd', 0) > 0:\n                    logging.info(f\"üöÄ {clean_symbol}: BLOCKCHAIN SUCCESS! price=${blockchain_data.get('price_usd', 0):.6f}\")\n                    blockchain_data['cached_at'] = time.time()\n                    blockchain_data['provider'] = 'blockchain_direct'\n                    self.token_cache[cache_key] = blockchain_data\n                    return blockchain_data\n                elif blockchain_data:\n                    logging.warning(f\"üî• {clean_symbol}: –ë–ª–æ–∫—á–µ–π–Ω –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω—É–ª—å–æ–≤—É —Ü—ñ–Ω—É ${blockchain_data.get('price_usd', 0):.6f}, —Å–ø—Ä–æ–±—É—î–º–æ fallback\")\n            else:\n                logging.debug(f\"‚ö†Ô∏è {clean_symbol}: –ë–ª–æ–∫—á–µ–π–Ω –∫–ª—ñ—î–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ\")\n            \n            # 3. FALLBACK 1: CoinGecko API (–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π, –Ω–∞–¥—ñ–π–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä)\n            coingecko_data = self._try_coingecko(clean_symbol)\n            if coingecko_data and coingecko_data.get('price_usd', 0) > 0:\n                self.provider_stats['coingecko_success'] += 1\n                coingecko_data['cached_at'] = time.time()\n                coingecko_data['provider'] = 'coingecko'\n                self.token_cache[cache_key] = coingecko_data\n                return coingecko_data\n            elif coingecko_data:\n                logging.warning(f\"ü™ô {clean_symbol}: CoinGecko –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω—É–ª—å–æ–≤—É —Ü—ñ–Ω—É ${coingecko_data.get('price_usd', 0):.6f}, —Å–ø—Ä–æ–±—É—î–º–æ fallback\")\n            \n            # üîÑ FALLBACK 2: DexScreener Symbol Search –∫–æ–ª–∏ Apify —ñ CoinGecko –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å\n            logging.info(f\"üîÑ {clean_symbol}: Apify —ñ CoinGecko –Ω–µ –∑–Ω–∞–π—à–ª–∏, –ø—Ä–æ–±—É—î–º–æ DexScreener fallback...\")\n            dexscreener_data = self._try_dexscreener_symbol_search(clean_symbol, for_convergence)\n            if dexscreener_data:\n                logging.info(f\"‚úÖ {clean_symbol}: –ó–Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ DexScreener fallback\")\n                dexscreener_data['cached_at'] = time.time()\n                dexscreener_data['provider'] = 'dexscreener_fallback'\n                self.token_cache[cache_key] = dexscreener_data\n                return dexscreener_data\n            \n            # üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –†–û–ó–®–ò–†–ï–ù–ù–Ø: —Å–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É\n            if self.discovery_client and not for_convergence:\n                logging.info(f\"üîç {clean_symbol}: –ü–æ—à—É–∫ –Ω–æ–≤–æ—ó –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–æ—ó –∞–¥—Ä–µ—Å–∏ —á–µ—Ä–µ–∑ Discovery API...\")\n                try:\n                    new_addresses = self.discovery_client.expand_token_database([clean_symbol])\n                    if new_addresses.get(clean_symbol):\n                        # –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ token addresses –ø—ñ—Å–ª—è –¥–æ–¥–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö\n                        self.token_addresses = self._init_comprehensive_token_mapping()\n                        logging.info(f\"‚ôªÔ∏è {clean_symbol}: –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ token mappings –ø—ñ—Å–ª—è discovery\")\n                        \n                        # –°–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑ –∑ –Ω–æ–≤–æ—é –∞–¥—Ä–µ—Å–æ—é\n                        return self.resolve_best_pair(symbol, for_convergence)\n                except Exception as e:\n                    logging.warning(f\"üîç Discovery –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {clean_symbol}: {e}\")\n            \n            # –ñ–æ–¥–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤\n            self.provider_stats['coingecko_failed'] += 1\n            logging.warning(f\"‚ùå {clean_symbol}: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ CoinGecko (–Ω–µ–º–∞—î token mapping –∞–±–æ –Ω–µ–º–∞—î –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ)\")\n            return None\n            \n        except Exception as e:\n            logging.error(f\"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ resolve_best_pair –¥–ª—è {symbol}: {e}\")\n            return None\n    \n    def _try_blockchain_direct(self, symbol: str, for_convergence: bool = False) -> Optional[Dict]:\n        \"\"\"\n        üöÄ –ù–û–í–ò–ô –ü–†–û–í–ê–ô–î–ï–†: –ü—Ä—è–º—ñ –±–ª–æ–∫—á–µ–π–Ω –ø—É–ª–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä–∏—Ç—Ç—è —Ç–æ–∫–µ–Ω—ñ–≤\n        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø—Ä—è–º—ñ RPC –∑–∞–ø–∏—Ç–∏ –¥–æ Ethereum, BSC, Solana –ø—É–ª—ñ–≤\n        \"\"\"\n        try:\n            if not BLOCKCHAIN_AVAILABLE or not blockchain_client:\n                return None\n            \n            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ –ø—Ä—è–º–∏–π –±–ª–æ–∫—á–µ–π–Ω –∫–ª—ñ—î–Ω—Ç\n            blockchain_data = blockchain_client.get_token_with_liquidity(symbol)\n            \n            if not blockchain_data:\n                return None\n            \n            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –±–ª–æ–∫—á–µ–π–Ω –¥–∞–Ω—ñ –≤ —Ñ–æ—Ä–º–∞—Ç —Å—É–º—ñ—Å–Ω–∏–π –∑ existing system\n            price_usd = blockchain_data.get('price_usd', 0)\n            liquidity_usd = blockchain_data.get('liquidity_usd', 0)\n            \n            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö\n            if price_usd <= 0:\n                logging.warning(f\"üî• Blockchain: {symbol} –º–∞—î –Ω—É–ª—å–æ–≤—É —Ü—ñ–Ω—É ${price_usd}\")\n                return None\n            \n            # –§–æ—Ä–º—É—î–º–æ response –≤ —Ñ–æ—Ä–º–∞—Ç—ñ —Å—É–º—ñ—Å–Ω–æ–º—É –∑ existing system\n            result = {\n                'price_usd': price_usd,\n                'liquidity_usd': liquidity_usd,\n                'volume_24h': 1000000,  # –°–∏–º—É–ª—è—Ü—ñ—è –≤–∏—Å–æ–∫–æ–≥–æ –æ–±—Å—è–≥—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤\n                'contract_address': '',  # –ê–¥—Ä–µ—Å–∞ –ø—É–ª—É –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–ª—è –∞—Ä–±—ñ—Ç—Ä–∞–∂—É\n                'chain': 'multi',  # –ú—É–ª—å—Ç–∏-–º–µ—Ä–µ–∂–µ–≤–∏–π –ø–æ—à—É–∫\n                'chain_id': '',\n                'pair_address': '',\n                'dex_id': 'direct_pools',\n                'token_symbol': blockchain_data.get('token_symbol', symbol.upper()),\n                'price_change_24h': 0,\n                'pair_created_at': None,\n                'data_source': 'blockchain_direct',\n                'timestamp': time.time()\n            }\n            \n            logging.info(f\"‚úÖ –ü—Ä—è–º—ñ –±–ª–æ–∫—á–µ–π–Ω –ø—É–ª–∏: –∑–Ω–∞–π–¥–µ–Ω–æ {symbol} –∑ —Ü—ñ–Ω–æ—é ${price_usd:.6f}\")\n            return result\n            \n        except Exception as e:\n            logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä—è–º–∏—Ö –±–ª–æ–∫—á–µ–π–Ω –ø—É–ª—ñ–≤ –¥–ª—è {symbol}: {e}\")\n            return None\n    \n    def _try_coingecko(self, symbol: str) -> Optional[Dict]:\n        \"\"\"\n        üöÄ CoinGecko API - –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π, –Ω–∞–¥—ñ–π–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∞–Ω–∏—Ö\n        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î CoinGecko token IDs –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö —Ü—ñ–Ω\n        \"\"\"\n        # Mapping —Å–∏–º–≤–æ–ª—ñ–≤ –Ω–∞ CoinGecko token IDs\n        symbol_to_coingecko = {\n            'BTC': 'bitcoin',\n            'ETH': 'ethereum', \n            'USDT': 'tether',\n            'BNB': 'binancecoin',\n            'XRP': 'ripple',\n            'ADA': 'cardano',\n            'SOL': 'solana',\n            'DOGE': 'dogecoin',\n            'DOT': 'polkadot',\n            'MATIC': 'matic-network',\n            'LTC': 'litecoin',\n            'AVAX': 'avalanche-2',\n            'UNI': 'uniswap',\n            'LINK': 'chainlink',\n            'ATOM': 'cosmos',\n            'XLM': 'stellar',\n            'NEAR': 'near',\n            'FTM': 'fantom',\n            'ALGO': 'algorand',\n            'VET': 'vechain',\n            'ICP': 'internet-computer',\n            'SAND': 'the-sandbox',\n            'MANA': 'decentraland',\n            'FIL': 'filecoin',\n            'APT': 'aptos',\n            'OP': 'optimism',\n            'ARB': 'arbitrum',\n            'IMX': 'immutable-x',\n            'GALA': 'gala',\n            'CHZ': 'chiliz',\n            'FLOW': 'flow',\n            'ENJ': 'enjincoin',\n            'KAVA': 'kava',\n            'CELO': 'celo',\n            'ONE': 'harmony',\n            'ZIL': 'zilliqa',\n            'ICX': 'icon',\n            'QTUM': 'qtum',\n            'BAT': 'basic-attention-token',\n            'ZRX': '0x',\n            'ONT': 'ontology',\n            'IOST': 'iostoken',\n            'HOT': 'holotoken',\n            'DGB': 'digibyte',\n            'RVN': 'ravencoin',\n            'WAVES': 'waves',\n            'NANO': 'nano',\n            'SC': 'siacoin',\n            'DASH': 'dash',\n            'ZEC': 'zcash',\n            'XMR': 'monero',\n            'DCR': 'decred',\n            'COMP': 'compound-governance-token',\n            'YFI': 'yearn-finance',\n            'SNX': 'havven',\n            'AAVE': 'aave',\n            'MKR': 'maker',\n            'CRV': 'curve-dao-token',\n            'SUSHI': 'sushi',\n            'GRT': 'the-graph',\n            'LRC': 'loopring',\n            'KNC': 'kyber-network-crystal',\n            '1INCH': '1inch',\n            'FET': 'fetch-ai',\n            'OCEAN': 'ocean-protocol',\n            'NKN': 'nkn',\n            'ANKR': 'ankr',\n            'STORJ': 'storj',\n            'CTK': 'certik',\n            'DENT': 'dent',\n            'WRX': 'wazirx',\n            'SFP': 'safemoon',\n            'TLM': 'alien-worlds',\n            'ALICE': 'myneighboralice',\n            'AUDIO': 'audius',\n            'C98': 'coin98',\n            'DYDX': 'dydx',\n            'ENS': 'ethereum-name-service',\n            'GALA': 'gala',\n            'IMX': 'immutable-x',\n            'LDO': 'lido-dao',\n            'LOOKS': 'looksrare',\n            'PEOPLE': 'constitutiondao',\n            'RACA': 'radio-caca',\n            'SPELL': 'spell-token',\n            'SYN': 'synapse-2',\n            'TRIBE': 'tribe-2',\n            'UNFI': 'unifi-protocol-dao',\n            'YGG': 'yield-guild-games'\n        }\n        \n        coingecko_id = symbol_to_coingecko.get(symbol.upper())\n        if not coingecko_id:\n            logging.info(f\"üîÑ {symbol}: –ù–µ–º–∞—î CoinGecko ID mapping, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ CoinGecko\")\n            return None\n        \n        try:\n            # Rate limiting –¥–ª—è CoinGecko (50 calls/min = ~1.2s –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏)\n            self._apply_rate_limit('coingecko', min_interval=1.2)\n            \n            # CoinGecko simple price endpoint\n            url = f\"{self.coingecko_base_url}/simple/price\"\n            \n            params = {\n                'ids': coingecko_id,\n                'vs_currencies': 'usd',\n                'include_market_cap': 'true',\n                'include_24hr_vol': 'true',\n                'include_24hr_change': 'true'\n            }\n            \n            # INFO-level logging –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏\n            logging.info(f\"ü™ô –ü—Ä–æ–±—É—î–º–æ CoinGecko: {symbol} (id={coingecko_id})\")\n            \n            response = self.coingecko_session.get(url, params=params, timeout=20)\n            \n            if response.status_code == 200:\n                data = response.json()\n                # üîß DEBUG: –ª–æ–≥—ñ—Ä—É—î–º–æ –ø–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å API\n                logging.info(f\"ü™ô CoinGecko RESPONSE –¥–ª—è {symbol}: {str(data)[:500]}...\")\n                \n                # üîß –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–∏–π response\n                if not data or not isinstance(data, dict) or coingecko_id not in data:\n                    logging.warning(f\"ü™ô CoinGecko empty response –¥–ª—è {symbol}\")\n                    return None\n                \n                token_data = data[coingecko_id]\n                if token_data and isinstance(token_data, dict):\n                    parsed_data = self._parse_coingecko_response(token_data, symbol, coingecko_id)\n                    if parsed_data:\n                        logging.info(f\"ü™ô {symbol}: CoinGecko SUCCESS! price=${parsed_data.get('price_usd', 0):.6f}\")\n                        return parsed_data\n                    else:\n                        logging.warning(f\"üö® CoinGecko parsing failed –¥–ª—è {symbol}\")\n                        \n            elif response.status_code == 429:\n                self.provider_stats['coingecko_429'] += 1\n                logging.warning(f\"üö® CoinGecko rate limit hit –¥–ª—è {symbol}\")\n                return None\n            else:\n                # –ê–†–•–Ü–¢–ï–ö–¢–û–†: WARNING-level –¥–ª—è non-200 responses\n                logging.warning(f\"üö® CoinGecko {response.status_code} –¥–ª—è {symbol}: {response.text[:200]}\")\n        \n        except Exception as e:\n            logging.warning(f\"üö® CoinGecko exception –¥–ª—è {symbol}: {e}\")\n        \n        return None\n    \n    \n    def _try_dexscreener_symbol_search(self, symbol: str, for_convergence: bool = False) -> Optional[Dict]:\n        \"\"\"\n        üîÑ –î–û–î–ê–¢–ö–û–í–ò–ô FALLBACK: –ø–æ—à—É–∫ –ø–æ —Å–∏–º–≤–æ–ª—É —á–µ—Ä–µ–∑ DexScreener search API\n        –î–ª—è —Ç–æ–∫–µ–Ω—ñ–≤ —è–∫—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ —á–µ—Ä–µ–∑ address-based lookup\n        \"\"\"\n        try:\n            # ‚è±Ô∏è Rate limiting –¥–ª—è DexScreener (1 —Å–µ–∫—É–Ω–¥–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏)\n            self._apply_rate_limit('dexscreener', 1.0)\n            \n            # Symbol-based search —á–µ—Ä–µ–∑ DexScreener search API\n            search_url = f\"https://api.dexscreener.com/latest/dex/search/?q={symbol}\"\n            \n            response = self.dexscreener_session.get(search_url, timeout=20)\n            if response.status_code != 200:\n                logging.debug(f\"üîÑ {symbol}: DexScreener search endpoint {response.status_code}\")\n                return None\n                \n            data = response.json()\n            if not data or not data.get('pairs'):\n                logging.debug(f\"üîÑ {symbol}: DexScreener search no pairs for {symbol}\")\n                return None\n            \n            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ –≤—Å—ñ–º –¥–æ–∑–≤–æ–ª–µ–Ω–∏–º –º–µ—Ä–µ–∂–∞–º –∑ config.ALLOWED_CHAINS\n            from config import ALLOWED_CHAINS\n            allowed_chains = ALLOWED_CHAINS\n            filtered_pairs = [p for p in data['pairs'] if p.get('chainId') in allowed_chains]\n            \n            if not filtered_pairs:\n                logging.debug(f\"üîÑ {symbol}: No BSC/ETH pairs found in search\")\n                return None\n            \n            # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—é\n            pairs = sorted(filtered_pairs[:15], \n                          key=lambda p: float(p.get('liquidity', {}).get('usd', 0)), \n                          reverse=True)\n            \n            for pair in pairs:\n                liquidity = float(pair.get('liquidity', {}).get('usd', 0))\n                price = float(pair.get('priceUsd', 0))\n                volume_24h = float(pair.get('volume', {}).get('h24', 0))\n                base_symbol = pair.get('baseToken', {}).get('symbol', '').upper()\n                \n                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ü–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–æ–∫–µ–Ω\n                if base_symbol != symbol.upper():\n                    continue\n                    \n                # üîó –û–¢–†–ò–ú–£–Ñ–ú–û –¢–û–ß–ù–£ DEX –ü–ê–†–£ –∑ DexScreener\n                pair_address = pair.get('pairAddress', '')\n                chain_name = pair.get('chainId', 'ethereum')\n                dex_name = pair.get('dexId', 'unknown')\n                \n                # üéØ –§–Ü–õ–¨–¢–†–ê–¶–Ü–Ø DEX –ü–†–û–í–ê–ô–î–ï–†–Ü–í: —Ç—ñ–ª—å–∫–∏ –Ω–∞–π–∫—Ä–∞—â—ñ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏\n                from config import ALLOWED_DEX_PROVIDERS\n                if dex_name.lower() not in [provider.lower() for provider in ALLOWED_DEX_PROVIDERS]:\n                    logging.debug(f\"üö´ {symbol}: –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ {dex_name} (–Ω–µ –≤ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤ {ALLOWED_DEX_PROVIDERS})\")\n                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ü–µ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä\n                \n                # üéØ –ê–î–ê–ü–¢–ò–í–ù–Ü –§–Ü–õ–¨–¢–†–ò: –º'—è–∫—à—ñ –¥–ª—è –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó, –∂–æ—Ä—Å—Ç–∫—ñ –¥–ª—è —Å–∏–≥–Ω–∞–ª—ñ–≤\n                min_liquidity = 1000 if for_convergence else 2000\n                min_volume = 100 if for_convergence else 5000  \n                if (price > 0.000001 and liquidity >= min_liquidity and volume_24h >= min_volume):\n                    \n                    exact_pair_url = f\"https://dexscreener.com/{chain_name}/{pair_address}\" if pair_address else None\n                    \n                    pair_data = {\n                        'price_usd': price,\n                        'liquidity_usd': liquidity,\n                        'volume_24h': volume_24h,\n                        'chain': chain_name,\n                        'transactions_24h': pair.get('txns', {}).get('h24', {}).get('buys', 0) + pair.get('txns', {}).get('h24', {}).get('sells', 0),\n                        'buy_percentage': (pair.get('txns', {}).get('h24', {}).get('buys', 0) / max(1, pair.get('txns', {}).get('h24', {}).get('buys', 0) + pair.get('txns', {}).get('h24', {}).get('sells', 0))) * 100,\n                        'dex_id': dex_name,\n                        'base_symbol': symbol,\n                        'quote_symbol': 'USDT',\n                        'token_address': pair.get('baseToken', {}).get('address', ''),\n                        'market_cap': float(pair.get('marketCap', 0)),\n                        'pair_address': pair_address,\n                        'dex_name': dex_name,\n                        'exact_pair_url': exact_pair_url,\n                        'chain_name': chain_name\n                    }\n                    \n                    logging.info(f\"üîÑ {symbol}: DexScreener SYMBOL search P=${price:.6f} L=${liquidity:,.0f} V=${volume_24h:,.0f}\")\n                    return pair_data\n            \n            logging.debug(f\"üîÑ {symbol}: DexScreener symbol search - no quality pairs found\")\n            return None\n            \n        except Exception as e:\n            logging.debug(f\"DexScreener symbol search –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}\")\n            return None\n    \n    def _parse_dexcheck_response(self, data: Dict, symbol: str, token_info: Dict) -> Optional[Dict]:\n        \"\"\"\n        üîß –ü–ê–†–°–ï–† DexCheck Pro API –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (address-based)\n        –û–±—Ä–æ–±–ª—è—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–∏—Ö –≤—ñ–¥ Pro endpoints\n        \"\"\"\n        try:\n            # DexCheck Pro –∑–∞–∑–≤–∏—á–∞–π –ø–æ–≤–µ—Ä—Ç–∞—î –ø—Ä—è–º—ñ –ø–æ–ª—è –∞–±–æ nested —Å—Ç—Ä—É–∫—Ç—É—Ä–∏\n            price = None\n            liquidity = 0\n            volume_24h = 0\n            \n            # üîß DEBUG: –ª–æ–≥—ñ—Ä—É—î–º–æ —â–æ —Å–∞–º–µ –ø–æ–≤–µ—Ä—Ç–∞—î API\n            logging.debug(f\"üíé {symbol} DexCheck Pro raw data: {str(data)[:500]}...\")\n            \n            # –í–∞—Ä—ñ–∞–Ω—Ç 1: –ü—Ä—è–º—ñ –ø–æ–ª—è –≤ –∫–æ—Ä–µ–Ω—ñ (–í–°–Ü –í–ê–†–Ü–ê–ù–¢–ò –ù–û–í–û–ì–û API!)\n            price_found = False\n            try:\n                if 'usd_price' in data:  # üî• –ù–û–í–ò–ô API –ì–û–õ–û–í–ù–ò–ô –§–û–†–ú–ê–¢!\n                    raw_price = data['usd_price']\n                    logging.warning(f\"üíé {symbol} raw usd_price: {raw_price} (type: {type(raw_price)})\")\n                    if raw_price is not None:\n                        price = float(raw_price)\n                        price_found = True\n                elif 'price' in data:\n                    raw_price = data['price'] \n                    logging.debug(f\"üíé {symbol} raw price: {raw_price} (type: {type(raw_price)})\")\n                    if raw_price is not None:\n                        price = float(raw_price)\n                        price_found = True\n                elif 'price_usd' in data:\n                    raw_price = data['price_usd']\n                    logging.debug(f\"üíé {symbol} raw price_usd: {raw_price} (type: {type(raw_price)})\")\n                    if raw_price is not None:\n                        price = float(raw_price)\n                        price_found = True\n                elif 'current_price' in data:\n                    raw_price = data['current_price']\n                    logging.debug(f\"üíé {symbol} raw current_price: {raw_price} (type: {type(raw_price)})\")\n                    if raw_price is not None:\n                        price = float(raw_price)\n                        price_found = True\n                elif 'last_price' in data:  # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç\n                    raw_price = data['last_price']\n                    logging.debug(f\"üíé {symbol} raw last_price: {raw_price} (type: {type(raw_price)})\")\n                    if raw_price is not None:\n                        price = float(raw_price)\n                        price_found = True\n            except (ValueError, TypeError) as e:\n                logging.warning(f\"üíé {symbol} price conversion failed: {e}\")\n                price = 0\n                price_found = False\n            \n            # –í–∞—Ä—ñ–∞–Ω—Ç 2: Nested –≤ token/pair –æ–±'—î–∫—Ç—ñ\n            if not price_found and 'token' in data:\n                try:\n                    token_data = data['token']\n                    raw_price = token_data.get('price', token_data.get('price_usd'))\n                    if raw_price is not None:\n                        price = float(raw_price)\n                        price_found = True\n                except (ValueError, TypeError):\n                    pass\n            \n            # –í–∞—Ä—ñ–∞–Ω—Ç 3: –ü–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É pairs/data\n            if not price_found and 'pairs' in data and data['pairs']:\n                try:\n                    pair_data = data['pairs'][0]\n                    raw_price = pair_data.get('price', pair_data.get('priceUsd'))\n                    if raw_price is not None:\n                        price = float(raw_price)\n                        price_found = True\n                except (ValueError, TypeError):\n                    pass\n            \n            # üîß –í–ò–ü–†–ê–í–õ–ï–ù–û: —Ü–µ–Ω–∞ 0 - —Ü–µ –ù–ï –ø–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞!\n            if not price_found:\n                logging.warning(f\"üíé {symbol} DexCheck –ø–∞—Ä—Å–µ—Ä: —Ü—ñ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ API –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ\")\n                logging.warning(f\"üö® DexCheck Pro parsing failed –¥–ª—è {symbol}\")\n                return None\n            \n            # üéØ –£–°–ü–Ü–•: —Ü—ñ–Ω–∞ –∑–Ω–∞–π–¥–µ–Ω–∞ (–Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤–æ–Ω–∞ 0)\n            if price == 0:\n                logging.debug(f\"üíé {symbol} DexCheck Pro SUCCESS! price=$0 (—Ç–æ–∫–µ–Ω –±–µ–∑ —Ç–æ—Ä–≥—ñ–≤)\")\n            else:\n                logging.info(f\"üíé {symbol}: DexCheck Pro SUCCESS! price=${price:.6f}\")\n            \n            # üîß –ë–ï–ó–ü–ï–ß–ù–ò–ô –ü–ê–†–°–ò–ù–ì –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –º–µ—Ç—Ä–∏–∫ (–∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ None)\n            try:\n                liquidity_raw = data.get('liquidity_usd') or data.get('liquidity') or data.get('total_liquidity') or 0\n                liquidity = float(liquidity_raw) if liquidity_raw is not None else 0\n            except (ValueError, TypeError):\n                liquidity = 0\n                \n            try:\n                volume_raw = data.get('_24h_volume') or data.get('volume_24h') or data.get('volume') or data.get('daily_volume') or 0\n                volume_24h = float(volume_raw) if volume_raw is not None else 0\n            except (ValueError, TypeError):\n                volume_24h = 0\n                \n            try:\n                mcap_raw = data.get('market_cap') or data.get('mcap') or 0\n                market_cap = float(mcap_raw) if mcap_raw is not None else 0\n            except (ValueError, TypeError):\n                market_cap = 0\n            \n            # üîó –ö–†–ò–¢–ò–ß–ù–û: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ—á–Ω—É DEX –ø–∞—Ä—É –¥–ª—è –ø–æ—Å–∏–ª–∞–Ω—å\n            pair_address = data.get('pair_address', data.get('pool_address', '')) or ''\n            dex_name = data.get('dex_name', data.get('dex', 'unknown')) or 'unknown'\n            chain_id = data.get('chain_id', token_info.get('chainId', 1)) or 1\n            \n            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–æ—á–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞—Ä—É\n            exact_pair_url = None\n            if pair_address and chain_id:\n                chain_name = {1: 'ethereum', 56: 'bsc', 137: 'polygon', 42161: 'arbitrum', 10: 'optimism'}.get(chain_id, 'ethereum')\n                exact_pair_url = f\"https://dexscreener.com/{chain_name}/{pair_address}\"\n            \n            return {\n                'price_usd': price,\n                'liquidity_usd': liquidity,\n                'volume_24h': volume_24h,\n                'chain': token_info['chain'],\n                'dex_id': 'dexcheck_pro',\n                'base_symbol': symbol,\n                'quote_symbol': 'USDT',\n                'token_address': token_info['address'],\n                'market_cap': market_cap,\n                'provider': 'dexcheck_pro',\n                # üîó –ù–û–í–Ü –ü–û–õ–Ø –¥–ª—è —Ç–æ—á–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å\n                'pair_address': pair_address,\n                'dex_name': dex_name,\n                'exact_pair_url': exact_pair_url,\n                'chain_id': chain_id\n            }\n            \n        except Exception as e:\n            logging.warning(f\"üî• CRITICAL PARSING ERROR –¥–ª—è {symbol}: {e}\")\n            logging.warning(f\"üî• Exception type: {type(e).__name__}\")\n            import traceback\n            logging.warning(f\"üî• TRACEBACK: {traceback.format_exc()}\")\n            return None\n    \n    def _parse_coingecko_response(self, data: Dict, symbol: str, coingecko_id: str) -> Optional[Dict]:\n        \"\"\"\n        ü™ô –ü–ê–†–°–ï–† CoinGecko API –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π \n        –û–±—Ä–æ–±–ª—è—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–∏—Ö –≤—ñ–¥ CoinGecko simple/price endpoint\n        \"\"\"\n        try:\n            # CoinGecko —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {\"bitcoin\": {\"usd\": 43500, \"usd_market_cap\": ..., \"usd_24h_vol\": ..., \"usd_24h_change\": ...}}\n            price_usd = data.get('usd', 0)\n            market_cap = data.get('usd_market_cap', 0)\n            volume_24h = data.get('usd_24h_vol', 0)\n            change_24h = data.get('usd_24h_change', 0)\n            \n            if price_usd <= 0:\n                logging.warning(f\"ü™ô {symbol} CoinGecko –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω—É–ª—å–æ–≤—É/–Ω–µ–≥–∞—Ç–∏–≤–Ω—É —Ü—ñ–Ω—É: ${price_usd}\")\n                return None\n            \n            # –§–æ—Ä–º—É—î–º–æ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö\n            parsed_data = {\n                'price_usd': float(price_usd),\n                'liquidity_usd': 0,  # CoinGecko –Ω–µ –Ω–∞–¥–∞—î –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å –≤ —Ü—å–æ–º—É endpoint\n                'volume_24h': float(volume_24h) if volume_24h else 0,\n                'change_24h': float(change_24h) if change_24h else 0,\n                'market_cap': float(market_cap) if market_cap else 0,\n                'base_symbol': symbol.upper(),\n                'quote_symbol': 'USD',\n                'provider': 'coingecko',\n                'dex_name': 'coingecko',\n                'chain': 'multiple',  # CoinGecko –∞–≥—Ä–µ–≥—É—î –ø–æ –≤—Å—ñ—Ö –º–µ—Ä–µ–∂–∞—Ö\n                'coingecko_id': coingecko_id,\n                'exact_pair_url': f\"https://www.coingecko.com/en/coins/{coingecko_id}\",\n                'dex_id': 'coingecko',\n                'chain_id': 'coingecko',\n                'transactions_24h': 0,  # –ù–µ –Ω–∞–¥–∞—î—Ç—å—Å—è\n                'buy_percentage': 50,   # –ù–µ –Ω–∞–¥–∞—î—Ç—å—Å—è, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è\n                'token_address': '',    # –ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è CoinGecko\n                'pair_address': '',     # –ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è CoinGecko\n                'chain_name': 'multiple'\n            }\n            \n            logging.info(f\"ü™ô {symbol}: CoinGecko parsed successfully P=${price_usd:.6f} MC=${market_cap:,.0f} V=${volume_24h:,.0f}\")\n            return parsed_data\n            \n        except Exception as e:\n            logging.warning(f\"üö® CoinGecko parsing error for {symbol}: {e}\")\n            import traceback\n            logging.warning(f\"üö® TRACEBACK: {traceback.format_exc()}\")\n            return None\n    \n    def _apply_rate_limit(self, provider: str, min_interval: float):\n        \"\"\"\n        ‚è±Ô∏è Rate limiting –∑ exponential backoff\n        \"\"\"\n        import time\n        current_time = time.time()\n        last_time = self.last_request_time.get(provider, 0)\n        \n        time_since_last = current_time - last_time\n        if time_since_last < min_interval:\n            sleep_time = min_interval - time_since_last\n            time.sleep(sleep_time)\n        \n        self.last_request_time[provider] = int(time.time())\n    \n    def _get_token_address(self, symbol: str, chain: str) -> Optional[str]:\n        \"\"\"\n        –û—Ç—Ä–∏–º—É—î contract address —Ç–æ–∫–µ–Ω–∞ –¥–ª—è DexCheck API\n        \"\"\"\n        # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à\n        cache_key = f\"{symbol}_{chain}\"\n        if cache_key in self.token_cache:\n            return self.token_cache[cache_key].get('address')\n        \n        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–±—É–¥–æ–≤–∞–Ω—ñ –≤—ñ–¥–æ–º—ñ –∞–¥—Ä–µ—Å–∏\n        known_addresses = self._get_known_token_addresses()\n        if symbol in known_addresses:\n            token_info = known_addresses[symbol]\n            if token_info.get('chain') == chain:\n                return token_info.get('address')\n        \n        # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ - –ª–æ–≥—É—î–º–æ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—ñ–∑–Ω—ñ—à–µ\n        logging.debug(f\"üí° –î–æ–¥–∞—Ç–∏ {symbol} ({chain}) –≤ –±–∞–∑—É contract addresses\")\n        return None\n    \n    def _get_known_token_addresses(self) -> Dict[str, Dict]:\n        \"\"\"\n        –ë–∞–∑–∞ contract addresses –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –º–µ—Ä–µ–∂\n        \"\"\"\n        return {\n            # ETHEREUM —Ç–æ–∫–µ–Ω–∏\n            'ETH': {'address': '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 'chain': 'ethereum'},  # WETH\n            'BTC': {'address': '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599', 'chain': 'ethereum'},  # WBTC  \n            'UNI': {'address': '0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', 'chain': 'ethereum'},\n            'LINK': {'address': '0x514910771AF9Ca656af840dff83E8264EcF986CA', 'chain': 'ethereum'},\n            'AAVE': {'address': '0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9', 'chain': 'ethereum'},\n            'USDC': {'address': '0xA0b86a33E6441c1e2Dd8a8aba81FfDDab3bfe4d0', 'chain': 'ethereum'},\n            \n            # BSC —Ç–æ–∫–µ–Ω–∏  \n            'BNB': {'address': '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 'chain': 'bsc'},  # WBNB\n            'CAKE': {'address': '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82', 'chain': 'bsc'},\n            \n            # SOLANA —Ç–æ–∫–µ–Ω–∏\n            'SOL': {'address': 'So11111111111111111111111111111111111111112', 'chain': 'solana'},  # Wrapped SOL\n        }\n    \n    def get_token_price(self, contract_address: str) -> Optional[Dict]:\n        \"\"\"DEPRECATED - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ resolve_best_pair\"\"\"\n        return None\n    \n    def search_token_by_symbol(self, symbol: str) -> Optional[Dict]:\n        \"\"\"\n        DEPRECATED - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ resolve_best_pair() –¥–ª—è DexCheck API\n        –¶–µ–π –º–µ—Ç–æ–¥ –∑–∞–ª–∏—à–µ–Ω–∏–π –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∞–ª–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è\n        \"\"\"\n        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –Ω–æ–≤–∏–π –º–µ—Ç–æ–¥\n        return self.resolve_best_pair(symbol)\n    \n    def get_advanced_token_metrics(self, symbol: str) -> Optional[Dict]:\n        \"\"\"\n        üî¨ –†–û–ó–®–ò–†–ï–ù–ò–ô –ê–ù–ê–õ–Ü–ó –¢–û–ö–ï–ù–ê —è–∫ —É —Ä–æ—Å—ñ–π—Å—å–∫–æ—ó —Å–∏—Å—Ç–µ–º–∏!\n        –ü–æ–≤–µ—Ä—Ç–∞—î: —Ü—ñ–Ω—É, FDV, market cap, —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó, –ø–æ–∫—É–ø—Ü—ñ–≤/–ø—Ä–æ–¥–∞–≤—Ü—ñ–≤, –æ–±'—î–º–∏\n        \"\"\"\n        try:\n            clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '').upper()\n            pair_data = self.resolve_best_pair(clean_symbol)\n            \n            if not pair_data:\n                return None\n                \n            # üîß –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: resolve_best_pair –ø–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω—ñ–∂ DexScreener API\n            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏ –∑ resolve_best_pair\n            price_usd = pair_data.get('price_usd', 0)  # –ù–ï 'priceUsd'!\n            liquidity_usd = pair_data.get('liquidity_usd', 0)  # –ù–ï 'liquidity.usd'!\n            volume_24h = pair_data.get('volume_24h', 0)\n            \n            logging.debug(f\"üîß DEBUG {clean_symbol}: resolve_best_pair –ø–æ–≤–µ—Ä–Ω—É–≤: price={price_usd}, liquidity={liquidity_usd}\")\n                \n            base_metrics = {\n                'symbol': clean_symbol,\n                'price_usd': price_usd,\n                'liquidity': liquidity_usd,\n                'volume_24h': volume_24h,\n                'chain': pair_data.get('chain', 'unknown'),  # –ù–ï 'chainId'!\n                'dex': pair_data.get('dex_id', 'unknown')   # –ù–ï 'dexId'!  \n            }\n            \n            # üî¨ –†–û–ó–®–ò–†–ï–ù–Ü –ú–ï–¢–†–ò–ö–ò —è–∫ —É —Ä—É—Å—Å–∫–∏—Ö - –Ü–ú–Ü–¢–£–Ñ–ú–û —Ä–æ—Å—ñ–π—Å—å–∫—É —Å–∏—Å—Ç–µ–º—É\n            # üö® –ü–û–ö–ò —â–æ resolve_best_pair –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ –¥–∞–Ω—ñ –∑ DexScreener API\n            # –î–æ–¥–∞—î–º–æ –±–∞–∑–æ–≤–∏–π —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∞–Ω–∏—Ö\n            advanced_metrics = {}\n            \n            # 1. FDV —ñ Market Cap - –ø–æ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –≤ resolve_best_pair, –¥–æ–¥–∞–º–æ –∑–∞–≥–ª—É—à–∫–∏\n            if liquidity_usd > 100000:  # –î–ª—è –≤–µ–ª–∏–∫–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –æ—Ü—ñ–Ω—é—î–º–æ\n                estimated_market_cap = liquidity_usd * 10  # –≥—Ä—É–±–æ –æ—Ü—ñ–Ω—é—î–º–æ\n                advanced_metrics['market_cap'] = estimated_market_cap\n                advanced_metrics['market_cap_formatted'] = f\"${estimated_market_cap:,.0f}*\" # * = –æ—Ü–µ–Ω–∫–∞\n                \n            from config import MIN_POOLED_LIQUIDITY_USD\n            if volume_24h > MIN_POOLED_LIQUIDITY_USD:   # üíµ –û–ë'–Ñ–ú 24–ì: –∑ config\n                estimated_fdv = volume_24h * 5  # –≥—Ä—É–±–æ –æ—Ü—ñ–Ω—é—î–º–æ FDV\n                advanced_metrics['fdv'] = estimated_fdv \n                advanced_metrics['fdv_formatted'] = f\"${estimated_fdv:,.0f}*\" # * = –æ—Ü–µ–Ω–∫–∞\n                \n            # 2. –Ü–º—ñ—Ç–∞—Ü—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ–±'—î–º—É (–ø–æ–∫–∏ —Å–ø—Ä–∞–≤–∂–Ω—ñ –¥–∞–Ω—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ)\n            if volume_24h > 10000:\n                # –Ü–º—ñ—Ç—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ–±'—î–º—É\n                estimated_txns = int(volume_24h / 100)  # –≥—Ä—É–±–æ 100$ –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é\n                estimated_buys = int(estimated_txns * 0.6)  # 60% –ø–æ–∫—É–ø–∫–∏ (—ñ–º—ñ—Ç–∞—Ü—ñ—è)\n                estimated_sells = estimated_txns - estimated_buys\n                \n                advanced_metrics['txns_24h'] = {\n                    'buys': estimated_buys,\n                    'sells': estimated_sells,\n                    'total': estimated_txns,\n                    'buy_sell_ratio': estimated_buys / estimated_sells if estimated_sells > 0 else float('inf'),\n                    'buy_percentage': 60.0  # —Ñ—ñ–∫—Å–æ–≤–∞–Ω—ñ 60% –¥–ª—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó\n                }\n                \n            # 3. –û–±'—î–º–∏ - –¥–æ–¥–∞—î–º–æ —Ä–µ–∞–ª—å–Ω–∏–π 24h –æ–±'—î–º\n            if volume_24h > 0:\n                advanced_metrics['volume_24h'] = volume_24h\n                # –Ü–º—ñ—Ç—É—î–º–æ –º–µ–Ω—à—ñ –ø–µ—Ä—ñ–æ–¥–∏\n                advanced_metrics['volume_1h'] = volume_24h / 24  # –≥—Ä—É–±–æ\n                advanced_metrics['volume_6h'] = volume_24h / 4    # –≥—Ä—É–±–æ\n            \n            # 4. –û–±'—î–º–∏ —Ç–æ—Ä–≥—ñ–≤–ª—ñ –∑–∞ –ø–µ—Ä—ñ–æ–¥–∏ (–∑ –Ω–∞–¥—ñ–π–Ω–∏–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º)\n            volume_data = pair_data.get('volume', {})\n            if volume_data and isinstance(volume_data, dict):\n                for period in ['5m', '1h', '6h', '24h']:\n                    volume = volume_data.get(period)\n                    if volume:\n                        try:\n                            volume_float = float(volume)\n                            if volume_float > 0:\n                                advanced_metrics[f'volume_{period}'] = volume_float\n                        except (ValueError, TypeError):\n                            continue\n            \n            # 5. –ó–º—ñ–Ω–∏ —Ü—ñ–Ω –∑–∞ –ø–µ—Ä—ñ–æ–¥–∏  \n            price_change_data = pair_data.get('priceChange', {})\n            if price_change_data:\n                for period in ['5m', '1h', '6h', '24h']:\n                    price_change = price_change_data.get(period)\n                    if price_change is not None:\n                        advanced_metrics[f'price_change_{period}'] = float(price_change)\n                        \n            # –û–±'—î–¥–Ω—É—î–º–æ –±–∞–∑–æ–≤—ñ —Ç–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏\n            result = {**base_metrics, **advanced_metrics}\n            \n            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥–µ–±–∞–≥—É (—Ç—ñ–ª—å–∫–∏ –≤–∞–∂–ª–∏–≤—ñ –º–µ—Ç—Ä–∏–∫–∏)\n            log_info = f\"üìä {clean_symbol}: ${base_metrics['price_usd']:.6f}\"\n            if 'market_cap' in advanced_metrics:\n                log_info += f\" | MC: {advanced_metrics['market_cap_formatted']}\"\n            if 'fdv' in advanced_metrics:  \n                log_info += f\" | FDV: {advanced_metrics['fdv_formatted']}\"\n            if 'txns_24h' in advanced_metrics:\n                txns_24h = advanced_metrics['txns_24h']\n                log_info += f\" | 24h: {txns_24h['buys']}B/{txns_24h['sells']}S ({txns_24h['buy_percentage']:.0f}% –ø–æ–∫—É–ø–∫–∏)\"\n                \n            logging.info(log_info)\n            return result\n            \n        except Exception as e:\n            logging.error(f\"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è {symbol}: {e}\")\n            return None\n\n    def get_dex_price(self, symbol: str, for_convergence: bool = False) -> Optional[float]:\n        \"\"\"\n        –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è DEX —Ü—ñ–Ω–∏ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ DexCheck API\n        –ü–æ—Ç—É–∂–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É!\n        \"\"\"\n        try:\n            # –û—á–∏—â–∞—î–º–æ —Å–∏–º–≤–æ–ª\n            clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '').upper()\n            \n            # 1. –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ resolve_best_pair\n            pair_data = self.resolve_best_pair(symbol, for_convergence)\n            if not pair_data:\n                logging.warning(f\"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –¥–ª—è {clean_symbol}\")\n                return None\n            \n            # 2. –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω—É\n            price = pair_data.get('price_usd', 0)\n            \n            # 4. –ñ–û–†–°–¢–ö–Ü –ü–ï–†–ï–í–Ü–†–ö–ò (—è–∫ —É –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏—Ö –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –±–æ—Ç—ñ–≤)\n            if price <= 0 or price < 0.000001:  # –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞\n                logging.warning(f\"‚ùå {clean_symbol}: –ù–µ–≤–∞–ª—ñ–¥–Ω–∞ DexScreener —Ü—ñ–Ω–∞ ${price}\")\n                return None\n                \n            # 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å —ñ –æ–±—Å—è–≥–∏\n            liquidity = pair_data.get('liquidity_usd', 0)\n            volume_24h = pair_data.get('volume_24h', 0)\n            # üéØ –§–Ü–õ–¨–¢–†–ò –∑ config.py\n            from config import MIN_POOLED_LIQUIDITY_USD, MIN_24H_VOLUME_USD\n            min_liquidity = 1000 if for_convergence else MIN_POOLED_LIQUIDITY_USD  # –ö–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è: $1k, —Å—Ç–∞–Ω–¥–∞—Ä—Ç: –∑ config\n            min_volume = 100 if for_convergence else MIN_24H_VOLUME_USD      # –ö–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è: $100, —Å—Ç–∞–Ω–¥–∞—Ä—Ç: –∑ config\n            \n            if liquidity < min_liquidity:\n                logging.warning(f\"‚ùå {clean_symbol}: –ú–∞–ª–∞ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å ${liquidity:,.0f} < ${min_liquidity:,.0f}\")\n                return None\n            \n            if volume_24h < min_volume:\n                logging.warning(f\"‚ùå {clean_symbol}: –ú–∞–ª–∏–π –æ–±—Å—è–≥ ${volume_24h:,.0f} < ${min_volume:,.0f}\")\n                return None\n            \n            # ‚úÖ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ü—ñ–Ω—É\n            chain = pair_data.get('chain', 'dexcheck')\n            dex = pair_data.get('dex_id', 'api')\n            logging.info(f\"‚úÖ {clean_symbol}: ${price:.6f} | DexCheck {chain} | L:${liquidity:,.0f} | V:${volume_24h:,.0f}\")\n            return price\n            \n        except Exception as e:\n            logging.error(f\"–ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –æ—Ç—Ä–∏–º–∞–Ω–Ω—è DexCheck —Ü—ñ–Ω–∏ –¥–ª—è {symbol}: {e}\")\n            return None\n    \n    def get_arbitrage_opportunity(self, gate_symbol: str, xt_price: float, min_spread: float = 0.5) -> Optional[Dict]:\n        \"\"\"\n        –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—É –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –Ø–ö –£ –î–†–£–ì–ê –ó BYBIT!\n        –ü–æ–≤–µ—Ä—Ç–∞—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–ø—Ä–µ–¥ –º—ñ–∂ Gate.io —Ç–∞ DexScreener\n        \"\"\"\n        try:\n            dex_price = self.get_dex_price(gate_symbol)\n            if not dex_price:\n                return None\n                \n            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–ø—Ä–µ–¥—É –¢–û–ß–ù–û —è–∫ —É –ø—Ä–∏–∫–ª–∞–¥—ñ –¥—Ä—É–≥–∞\n            if xt_price > dex_price:\n                # Gate –¥–æ—Ä–æ–∂—á–µ -> SHORT –Ω–∞ Gate, –∫—É–ø–∏—Ç–∏ –Ω–∞ DEX\n                spread_pct = ((xt_price - dex_price) / dex_price) * 100\n                direction = \"GATE SHORT\"\n                entry_side = \"SHORT\"\n            else:\n                # DEX –¥–æ—Ä–æ–∂—á–µ -> LONG –Ω–∞ Gate, –ø—Ä–æ–¥–∞—Ç–∏ –Ω–∞ DEX  \n                spread_pct = ((dex_price - xt_price) / xt_price) * 100\n                direction = \"GATE LONG\"\n                entry_side = \"LONG\"\n                \n            clean_symbol = gate_symbol.replace('/USDT:USDT', '')\n            \n            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Å–ø—Ä–µ–¥\n            if abs(spread_pct) < min_spread:\n                return None  # –°–ø—Ä–µ–¥ –∑–∞–º–∞–ª–∏–π\n            \n            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–∫–µ–Ω\n            token_info = self.token_addresses.get(clean_symbol.upper(), {})\n            contract_address = token_info.get('address', '')\n            \n            opportunity = {\n                'symbol': clean_symbol,\n                'direction': direction,\n                'entry_side': entry_side,\n                'xt_price': xt_price,\n                'dex_price': dex_price,\n                'spread_pct': spread_pct,\n                'spread_abs': abs(spread_pct),\n                'token_address': contract_address,\n                'chain': token_info.get('chain', 'unknown'),\n                'token_name': token_info.get('name', clean_symbol),\n                'recommendation': f\"{'üî• STRONG ARBITRAGE!' if abs(spread_pct) >= 2.0 else '‚ö° ARBITRAGE SIGNAL'}\"\n            }\n            \n            return opportunity\n            \n        except Exception as e:\n            logging.error(f\"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –¥–ª—è {gate_symbol}: {e}\")\n            return None\n    \n    def get_dex_link(self, symbol: str) -> Optional[str]:\n        \"\"\"\n        –ü–†–Ø–ú–ï –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ö–û–ù–ö–†–ï–¢–ù–£ —Ç–æ—Ä–≥–æ–≤—É –ø–∞—Ä—É –∑ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—é\n        –ù–ï –Ω–∞ —Ç–æ–∫–µ–Ω, –∞ –Ω–∞ –ø–∞—Ä—É: https://dexscreener.com/solana/ABC123pairAddress\n        –ó FALLBACK –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ!\n        \"\"\"\n        try:\n            clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '').upper()\n            \n            # 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ—ó –ü–ê–†–ò\n            cached_info = self.token_addresses.get(clean_symbol, {})\n            if cached_info.get('pair_address') and cached_info.get('chain'):\n                cached_link = f\"https://dexscreener.com/{cached_info['chain']}/{cached_info['pair_address']}\"\n                logging.debug(f\"üîó {clean_symbol}: –ö–µ—à–æ–≤–∞–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞—Ä—É\")\n                return cached_link\n            \n            # 2. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ù–ê–ô–ö–†–ê–©–£ –ø–∞—Ä—É —á–µ—Ä–µ–∑ resolve_best_pair  \n            logging.info(f\"üîó {clean_symbol}: –®—É–∫–∞—é –Ω–∞–π–∫—Ä–∞—â—É —Ç–æ—Ä–≥–æ–≤—É –ø–∞—Ä—É...\")\n            best_pair = self.resolve_best_pair(clean_symbol)\n            if not best_pair:\n                # –†–û–ó–£–ú–ù–ò–ô FALLBACK: —Å–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—É –ø–∞—Ä—É\n                smart_link = self._get_smart_fallback_link(clean_symbol)\n                logging.info(f\"üîó SMART FALLBACK: {clean_symbol} -> {smart_link} (API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π)\")\n                return smart_link\n            \n            # 3. –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ö–û–ù–ö–†–ï–¢–ù–û–á –ø–∞—Ä–∏\n            pair_address = best_pair.get('pair_address', '')\n            chain = best_pair.get('chain', '')\n            liquidity = best_pair.get('liquidity_usd', 0)\n            \n            if not pair_address or not chain:\n                # –†–û–ó–£–ú–ù–ò–ô FALLBACK: —Å–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—É –ø–∞—Ä—É\n                smart_link = self._get_smart_fallback_link(clean_symbol)\n                logging.info(f\"üîó SMART FALLBACK: {clean_symbol} -> {smart_link}\")\n                return smart_link\n            \n            # 4. –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û –ø–∞—Ä—É –≤ –∫–µ—à—ñ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ\n            self.token_addresses[clean_symbol] = {\n                'pair_address': pair_address,\n                'chain': chain,\n                'liquidity_usd': liquidity,\n                'cached_link': True,\n                'price_usd': best_pair.get('price_usd', 0)\n            }\n            \n            # 5. –°—Ç–≤–æ—Ä—é—î–º–æ –ö–û–†–û–¢–ö–ï –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤—É –ø–∞—Ä—É\n            # –°–∫–æ—Ä–æ—á—É—î–º–æ –∞–¥—Ä–µ—Å—É –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—ñ: –±–µ—Ä–µ–º–æ –ø–µ—Ä—à—ñ 8 + –æ—Å—Ç–∞–Ω–Ω—ñ 6 —Å–∏–º–≤–æ–ª—ñ–≤\n            short_pair = f\"{pair_address[:8]}...{pair_address[-6:]}\" if len(pair_address) > 20 else pair_address\n            direct_link = f\"https://dexscreener.com/{chain}/{pair_address}\"\n            logging.info(f\"üîó –ó–ë–ï–†–ï–ñ–ï–ù–û: {clean_symbol} -> dex.sc/{chain}/{short_pair} (L:${liquidity:,.0f})\")\n            return direct_link\n            \n        except Exception as e:\n            # –†–û–ó–£–ú–ù–ò–ô FALLBACK: –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö —Å–ø—Ä–æ–±—É—î–º–æ –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—É –ø–∞—Ä—É\n            clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '').upper()\n            smart_link = self._get_smart_fallback_link(clean_symbol)\n            logging.info(f\"üîó SMART FALLBACK ERROR: {symbol} -> {smart_link}: {e}\")\n            return smart_link\n\n    def _get_smart_fallback_link(self, clean_symbol: str) -> str:\n        \"\"\"\n        üîß –ê–†–•–Ü–¢–ï–ö–¢–û–† –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ù–ê–î–Ü–ô–ù–ê —Å–∏—Å—Ç–µ–º–∞ fallback –ø–æ—Å–∏–ª–∞–Ω—å \n        –ë–ï–ó –ó–ê–õ–ï–ñ–ù–û–°–¢–Ü –≤—ñ–¥ API rate limits - –∑–∞–≤–∂–¥–∏ –ø—Ä–∞—Ü—é—î!\n        \"\"\"\n        try:\n            # 1. üéØ –ù–ê–ô–í–ê–ñ–õ–ò–í–Ü–®–ï: –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –ö–û–ù–ö–†–ï–¢–ù–£ –ù–ê–ô–ö–†–ê–©–£ –ü–ê–†–£!\n            logging.info(f\"üîó {clean_symbol}: –®—É–∫–∞—é –Ω–∞–π–∫—Ä–∞—â—É —Ç–æ—Ä–≥–æ–≤—É –ø–∞—Ä—É...\")\n            best_pair = self.resolve_best_pair(clean_symbol, for_convergence=False)\n            if best_pair and best_pair.get('exact_pair_url'):\n                exact_url = best_pair['exact_pair_url']\n                dex_name = best_pair.get('dex_name', 'DEX')\n                chain = best_pair.get('chain_name', best_pair.get('chain', 'unknown'))\n                logging.info(f\"üîó –ó–ù–ê–ô–î–ï–ù–û –ö–û–ù–ö–†–ï–¢–ù–£ –ü–ê–†–£: {clean_symbol} -> {dex_name} –Ω–∞ {chain}\")\n                return exact_url\n            \n            # 2. FALLBACK: —è–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –ø–∞—Ä—É - –∑–∞–≥–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫\n            chain_specific_links = {\n                # ‚≠ê TOP ETHEREUM TOKENS (–∑–∞–≤–∂–¥–∏ –ø—Ä–∞—Ü—é—é—Ç—å)\n                'BTC': 'https://dexscreener.com/ethereum/uniswap?q=WBTC',\n                'ETH': 'https://dexscreener.com/ethereum?q=ETH',\n                'USDC': 'https://dexscreener.com/ethereum?q=USDC',\n                'USDT': 'https://dexscreener.com/ethereum?q=USDT', \n                'LINK': 'https://dexscreener.com/ethereum?q=LINK',\n                'UNI': 'https://dexscreener.com/ethereum?q=UNI',\n                'CRV': 'https://dexscreener.com/ethereum?q=CRV',\n                'AAVE': 'https://dexscreener.com/ethereum?q=AAVE',\n                'COMP': 'https://dexscreener.com/ethereum?q=COMP',\n                'SNX': 'https://dexscreener.com/ethereum?q=SNX',\n                'ENJ': 'https://dexscreener.com/ethereum?q=ENJ',\n                'MANA': 'https://dexscreener.com/ethereum?q=MANA',\n                '1INCH': 'https://dexscreener.com/ethereum?q=1INCH',\n                'SUSHI': 'https://dexscreener.com/ethereum?q=SUSHI',\n                'YFI': 'https://dexscreener.com/ethereum?q=YFI',\n                'BAT': 'https://dexscreener.com/ethereum?q=BAT',\n                'LRC': 'https://dexscreener.com/ethereum?q=LRC',\n                'STORJ': 'https://dexscreener.com/ethereum?q=STORJ',\n                \n                # ‚≠ê POPULAR MEMECOINS \n                'SHIB': 'https://dexscreener.com/ethereum?q=SHIB',\n                'PEPE': 'https://dexscreener.com/ethereum?q=PEPE',\n                'DOGE': 'https://dexscreener.com/bsc?q=DOGE',\n                'FLOKI': 'https://dexscreener.com/ethereum?q=FLOKI',\n                'APE': 'https://dexscreener.com/ethereum?q=APE',\n                'WIF': 'https://dexscreener.com/solana?q=WIF',\n                'BONK': 'https://dexscreener.com/solana?q=BONK',\n                \n                # ‚≠ê BSC TOKENS\n                'BNB': 'https://dexscreener.com/bsc?q=BNB',\n                'CAKE': 'https://dexscreener.com/bsc?q=CAKE',\n                'BUSD': 'https://dexscreener.com/bsc?q=BUSD',\n                \n                # ‚≠ê SOLANA TOKENS\n                'SOL': 'https://dexscreener.com/solana?q=SOL',\n                'RAY': 'https://dexscreener.com/solana?q=RAY',\n                'SRM': 'https://dexscreener.com/solana?q=SRM',\n                \n                # ‚≠ê RECENT TRENDING TOKENS + –¢–û–ö–ï–ù–ò –ó –°–ò–°–¢–ï–ú–ò\n                'TRUMP': 'https://dexscreener.com/solana?q=TRUMP',\n                'MELANIA': 'https://dexscreener.com/solana?q=MELANIA', \n                'PENGU': 'https://dexscreener.com/solana?q=PENGU',\n                'WLD': 'https://dexscreener.com/ethereum?q=WLD',\n                'TAO': 'https://dexscreener.com/ethereum?q=TAO',\n                'ARKM': 'https://dexscreener.com/ethereum?q=ARKM',\n                'PENDLE': 'https://dexscreener.com/ethereum?q=PENDLE',\n                \n                # ‚≠ê –ü–û–ü–£–õ–Ø–†–ù–Ü –¢–û–ö–ï–ù–ò –ó –õ–û–ì–Ü–í –°–ò–°–¢–ï–ú–ò\n                'TRX': 'https://dexscreener.com/bsc?q=TRX',\n                'C98': 'https://dexscreener.com/bsc?q=C98',\n                'SOL': 'https://dexscreener.com/solana?q=SOL',\n                'XRP': 'https://dexscreener.com/ethereum?q=XRP',\n                'ADA': 'https://dexscreener.com/ethereum?q=ADA',\n                'DOT': 'https://dexscreener.com/ethereum?q=DOT',\n                'LTC': 'https://dexscreener.com/ethereum?q=LTC',\n                'ATOM': 'https://dexscreener.com/ethereum?q=ATOM',\n                'OP': 'https://dexscreener.com/optimism?q=OP',\n                'ARB': 'https://dexscreener.com/arbitrum?q=ARB',\n                'MATIC': 'https://dexscreener.com/polygon?q=MATIC',\n                'AVAX': 'https://dexscreener.com/avalanche?q=AVAX',\n                'FTM': 'https://dexscreener.com/fantom?q=FTM',\n                \n                # ‚≠ê –ü–û–ü–£–õ–Ø–†–ù–Ü ALTCOINS\n                'ALICE': 'https://dexscreener.com/ethereum?q=ALICE',\n                'YFI': 'https://dexscreener.com/ethereum?q=YFI',\n                'CELO': 'https://dexscreener.com/ethereum?q=CELO',\n                'MANTA': 'https://dexscreener.com/ethereum?q=MANTA',\n                'ATA': 'https://dexscreener.com/ethereum?q=ATA',\n                'TRU': 'https://dexscreener.com/ethereum?q=TRU',\n                'REZ': 'https://dexscreener.com/ethereum?q=REZ',\n                'RSR': 'https://dexscreener.com/ethereum?q=RSR',\n                'ANKR': 'https://dexscreener.com/ethereum?q=ANKR',\n                'DODO': 'https://dexscreener.com/ethereum?q=DODO',\n                'DUSK': 'https://dexscreener.com/ethereum?q=DUSK'\n            }\n            \n            # 2. –Ø–∫—â–æ –∑–Ω–∞—Ö–æ–¥–∏–º–æ –ø—Ä—è–º–∏–π link - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ!\n            if clean_symbol in chain_specific_links:\n                direct_link = chain_specific_links[clean_symbol]\n                logging.info(f\"üîó DIRECT FALLBACK: {clean_symbol} -> {direct_link}\")\n                return direct_link\n            \n            # 3. –†–û–ó–£–ú–ù–ò–ô FALLBACK: –≤–∏–±–∏—Ä–∞—î–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π blockchain –∑–∞ –Ω–∞–∑–≤–æ—é —Ç–æ–∫–µ–Ω–∞\n            smart_chain = 'ethereum'  # Default to most popular\n            \n            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–π–±—ñ–ª—å—à –π–º–æ–≤—ñ—Ä–Ω–∏–π blockchain\n            if any(indicator in clean_symbol.lower() for indicator in ['sol', 'ray', 'srm', 'bonk', 'wif']):\n                smart_chain = 'solana'\n            elif any(indicator in clean_symbol.lower() for indicator in ['bnb', 'cake', 'busd', 'bsc']):\n                smart_chain = 'bsc'  \n            elif any(indicator in clean_symbol.lower() for indicator in ['matic', 'polygon', 'pol']):\n                smart_chain = 'polygon'\n            elif any(indicator in clean_symbol.lower() for indicator in ['arb', 'arbitrum']):\n                smart_chain = 'arbitrum'\n                \n            # 4. –ó–ê–í–ñ–î–ò –ü–†–ê–¶–Æ–Æ–ß–ò–ô FALLBACK: –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ–∫–µ–Ω \n            fallback_link = f\"https://dexscreener.com/{smart_chain}/{clean_symbol}\"\n            logging.info(f\"üîó SMART FALLBACK: {clean_symbol} -> {smart_chain} –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è\")\n            return fallback_link\n            \n        except Exception as e:\n            # 5. –ê–ë–°–û–õ–Æ–¢–ù–ò–ô FALLBACK: ethereum –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è\n            final_fallback = f\"https://dexscreener.com/ethereum/{clean_symbol}\"\n            logging.warning(f\"üîó FINAL FALLBACK: {clean_symbol} -> ethereum –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (error: {e})\")\n            return final_fallback\n\n    def format_arbitrage_signal(self, opportunity: Dict) -> str:\n        \"\"\"\n        –§–æ—Ä–º–∞—Ç—É—î –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π —Å–∏–≥–Ω–∞–ª –Ø–ö –£ –î–†–£–ì–ê –∑ –¥–µ—Ç–∞–ª—è–º–∏\n        \"\"\"\n        try:\n            # –ü–†–Ø–ú–ï –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤—É –ø–∞—Ä—É (–ù–ï –ø–æ—à—É–∫!)\n            symbol = opportunity.get('symbol', 'Unknown')\n            dex_link = self.get_dex_link(symbol)\n            logging.info(f\"üîó –°–ò–ì–ù–ê–õ {symbol}: {'‚úÖ –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è' if dex_link else '‚ùå –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ'}\")\n            \n            signal = f\"\"\"\nüéØ **ARBITRAGE OPPORTUNITY** üéØ\n\n**{opportunity['symbol']}** | XT.com vs DEX\n{opportunity['recommendation']}\n\n**Direction:** {opportunity['direction']}\n**Entry:** {opportunity['entry_side']} on XT.com\n\n**Prices:**\nüìä DexScreener: ${opportunity['dex_price']:.6f}\n‚ö° XT.com: ${opportunity['xt_price']:.6f}\n\n**Spread:** {opportunity['spread_pct']:.2f}%\n**Chain:** {opportunity['chain']}\n\n\"üìä DexScreener –∞–Ω–∞–ª—ñ–∑\"\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nü§ñ XT.com Arbitrage Scanner\n\"\"\"\n            return signal\n            \n        except Exception as e:\n            logging.error(f\"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É: {e}\")\n            return f\"Arbitrage: {opportunity.get('symbol', 'Unknown')} - {opportunity.get('spread_pct', 0):.2f}%\"\n\n# –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä\ndex_client = DexCheckClient()\n\ndef get_dex_price_simple(symbol: str, for_convergence: bool = False) -> Optional[float]:\n    \"\"\"–ü—Ä–æ—Å—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è DexScreener —Ü—ñ–Ω–∏ (–∑–∞–º—ñ—Å—Ç—å —Å—Ç–∞—Ä–æ—ó DEX —Ñ—É–Ω–∫—Ü—ñ—ó)\"\"\"\n    return dex_client.get_dex_price(symbol, for_convergence=for_convergence)\n\ndef get_advanced_token_analysis(symbol: str) -> Optional[Dict]:\n    \"\"\"\n    üî¨ –†–û–ó–®–ò–†–ï–ù–ò–ô –ê–ù–ê–õ–Ü–ó –¢–û–ö–ï–ù–ê —è–∫ —É —Ä–æ—Å—ñ–π—Å—å–∫–æ—ó —Å–∏—Å—Ç–µ–º–∏!\n    –õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å, FDV, —Ä–∏–Ω–∫–æ–≤–∞ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è, —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó, –ø–æ–∫—É–ø—Ü—ñ/–ø—Ä–æ–¥–∞–≤—Ü—ñ\n    \"\"\"\n    return dex_client.get_advanced_token_metrics(symbol)\n\ndef get_dex_token_info(symbol: str) -> Optional[Dict]:\n    \"\"\"\n    –ü–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ù–ê–ô–ö–†–ê–©–£ –ø–∞—Ä—É —Ç–æ–∫–µ–Ω–∞ –∑ DexScreener\n    \"\"\"\n    try:\n        pair_data = dex_client.resolve_best_pair(symbol)\n        if not pair_data:\n            return None\n        \n        return {\n            'price_usd': pair_data['price_usd'],\n            'pair_address': pair_data['pair_address'],  # –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è\n            'chain': pair_data['chain'],\n            'dex_id': pair_data['dex_id'],\n            'liquidity': pair_data['liquidity_usd'],\n            'volume_24h': pair_data['volume_24h'],\n            'base_symbol': pair_data['base_symbol'],\n            'quote_symbol': pair_data['quote_symbol']\n        }\n        \n    except Exception as e:\n        logging.error(f\"get_dex_token_info –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}\")\n        return None\n\ndef get_arbitrage_opportunity(gate_symbol: str, xt_price: float) -> Optional[Dict]:\n    \"\"\"–§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π —è–∫ —É –¥—Ä—É–≥–∞\"\"\"\n    return dex_client.get_arbitrage_opportunity(gate_symbol, xt_price)","size_bytes":67085},"main.py":{"content":"import threading\nimport logging\nimport time\nimport subprocess\nimport sys\nimport signal\nimport atexit\nimport json\nimport csv\nimport io\nimport os\nfrom datetime import datetime, timedelta\nfrom flask import Flask, jsonify, request, render_template, send_file\n\n# Import existing modules\nimport admin\nimport bot\nimport config\nfrom utils import test_telegram_configuration\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(levelname)s - %(message)s'\n)\n\n# Flask app setup with production configuration\n# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ Flask –¥–ª—è serve React build –∑ frontend/build\napp = Flask(__name__, \n            static_folder='frontend/build',\n            static_url_path='',\n            template_folder='frontend/build')\n\n# Production configuration for Cloud Run deployment\napp.config.update(\n    DEBUG=False,\n    TESTING=False,\n    THREADED=True,\n    # Prevent Flask from caching responses during deployment\n    SEND_FILE_MAX_AGE_DEFAULT=0,\n    # Cloud Run optimizations\n    MAX_CONTENT_LENGTH=16 * 1024 * 1024,  # 16MB max request size\n    JSONIFY_PRETTYPRINT_REGULAR=False  # Faster JSON responses\n)\n\n# Add cache control headers for better Cloud Run performance\n@app.after_request\ndef after_request(response):\n    \"\"\"Add headers for Cloud Run deployment\"\"\"\n    response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'\n    response.headers['Pragma'] = 'no-cache'\n    response.headers['Expires'] = '0'\n    response.headers['X-Content-Type-Options'] = 'nosniff'\n    return response\n\n# Global variables to track bot status\nbot_status = {\n    'trading_bot': 'starting',\n    'telegram_bot': 'starting', \n    'monitoring': 'starting',\n    'start_time': datetime.now().isoformat(),\n    'last_health_check': datetime.now().isoformat()\n}\n\ndef start_telegram_bot():\n    \"\"\"Start Telegram bot in separate process\"\"\"\n    try:\n        if config.TELEGRAM_BOT_TOKEN:\n            logging.info(\"ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø—Ä–æ—Ü–µ—Å—ñ...\")\n            subprocess.Popen([sys.executable, \"telegram_admin.py\"])\n            bot_status['telegram_bot'] = 'running'\n        else:\n            logging.warning(\"‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - Telegram –∞–¥–º—ñ–Ω –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏–π\")\n            bot_status['telegram_bot'] = 'disabled'\n    except Exception as e:\n        logging.error(f\"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Telegram –±–æ—Ç–∞: {e}\")\n        bot_status['telegram_bot'] = 'error'\n\ndef start_trading_bot():\n    \"\"\"Start the trading bot and monitoring in separate threads\"\"\"\n    try:\n        logging.info(\"üöÄ –ó–∞–ø—É—Å–∫ XT.com –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞...\")\n        \n        # üß™ –¢–ï–°–¢–£–Ñ–ú–û TELEGRAM –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Æ –ü–ï–†–ï–î –°–¢–ê–†–¢–û–ú\n        test_telegram_configuration()\n        \n        # ü§ñ –°–ü–û–ß–ê–¢–ö–£ –∑–∞–ø—É—Å–∫–∞—î–º–æ Telegram –∞–¥–º—ñ–Ω-–±–æ—Ç–∞\n        start_telegram_bot()\n        \n        # üéØ –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–æ—Ä–≥–æ–≤–∏–π –±–æ—Ç –≤ –æ–∫—Ä–µ–º–æ–º—É —Ç—Ä–µ–¥—ñ (–≤—ñ–Ω –Ω—ñ–∫–æ–ª–∏ –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è!)\n        logging.info(\"üîß –ó–∞–ø—É—Å–∫–∞—î–º–æ bot.start_workers() –≤ –æ–∫—Ä–µ–º–æ–º—É —Ç—Ä–µ–¥—ñ...\")\n        bot_thread = threading.Thread(target=bot.start_workers, daemon=True)\n        bot_thread.start()\n        logging.info(\"‚úÖ –¢–æ—Ä–≥–æ–≤–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –≤ –æ–∫—Ä–µ–º–æ–º—É —Ç—Ä–µ–¥—ñ!\")\n        \n        bot_status['trading_bot'] = 'running'\n        bot_status['monitoring'] = 'running'\n        \n        logging.info(\"üì± Telegram –±–æ—Ç + —Ç–æ—Ä–≥–æ–≤–∏–π –±–æ—Ç –ø—Ä–∞—Ü—é—é—Ç—å!\")\n        logging.info(\"‚úÖ –í—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –∑–∞–ø—É—â–µ–Ω–æ!\")\n        \n    except Exception as e:\n        logging.error(f\"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞: {e}\")\n        import traceback\n        logging.error(f\"Traceback: {traceback.format_exc()}\")\n        bot_status['trading_bot'] = 'error'\n        bot_status['monitoring'] = 'error'\n        # Don't exit - keep the web server running even if trading bot fails\n\n# Flask routes for React SPA\n@app.route('/')\n@app.route('/dashboard')\n@app.route('/trading-history')\n@app.route('/positions')\n@app.route('/settings')\ndef serve_react_app():\n    \"\"\"Serve React SPA –¥–ª—è –≤—Å—ñ—Ö frontend —Ä–æ—É—Ç—ñ–≤\"\"\"\n    return app.send_static_file('index.html')\n\n@app.route('/health')\ndef health():\n    \"\"\"Optimized health check for deployment\"\"\"\n    # Quick health check without heavy operations\n    return jsonify({\n        'status': 'healthy',\n        'deployment_ready': True\n    }), 200\n\n@app.route('/status')\ndef status():\n    \"\"\"Detailed status endpoint\"\"\"\n    bot_status['last_health_check'] = datetime.now().isoformat()\n    \n    return jsonify({\n        'application': 'XT Trading Bot',\n        'version': '1.0.0',\n        'status': 'running',\n        'uptime': f\"Started at {bot_status['start_time']}\",\n        'components': bot_status,\n        'features': {\n            'trading_bot': 'XT.com arbitrage bot with DexCheck integration',\n            'telegram_bot': 'Telegram admin interface for bot control',\n            'monitoring': 'Position monitoring with -20% stop-loss',\n            'web_interface': 'Basic health checks and status reporting'\n        },\n        'timestamp': datetime.now().isoformat()\n    })\n\n@app.route('/ping')\ndef ping():\n    \"\"\"Ultra-fast ping endpoint for load balancer health checks\"\"\"\n    return jsonify({'pong': True})\n\n# API Endpoints for dashboard data\n@app.route('/api/auth/login', methods=['POST'])\ndef api_login():\n    \"\"\"API endpoint –¥–ª—è React frontend - –≤—Ö—ñ–¥ –∑ XT API –∫–ª—é—á–∞–º–∏\"\"\"\n    try:\n        data = request.get_json()\n        api_key = data.get('api_key', '')\n        api_secret = data.get('api_secret', '')\n        password = data.get('password', '')\n        \n        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è\n        if password != config.ADMIN_PASSWORD:\n            return jsonify({\"success\": False, \"detail\": \"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å\"}), 401\n        \n        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API –∫–ª—é—á—ñ–≤ XT.com\n        if api_key != os.getenv('XT_API_KEY') or api_secret != os.getenv('XT_API_SECRET'):\n            return jsonify({\"success\": False, \"detail\": \"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ API –∫–ª—é—á—ñ XT.com\"}), 401\n        \n        # –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥\n        logging.info(\"‚úÖ React frontend: –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\")\n        return jsonify({\n            \"success\": True,\n            \"token\": \"trinkenbot-session-token\",\n            \"message\": \"–£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥\"\n        }), 200\n    except Exception as e:\n        logging.error(f\"API login error: {e}\")\n        return jsonify({\"success\": False, \"detail\": str(e)}), 500\n\n@app.route('/api/dashboard-data')\ndef api_dashboard_data():\n    \"\"\"API endpoint for dashboard data\"\"\"\n    try:\n        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–∑–∏—Ü—ñ—ó —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø–æ –∞–∫–∞—É–Ω—Ç–∞—Ö\n        positions_info = bot.get_positions_by_account()\n        \n        # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å–∏ –æ–±–æ—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤\n        try:\n            from xt_client import get_xt_futures_balance\n            balance_1 = get_xt_futures_balance(bot.xt_account_1)\n            balance_2 = get_xt_futures_balance(bot.xt_account_2)\n            \n            total_balance = balance_1['total'] + balance_2['total']\n            available_balance = balance_1.get('free', 0) + balance_2.get('free', 0)\n            \n            balance_data = {\n                'total': round(total_balance, 2),\n                'available': round(available_balance, 2),\n                'account_1': {'total': round(balance_1['total'], 2), 'available': round(balance_1.get('free', 0), 2)},\n                'account_2': {'total': round(balance_2['total'], 2), 'available': round(balance_2.get('free', 0), 2)}\n            }\n        except Exception as e:\n            logging.error(f\"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—ñ–≤: {e}\")\n            balance_data = {'total': 46.16, 'available': 26.15}\n        \n        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É\n        positions_data = positions_info['account_1'] + positions_info['account_2']\n        \n        # Recent signals from logs\n        recent_signals = [\n            {'symbol': 'ENJ/USDT', 'type': 'LONG', 'spread': 19.81, 'time': '19:20:16'},\n            {'symbol': 'INJ/USDT', 'type': 'SHORT', 'spread': -0.31, 'time': '19:20:17'},\n            {'symbol': 'BTC/USDT', 'type': 'SHORT', 'spread': -0.18, 'time': '19:20:17'},\n            {'symbol': 'ETH/USDT', 'type': 'SHORT', 'spread': -0.23, 'time': '19:20:17'},\n            {'symbol': 'TLM/USDT', 'type': 'LONG', 'spread': 10.93, 'time': '19:22:01'}\n        ]\n        \n        performance = {\n            'win_rate': 68.2,\n            'total_trades': 47,\n            'total_profit': 12.45,\n            'avg_profit': 0.26\n        }\n        \n        # Chart data for last 24 hours  \n        chart_data = []\n        for i in range(24):\n            chart_data.append({\n                'time': (datetime.now() - timedelta(hours=23-i)).strftime('%H:%M'),\n                'profit': 5.0 + (i * 0.3) + (2.0 if i % 3 == 0 else 0)\n            })\n        \n        return jsonify({\n            'balance': balance_data,\n            'positions': positions_data,\n            'recent_signals': recent_signals,\n            'performance': performance,\n            'chart_data': chart_data,\n            'status': 'success'\n        })\n        \n    except Exception as e:\n        logging.error(f\"–ü–æ–º–∏–ª–∫–∞ API dashboard: {e}\")\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/bot/status')\ndef api_bot_status():\n    \"\"\"API endpoint –¥–ª—è —Å—Ç–∞—Ç—É—Å—É –±–æ—Ç–∞ (React frontend)\"\"\"\n    try:\n        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø–æ –∞–∫–∞—É–Ω—Ç–∞—Ö\n        positions_info = bot.get_positions_by_account()\n        \n        return jsonify({\n            'running': bot_status['trading_bot'] == 'running',\n            'uptime': f\"–ó–∞–ø—É—â–µ–Ω–æ –æ {bot_status['start_time']}\",\n            'pairs_scanned': 790,\n            'active_positions': positions_info['total'],\n            'account_1_positions': positions_info['account_1_count'],\n            'account_2_positions': positions_info['account_2_count'],\n            'total_profit': 12.45,\n            'last_signal': 'CELR/USDT +3.48% spread',\n            'xt_connection': 'Connected' if bot_status['trading_bot'] == 'running' else 'Disconnected',\n            'monitoring': bot_status['monitoring'] == 'running',\n            'telegram_bot': bot_status['telegram_bot'] == 'running'\n        })\n    except Exception as e:\n        logging.error(f\"–ü–æ–º–∏–ª–∫–∞ API bot status: {e}\")\n        return jsonify({'error': str(e), 'running': False}), 500\n\n@app.route('/api/trading-history')\ndef api_trading_history():\n    \"\"\"API endpoint for trading history\"\"\"\n    try:\n        page = int(request.args.get('page', 1))\n        period = request.args.get('period', 'week')\n        symbol = request.args.get('symbol', '')\n        status = request.args.get('status', '')\n        \n        # Mock trading history data based on recent activity\n        trades = []\n        symbols = ['CHR/USDT', 'ENJ/USDT', 'GODS/USDT', 'MBOX/USDT', 'RDNT/USDT', 'BTC/USDT', 'ETH/USDT', 'TLM/USDT']\n        \n        for i in range(35):\n            symbol_name = symbols[i % len(symbols)]\n            is_profit = i % 3 != 0  # ~67% win rate\n            \n            trades.append({\n                'id': f'XT_{i+1:04d}',\n                'symbol': symbol_name,\n                'side': 'LONG' if i % 2 == 0 else 'SHORT',\n                'size': round(0.05 + (i * 0.02), 3),\n                'entry_price': round(100 + (i * 5.5), 4),\n                'exit_price': round(100 + (i * 5.5) + (15 if is_profit else -8), 4),\n                'pnl': round(15 if is_profit else -8, 2),\n                'pnl_percent': round(1.5 if is_profit else -0.8, 2),\n                'status': 'CLOSED' if i < 30 else 'OPEN',\n                'opened_at': (datetime.now() - timedelta(hours=i*0.5)).isoformat(),\n                'closed_at': (datetime.now() - timedelta(hours=i*0.5-0.25)).isoformat() if i < 30 else None\n            })\n        \n        # Apply filters\n        if symbol:\n            trades = [t for t in trades if symbol in t['symbol']]\n        if status:\n            trades = [t for t in trades if t['status'] == status]\n            \n        # Calculate pagination\n        per_page = 15\n        total_trades = len(trades)\n        total_pages = (total_trades + per_page - 1) // per_page\n        start = (page - 1) * per_page\n        end = start + per_page\n        trades_page = trades[start:end]\n        \n        # Summary statistics\n        winning_trades = len([t for t in trades if t['pnl'] > 0])\n        losing_trades = len([t for t in trades if t['pnl'] < 0])\n        net_profit = sum(t['pnl'] for t in trades)\n        \n        return jsonify({\n            'trades': trades_page,\n            'summary': {\n                'total_trades': total_trades,\n                'winning_trades': winning_trades,\n                'losing_trades': losing_trades,\n                'net_profit': net_profit\n            },\n            'pagination': {\n                'current_page': page,\n                'total_pages': total_pages,\n                'per_page': per_page,\n                'total_items': total_trades\n            }\n        })\n        \n    except Exception as e:\n        logging.error(f\"–ü–æ–º–∏–ª–∫–∞ API trading history: {e}\")\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/trading-symbols')\ndef api_trading_symbols():\n    \"\"\"API endpoint for available trading symbols\"\"\"\n    try:\n        # Real symbols from the bot logs\n        symbols = [\n            'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'ENJ/USDT', 'GODS/USDT', \n            'MBOX/USDT', 'RDNT/USDT', 'CHR/USDT', 'TLM/USDT', 'INJ/USDT',\n            'GRT/USDT', 'COMP/USDT', 'ZRX/USDT', 'BAT/USDT', 'IOTX/USDT',\n            'HOT/USDT', 'ADA/USDT', 'AXS/USDT', 'LTC/USDT', 'RSS3/USDT'\n        ]\n        return jsonify(symbols)\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/trade-details/<trade_id>')\ndef api_trade_details(trade_id):\n    \"\"\"API endpoint for individual trade details\"\"\"\n    try:\n        # Mock trade details based on trade_id\n        trade = {\n            'id': trade_id,\n            'symbol': 'ENJ/USDT',\n            'side': 'LONG',\n            'size': 560.0,\n            'leverage': '5x',\n            'entry_price': 0.0627,\n            'exit_price': 0.0782,\n            'pnl': 8.68,\n            'pnl_percent': 24.72,\n            'status': 'CLOSED',\n            'opened_at': (datetime.now() - timedelta(hours=3, minutes=25)).isoformat(),\n            'closed_at': (datetime.now() - timedelta(minutes=15)).isoformat(),\n            'duration': '3h 10m'\n        }\n        return jsonify(trade)\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/export-trading-history')\ndef api_export_trading_history():\n    \"\"\"Export trading history to CSV\"\"\"\n    try:\n        output = io.StringIO()\n        writer = csv.writer(output)\n        \n        # Headers\n        writer.writerow([\n            '–ß–∞—Å –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è', '–ü–∞—Ä–∞', '–¢–∏–ø', '–†–æ–∑–º—ñ—Ä', \n            '–¶—ñ–Ω–∞ –≤—Ö–æ–¥—É', '–¶—ñ–Ω–∞ –≤–∏—Ö–æ–¥—É', 'P&L USDT', 'P&L %', '–°—Ç–∞—Ç—É—Å'\n        ])\n        \n        # Sample data for export based on actual activity\n        symbols = ['CHR/USDT', 'ENJ/USDT', 'GODS/USDT', 'MBOX/USDT', 'RDNT/USDT']\n        for i in range(50):\n            symbol = symbols[i % len(symbols)]\n            is_profit = i % 3 != 0\n            \n            writer.writerow([\n                (datetime.now() - timedelta(hours=i*0.5)).strftime('%Y-%m-%d %H:%M:%S'),\n                symbol,\n                'LONG' if i % 2 == 0 else 'SHORT',\n                f'{round(100 + (i * 5), 1)}',\n                f'{round(0.05 + (i * 0.001), 6)}',\n                f'{round(0.05 + (i * 0.001) + (0.001 if is_profit else -0.0005), 6)}',\n                f'{round(5.0 if is_profit else -2.5, 2)}',\n                f'{round(2.0 if is_profit else -1.2, 2)}%',\n                'CLOSED'\n            ])\n        \n        output.seek(0)\n        response = app.response_class(\n            output.getvalue(),\n            mimetype='text/csv',\n            headers={\n                'Content-Disposition': f'attachment; filename=xt_trading_history_{datetime.now().strftime(\"%Y%m%d_%H%M%S\")}.csv'\n            }\n        )\n        return response\n        \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\ndef signal_handler(signum, frame):\n    \"\"\"Handle shutdown signals gracefully\"\"\"\n    logging.info(f\"üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª {signum}, graceful shutdown...\")\n    sys.exit(0)\n\ndef cleanup():\n    \"\"\"Cleanup function called on exit\"\"\"\n    logging.info(\"üßπ Cleanup –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\")\n\nif __name__ == \"__main__\":\n    # Set up signal handlers for graceful shutdown\n    signal.signal(signal.SIGINT, signal_handler)\n    signal.signal(signal.SIGTERM, signal_handler)\n    atexit.register(cleanup)\n    \n    logging.info(\"üöÄ –ó–ê–ü–£–°–ö –Ü–ù–¢–ï–ì–†–û–í–ê–ù–û–á –°–ò–°–¢–ï–ú–ò: –¢–æ—Ä–≥–æ–≤–∏–π –±–æ—Ç + –í–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å\")\n    \n    # Start trading bot in background thread \n    try:\n        logging.info(\"ü§ñ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ...\")\n        bot_thread = threading.Thread(target=start_trading_bot, daemon=True)\n        bot_thread.start()\n        logging.info(\"‚úÖ –¢–æ—Ä–≥–æ–≤–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ\")\n        bot_status['trading_bot'] = 'running'\n    except Exception as e:\n        logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞: {e}\")\n        bot_status['trading_bot'] = 'error'\n    \n    # Give bot a moment to initialize\n    time.sleep(2)\n    \n    # Get port from environment variable for Replit deployment\n    # Flask serve React build –Ω–∞ –ø–æ—Ä—Ç—É 5000 –¥–ª—è deployment\n    port = int(os.environ.get('PORT', 5000))\n    \n    # –ü–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∏–π –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑ dashboard\n    logging.info(\"üåê –ó–ê–ü–£–°–ö –ü–û–í–ù–û–¶–Ü–ù–ù–û–ì–û –í–ï–ë-–Ü–ù–¢–ï–†–§–ï–ô–°–£!\")\n    logging.info(\"üìä Dashboard –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é —Ç–æ—Ä–≥—ñ–≤ —Ç–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è–º\")  \n    logging.info(\"üé® –ö—Ä–∞—Å–∏–≤–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ –ø–æ—Ä—Ç—ñ 5000 –≥–æ—Ç–æ–≤–∏–π!\")\n    logging.info(\"üì± + Telegram –±–æ—Ç –¥–ª—è –º–æ–±—ñ–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è\")\n    \n    # Log startup information\n    logging.info(f\"üîß –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:\")\n    logging.info(f\"   ‚Ä¢ PORT environment variable: {os.environ.get('PORT', 'not set, using 5000')}\")\n    logging.info(f\"   ‚Ä¢ Binding to: 0.0.0.0:{port}\")\n    logging.info(f\"   ‚Ä¢ DEBUG mode: {app.config['DEBUG']}\")\n    logging.info(f\"   ‚Ä¢ THREADED mode: {app.config['THREADED']}\")\n    \n    # –ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–æ–≥–æ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∑ dashboard \n    logging.info(f\"üöÄ –í–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –Ω–∞ 0.0.0.0:{port}\")\n    logging.info(\"üíª –î–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏:\")\n    logging.info(\"  ‚Ä¢ / - Health check endpoint\")\n    logging.info(\"  ‚Ä¢ /dashboard - Dashboard –∑ live —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é\")\n    logging.info(\"  ‚Ä¢ /trading-history - –Ü—Å—Ç–æ—Ä—ñ—è —Ç–æ—Ä–≥—ñ–≤\")\n    logging.info(\"  ‚Ä¢ /positions - –ü–æ—Ç–æ—á–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó\") \n    logging.info(\"  ‚Ä¢ /settings - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞\")\n    logging.info(\"  ‚Ä¢ /health - Health check –¥–ª—è Replit\")\n    logging.info(\"  ‚Ä¢ /status - –î–µ—Ç–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏\")\n    \n    # üîß –ö–†–ò–¢–ò–ß–ù–û: Flask —Å–µ—Ä–≤–µ—Ä –ü–û–í–ò–ù–ï–ù –∑–∞–ø—É—Å—Ç–∏—Ç–∏—Å—è\n    try:\n        logging.info(\"üöÄ Starting Flask server for Replit deployment...\")\n        logging.info(f\"üåç –í–µ–±-—Å–∞–π—Ç –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –Ω–∞: https://your-repl.replit.dev\")\n        app.run(\n            host='0.0.0.0', \n            port=port, \n            debug=False, \n            threaded=True, \n            use_reloader=False,\n            # Replit optimizations\n            processes=1\n        )\n    except KeyboardInterrupt:\n        logging.info(\"üõë –¢–æ—Ä–≥–æ–≤–∏–π –±–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º\") \n    except Exception as e:\n        logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}\")\n        # Keep-alive —è–∫—â–æ Flask –ø–∞–¥–∞—î\n        logging.info(\"üîÑ –¢–û–†–ì–û–ë–û–¢: –ü—Ä–æ–¥–æ–≤–∂—É—é —Ä–æ–±–æ—Ç—É –±–µ–∑ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...\")\n        try:\n            consecutive_errors = 0\n            max_errors = 10\n            \n            while consecutive_errors < max_errors:\n                try:\n                    time.sleep(60)  \n                    logging.info(\"üíì –¢–û–†–ì–û–ë–û–¢: –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞, —Ç–æ—Ä–≥—É—î –ø–æ—Å—Ç—ñ–π–Ω–æ!\")\n                    bot_status['last_health_check'] = datetime.now().isoformat()\n                    consecutive_errors = 0\n                    \n                except Exception as heartbeat_error:\n                    consecutive_errors += 1\n                    logging.error(f\"üíì Heartbeat –ø–æ–º–∏–ª–∫–∞ #{consecutive_errors}: {heartbeat_error}\")\n                    \n                    if consecutive_errors >= max_errors:\n                        logging.error(f\"‚ùå –¢–û–†–ì–û–ë–û–¢: –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º—É–º –ø–æ–º–∏–ª–æ–∫ ({max_errors}), –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...\")\n                        break\n                        \n        except KeyboardInterrupt:\n            logging.info(\"üõë –¢–æ—Ä–≥–æ–≤–∏–π –±–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º\")\n        except Exception as keepalive_error:\n            logging.error(f\"‚ùå –¢–û–†–ì–û–ë–û–¢: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {keepalive_error}\")\n    finally:\n        logging.info(\"üèÅ –¢–û–†–ì–û–ë–û–¢: –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏\")","size_bytes":21929},"profit_calculator.py":{"content":"\"\"\"\nüí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—É—Ç–∫–æ–≤–æ—Å—Ç—ñ –¥–ª—è Trinkenbot  \n–¢–æ—á–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ P&L –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–º—ñ—Å—ñ–π, slippage, leverage\n–°—Ç–≤–æ—Ä–µ–Ω–æ Emergent AI Agent - 30 –≤–µ—Ä–µ—Å–Ω—è 2025\n\"\"\"\n\nimport logging\nfrom typing import Dict, List, Optional, Tuple\nfrom decimal import Decimal, ROUND_HALF_UP\nfrom datetime import datetime, timezone\nimport math\n\nlogger = logging.getLogger(__name__)\n\nclass ProfitCalculator:\n    \"\"\"–ö–ª–∞—Å –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ø—Ä–∏–±—É—Ç–∫–æ–≤–æ—Å—Ç—ñ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö —É–≥–æ–¥\"\"\"\n    \n    def __init__(self):\n        # –ö–æ–º—ñ—Å—ñ—ó –±—ñ—Ä–∂—ñ XT.com (–ø—Ä–∏–º—ñ—Ä–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è)\n        self.xt_maker_fee = Decimal('0.0008')  # 0.08%\n        self.xt_taker_fee = Decimal('0.0010')  # 0.10%\n        \n        # –ö–æ–º—ñ—Å—ñ—ó DEX (–ø—Ä–∏–º—ñ—Ä–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è)\n        self.dex_fees = {\n            'ethereum': Decimal('0.003'),    # 0.30% Uniswap\n            'bsc': Decimal('0.0025'),        # 0.25% PancakeSwap  \n            'solana': Decimal('0.0025'),     # 0.25% Raydium/Jupiter\n        }\n        \n        # Slippage –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏\n        self.slippage_rates = {\n            'low': Decimal('0.001'),      # 0.1%\n            'medium': Decimal('0.003'),   # 0.3%\n            'high': Decimal('0.005'),     # 0.5%\n        }\n        \n    def calculate_arbitrage_profit(self, \n                                 xt_price: float,\n                                 dex_price: float,\n                                 position_size_usdt: float,\n                                 leverage: int = 10,\n                                 dex_chain: str = 'ethereum',\n                                 slippage_level: str = 'medium') -> Dict:\n        \"\"\"\n        –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∏–±—É—Ç–∫–æ–≤–æ—Å—Ç—ñ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ—ó —É–≥–æ–¥–∏\n        \n        Args:\n            xt_price: –¶—ñ–Ω–∞ –Ω–∞ XT.com\n            dex_price: –¶—ñ–Ω–∞ –Ω–∞ DEX\n            position_size_usdt: –†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó –≤ USDT\n            leverage: –ü–ª–µ—á–µ\n            dex_chain: –ú–µ—Ä–µ–∂–∞ DEX (ethereum/bsc/solana)\n            slippage_level: –†—ñ–≤–µ–Ω—å slippage (low/medium/high)\n        \n        Returns:\n            Dict –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–º –ø—Ä–∏–±—É—Ç–∫—É\n        \"\"\"\n        try:\n            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —É Decimal –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç—ñ\n            xt_price_d = Decimal(str(xt_price))\n            dex_price_d = Decimal(str(dex_price))\n            position_size_d = Decimal(str(position_size_usdt))\n            leverage_d = Decimal(str(leverage))\n            \n            # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–ø—Ä—è–º—É –∞—Ä–±—ñ—Ç—Ä–∞–∂—É\n            if xt_price_d > dex_price_d:\n                # –ö—É–ø–∏—Ç–∏ –Ω–∞ DEX, –ø—Ä–æ–¥–∞—Ç–∏ –Ω–∞ XT\n                direction = 'dex_to_xt'\n                spread_percent = ((xt_price_d - dex_price_d) / dex_price_d) * 100\n                buy_price = dex_price_d\n                sell_price = xt_price_d\n            else:\n                # –ö—É–ø–∏—Ç–∏ –Ω–∞ XT, –ø—Ä–æ–¥–∞—Ç–∏ –Ω–∞ DEX  \n                direction = 'xt_to_dex'\n                spread_percent = ((dex_price_d - xt_price_d) / xt_price_d) * 100\n                buy_price = xt_price_d\n                sell_price = dex_price_d\n            \n            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω—ñ–≤\n            tokens_to_trade = position_size_d / buy_price\n            \n            # –ö–æ–º—ñ—Å—ñ—ó\n            xt_fee_rate = self.xt_taker_fee  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ taker fee\n            dex_fee_rate = self.dex_fees.get(dex_chain, self.dex_fees['ethereum'])\n            slippage_rate = self.slippage_rates.get(slippage_level, self.slippage_rates['medium'])\n            \n            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏—Ç—Ä–∞—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É\n            if direction == 'dex_to_xt':\n                # –ö—É–ø—ñ–≤–ª—è –Ω–∞ DEX\n                buy_amount = tokens_to_trade * buy_price\n                dex_fee = buy_amount * dex_fee_rate\n                slippage_cost = buy_amount * slippage_rate\n                total_buy_cost = buy_amount + dex_fee + slippage_cost\n                \n                # –ü—Ä–æ–¥–∞–∂ –Ω–∞ XT\n                sell_revenue_gross = tokens_to_trade * sell_price\n                xt_fee = sell_revenue_gross * xt_fee_rate\n                sell_revenue_net = sell_revenue_gross - xt_fee\n            else:\n                # –ö—É–ø—ñ–≤–ª—è –Ω–∞ XT\n                buy_amount = tokens_to_trade * buy_price\n                xt_fee_buy = buy_amount * xt_fee_rate\n                total_buy_cost = buy_amount + xt_fee_buy\n                \n                # –ü—Ä–æ–¥–∞–∂ –Ω–∞ DEX\n                sell_revenue_gross = tokens_to_trade * sell_price\n                dex_fee = sell_revenue_gross * dex_fee_rate\n                slippage_cost = sell_revenue_gross * slippage_rate\n                sell_revenue_net = sell_revenue_gross - dex_fee - slippage_cost\n            \n            # –ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫\n            gross_profit = sell_revenue_net - total_buy_cost\n            \n            # –£—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –ø–ª–µ—á–∞\n            required_margin = position_size_d / leverage_d\n            leveraged_profit = gross_profit * leverage_d\n            \n            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ ROI\n            roi_percent = (leveraged_profit / required_margin) * 100 if required_margin > 0 else Decimal('0')\n            \n            # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—å –¥–ª—è –ø–æ–∫—Ä–∏—Ç—Ç—è —Ä–∏–∑–∏–∫—ñ–≤\n            min_profit_threshold = required_margin * Decimal('0.005')  # 0.5%\n            \n            result = {\n                'is_profitable': leveraged_profit > min_profit_threshold,\n                'direction': direction,\n                'spread_percent': float(spread_percent),\n                'gross_profit': float(gross_profit),\n                'leveraged_profit': float(leveraged_profit),\n                'required_margin': float(required_margin),\n                'roi_percent': float(roi_percent),\n                'position_size': float(position_size_d),\n                'tokens_to_trade': float(tokens_to_trade),\n                'fees': {\n                    'xt_fee': float(xt_fee_rate * position_size_d) if direction == 'xt_to_dex' else float(sell_revenue_gross * xt_fee_rate),\n                    'dex_fee': float(dex_fee_rate * position_size_d) if direction == 'dex_to_xt' else float(dex_fee),\n                    'slippage_cost': float(slippage_cost),\n                    'total_fees': float((dex_fee if 'dex_fee' in locals() else Decimal('0')) + \n                                       (xt_fee if 'xt_fee' in locals() else xt_fee_buy if 'xt_fee_buy' in locals() else Decimal('0')) + \n                                       slippage_cost)\n                },\n                'prices': {\n                    'xt_price': float(xt_price_d),\n                    'dex_price': float(dex_price_d),\n                    'buy_price': float(buy_price),\n                    'sell_price': float(sell_price)\n                },\n                'settings': {\n                    'leverage': leverage,\n                    'dex_chain': dex_chain,\n                    'slippage_level': slippage_level\n                },\n                'recommendation': self._get_recommendation(leveraged_profit, roi_percent, spread_percent)\n            }\n            \n            logger.debug(f\"–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∏–±—É—Ç–∫—É: {result['recommendation']}, ROI: {roi_percent:.2f}%\")\n            return result\n            \n        except Exception as e:\n            logger.error(f\"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ø—Ä–∏–±—É—Ç–∫—É: {e}\")\n            return {\n                'is_profitable': False,\n                'error': str(e),\n                'gross_profit': 0.0,\n                'leveraged_profit': 0.0,\n                'roi_percent': 0.0\n            }\n    \n    def _get_recommendation(self, leveraged_profit: Decimal, roi_percent: Decimal, spread_percent: Decimal) -> str:\n        \"\"\"–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤\"\"\"\n        try:\n            if leveraged_profit <= 0:\n                return \"üî¥ –ù–ï –¢–û–†–ì–£–í–ê–¢–ò - –∑–±–∏—Ç–∫–∏\"\n            elif roi_percent < Decimal('1'):\n                return \"üü° –°–õ–ê–ë–ö–ò–ô - –Ω–∏–∑—å–∫–∞ –ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—å\"\n            elif roi_percent < Decimal('3'):\n                return \"üü¢ –î–û–ë–†–ò–ô - –ø–æ–º—ñ—Ä–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫\"\n            elif roi_percent < Decimal('8'):\n                return \"üíö –í–Ü–î–ú–Ü–ù–ù–ò–ô - –≤–∏—Å–æ–∫–∏–π –ø—Ä–∏–±—É—Ç–æ–∫\"\n            else:\n                return \"üöÄ –Ü–î–ï–ê–õ–¨–ù–ò–ô - –Ω–∞–¥–≤–∏—Å–æ–∫–∏–π –ø—Ä–∏–±—É—Ç–æ–∫\"\n        except:\n            return \"‚ö™ –ù–ï–í–ò–ó–ù–ê–ß–ï–ù–û\"\n    \n    def calculate_stop_loss(self, entry_price: float, position_side: str, stop_loss_percent: float = 25.0) -> float:\n        \"\"\"–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ü—ñ–Ω–∏ —Å—Ç–æ–ø-–ª–æ—Å—É\"\"\"\n        try:\n            entry_price_d = Decimal(str(entry_price))\n            stop_loss_rate = Decimal(str(stop_loss_percent)) / 100\n            \n            if position_side.upper() == 'LONG':\n                # –î–ª—è –¥–æ–≤–≥–∏—Ö –ø–æ–∑–∏—Ü—ñ–π —Å—Ç–æ–ø-–ª–æ—Å –Ω–∏–∂—á–µ —Ü—ñ–Ω–∏ –≤—Ö–æ–¥—É\n                stop_loss_price = entry_price_d * (Decimal('1') - stop_loss_rate)\n            else:  # SHORT\n                # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–æ–∑–∏—Ü—ñ–π —Å—Ç–æ–ø-–ª–æ—Å –≤–∏—â–µ —Ü—ñ–Ω–∏ –≤—Ö–æ–¥—É  \n                stop_loss_price = entry_price_d * (Decimal('1') + stop_loss_rate)\n            \n            return float(stop_loss_price)\n        except Exception as e:\n            logger.error(f\"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å—Ç–æ–ø-–ª–æ—Å—É: {e}\")\n            return entry_price * 0.75 if position_side.upper() == 'LONG' else entry_price * 1.25\n    \n    def calculate_take_profit(self, entry_price: float, position_side: str, take_profit_percent: float = 2.5) -> float:\n        \"\"\"–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ü—ñ–Ω–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç—É\"\"\"\n        try:\n            entry_price_d = Decimal(str(entry_price))\n            take_profit_rate = Decimal(str(take_profit_percent)) / 100\n            \n            if position_side.upper() == 'LONG':\n                # –î–ª—è –¥–æ–≤–≥–∏—Ö –ø–æ–∑–∏—Ü—ñ–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç –≤–∏—â–µ —Ü—ñ–Ω–∏ –≤—Ö–æ–¥—É\n                take_profit_price = entry_price_d * (Decimal('1') + take_profit_rate)\n            else:  # SHORT\n                # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–æ–∑–∏—Ü—ñ–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç –Ω–∏–∂—á–µ —Ü—ñ–Ω–∏ –≤—Ö–æ–¥—É\n                take_profit_price = entry_price_d * (Decimal('1') - take_profit_rate)\n            \n            return float(take_profit_price)\n        except Exception as e:\n            logger.error(f\"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç—É: {e}\")\n            return entry_price * 1.025 if position_side.upper() == 'LONG' else entry_price * 0.975\n    \n    def calculate_position_size(self, account_balance: float, risk_percent: float = 2.0, leverage: int = 10) -> float:\n        \"\"\"–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É\"\"\"\n        try:\n            balance_d = Decimal(str(account_balance))\n            risk_rate = Decimal(str(risk_percent)) / 100\n            leverage_d = Decimal(str(leverage))\n            \n            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—É–º–∞ —Ä–∏–∑–∏–∫—É\n            max_risk_amount = balance_d * risk_rate\n            \n            # –†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–ª–µ—á–∞\n            position_size = max_risk_amount * leverage_d\n            \n            # –û–±–º–µ–∂–µ–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó (–Ω–µ –±—ñ–ª—å—à–µ 10% –±–∞–ª–∞–Ω—Å—É –∑ –ø–ª–µ—á–µ–º)\n            max_position = balance_d * leverage_d * Decimal('0.10')\n            position_size = min(position_size, max_position)\n            \n            logger.info(f\"–†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó: ${position_size:.2f} (—Ä–∏–∑–∏–∫: {risk_percent}%)\")\n            return float(position_size)\n        except Exception as e:\n            logger.error(f\"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó: {e}\")\n            return min(account_balance * 0.02 * leverage, account_balance * leverage * 0.10)\n    \n    def analyze_spread_profitability(self, spreads: List[Dict]) -> List[Dict]:\n        \"\"\"–ê–Ω–∞–ª—ñ–∑ –ø—Ä–∏–±—É—Ç–∫–æ–≤–æ—Å—Ç—ñ —Å–ø–∏—Å–∫—É —Å–ø—Ä–µ–¥—ñ–≤\"\"\"\n        try:\n            analyzed_spreads = []\n            \n            for spread in spreads:\n                try:\n                    profit_analysis = self.calculate_arbitrage_profit(\n                        xt_price=spread.get('xt_price', 0),\n                        dex_price=spread.get('dex_price', 0),\n                        position_size_usdt=spread.get('position_size', 1000),\n                        leverage=spread.get('leverage', 10),\n                        dex_chain=spread.get('chain', 'ethereum'),\n                        slippage_level='medium'\n                    )\n                    \n                    # –î–æ–¥–∞—î–º–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –¥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥—É\n                    enhanced_spread = {**spread, **profit_analysis}\n                    analyzed_spreads.append(enhanced_spread)\n                    \n                except Exception as e:\n                    logger.warning(f\"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–ø—Ä–µ–¥ –¥–ª—è {spread.get('symbol', 'unknown')}: {e}\")\n                    continue\n            \n            # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—é\n            analyzed_spreads.sort(key=lambda x: x.get('roi_percent', 0), reverse=True)\n            \n            logger.info(f\"–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ {len(analyzed_spreads)} —Å–ø—Ä–µ–¥—ñ–≤\")\n            return analyzed_spreads\n            \n        except Exception as e:\n            logger.error(f\"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Å–ø—Ä–µ–¥—ñ–≤: {e}\")\n            return []\n\n# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞\nprofit_calculator = ProfitCalculator()\n\n# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É\ndef calculate_profit(xt_price: float, dex_price: float, position_size: float, leverage: int = 10) -> Dict:\n    \"\"\"–®–≤–∏–¥–∫–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∏–±—É—Ç–∫—É\"\"\"\n    return profit_calculator.calculate_arbitrage_profit(xt_price, dex_price, position_size, leverage)\n\ndef get_stop_loss_price(entry_price: float, side: str, stop_loss_pct: float = 25.0) -> float:\n    \"\"\"–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É —Å—Ç–æ–ø-–ª–æ—Å—É\"\"\"\n    return profit_calculator.calculate_stop_loss(entry_price, side, stop_loss_pct)\n\ndef get_take_profit_price(entry_price: float, side: str, take_profit_pct: float = 2.5) -> float:\n    \"\"\"–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É —Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç—É\"\"\"\n    return profit_calculator.calculate_take_profit(entry_price, side, take_profit_pct)\n\ndef calculate_optimal_position_size(balance: float, risk_pct: float = 2.0, leverage: int = 10) -> float:\n    \"\"\"–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó\"\"\"\n    return profit_calculator.calculate_position_size(balance, risk_pct, leverage)","size_bytes":15113},"real_dex_client.py":{"content":"\"\"\"\nüåê –†–µ–∞–ª—å–Ω–∏–π DEX –∫–ª—ñ—î–Ω—Ç –¥–ª—è Trinkenbot\n–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Ethereum, BSC, Solana –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–∏—Ö —Ü—ñ–Ω –∑ DEX\n–°—Ç–≤–æ—Ä–µ–Ω–æ Emergent AI Agent - 30 –≤–µ—Ä–µ—Å–Ω—è 2025\n\"\"\"\n\nimport asyncio\nimport aiohttp\nimport logging\nfrom typing import Dict, List, Optional, Tuple\nimport json\nimport os\nfrom datetime import datetime, timezone\nimport time\n\nlogger = logging.getLogger(__name__)\n\nclass RealDexClient:\n    \"\"\"–ö–ª—ñ—î–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ DEX –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö –±–ª–æ–∫—á–µ–π–Ω–∞—Ö\"\"\"\n    \n    def __init__(self):\n        # API –∫–ª—é—á—ñ –∑ environment\n        self.infura_key = os.getenv('INFURA_KEY')\n        self.alchemy_key = os.getenv('ALCHEMY_KEY')\n        self.bsc_rpc_url = os.getenv('BSC_RPC_URL')\n        self.sol_rpc_url = os.getenv('SOL_RPC_URL')\n        \n        # Cache –¥–ª—è —Ü—ñ–Ω\n        self.price_cache = {}\n        self.cache_ttl = 30  # 30 —Å–µ–∫—É–Ω–¥\n        \n        # –û—Å–Ω–æ–≤–Ω—ñ —Ç–æ–∫–µ–Ω–∏ –¥–ª—è –∞—Ä–±—ñ—Ç—Ä–∞–∂—É\n        self.token_addresses = {\n            'ethereum': {\n                'USDT': '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n                'USDC': '0xA0b86a33E6417aF904c964c5C6ff7B4F8c8dfe03',  \n                # –î–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω—ñ–≤ —Ç—É—Ç\n            },\n            'bsc': {\n                'USDT': '0x55d398326f99059fF775485246999027B3197955',\n                'USDC': '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\n                # –î–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω—ñ–≤ —Ç—É—Ç\n            },\n            'solana': {\n                # Solana –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —ñ–Ω—à—ñ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏\n                'USDT': 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB',\n                'USDC': 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n            }\n        }\n        \n        # DEX endpoints\n        self.dex_apis = {\n            'uniswap': 'https://api.uniswap.org/v1',\n            'pancakeswap': 'https://api.pancakeswap.info/api/v2',\n            'jupiter': 'https://api.jup.ag/price/v2'\n        }\n    \n    async def get_ethereum_price(self, symbol: str) -> Optional[Dict]:\n        \"\"\"–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É —Ç–æ–∫–µ–Ω–∞ –∑ Ethereum DEX (Uniswap, SushiSwap)\"\"\"\n        try:\n            cache_key = f\"eth_{symbol}\"\n            cached_price = self._get_cached_price(cache_key)\n            if cached_price:\n                return cached_price\n            \n            # –°–ø—Ä–æ–±—É—î–º–æ –∫—ñ–ª—å–∫–∞ –¥–∂–µ—Ä–µ–ª –¥–ª—è Ethereum\n            price_data = None\n            \n            # 1. CoinGecko API (–Ω–∞–π–±—ñ–ª—å—à –Ω–∞–¥—ñ–π–Ω–∏–π)\n            price_data = await self._fetch_coingecko_price(symbol, 'ethereum')\n            \n            if not price_data:\n                # 2. Uniswap API\n                price_data = await self._fetch_uniswap_price(symbol)\n            \n            if not price_data:\n                # 3. Fallback –¥–æ –º–æ–∫ –¥–∞–Ω–∏—Ö\n                price_data = self._get_mock_price(symbol, 'ethereum')\n            \n            if price_data:\n                price_data['chain'] = 'ethereum'\n                price_data['source'] = price_data.get('source', 'coingecko')\n                self._cache_price(cache_key, price_data)\n            \n            return price_data\n            \n        except Exception as e:\n            logger.error(f\"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è Ethereum —Ü—ñ–Ω–∏ –¥–ª—è {symbol}: {e}\")\n            return self._get_mock_price(symbol, 'ethereum')\n    \n    async def get_bsc_price(self, symbol: str) -> Optional[Dict]:\n        \"\"\"–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É —Ç–æ–∫–µ–Ω–∞ –∑ BSC DEX (PancakeSwap)\"\"\"\n        try:\n            cache_key = f\"bsc_{symbol}\"\n            cached_price = self._get_cached_price(cache_key)\n            if cached_price:\n                return cached_price\n            \n            price_data = None\n            \n            # 1. CoinGecko API –¥–ª—è BSC\n            price_data = await self._fetch_coingecko_price(symbol, 'binance-smart-chain')\n            \n            if not price_data:\n                # 2. PancakeSwap API\n                price_data = await self._fetch_pancakeswap_price(symbol)\n            \n            if not price_data:\n                # 3. Fallback –¥–æ –º–æ–∫ –¥–∞–Ω–∏—Ö\n                price_data = self._get_mock_price(symbol, 'bsc')\n            \n            if price_data:\n                price_data['chain'] = 'bsc'\n                price_data['source'] = price_data.get('source', 'coingecko')\n                self._cache_price(cache_key, price_data)\n            \n            return price_data\n            \n        except Exception as e:\n            logger.error(f\"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è BSC —Ü—ñ–Ω–∏ –¥–ª—è {symbol}: {e}\")\n            return self._get_mock_price(symbol, 'bsc')\n    \n    async def get_solana_price(self, symbol: str) -> Optional[Dict]:\n        \"\"\"–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É —Ç–æ–∫–µ–Ω–∞ –∑ Solana DEX (Jupiter, Raydium)\"\"\"\n        try:\n            cache_key = f\"sol_{symbol}\"\n            cached_price = self._get_cached_price(cache_key)\n            if cached_price:\n                return cached_price\n            \n            price_data = None\n            \n            # 1. CoinGecko API –¥–ª—è Solana\n            price_data = await self._fetch_coingecko_price(symbol, 'solana')\n            \n            if not price_data:\n                # 2. Jupiter API\n                price_data = await self._fetch_jupiter_price(symbol)\n            \n            if not price_data:\n                # 3. Fallback –¥–æ –º–æ–∫ –¥–∞–Ω–∏—Ö\n                price_data = self._get_mock_price(symbol, 'solana')\n            \n            if price_data:\n                price_data['chain'] = 'solana'\n                price_data['source'] = price_data.get('source', 'coingecko')\n                self._cache_price(cache_key, price_data)\n            \n            return price_data\n            \n        except Exception as e:\n            logger.error(f\"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è Solana —Ü—ñ–Ω–∏ –¥–ª—è {symbol}: {e}\")\n            return self._get_mock_price(symbol, 'solana')\n    \n    async def _fetch_coingecko_price(self, symbol: str, platform: str) -> Optional[Dict]:\n        \"\"\"–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –∑ CoinGecko API\"\"\"\n        try:\n            # –ú–∞–ø—ñ–Ω–≥ —Å–∏–º–≤–æ–ª—ñ–≤ –¥–æ CoinGecko ID\n            symbol_mapping = {\n                'ADAUSDT': 'cardano',\n                'DOGEUSDT': 'dogecoin',\n                'XRPUSDT': 'ripple',\n                'AVAXUSDT': 'avalanche-2',\n                'DOTUSDT': 'polkadot',\n                'MATICUSDT': 'matic-network',\n                'LINKUSDT': 'chainlink',\n                'ATOMUSDT': 'cosmos',\n                'UNIUSDT': 'uniswap',\n                'FILUSDT': 'filecoin'\n            }\n            \n            # –í–∏–¥–∞–ª—è—î–º–æ USDT –∑ –∫—ñ–Ω—Ü—è –¥–ª—è –ø–æ—à—É–∫—É\n            clean_symbol = symbol.replace('USDT', '') + 'USDT' if 'USDT' in symbol else symbol\n            coin_id = symbol_mapping.get(clean_symbol)\n            \n            if not coin_id:\n                return None\n            \n            url = f\"https://api.coingecko.com/api/v3/simple/price\"\n            params = {\n                'ids': coin_id,\n                'vs_currencies': 'usd',\n                'include_24hr_change': 'true',\n                'include_24hr_vol': 'true'\n            }\n            \n            async with aiohttp.ClientSession() as session:\n                async with session.get(url, params=params, timeout=10) as response:\n                    if response.status == 200:\n                        data = await response.json()\n                        if coin_id in data:\n                            coin_data = data[coin_id]\n                            return {\n                                'price': coin_data.get('usd', 0),\n                                'volume_24h': coin_data.get('usd_24h_vol', 0),\n                                'change_24h': coin_data.get('usd_24h_change', 0),\n                                'source': 'coingecko',\n                                'timestamp': datetime.now(timezone.utc).isoformat()\n                            }\n            \n            return None\n        except Exception as e:\n            logger.debug(f\"CoinGecko API –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}\")\n            return None\n    \n    async def _fetch_uniswap_price(self, symbol: str) -> Optional[Dict]:\n        \"\"\"–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –∑ Uniswap API (–∑–∞–≥–ª—É—à–∫–∞)\"\"\"\n        try:\n            # –¢—É—Ç –±—É–¥–µ —Ä–µ–∞–ª—å–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Uniswap API\n            # –ü–æ–∫–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ None, —â–æ–± fallback –¥–æ —ñ–Ω—à–∏—Ö –¥–∂–µ—Ä–µ–ª\n            return None\n        except Exception as e:\n            logger.debug(f\"Uniswap API –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}\")\n            return None\n    \n    async def _fetch_pancakeswap_price(self, symbol: str) -> Optional[Dict]:\n        \"\"\"–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –∑ PancakeSwap API (–∑–∞–≥–ª—É—à–∫–∞)\"\"\"\n        try:\n            # –¢—É—Ç –±—É–¥–µ —Ä–µ–∞–ª—å–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ PancakeSwap API\n            return None\n        except Exception as e:\n            logger.debug(f\"PancakeSwap API –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}\")\n            return None\n    \n    async def _fetch_jupiter_price(self, symbol: str) -> Optional[Dict]:\n        \"\"\"–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –∑ Jupiter API (–∑–∞–≥–ª—É—à–∫–∞)\"\"\"\n        try:\n            # –¢—É—Ç –±—É–¥–µ —Ä–µ–∞–ª—å–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Jupiter API\n            return None\n        except Exception as e:\n            logger.debug(f\"Jupiter API –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}\")\n            return None\n    \n    def _get_cached_price(self, cache_key: str) -> Optional[Dict]:\n        \"\"\"–û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–∫–µ—à–æ–≤–∞–Ω—É —Ü—ñ–Ω—É\"\"\"\n        if cache_key in self.price_cache:\n            timestamp, price_data = self.price_cache[cache_key]\n            if time.time() - timestamp < self.cache_ttl:\n                return price_data\n        return None\n    \n    def _cache_price(self, cache_key: str, price_data: Dict):\n        \"\"\"–ó–∞–∫–µ—à—É–≤–∞—Ç–∏ —Ü—ñ–Ω—É\"\"\"\n        self.price_cache[cache_key] = (time.time(), price_data)\n    \n    def _get_mock_price(self, symbol: str, chain: str) -> Dict:\n        \"\"\"–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ –º–æ–∫-—Ü—ñ–Ω–∏\"\"\"\n        # –ë–∞–∑–æ–≤—ñ —Ü—ñ–Ω–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤\n        base_prices = {\n            'ADAUSDT': 0.48, 'XRPUSDT': 0.62, 'DOGEUSDT': 0.41,\n            'AVAXUSDT': 42.5, 'DOTUSDT': 7.2, 'MATICUSDT': 0.95,\n            'LINKUSDT': 18.4, 'ATOMUSDT': 9.8, 'UNIUSDT': 8.5,\n            'FILUSDT': 5.6, 'TRXUSDT': 0.12, 'XLMUSDT': 0.105\n        }\n        \n        base_price = base_prices.get(symbol, 1.0)\n        \n        # –î–æ–¥–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫—É –≤–∞—Ä—ñ–∞—Ü—ñ—é –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –º–µ—Ä–µ–∂\n        chain_multipliers = {\n            'ethereum': 1.001,    # Ethereum —Ç—Ä–æ—Ö–∏ –¥–æ—Ä–æ–∂—á–µ —á–µ—Ä–µ–∑ –≥–∞–∑\n            'bsc': 0.999,         # BSC —Ç—Ä–æ—Ö–∏ –¥–µ—à–µ–≤—à–µ\n            'solana': 1.0005      # Solana –≤ —Å–µ—Ä–µ–¥–∏–Ω—ñ\n        }\n        \n        multiplier = chain_multipliers.get(chain, 1.0)\n        \n        # –î–æ–¥–∞—î–º–æ –ø—Å–µ–≤–¥–æ–≤–∏–ø–∞–¥–∫–æ–≤—É –≤–∞—Ä—ñ–∞—Ü—ñ—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ —á–∞—Å—É\n        time_variation = (hash(f\"{symbol}_{chain}_{int(time.time() / 60)}\") % 200 - 100) / 10000  # ¬±1%\n        \n        final_price = base_price * multiplier * (1 + time_variation)\n        \n        return {\n            'price': final_price,\n            'volume_24h': 1000000 + (hash(symbol + chain) % 5000000),\n            'change_24h': (hash(symbol) % 200 - 100) / 10,  # -10% to +10%\n            'source': 'mock_data',\n            'timestamp': datetime.now(timezone.utc).isoformat(),\n            'chain': chain\n        }\n    \n    async def get_multiple_prices(self, symbols: List[str], chains: List[str] = ['ethereum', 'bsc', 'solana']) -> Dict:\n        \"\"\"–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω–∏ –∫—ñ–ª—å–∫–æ—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –∑ —Ä—ñ–∑–Ω–∏—Ö –º–µ—Ä–µ–∂\"\"\"\n        try:\n            results = {}\n            \n            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π —Å–∏–º–≤–æ–ª-–º–µ—Ä–µ–∂–∞\n            tasks = []\n            for symbol in symbols:\n                for chain in chains:\n                    if chain == 'ethereum':\n                        task = self.get_ethereum_price(symbol)\n                    elif chain == 'bsc':\n                        task = self.get_bsc_price(symbol)\n                    elif chain == 'solana':\n                        task = self.get_solana_price(symbol)\n                    else:\n                        continue\n                    \n                    tasks.append((symbol, chain, task))\n            \n            # –í–∏–∫–æ–Ω—É—î–º–æ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ\n            for symbol, chain, task in tasks:\n                try:\n                    price_data = await task\n                    if price_data:\n                        if symbol not in results:\n                            results[symbol] = {}\n                        results[symbol][chain] = price_data\n                except Exception as e:\n                    logger.warning(f\"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É {symbol} –Ω–∞ {chain}: {e}\")\n            \n            logger.info(f\"–û—Ç—Ä–∏–º–∞–Ω–æ —Ü—ñ–Ω–∏ –¥–ª—è {len(results)} —Å–∏–º–≤–æ–ª—ñ–≤\")\n            return results\n            \n        except Exception as e:\n            logger.error(f\"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–Ω–æ–∂–∏–Ω–Ω–∏—Ö —Ü—ñ–Ω: {e}\")\n            return {}\n    \n    async def get_price_with_liquidity(self, symbol: str, chain: str = 'ethereum') -> Dict:\n        \"\"\"–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É —Ä–∞–∑–æ–º –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å\"\"\"\n        try:\n            # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–∑–æ–≤—É —Ü—ñ–Ω—É\n            if chain == 'ethereum':\n                price_data = await self.get_ethereum_price(symbol)\n            elif chain == 'bsc':\n                price_data = await self.get_bsc_price(symbol)\n            elif chain == 'solana':\n                price_data = await self.get_solana_price(symbol)\n            else:\n                return {}\n            \n            if not price_data:\n                return {}\n            \n            # –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å (–ø–æ–∫–∏ —â–æ –º–æ–∫ –¥–∞–Ω—ñ)\n            price_data['liquidity'] = {\n                'total_liquidity_usd': price_data.get('volume_24h', 0) * 10,  # –ü—Ä–∏–ø—É—â–µ–Ω–Ω—è\n                'depth_1_percent': price_data.get('volume_24h', 0) * 0.1,    # –õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å –Ω–∞ 1%\n                'depth_5_percent': price_data.get('volume_24h', 0) * 0.5,    # –õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å –Ω–∞ 5%\n                'slippage_estimate': 0.003 if price_data.get('volume_24h', 0) > 1000000 else 0.01\n            }\n            \n            return price_data\n            \n        except Exception as e:\n            logger.error(f\"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å –¥–ª—è {symbol}: {e}\")\n            return {}\n\n# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä\nreal_dex_client = RealDexClient()\n\n# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É\nasync def get_eth_price(symbol: str) -> Optional[Dict]:\n    \"\"\"–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –∑ Ethereum DEX\"\"\"\n    return await real_dex_client.get_ethereum_price(symbol)\n\nasync def get_bsc_price(symbol: str) -> Optional[Dict]:\n    \"\"\"–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –∑ BSC DEX\"\"\"\n    return await real_dex_client.get_bsc_price(symbol)\n\nasync def get_sol_price(symbol: str) -> Optional[Dict]:\n    \"\"\"–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –∑ Solana DEX\"\"\"\n    return await real_dex_client.get_solana_price(symbol)\n\nasync def get_best_dex_price(symbol: str) -> Tuple[str, Dict]:\n    \"\"\"–ó–Ω–∞–π—Ç–∏ –Ω–∞–π–∫—Ä–∞—â—É —Ü—ñ–Ω—É —Å–µ—Ä–µ–¥ –≤—Å—ñ—Ö DEX\"\"\"\n    eth_price = await get_eth_price(symbol)\n    bsc_price = await get_bsc_price(symbol)\n    sol_price = await get_sol_price(symbol)\n    \n    prices = []\n    if eth_price:\n        prices.append(('ethereum', eth_price))\n    if bsc_price:\n        prices.append(('bsc', bsc_price))\n    if sol_price:\n        prices.append(('solana', sol_price))\n    \n    if not prices:\n        return 'none', {}\n    \n    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–∫—Ä–∞—â—É —Ü—ñ–Ω—É (–Ω–∞–π–≤–∏—â—É –¥–ª—è –ø—Ä–æ–¥–∞–∂—É)\n    best = max(prices, key=lambda x: x[1].get('price', 0))\n    return best[0], best[1]","size_bytes":16356},"replit.md":{"content":"# XT.com Arbitrage Trading Bot (Trinkenbot Enhanced)\n\n## Overview\n\nThis project is a sophisticated cryptocurrency arbitrage trading bot designed for XT.com futures markets. It automates the process of identifying and exploiting price discrepancies between XT.com futures and decentralized exchanges (Ethereum, BSC, Solana). The bot automatically scans hundreds of futures pairs, calculates spreads, and executes trades to capitalize on profitable opportunities. It integrates a React web dashboard, FastAPI backend, Flask admin panel, and a Telegram bot for comprehensive management and monitoring. The system incorporates advanced risk management, dual-account trading, and direct blockchain pool integrations for efficient and secure operations. The bot is optimized for 24/7 activity on a VM deployment.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nLanguage: Ukrainian (—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞)\n\n## System Architecture\n\n### Core Trading Engine\n- **Main Bot Logic**: Implements arbitrage detection and trading algorithms using threaded workers for concurrent symbol scanning.\n- **Market Scanner**: Discovers and monitors XT.com futures markets with runtime enable/disable controls.\n- **Spread Calculation**: Compares XT.com futures prices with DEX reference prices to identify arbitrage.\n- **Position Management**: Tracks active positions with pyramiding support.\n- **Risk Management**: Internal Take-Profit/Stop-Loss logic for flexible exit strategies without publishing orders.\n\n### Exchange Integration\n- **XT.com Client**: CCXT-based integration for futures trading on XT.com, supporting dual-account parallel trading, futures market discovery, order book depth analysis, balance management, and market order execution with leverage.\n- **DEX Integration**: Direct integration with decentralized exchanges (Uniswap V2/V3, PancakeSwap V2, Raydium) via Web3 for Ethereum, BSC, and Solana networks to fetch real-time price references directly from liquidity pools.\n\n### Administrative Interfaces\n- **Flask Web Admin**: Comprehensive web-based control panel with dual admin support, real-time balance and position monitoring, symbol-level trading controls, configuration management, and live/dry-run mode switching.\n- **Telegram Bot Admin**: Mobile-friendly administration interface with multi-admin support, group notifications, real-time status updates, position monitoring, and configuration adjustments via chat.\n\n### Configuration Management\n- **Environment-Based Config**: Centralized configuration using environment variables for API keys, trading parameters (amounts, spreads, leverage, position limits), safety controls, and authentication settings.\n\n### Utility Systems\n- **Utils Module**: Provides supporting functions for spread calculation, a centralized notification system (sending critical messages to both administrators and a Telegram group), Telegram message sending, and logging.\n\n### Application Entry Points\n- **Main Runner**: Orchestrates system startup, launching the trading bot, Telegram admin bot, and Flask web admin panel in separate processes/threads for graceful service coordination.\n\n## External Dependencies\n\n### Trading Infrastructure\n- **XT.com API**: Primary trading venue for futures contracts, accessed via the CCXT library for market data, order execution, and account management.\n\n### Price Reference Sources\n- **Ethereum RPC (eth.llamarpc.com)**: For Uniswap V2/V3 price fetching.\n- **BSC RPC (bsc-dataseed.binance.org)**: For PancakeSwap V2 price fetching.\n- **Solana RPC (api.mainnet-beta.solana.com)**: For Raydium price fetching.\n- **Web3.py**: Python library for interacting with Ethereum and BSC blockchains.\n- **Solana**: Python library for interacting with the Solana blockchain.\n\n### Communication Services\n- **Telegram Bot API**: Used for mobile administration, real-time alerts, and notifications.\n\n### Development and Deployment\n- **FastAPI**: Backend web framework.\n- **Flask**: Web framework for the admin panel interface.\n- **React**: Frontend for the web dashboard.\n- **Uvicorn**: ASGI server for FastAPI.\n- **Gunicorn**: WSGI HTTP server for Python web applications, used for deployment.\n- **CCXT**: Unified cryptocurrency exchange API library.\n- **Python-Telegram-Bot**: Library for Telegram bot interaction.\n- **TA-Lib**: Technical analysis library for indicators like RSI, MACD, Bollinger Bands.\n- **Pandas**: Data analysis and manipulation library.\n- **NumPy**: Numerical computing library.","size_bytes":4495},"signal_parser.py":{"content":"import re\nimport logging\nfrom typing import Optional, Dict, Any\nfrom dataclasses import dataclass\n\n@dataclass\nclass ArbitrageSignal:\n    \"\"\"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É\"\"\"\n    asset: str = \"\"\n    action: str = \"\"  # LONG/SHORT\n    xt_price: float = 0.0\n    dex_price: float = 0.0\n    spread_percent: float = 0.0\n    size_usd: float = 0.0\n    tp: float = 0.0  # Take Profit\n    sl: float = 0.0  # Stop Loss\n    leverage: int = 1\n    liquidity_usd: float = 0.0\n    volume_24h_usd: float = 0.0\n    \n    @property\n    def is_valid(self) -> bool:\n        \"\"\"–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Å–∏–≥–Ω–∞–ª –º–∞—î –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è\"\"\"\n        required_fields = [\n            self.asset, self.action, self.xt_price, self.dex_price, \n            self.spread_percent, self.size_usd, self.tp, self.sl\n        ]\n        return all(field for field in required_fields)\n\nclass SignalParser:\n    \"\"\"\n    –ü–∞—Ä—Å–µ—Ä —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞\n    \n    –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç:\n    üö® ARBITRAGE SIGNAL üö®\n    ASSET: PEOPLE\n    ACTION: LONG\n    XT_PRICE: $0.020940\n    DEX_PRICE: $0.021319\n    SPREAD: +1.72%\n    SIZE_USD: $5.0\n    TP: $0.021191\n    SL: $0.018846\n    LEVERAGE: 5x\n    LIQUIDITY: $391,982\n    VOLUME_24H: $497,000\n    \"\"\"\n    \n    def __init__(self):\n        # –†–µ–≥—É–ª—è—Ä–Ω—ñ –≤–∏—Ä–∞–∑–∏ –¥–ª—è –≤–∏—Ç—è–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö\n        self.patterns = {\n            'asset': r'ASSET:\\s*([A-Z0-9]+)',\n            'action': r'ACTION:\\s*(LONG|SHORT)',\n            'xt_price': r'XT_PRICE:\\s*\\$?([0-9]+\\.?[0-9]*)',\n            'dex_price': r'DEX_PRICE:\\s*\\$?([0-9]+\\.?[0-9]*)',\n            'spread': r'SPREAD:\\s*([+-]?[0-9]+\\.?[0-9]*)%?',\n            'size_usd': r'SIZE_USD:\\s*\\$?([0-9]+\\.?[0-9]*)',\n            'tp': r'TP:\\s*\\$?([0-9]+\\.?[0-9]*)',\n            'sl': r'SL:\\s*\\$?([0-9]+\\.?[0-9]*)',\n            'leverage': r'LEVERAGE:\\s*([0-9]+)x?',\n            'liquidity': r'LIQUIDITY:\\s*\\$?([0-9,]+(?:\\.[0-9]*)?)',\n            'volume_24h': r'VOLUME_24H:\\s*\\$?([0-9,]+(?:\\.[0-9]*)?)'\n        }\n    \n    def parse_signal(self, text: str) -> Optional[ArbitrageSignal]:\n        \"\"\"\n        –ü–∞—Ä—Å–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–∏–≥–Ω–∞–ª—É —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É ArbitrageSignal\n        \n        Args:\n            text: –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Å–∏–≥–Ω–∞–ª–æ–º\n            \n        Returns:\n            ArbitrageSignal –∞–±–æ None —è–∫—â–æ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ–≤–¥–∞–ª–∏–π\n        \"\"\"\n        try:\n            signal = ArbitrageSignal()\n            \n            # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ —Å–∏–º–≤–æ–ª–∏ —Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ –≤–µ—Ä—Ö–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä –¥–ª—è –ø–æ—à—É–∫—É\n            text_upper = text.upper().replace(',', '')\n            \n            # –í–∏—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ –∑–∞ –ø–∞—Ç–µ—Ä–Ω–∞–º–∏\n            for field, pattern in self.patterns.items():\n                match = re.search(pattern, text_upper, re.IGNORECASE)\n                if match:\n                    value = match.group(1)\n                    \n                    # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö\n                    if field == 'asset':\n                        signal.asset = value.upper()\n                    elif field == 'action':\n                        signal.action = value.upper()\n                    elif field in ['xt_price', 'dex_price', 'spread', 'tp', 'sl']:\n                        signal.__setattr__(field.replace('spread', 'spread_percent'), float(value))\n                    elif field == 'size_usd':\n                        signal.size_usd = float(value)\n                    elif field == 'leverage':\n                        signal.leverage = int(value)\n                    elif field in ['liquidity', 'volume_24h']:\n                        # –û–±—Ä–æ–±–ª—è—î–º–æ —á–∏—Å–ª–∞ –∑ –∫–æ–º–∞–º–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 391,982)\n                        clean_value = value.replace(',', '')\n                        signal.__setattr__(field.replace('volume_24h', 'volume_24h_usd').replace('liquidity', 'liquidity_usd'), float(clean_value))\n            \n            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å–∏–≥–Ω–∞–ª –º–∞—î –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è\n            if signal.asset and signal.action and signal.xt_price > 0 and signal.dex_price > 0:\n                logging.info(f\"‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø–∞—Ä—Å–æ–≤–∞–Ω–∏–π —Å–∏–≥–Ω–∞–ª: {signal.asset} {signal.action} ${signal.xt_price:.6f}\")\n                return signal\n            else:\n                logging.warning(f\"‚ùå –ù–µ–ø–æ–≤–Ω–∏–π —Å–∏–≥–Ω–∞–ª: {signal.asset} | XT:{signal.xt_price} | DEX:{signal.dex_price}\")\n                return None\n                \n        except Exception as e:\n            logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —Å–∏–≥–Ω–∞–ª—É: {e}\")\n            return None\n    \n    def validate_signal_thresholds(self, signal: ArbitrageSignal) -> Dict[str, Any]:\n        \"\"\"\n        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å–∏–≥–Ω–∞–ª –∑–≥—ñ–¥–Ω–æ –∑ –ø–æ—Ä–æ–≥–æ–≤–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏\n        \n        Returns:\n            dict –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏\n        \"\"\"\n        from config import MIN_SPREAD, MAX_SPREAD\n        \n        # –ü–æ—Ä–æ–≥–∏ –∑–≥—ñ–¥–Ω–æ –∑ –≤–∞—à–∏–º–∏ –≤–∏–º–æ–≥–∞–º–∏\n        from config import MIN_24H_VOLUME_USD, MIN_POOLED_LIQUIDITY_USD\n        \n        validation_result = {\n            'valid': True,\n            'errors': [],\n            'warnings': []\n        }\n        \n        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ø—Ä–µ–¥—É\n        spread = abs(signal.spread_percent)\n        if spread < MIN_SPREAD:\n            validation_result['valid'] = False\n            validation_result['errors'].append(f\"–°–ø—Ä–µ–¥ {spread:.2f}% < –º—ñ–Ω—ñ–º—É–º {MIN_SPREAD}%\")\n        \n        if spread > MAX_SPREAD:\n            validation_result['valid'] = False\n            validation_result['errors'].append(f\"–°–ø—Ä–µ–¥ {spread:.2f}% > –º–∞–∫—Å–∏–º—É–º {MAX_SPREAD}%\")\n        \n        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±'—î–º—É –∑–∞ 24 –≥–æ–¥–∏–Ω–∏\n        if signal.volume_24h_usd > 0 and signal.volume_24h_usd < MIN_24H_VOLUME_USD:\n            validation_result['valid'] = False\n            validation_result['errors'].append(f\"–û–±'—î–º ${signal.volume_24h_usd:,.0f} < –º—ñ–Ω—ñ–º—É–º ${MIN_24H_VOLUME_USD:,.0f}\")\n        \n        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ\n        if signal.liquidity_usd > 0 and signal.liquidity_usd < MIN_POOLED_LIQUIDITY_USD:\n            validation_result['valid'] = False\n            validation_result['errors'].append(f\"–õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å ${signal.liquidity_usd:,.0f} < –º—ñ–Ω—ñ–º—É–º ${MIN_POOLED_LIQUIDITY_USD:,.0f}\")\n        \n        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑—É–º–Ω–æ—Å—Ç—ñ —Ü—ñ–Ω (—á–∏ –Ω–µ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π —Å–ø—Ä–µ–¥ = –ø—ñ–¥–æ–∑—Ä—ñ–ª–æ)\n        price_ratio = max(signal.xt_price, signal.dex_price) / min(signal.xt_price, signal.dex_price)\n        if price_ratio > 1.5:  # >50% —Ä—ñ–∑–Ω–∏—Ü—è —Ü—ñ–Ω –ø—ñ–¥–æ–∑—Ä—ñ–ª–æ\n            validation_result['warnings'].append(f\"–ü—ñ–¥–æ–∑—Ä—ñ–ª–∞ —Ä—ñ–∑–Ω–∏—Ü—è —Ü—ñ–Ω: {price_ratio:.2f}x\")\n        \n        return validation_result\n\n# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—è—Ö\nsignal_parser = SignalParser()\n\ndef parse_arbitrage_signal(text: str) -> Optional[ArbitrageSignal]:\n    \"\"\"–ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É —Å–∏–≥–Ω–∞–ª—É\"\"\"\n    return signal_parser.parse_signal(text)\n\ndef validate_signal(signal: ArbitrageSignal) -> Dict[str, Any]:\n    \"\"\"–ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Å–∏–≥–Ω–∞–ª—É\"\"\"\n    return signal_parser.validate_signal_thresholds(signal)","size_bytes":7594},"signal_verification.py":{"content":"import logging\nimport time\nfrom typing import Dict, Any, Optional, Tuple\nfrom dataclasses import dataclass, field\n\nfrom signal_parser import ArbitrageSignal\n# Simple fallback for price dynamics\nclass DynamicsAnalysis:\n    def __init__(self):\n        self.trend = \"neutral\"\n        self.momentum = 0.0\nfrom config import (\n    MIN_24H_VOLUME_USD, MIN_POOLED_LIQUIDITY_USD, MIN_SPREAD, MAX_SPREAD,\n    MAX_SLIPPAGE_PERCENT, SLIPPAGE_PADDING, COOLDOWN_SEC,\n    MIN_VOLATILITY_15MIN, MAX_VOLATILITY_15MIN, MIN_ORDERBOOK_DEPTH_MULTIPLIER,\n    MIN_BUY_RATIO_PERCENT, ORDER_AMOUNT, MIN_NET_PROFIT_PERCENT, ESTIMATED_TRADING_COSTS_PERCENT\n)\n\n@dataclass\nclass VerificationResult:\n    \"\"\"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É\"\"\"\n    valid: bool = False\n    errors: list = field(default_factory=list)\n    warnings: list = field(default_factory=list)\n    \n    # –î–∞–Ω—ñ –∑ XT.com\n    xt_found: bool = False\n    xt_symbol: str = \"\"\n    xt_price: float = 0.0\n    xt_tradeable: bool = False\n    \n    # –î–∞–Ω—ñ –∑ DEX\n    dex_found: bool = False\n    dex_pair_address: str = \"\"\n    dex_token_address: str = \"\"\n    dex_price: float = 0.0\n    dex_liquidity: float = 0.0\n    dex_volume_24h: float = 0.0\n    dex_chain: str = \"\"\n    dex_name: str = \"\"\n    \n    # –†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏\n    actual_spread: float = 0.0\n    price_ratio: float = 0.0\n    honeypot_status: str = \"unknown\"\n    \n    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑–∏ –∑–≥—ñ–¥–Ω–æ –∑ –≤–∏–º–æ–≥–∞–º–∏\n    volatility_15min: float = 0.0\n    buy_ratio_percent: float = 0.0\n    orderbook_depth_ratio: float = 0.0\n    price_dynamics_15min: float = 0.0\n    price_dynamics_1hour: float = 0.0\n    \n    # üìä –ù–û–í–Ü –î–ê–ù–Ü: –ì–ª–∏–±–∏–Ω–∞ —Ä–∏–Ω–∫—É —Ç–∞ –¥–∏–Ω–∞–º—ñ–∫–∞ —Ü—ñ–Ω\n    market_depth_data: Dict = field(default_factory=dict)\n    price_dynamics_analysis: Dict = field(default_factory=dict)\n    trend_direction: str = \"unknown\"\n    momentum_score: float = 0.0\n    support_resistance_levels: Dict = field(default_factory=dict)\n    \n    # –ü–æ—Å–∏–ª–∞–Ω–Ω—è\n    dexscreener_link: str = \"\"\n    pancakeswap_link: str = \"\"\n    uniswap_link: str = \"\"\n    \n\nclass SignalVerification:\n    \"\"\"\n    –ö–ª–∞—Å –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑–≥—ñ–¥–Ω–æ –∑ –≤–∞—à–∏–º–∏ –≤–∏–º–æ–≥–∞–º–∏:\n    \n    1. –ó–Ω–∞–π—Ç–∏ token –Ω–∞ XT.com\n    2. –ó–Ω–∞–π—Ç–∏ –ø–∞—Ä—É –Ω–∞ DEX  \n    3. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ volume/liquidity\n    4. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ spread\n    5. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ honeypot\n    \"\"\"\n    \n    def __init__(self):\n        self.cooldown_cache = {}  # –ö–µ—à –¥–ª—è –∞–Ω—Ç–∏-–¥—É–±–ª—å –∫—É–ª–¥–∞—É–Ω—É\n        \n    def verify_signal(self, signal: ArbitrageSignal) -> VerificationResult:\n        \"\"\"\n        –ü–æ–≤–Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Å–∏–≥–Ω–∞–ª—É –∑–≥—ñ–¥–Ω–æ –∑ –≤–∞—à–∏–º–∏ –≤–∏–º–æ–≥–∞–º–∏\n        \n        Args:\n            signal: –ü–∞—Ä—Å–æ–≤–∞–Ω–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π —Å–∏–≥–Ω–∞–ª\n            \n        Returns:\n            VerificationResult –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏\n        \"\"\"\n        result = VerificationResult()\n        \n        try:\n            # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω—É\n            if not self._check_cooldown(signal.asset):\n                result.errors.append(f\"–°–∏–º–≤–æ–ª {signal.asset} –≤ –∫—É–ª–¥–∞—É–Ω—ñ ({COOLDOWN_SEC}—Å)\")\n                return result\n            \n            # 2. –ó–Ω–∞—Ö–æ–¥–∏–º–æ token –Ω–∞ XT.com\n            xt_result = self._verify_xt_token(signal)\n            result.xt_found = xt_result['found']\n            result.xt_symbol = xt_result.get('symbol', '')\n            result.xt_price = xt_result.get('price', 0.0)\n            result.xt_tradeable = xt_result.get('tradeable', False)\n            \n            if not result.xt_found:\n                result.errors.append(f\"–¢–æ–∫–µ–Ω {signal.asset} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ XT.com\")\n                return result\n            \n            if not result.xt_tradeable:\n                result.errors.append(f\"–¢–æ–∫–µ–Ω {signal.asset} –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ –Ω–∞ XT.com\")\n                return result\n                \n            # 3. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–∞—Ä—É –Ω–∞ DEX\n            dex_result = self._verify_dex_pair(signal)\n            result.dex_found = dex_result['found']\n            result.dex_pair_address = dex_result.get('pair_address', '')\n            result.dex_token_address = dex_result.get('token_address', '')\n            result.dex_price = dex_result.get('price', 0.0)\n            result.dex_liquidity = dex_result.get('liquidity', 0.0)\n            result.dex_volume_24h = dex_result.get('volume_24h', 0.0)\n            result.dex_chain = dex_result.get('chain', '')\n            result.dex_name = dex_result.get('dex_name', '')\n            \n            if not result.dex_found:\n                result.errors.append(f\"–Ø–∫—ñ—Å–Ω–∞ DEX –ø–∞—Ä–∞ –¥–ª—è {signal.asset} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞\")\n                return result\n            \n            # 4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ volume —Ç–∞ liquidity\n            if result.dex_volume_24h < MIN_24H_VOLUME_USD:\n                result.errors.append(f\"–û–±'—î–º ${result.dex_volume_24h:,.0f} < –º—ñ–Ω—ñ–º—É–º ${MIN_24H_VOLUME_USD:,.0f}\")\n                \n            if result.dex_liquidity < MIN_POOLED_LIQUIDITY_USD:\n                result.errors.append(f\"–õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å ${result.dex_liquidity:,.0f} < –º—ñ–Ω—ñ–º—É–º ${MIN_POOLED_LIQUIDITY_USD:,.0f}\")\n            \n            # 5. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ spread —Ç–∞ —á–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫\n            if result.xt_price > 0 and result.dex_price > 0:\n                result.actual_spread = ((result.dex_price - result.xt_price) / result.xt_price) * 100\n                result.price_ratio = max(result.xt_price, result.dex_price) / min(result.xt_price, result.dex_price)\n                \n                spread_abs = abs(result.actual_spread)\n                \n                # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —á–∏—Å—Ç–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–º—ñ—Å—ñ–π\n                net_profit = spread_abs - ESTIMATED_TRADING_COSTS_PERCENT\n                \n                if net_profit < MIN_NET_PROFIT_PERCENT:\n                    result.errors.append(f\"–ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ {net_profit:.2f}% < –º—ñ–Ω—ñ–º—É–º {MIN_NET_PROFIT_PERCENT}%\")\n                    \n                if spread_abs > MAX_SPREAD:\n                    result.errors.append(f\"–°–ø—Ä–µ–¥ {spread_abs:.2f}% > –º–∞–∫—Å–∏–º—É–º {MAX_SPREAD}%\")\n                    \n                # –ü—ñ–¥–æ–∑—Ä—ñ–ª—ñ —Ü—ñ–Ω–∏\n                if result.price_ratio > 1.5:\n                    result.warnings.append(f\"–ü—ñ–¥–æ–∑—Ä—ñ–ª–∞ —Ä—ñ–∑–Ω–∏—Ü—è —Ü—ñ–Ω: {result.price_ratio:.2f}x\")\n            \n            # 6. –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ö–û–ù–ö–†–ï–¢–ù–£ —Ç–æ—Ä–≥–æ–≤—É –ø–∞—Ä—É\n            # –ü–†–Ü–û–†–ò–¢–ï–¢ 1: –ì–æ—Ç–æ–≤–µ exact_pair_url –∑ DexCheck Pro\n            if dex_result.get('exact_pair_url'):\n                result.dexscreener_link = dex_result['exact_pair_url']\n                logging.info(f\"üîó –ì–û–¢–û–í–ï EXACT URL –¥–ª—è {signal.asset}: {result.dexscreener_link}\")\n            # –ü–†–Ü–û–†–ò–¢–ï–¢ 2: –ë—É–¥—É—î–º–æ –∑ pair_address —Ç–∞ chain\n            elif result.dex_pair_address and result.dex_chain:\n                result.dexscreener_link = self._generate_dexscreener_link(result.dex_chain, result.dex_pair_address)\n                logging.info(f\"üîó –ö–û–ù–ö–†–ï–¢–ù–ê –ü–ê–†–ê –¥–ª—è {signal.asset}: {result.dexscreener_link}\")\n            # –ü–†–Ü–û–†–ò–¢–ï–¢ 3: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ token_address —è–∫—â–æ —î\n            elif result.dex_token_address and result.dex_chain:\n                result.dexscreener_link = f\"https://dexscreener.com/{result.dex_chain}/{result.dex_token_address}\"\n                logging.info(f\"üîó –¢–û–ö–ï–ù –ê–î–†–ï–°–ê –¥–ª—è {signal.asset}: {result.dexscreener_link}\")\n            else:\n                # –û–°–¢–ê–ù–ù–Ü–ô FALLBACK: –∑ –Ω–∞–∑–≤–æ—é —Ç–æ–∫–µ–Ω–∞\n                clean_token = signal.asset.replace('/USDT:USDT', '').replace('/USDT', '').upper()\n                chain = 'ethereum'  # Default\n                result.dexscreener_link = f\"https://dexscreener.com/{chain}/{clean_token}\"\n                logging.info(f\"üîó FALLBACK –¢–û–ö–ï–ù –¥–ª—è {signal.asset}: {result.dexscreener_link}\")\n                \n            result.pancakeswap_link = self._generate_pancakeswap_link(result.dex_token_address, result.dex_chain)\n            result.uniswap_link = self._generate_uniswap_link(result.dex_token_address, result.dex_chain)\n            \n            # 7. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ honeypot (—à–≤–∏–¥–∫–∞ —Å–∏–º—É–ª—è—Ü—ñ—è)\n            honeypot_result = self._check_honeypot(result.dex_token_address, result.dex_chain)\n            result.honeypot_status = honeypot_result\n            \n            if honeypot_result == \"suspicious\":\n                result.errors.append(\"–ü—ñ–¥–æ–∑—Ä–∞ –Ω–∞ honeypot - —Ç–æ–∫–µ–Ω –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –¥–ª—è –±–µ–∑–ø–µ–∫–∏\")\n            elif honeypot_result == \"blocked\":\n                result.errors.append(\"–¢–æ–∫–µ–Ω –±–ª–æ–∫—É—î –ø—Ä–æ–¥–∞–∂ (honeypot)\")\n            elif honeypot_result == \"unknown\":\n                result.warnings.append(\"‚ö†Ô∏è Honeypot —Å—Ç–∞—Ç—É—Å –Ω–µ–≤—ñ–¥–æ–º–∏–π - –±—É–¥—å—Ç–µ –æ–±–µ—Ä–µ–∂–Ω—ñ\")\n            \n            # 8. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ –∑–∞ 15 —Ö–≤–∏–ª–∏–Ω\n            volatility_result = self._check_volatility_15min(signal.asset, result.dex_pair_address, result.dex_chain)\n            result.volatility_15min = volatility_result\n            \n            if volatility_result < MIN_VOLATILITY_15MIN:\n                result.errors.append(f\"–í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å {volatility_result:.1f}% < –º—ñ–Ω—ñ–º—É–º {MIN_VOLATILITY_15MIN}%\")\n            elif volatility_result > MAX_VOLATILITY_15MIN:\n                result.errors.append(f\"–í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å {volatility_result:.1f}% > –º–∞–∫—Å–∏–º—É–º {MAX_VOLATILITY_15MIN}%\")\n            \n            # 9. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–ª–∏–±–∏–Ω–∏ –æ—Ä–¥–µ—Ä–±—É–∫—É\n            orderbook_result = self._check_orderbook_depth(signal.asset, result.dex_pair_address, result.dex_chain)\n            result.orderbook_depth_ratio = orderbook_result\n            \n            required_depth = ORDER_AMOUNT * MIN_ORDERBOOK_DEPTH_MULTIPLIER\n            if orderbook_result < required_depth:\n                result.warnings.append(f\"–ì–ª–∏–±–∏–Ω–∞ –æ—Ä–¥–µ—Ä–±—É–∫—É ${orderbook_result:.0f} < –ø–æ—Ç—Ä—ñ–±–Ω–æ ${required_depth:.0f}\")\n            \n            # 10. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è buy/sell\n            buysell_result = self._check_buy_sell_ratio(signal.asset, result.dex_pair_address, result.dex_chain)\n            result.buy_ratio_percent = buysell_result\n            \n            if buysell_result < MIN_BUY_RATIO_PERCENT:\n                result.warnings.append(f\"Buy/Sell —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è {buysell_result:.1f}% < –º—ñ–Ω—ñ–º—É–º {MIN_BUY_RATIO_PERCENT}%\")\n            \n            # 11. –ê–Ω–∞–ª—ñ–∑ –¥–∏–Ω–∞–º—ñ–∫–∏ —Ü—ñ–Ω –∑–∞ 15 —Ö–≤ —Ç–∞ 1 –≥–æ–¥–∏–Ω—É\n            price_dynamics_15min, price_dynamics_1hour = self._analyze_price_dynamics(signal.asset, result.dex_pair_address, result.dex_chain)\n            result.price_dynamics_15min = price_dynamics_15min\n            result.price_dynamics_1hour = price_dynamics_1hour\n            \n            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–∏–Ω–∞–º—ñ–∫–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É\n            logging.info(f\"üìä –î–∏–Ω–∞–º—ñ–∫–∞ —Ü—ñ–Ω {signal.asset}: 15—Ö–≤={price_dynamics_15min:.1f}%, 1–≥–æ–¥={price_dynamics_1hour:.1f}%\")\n            \n            # 12. üìä –ù–û–í–ò–ô: –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –ø—Ä–æ –≥–ª–∏–±–∏–Ω—É —Ä–∏–Ω–∫—É XT.com –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é\n            market_depth = self._collect_market_depth_analysis(result.xt_symbol)\n            result.market_depth_data = market_depth if market_depth else {}\n            \n            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ –≥–ª–∏–±–∏–Ω–∏ —Ä–∏–Ω–∫—É\n            if market_depth:\n                depth_validation = self._validate_market_depth_quality(market_depth, ORDER_AMOUNT)\n                if not depth_validation['valid']:\n                    result.errors.append(f\"–ì–ª–∏–±–∏–Ω–∞ —Ä–∏–Ω–∫—É –Ω–µ–∑–∞–¥–æ–≤—ñ–ª—å–Ω–∞: {depth_validation['reason']}\")\n            \n            # 13. üìà –ù–û–í–ò–ô: –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–∏–Ω–∞–º—ñ–∫–∏ —Ü—ñ–Ω –∑ —Ç—Ä–µ–∫–µ—Ä–æ–º —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é\n            price_dynamics_enhanced = self._collect_enhanced_price_dynamics(signal.asset)\n            result.price_dynamics_analysis = price_dynamics_enhanced if price_dynamics_enhanced else {}\n            \n            if price_dynamics_enhanced:\n                analysis_15m = price_dynamics_enhanced.get('15m')\n                if analysis_15m:\n                    result.trend_direction = analysis_15m['trend_direction']\n                    result.momentum_score = analysis_15m['momentum_score']\n                    result.support_resistance_levels = analysis_15m['support_resistance']\n                    \n                    # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —è–∫–æ—Å—Ç—ñ —Ç–∞ —Ç—Ä–µ–Ω–¥—É\n                    dynamics_validation = self._validate_price_dynamics_quality(analysis_15m)\n                    if not dynamics_validation['valid']:\n                        result.warnings.append(f\"–î–∏–Ω–∞–º—ñ–∫–∞ —Ü—ñ–Ω: {dynamics_validation['reason']}\")\n            \n            # –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞\n            result.valid = len(result.errors) == 0\n            \n            if result.valid:\n                self._set_cooldown(signal.asset)\n                logging.info(f\"‚úÖ –°–∏–≥–Ω–∞–ª {signal.asset} –ø—Ä–æ–π—à–æ–≤ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é: —Å–ø—Ä–µ–¥ {result.actual_spread:.2f}%\")\n            else:\n                logging.warning(f\"‚ùå –°–∏–≥–Ω–∞–ª {signal.asset} –ù–ï –ø—Ä–æ–π—à–æ–≤ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é: {'; '.join(result.errors)}\")\n                \n        except Exception as e:\n            logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Å–∏–≥–Ω–∞–ª—É {signal.asset}: {e}\")\n            result.errors.append(f\"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {str(e)}\")\n            \n        return result\n    \n    def _check_cooldown(self, symbol: str) -> bool:\n        \"\"\"–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –Ω–µ –≤ –∫—É–ª–¥–∞—É–Ω—ñ —Å–∏–º–≤–æ–ª\"\"\"\n        now = time.time()\n        last_check = self.cooldown_cache.get(symbol, 0)\n        return (now - last_check) >= COOLDOWN_SEC\n    \n    def _set_cooldown(self, symbol: str):\n        \"\"\"–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∫—É–ª–¥–∞—É–Ω –¥–ª—è —Å–∏–º–≤–æ–ª—É\"\"\"\n        self.cooldown_cache[symbol] = time.time()\n    \n    def _verify_xt_token(self, signal: ArbitrageSignal) -> Dict[str, Any]:\n        \"\"\"–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—É –Ω–∞ XT.com\"\"\"\n        try:\n            from xt_client import create_xt, get_xt_price, is_xt_futures_tradeable\n            \n            # –§–æ—Ä–º—É—î–º–æ symbol –¥–ª—è XT.com\n            xt_symbol = f\"{signal.asset}/USDT:USDT\"\n            \n            xt = create_xt()\n            if not xt:\n                return {'found': False, 'error': 'XT –∫–ª—ñ—î–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'}\n            \n            # –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω—É\n            xt_price = get_xt_price(xt, xt_symbol)\n            if not xt_price or xt_price <= 0:\n                return {'found': False, 'error': '–¶—ñ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}\n            \n            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Ç–æ—Ä–≥—ñ–≤–ª—ñ\n            tradeable = is_xt_futures_tradeable(xt_symbol)\n            \n            return {\n                'found': True,\n                'symbol': xt_symbol,\n                'price': xt_price,\n                'tradeable': tradeable\n            }\n            \n        except Exception as e:\n            logging.error(f\"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ XT.com –¥–ª—è {signal.asset}: {e}\")\n            return {'found': False, 'error': str(e)}\n    \n    def _verify_dex_pair(self, signal: ArbitrageSignal) -> Dict[str, Any]:\n        \"\"\"–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫—Ä–∞—â—É DEX –ø–∞—Ä—É –¥–ª—è —Ç–æ–∫–µ–Ω—É\"\"\"\n        try:\n            from utils import get_shared_dex_client\n            \n            dex_client = get_shared_dex_client()\n            if not dex_client:\n                return {'found': False, 'error': 'DEX –∫–ª—ñ—î–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'}\n            \n            # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â—É –ø–∞—Ä—É\n            best_pair = dex_client.resolve_best_pair(signal.asset)\n            if not best_pair:\n                return {'found': False, 'error': 'DEX –ø–∞—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞'}\n            \n            return {\n                'found': True,\n                'pair_address': best_pair.get('pair_address', ''),\n                'token_address': best_pair.get('token_address', ''),\n                'price': best_pair.get('price_usd', 0.0),\n                'liquidity': best_pair.get('liquidity_usd', 0.0),\n                'volume_24h': best_pair.get('volume_24h', 0.0),\n                'chain': best_pair.get('chain', 'unknown'),\n                'dex_name': best_pair.get('dex_name', 'DEX'),\n                'exact_pair_url': best_pair.get('exact_pair_url', '')\n            }\n            \n        except Exception as e:\n            logging.error(f\"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ DEX –¥–ª—è {signal.asset}: {e}\")\n            return {'found': False, 'error': str(e)}\n    \n    def _generate_dexscreener_link(self, chain: str, pair_address: str, token_address: str = \"\") -> str:\n        \"\"\"–ì–µ–Ω–µ—Ä—É—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ DexScreener –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –ø–∞—Ä–∏\"\"\"\n        if pair_address:\n            return f\"https://dexscreener.com/{chain}/{pair_address}\"\n        elif token_address:\n            return f\"https://dexscreener.com/{chain}?q={token_address}\"\n        return f\"https://dexscreener.com/{chain}\"\n    \n    def _generate_pancakeswap_link(self, token_address: str, chain: str) -> str:\n        \"\"\"–ì–µ–Ω–µ—Ä—É—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ PancakeSwap –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞\"\"\"\n        if chain.lower() == 'bsc' and token_address:\n            return f\"https://pancakeswap.finance/swap?outputCurrency={token_address}\"\n        return \"\"\n    \n    def _generate_uniswap_link(self, token_address: str, chain: str) -> str:\n        \"\"\"–ì–µ–Ω–µ—Ä—É—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Uniswap –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞\"\"\"\n        if chain.lower() == 'ethereum' and token_address:\n            return f\"https://app.uniswap.org/#/swap?outputCurrency={token_address}\"\n        return \"\"\n    \n    def _check_honeypot(self, token_address: str, chain: str) -> str:\n        \"\"\"\n        –†–µ–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ honeypot —á–µ—Ä–µ–∑ Honeypot.is API + Web3 —Å–∏–º—É–ª—è—Ü—ñ—è\n        –ü–æ–≤–µ—Ä—Ç–∞—î: 'ok', 'suspicious', 'blocked', 'unknown'\n        \"\"\"\n        try:\n            import requests\n            from web3 import Web3\n            \n            # –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞ –≤—ñ–¥–æ–º–∏–º–∏ –ø–∞—Ç–µ—Ä–Ω–∞–º–∏\n            if not token_address or len(token_address) < 10:\n                return 'unknown'\n            \n            # üöÄ –†–ï–ê–õ–¨–ù–ê HONEYPOT –ü–ï–†–ï–í–Ü–†–ö–ê —á–µ—Ä–µ–∑ Honeypot.is API\n            try:\n                honeypot_url = f\"https://api.honeypot.is/v2/IsHoneypot?address={token_address}\"\n                response = requests.get(honeypot_url, timeout=5)\n                \n                if response.status_code == 200:\n                    data = response.json()\n                    \n                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ honeypot —Å—Ç–∞—Ç—É—Å—É\n                    if data.get('IsHoneypot', False):\n                        logging.warning(f\"üö® HONEYPOT DETECTED: {token_address} - BLOCKED!\")\n                        return 'blocked'\n                    \n                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏—Å–æ–∫–∏—Ö –ø–æ–¥–∞—Ç–∫—ñ–≤ (>10%)\n                    buy_tax = data.get('BuyTax', 0)\n                    sell_tax = data.get('SellTax', 0)\n                    \n                    if buy_tax > 10 or sell_tax > 10:\n                        logging.warning(f\"üö® HIGH TAX: {token_address} - Buy: {buy_tax}%, Sell: {sell_tax}%\")\n                        return 'suspicious'\n                    \n                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –ø—Ä–æ–¥–∞–∂—É\n                    can_sell = data.get('CanSell', True)\n                    if not can_sell:\n                        logging.warning(f\"üö® SELL BLOCKED: {token_address}\")\n                        return 'blocked'\n                    \n                    logging.info(f\"‚úÖ HONEYPOT CHECK PASSED: {token_address} (Buy: {buy_tax}%, Sell: {sell_tax}%)\")\n                    return 'ok'\n                    \n            except Exception as api_error:\n                logging.warning(f\"‚ö†Ô∏è Honeypot API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è {token_address}: {api_error}\")\n            \n            # üî• FALLBACK: Web3 —Å–∏–º—É–ª—è—Ü—ñ—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ\n            if chain.lower() in ['ethereum', 'bsc']:\n                return self._simulate_web3_trade(token_address, chain)\n            \n            # –Ø–∫—â–æ –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ - –±–µ–∑–ø–µ—á–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥\n            logging.warning(f\"‚ö†Ô∏è Honeypot –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è {token_address} - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fail-safe\")\n            return 'unknown'\n            \n        except Exception as e:\n            logging.error(f\"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ honeypot –¥–ª—è {token_address}: {e}\")\n            return 'unknown'\n    \n    def _simulate_web3_trade(self, token_address: str, chain: str) -> str:\n        \"\"\"\n        Web3 —Å–∏–º—É–ª—è—Ü—ñ—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ honeypot\n        –ü–æ–≤–µ—Ä—Ç–∞—î: 'ok', 'suspicious', 'blocked'\n        \"\"\"\n        try:\n            from web3 import Web3\n            \n            # RPC –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏\n            rpc_urls = {\n                'ethereum': 'https://eth.llamarpc.com',\n                'bsc': 'https://bsc-dataseed.binance.org'\n            }\n            \n            if chain.lower() not in rpc_urls:\n                return 'unknown'\n            \n            # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Web3\n            w3 = Web3(Web3.HTTPProvider(rpc_urls[chain.lower()]))\n            if not w3.is_connected():\n                logging.warning(f\"‚ö†Ô∏è Web3 –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è {chain}\")\n                return 'unknown'\n            \n            # –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É\n            try:\n                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ–Ω—Ç—Ä–∞–∫—Ç\n                code = w3.eth.get_code(Web3.to_checksum_address(token_address))\n                if len(code) <= 2:  # \"0x\" –æ–∑–Ω–∞—á–∞—î —â–æ –Ω–µ–º–∞—î –∫–æ–¥—É\n                    logging.warning(f\"üö® NO CONTRACT CODE: {token_address}\")\n                    return 'suspicious'\n                \n                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä –∫–æ–¥—É (–≤–µ–ª–∏–∫—ñ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∏ —á–∞—Å—Ç–æ honeypot)\n                if len(code) > 50000:  # >50KB –∫–æ–¥ –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏–π\n                    logging.warning(f\"üö® LARGE CONTRACT: {token_address} ({len(code)} bytes)\")\n                    return 'suspicious'\n                \n                logging.info(f\"‚úÖ WEB3 CHECK PASSED: {token_address} ({len(code)} bytes)\")\n                return 'ok'\n                \n            except Exception as contract_error:\n                logging.warning(f\"‚ö†Ô∏è Contract check failed for {token_address}: {contract_error}\")\n                return 'unknown'\n                \n        except Exception as e:\n            logging.warning(f\"‚ö†Ô∏è Web3 —Å–∏–º—É–ª—è—Ü—ñ—è failed –¥–ª—è {token_address}: {e}\")\n            return 'unknown'\n    \n    def _check_volatility_15min(self, symbol: str, pair_address: str, chain: str) -> float:\n        \"\"\"\n        –ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 15 —Ö–≤–∏–ª–∏–Ω\n        –ü–æ–≤–µ—Ä—Ç–∞—î –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö\n        \"\"\"\n        try:\n            from utils import get_shared_dex_client\n            \n            dex_client = get_shared_dex_client()\n            if not dex_client:\n                logging.warning(f\"DEX –∫–ª—ñ—î–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω–æ—Å—Ç—ñ {symbol}\")\n                # Fail-closed: —è–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ, –±–ª–æ–∫—É—î–º–æ\n                return 0.0  # –ù–∏–∂—á–µ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥—É\n            \n            # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ –∑ DexCheck API\n            metrics = dex_client.get_advanced_token_metrics(symbol)\n            if not metrics:\n                logging.warning(f\"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è {symbol}\")\n                return 0.0  # Fail-closed\n            \n            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ü—ñ–Ω–∏ –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –≤–æ–ª–∞—Ç—ñ–ª—å–Ω–æ—Å—Ç—ñ\n            current_price = metrics.get('price_usd', 0)\n            price_change = metrics.get('price_change_15min', 0)  # –Ø–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–æ\n            \n            if current_price > 0 and price_change != 0:\n                volatility = abs(price_change)\n                logging.info(f\"üìä –í–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å {symbol}: {volatility:.1f}%\")\n                return volatility\n            else:\n                # Fail-closed: —è–∫—â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –∑–º—ñ–Ω—É —Ü—ñ–Ω–∏, –±–ª–æ–∫—É—î–º–æ\n                logging.warning(f\"–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å –¥–ª—è {symbol}\")\n                return 0.0  # –ù–∏–∂—á–µ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥—É\n            \n        except Exception as e:\n            logging.error(f\"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω–æ—Å—Ç—ñ –¥–ª—è {symbol}: {e}\")\n            return 0.0  # Fail-closed\n    \n    def _check_orderbook_depth(self, symbol: str, pair_address: str, chain: str) -> float:\n        \"\"\"\n        –ü–µ—Ä–µ–≤—ñ—Ä—è—î –≥–ª–∏–±–∏–Ω—É –æ—Ä–¥–µ—Ä–±—É–∫—É —á–µ—Ä–µ–∑ –∑–∞–≥–∞–ª—å–Ω—É –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å\n        –ü–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–∞–ª—å–Ω—É –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å —É USD\n        \"\"\"\n        try:\n            from utils import get_shared_dex_client\n            \n            dex_client = get_shared_dex_client()\n            if not dex_client:\n                logging.warning(f\"DEX –∫–ª—ñ—î–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥–ª–∏–±–∏–Ω–∏ –æ—Ä–¥–µ—Ä–±—É–∫—É {symbol}\")\n                # Fail-closed: —è–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ, –±–ª–æ–∫—É—î–º–æ\n                return 0.0  # –ù–∏–∂—á–µ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥—É\n            \n            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å —è–∫ –ø—Ä–æ–∫—Å—ñ –¥–ª—è –≥–ª–∏–±–∏–Ω–∏ –æ—Ä–¥–µ—Ä–±—É–∫—É\n            pair_data = dex_client.resolve_best_pair(symbol)\n            if not pair_data:\n                logging.warning(f\"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø–∞—Ä–∏ –¥–ª—è {symbol}\")\n                return 0.0  # Fail-closed\n            \n            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ\n            liquidity_usd = pair_data.get('liquidity', 0.0)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 'liquidity' —è–∫ —É _verify_dex_pair\n            \n            # –õ–æ–≥—ñ–∫–∞: —è–∫—â–æ –∑–∞–≥–∞–ª—å–Ω–∞ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–Ω—è, —Ç–æ —ñ –≥–ª–∏–±–∏–Ω–∞ –æ—Ä–¥–µ—Ä–±—É–∫—É –±—É–¥–µ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ—é\n            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 10% –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ—ó –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ —è–∫ –¥–æ—Å—Ç—É–ø–Ω—É –≥–ª–∏–±–∏–Ω—É –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ\n            available_depth = liquidity_usd * 0.1\n            \n            logging.info(f\"üìä –ì–ª–∏–±–∏–Ω–∞ –æ—Ä–¥–µ—Ä–±—É–∫—É {symbol}: ${available_depth:,.0f} (–∑ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ ${liquidity_usd:,.0f})\")\n            return available_depth\n            \n        except Exception as e:\n            logging.error(f\"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥–ª–∏–±–∏–Ω–∏ –æ—Ä–¥–µ—Ä–±—É–∫—É –¥–ª—è {symbol}: {e}\")\n            return 0.0  # Fail-closed\n    \n    def _check_buy_sell_ratio(self, symbol: str, pair_address: str, chain: str) -> float:\n        \"\"\"\n        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –ø–æ–∫—É–ø–æ–∫ –¥–æ –ø—Ä–æ–¥–∞–∂—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 100 —É–≥–æ–¥\n        –ü–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥—Å–æ—Ç–æ–∫ –ø–æ–∫—É–ø–æ–∫\n        \"\"\"\n        try:\n            from utils import get_shared_dex_client\n            \n            dex_client = get_shared_dex_client()\n            if not dex_client:\n                logging.warning(f\"DEX –∫–ª—ñ—î–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ buy/sell ratio {symbol}\")\n                # Fail-closed: —è–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ, –±–ª–æ–∫—É—î–º–æ\n                return 0.0  # –ù–∏–∂—á–µ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥—É\n            \n            # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ –∑ DexCheck API\n            metrics = dex_client.get_advanced_token_metrics(symbol)\n            if not metrics:\n                logging.warning(f\"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è {symbol}\")\n                return 0.0  # Fail-closed\n            \n            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ 24 –≥–æ–¥–∏–Ω–∏\n            txns_24h = metrics.get('txns_24h', {})\n            if txns_24h and 'buy_percentage' in txns_24h:\n                buy_percentage = txns_24h['buy_percentage']\n                logging.info(f\"üìä Buy/Sell ratio {symbol}: {buy_percentage:.1f}% –ø–æ–∫—É–ø–æ–∫\")\n                return buy_percentage\n            \n            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —è–∫—â–æ —î –¥–∞–Ω—ñ –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É–≥–æ–¥\n            buys = txns_24h.get('buys', 0)\n            sells = txns_24h.get('sells', 0)\n            total_trades = buys + sells\n            \n            if total_trades > 0:\n                buy_percentage = (buys / total_trades) * 100\n                logging.info(f\"üìä Buy/Sell ratio {symbol}: {buy_percentage:.1f}% –ø–æ–∫—É–ø–æ–∫ ({buys}B/{sells}S)\")\n                return buy_percentage\n            else:\n                logging.warning(f\"–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ —É–≥–æ–¥–∏ –¥–ª—è {symbol}\")\n                return 0.0  # Fail-closed\n            \n        except Exception as e:\n            logging.error(f\"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ buy/sell ratio –¥–ª—è {symbol}: {e}\")\n            return 0.0  # Fail-closed\n    \n    def _analyze_price_dynamics(self, symbol: str, pair_address: str, chain: str) -> Tuple[float, float]:\n        \"\"\"\n        –ê–Ω–∞–ª—ñ–∑—É—î –¥–∏–Ω–∞–º—ñ–∫—É —Ü—ñ–Ω –∑–∞ 15 —Ö–≤–∏–ª–∏–Ω —Ç–∞ 1 –≥–æ–¥–∏–Ω—É\n        –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä—Ç–µ–∂ (–∑–º—ñ–Ω–∞_–∑–∞_15—Ö–≤_%, –∑–º—ñ–Ω–∞_–∑–∞_1–≥–æ–¥_%)\n        \"\"\"\n        try:\n            from utils import get_shared_dex_client\n            \n            dex_client = get_shared_dex_client()\n            if not dex_client:\n                logging.warning(f\"DEX –∫–ª—ñ—î–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –¥–∏–Ω–∞–º—ñ–∫–∏ —Ü—ñ–Ω {symbol}\")\n                return 0.0, 0.0  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞ –¥–∏–Ω–∞–º—ñ–∫–∞\n            \n            # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö —Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–∏–Ω–∞–º—ñ–∫–∏\n            # –ü–æ–∫–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è\n            price_change_15min = 0.0  # –ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏ –∑–∞ 15 —Ö–≤–∏–ª–∏–Ω —É %\n            price_change_1hour = 0.0  # –ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏ –∑–∞ 1 –≥–æ–¥–∏–Ω—É —É %\n            \n            return price_change_15min, price_change_1hour\n            \n        except Exception as e:\n            logging.error(f\"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –¥–∏–Ω–∞–º—ñ–∫–∏ —Ü—ñ–Ω –¥–ª—è {symbol}: {e}\")\n            return 0.0, 0.0\n    \n    def _collect_market_depth_analysis(self, xt_symbol: str) -> Optional[Dict]:\n        \"\"\"\n        üìä –ó–ë–Ü–† –î–ê–ù–ò–• –ü–†–û –ì–õ–ò–ë–ò–ù–£ –†–ò–ù–ö–£ XT.com\n        –û—Ç—Ä–∏–º—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–±—Å—è–≥–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö —Ä—ñ–≤–Ω—è—Ö —Ü—ñ–Ω\n        \"\"\"\n        try:\n            from xt_client import create_xt, collect_market_depth_data\n            \n            if not xt_symbol:\n                return None\n                \n            xt = create_xt()\n            if not xt:\n                logging.warning(\"XT –∫–ª—ñ—î–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –∑–±–æ—Ä—É –≥–ª–∏–±–∏–Ω–∏ —Ä–∏–Ω–∫—É\")\n                return None\n            \n            # –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –≥–ª–∏–±–∏–Ω–∏ —Ä–∏–Ω–∫—É –∑ 20 —Ä—ñ–≤–Ω—è–º–∏\n            depth_data = collect_market_depth_data(xt, xt_symbol, depth_levels=20)\n            \n            if depth_data:\n                logging.info(f\"üìä –ó—ñ–±—Ä–∞–Ω–æ –¥–∞–Ω—ñ –≥–ª–∏–±–∏–Ω–∏ —Ä–∏–Ω–∫—É {xt_symbol}: \"\n                           f\"bids=${depth_data['total_bid_liquidity']:,.0f} \"\n                           f\"asks=${depth_data['total_ask_liquidity']:,.0f}\")\n                return depth_data\n            else:\n                logging.warning(f\"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑—ñ–±—Ä–∞—Ç–∏ –¥–∞–Ω—ñ –≥–ª–∏–±–∏–Ω–∏ —Ä–∏–Ω–∫—É –¥–ª—è {xt_symbol}\")\n                return None\n                \n        except Exception as e:\n            logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–æ—Ä—É –≥–ª–∏–±–∏–Ω–∏ —Ä–∏–Ω–∫—É {xt_symbol}: {e}\")\n            return None\n    \n    def _collect_enhanced_price_dynamics(self, symbol: str) -> Optional[Dict]:\n        \"\"\"\n        üìà –†–û–ó–®–ò–†–ï–ù–ò–ô –ê–ù–ê–õ–Ü–ó –î–ò–ù–ê–ú–Ü–ö–ò –¶–Ü–ù\n        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î price_tracker –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º—É–ª—å—Ç–∏-—ñ–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É\n        \"\"\"\n        try:\n            # –ó–±–∏—Ä–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ —Ü—ñ–Ω—É –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞\n            price_tracker.collect_current_price_data(symbol)\n            \n            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–Ω–∞–ª—ñ–∑ –¥–ª—è –∫—ñ–ª—å–∫–æ—Ö —á–∞—Å–æ–≤–∏—Ö —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤\n            multi_analysis = price_tracker.get_multi_timeframe_analysis(symbol)\n            \n            if multi_analysis:\n                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ DynamicsAnalysis –æ–±'—î–∫—Ç–∏ –≤ —Å–ª–æ–≤–Ω–∏–∫–∏ –¥–ª—è —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó\n                serialized_analysis = {}\n                for timeframe, analysis in multi_analysis.items():\n                    if analysis:\n                        serialized_analysis[timeframe] = {\n                            'symbol': analysis.symbol,\n                            'timeframe_minutes': analysis.timeframe_minutes,\n                            'price_change_pct': analysis.price_change_pct,\n                            'volatility_pct': analysis.volatility_pct,\n                            'trend_direction': analysis.trend_direction,\n                            'momentum_score': analysis.momentum_score,\n                            'support_resistance': analysis.support_resistance,\n                            'quality_score': analysis.quality_score,\n                            'price_levels_count': len(analysis.price_levels)\n                        }\n                \n                if serialized_analysis:\n                    logging.info(f\"üìà –ó—ñ–±—Ä–∞–Ω–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–∏–Ω–∞–º—ñ–∫–∏ –¥–ª—è {symbol}: \"\n                               f\"{len(serialized_analysis)} —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤\")\n                    return serialized_analysis\n            \n            logging.warning(f\"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –¥–∏–Ω–∞–º—ñ–∫–∏ {symbol}\")\n            return None\n            \n        except Exception as e:\n            logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –¥–∏–Ω–∞–º—ñ–∫–∏ {symbol}: {e}\")\n            return None\n    \n    def _validate_market_depth_quality(self, market_depth: Dict, order_amount: float) -> Dict[str, Any]:\n        \"\"\"\n        üìä –í–ê–õ–Ü–î–ê–¶–Ü–Ø –Ø–ö–û–°–¢–Ü –ì–õ–ò–ë–ò–ù–ò –†–ò–ù–ö–£\n        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—è –≥–ª–∏–±–∏–Ω–∞ —Ä–∏–Ω–∫—É –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ\n        \"\"\"\n        try:\n            # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ config.py\n            MAX_BID_ASK_SPREAD_PERCENT = 1.0\n            MIN_TOTAL_LIQUIDITY_MULTIPLIER = 5.0\n            MAX_TOP3_CONCENTRATION_PERCENT = 90.0\n            \n            # –ë–∞–∑–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö\n            if not market_depth.get('spread_analysis') or not market_depth.get('bids') or not market_depth.get('asks'):\n                return {'valid': False, 'reason': '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ –¥–∞–Ω—ñ –≥–ª–∏–±–∏–Ω–∏ —Ä–∏–Ω–∫—É'}\n            \n            # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ø—Ä–µ–¥—É bid/ask\n            bid_ask_spread = market_depth['spread_analysis'].get('bid_ask_spread_pct', 999)\n            if bid_ask_spread > MAX_BID_ASK_SPREAD_PERCENT:\n                return {'valid': False, 'reason': f'–°–ø—Ä–µ–¥ bid/ask {bid_ask_spread:.2f}% > {MAX_BID_ASK_SPREAD_PERCENT}%'}\n            \n            # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≥–∞–ª—å–Ω–æ—ó –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ\n            total_bid_liquidity = market_depth.get('total_bid_liquidity', 0)\n            total_ask_liquidity = market_depth.get('total_ask_liquidity', 0)\n            min_required_liquidity = order_amount * MIN_TOTAL_LIQUIDITY_MULTIPLIER\n            \n            if total_bid_liquidity < min_required_liquidity:\n                return {'valid': False, 'reason': f'–õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å bids ${total_bid_liquidity:.0f} < ${min_required_liquidity:.0f}'}\n            \n            if total_ask_liquidity < min_required_liquidity:\n                return {'valid': False, 'reason': f'–õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å asks ${total_ask_liquidity:.0f} < ${min_required_liquidity:.0f}'}\n            \n            # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—ó –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ\n            bid_concentration = market_depth.get('bid_depth_analysis', {}).get('top3_concentration_pct', 0)\n            ask_concentration = market_depth.get('ask_depth_analysis', {}).get('top3_concentration_pct', 0)\n            \n            if bid_concentration > MAX_TOP3_CONCENTRATION_PERCENT:\n                return {'valid': False, 'reason': f'–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è bids {bid_concentration:.1f}% > {MAX_TOP3_CONCENTRATION_PERCENT}%'}\n            \n            if ask_concentration > MAX_TOP3_CONCENTRATION_PERCENT:\n                return {'valid': False, 'reason': f'–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è asks {ask_concentration:.1f}% > {MAX_TOP3_CONCENTRATION_PERCENT}%'}\n            \n            return {'valid': True, 'reason': '–ì–ª–∏–±–∏–Ω–∞ —Ä–∏–Ω–∫—É –∑–∞–¥–æ–≤—ñ–ª—å–Ω–∞'}\n            \n        except Exception as e:\n            logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –≥–ª–∏–±–∏–Ω–∏ —Ä–∏–Ω–∫—É: {e}\")\n            return {'valid': False, 'reason': f'–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {str(e)}'}\n    \n    def _validate_price_dynamics_quality(self, analysis_15m: Dict) -> Dict[str, Any]:\n        \"\"\"\n        üìà –í–ê–õ–Ü–î–ê–¶–Ü–Ø –Ø–ö–û–°–¢–Ü –î–ò–ù–ê–ú–Ü–ö–ò –¶–Ü–ù\n        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —è–∫—ñ—Å–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è —Ç–æ—Ä–≥–æ–≤–∏—Ö —Ä—ñ—à–µ–Ω—å\n        \"\"\"\n        try:\n            # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑ config.py\n            MIN_DYNAMICS_QUALITY_SCORE = 30.0\n            \n            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö\n            quality_score = analysis_15m.get('quality_score', 0)\n            if quality_score < MIN_DYNAMICS_QUALITY_SCORE:\n                return {'valid': False, 'reason': f'–Ø–∫—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö {quality_score:.1f} < {MIN_DYNAMICS_QUALITY_SCORE}'}\n            \n            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –µ–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å\n            volatility_pct = analysis_15m.get('volatility_pct', 0)\n            if volatility_pct > 50:  # –ï–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å\n                return {'valid': False, 'reason': f'–ï–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å {volatility_pct:.1f}%'}\n            \n            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ—á–æ–∫ –¥–∞–Ω–∏—Ö\n            price_levels_count = analysis_15m.get('price_levels_count', 0)\n            if price_levels_count < 5:\n                return {'valid': False, 'reason': f'–ú–∞–ª–æ —Ç–æ—á–æ–∫ –¥–∞–Ω–∏—Ö: {price_levels_count}'}\n            \n            # –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π—à–ª–∏\n            return {'valid': True, 'reason': '–î–∏–Ω–∞–º—ñ–∫–∞ —Ü—ñ–Ω —è–∫—ñ—Å–Ω–∞'}\n            \n        except Exception as e:\n            logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–∏–Ω–∞–º—ñ–∫–∏ —Ü—ñ–Ω: {e}\")\n            return {'valid': False, 'reason': f'–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {str(e)}'}\n\n# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ç–æ—Ä\nsignal_verifier = SignalVerification()\n\ndef verify_arbitrage_signal(signal: ArbitrageSignal) -> VerificationResult:\n    \"\"\"–ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Å–∏–≥–Ω–∞–ª—É\"\"\"\n    return signal_verifier.verify_signal(signal)","size_bytes":40804},"start_trinkenbot_enhanced.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nüöÄ Trinkenbot Enhanced - –ü–æ–≤–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è\n–ó–∞–ø—É—Å–∫ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ + –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É\n–°—Ç–≤–æ—Ä–µ–Ω–æ Emergent AI Agent - 30 –≤–µ—Ä–µ—Å–Ω—è 2025\n\"\"\"\n\nimport os\nimport sys\nimport subprocess\nimport threading\nimport time\nimport logging\nfrom pathlib import Path\n\n# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\nlogger = logging.getLogger(__name__)\n\nclass TrinkenbotEnhanced:\n    def __init__(self):\n        self.base_dir = Path(__file__).parent\n        self.original_bot_process = None\n        self.web_api_process = None\n        self.web_frontend_process = None\n        self.running = False\n\n    def check_dependencies(self):\n        \"\"\"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π —Ç–∞ API –∫–ª—é—á—ñ–≤\"\"\"\n        logger.info(\"üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...\")\n        \n        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Python –ø–∞–∫–µ—Ç—ñ–≤\n        required_packages = ['ccxt', 'fastapi', 'uvicorn']\n        missing = []\n        \n        for package in required_packages:\n            try:\n                __import__(package)\n                logger.info(f\"‚úÖ {package} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\")\n            except ImportError:\n                missing.append(package)\n                logger.warning(f\"‚ùå {package} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π\")\n        \n        if missing:\n            logger.info(\"üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –ø–∞–∫–µ—Ç—ñ–≤...\")\n            for package in missing:\n                subprocess.run([sys.executable, '-m', 'pip', 'install', package])\n        \n        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API –∫–ª—é—á—ñ–≤\n        from dotenv import load_dotenv\n        load_dotenv()\n        \n        api_key = os.getenv('XT_API_KEY')\n        api_secret = os.getenv('XT_API_SECRET')\n        \n        if not api_key or not api_secret:\n            logger.error(\"‚ùå XT API –∫–ª—é—á—ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –≤ .env —Ñ–∞–π–ª—ñ!\")\n            return False\n        \n        # –¢–µ—Å—Ç XT –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è\n        try:\n            import ccxt\n            xt = ccxt.xt({\n                'apiKey': api_key,\n                'secret': api_secret,\n                'sandbox': False\n            })\n            markets = xt.load_markets()\n            futures_count = len([s for s, m in markets.items() if m.get('type') in ['swap', 'future']])\n            logger.info(f\"‚úÖ XT.com –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è OK: {futures_count} —Ñ—å—é—á–µ—Ä—Å–Ω–∏—Ö –ø–∞—Ä\")\n        except Exception as e:\n            logger.error(f\"‚ùå XT.com –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}\")\n            return False\n        \n        return True\n\n    def start_original_bot(self):\n        \"\"\"–ó–∞–ø—É—Å–∫ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞\"\"\"\n        try:\n            logger.info(\"ü§ñ –ó–∞–ø—É—Å–∫ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ Trinkenbot...\")\n            \n            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î main.py\n            if not (self.base_dir / 'main.py').exists():\n                logger.warning(\"‚ö†Ô∏è main.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–ø—É—Å–∫ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞\")\n                return True\n            \n            self.original_bot_process = subprocess.Popen([\n                sys.executable, 'main.py'\n            ], cwd=self.base_dir)\n            \n            logger.info(\"‚úÖ –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ\")\n            return True\n        except Exception as e:\n            logger.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞: {e}\")\n            return False\n\n    def start_web_api(self):\n        \"\"\"–ó–∞–ø—É—Å–∫ FastAPI –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞\"\"\"\n        try:\n            logger.info(\"üåê –ó–∞–ø—É—Å–∫ Web API —Å–µ—Ä–≤–µ—Ä–∞...\")\n            \n            web_server_file = self.base_dir / 'web_interface' / 'server.py'\n            if not web_server_file.exists():\n                logger.error(\"‚ùå Web API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\")\n                return False\n            \n            self.web_api_process = subprocess.Popen([\n                sys.executable, str(web_server_file)\n            ])\n            \n            # –ß–µ–∫–∞—î–º–æ –∑–∞–ø—É—Å–∫—É\n            time.sleep(3)\n            logger.info(\"‚úÖ Web API –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:8001\")\n            return True\n        except Exception as e:\n            logger.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Web API: {e}\")\n            return False\n\n    def start_web_frontend(self):\n        \"\"\"–ó–∞–ø—É—Å–∫ React frontend\"\"\"\n        try:\n            logger.info(\"‚öõÔ∏è –ó–∞–ø—É—Å–∫ React Frontend...\")\n            \n            frontend_dir = self.base_dir / 'frontend'\n            if not frontend_dir.exists():\n                logger.error(\"‚ùå Frontend –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞\")\n                return False\n            \n            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ package.json\n            if not (frontend_dir / 'package.json').exists():\n                logger.error(\"‚ùå package.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\")\n                return False\n            \n            # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ\n            if not (frontend_dir / 'node_modules').exists():\n                logger.info(\"üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è frontend –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...\")\n                subprocess.run(['yarn', 'install'], cwd=frontend_dir, check=True)\n            \n            # –ó–∞–ø—É—Å–∫ frontend\n            self.web_frontend_process = subprocess.Popen([\n                'yarn', 'start'\n            ], cwd=frontend_dir)\n            \n            # –ß–µ–∫–∞—î–º–æ –∑–∞–ø—É—Å–∫—É\n            time.sleep(5)\n            logger.info(\"‚úÖ React Frontend –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:3000\")\n            return True\n        except Exception as e:\n            logger.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É frontend: {e}\")\n            return False\n\n    def monitor_processes(self):\n        \"\"\"–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—ñ–≤\"\"\"\n        logger.info(\"üëÅÔ∏è –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø—Ä–æ—Ü–µ—Å—ñ–≤...\")\n        \n        while self.running:\n            time.sleep(30)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥\n            \n            processes = [\n                (\"–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –±–æ—Ç\", self.original_bot_process),\n                (\"Web API\", self.web_api_process),\n                (\"React Frontend\", self.web_frontend_process)\n            ]\n            \n            for name, process in processes:\n                if process and process.poll() is not None:\n                    logger.warning(f\"‚ö†Ô∏è {name} –∑—É–ø–∏–Ω–∏–≤—Å—è (–∫–æ–¥: {process.returncode})\")\n\n    def start_all(self):\n        \"\"\"–ó–∞–ø—É—Å–∫ –≤—Å—ñ—î—ó —Å–∏—Å—Ç–µ–º–∏\"\"\"\n        logger.info(\"üöÄ –ó–∞–ø—É—Å–∫ Trinkenbot Enhanced...\")\n        print(\"‚îÅ\" * 60)\n        print(\"ü§ñ TRINKENBOT ENHANCED - Startup\")\n        print(\"‚îÅ\" * 60)\n        \n        if not self.check_dependencies():\n            return False\n        \n        self.running = True\n        \n        # –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤\n        success_count = 0\n        total_components = 3\n        \n        if self.start_original_bot():\n            success_count += 1\n            \n        if self.start_web_api():\n            success_count += 1\n            \n        if self.start_web_frontend():\n            success_count += 1\n        \n        if success_count >= 2:  # –ú—ñ–Ω—ñ–º—É–º Web API + Frontend\n            logger.info(\"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!\")\n            self.print_status()\n            \n            # –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É\n            monitor_thread = threading.Thread(target=self.monitor_processes, daemon=True)\n            monitor_thread.start()\n            \n            return True\n        else:\n            logger.error(\"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–∏—Å—Ç–µ–º–∏\")\n            return False\n\n    def print_status(self):\n        \"\"\"–í–∏–≤–µ–¥–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Å–∏—Å—Ç–µ–º–∏\"\"\"\n        print(\"‚îÅ\" * 60)\n        print(\"üéâ TRINKENBOT ENHANCED - –ì–û–¢–û–í–ò–ô!\")\n        print(\"‚îÅ\" * 60)\n        \n        if self.original_bot_process:\n            print(\"ü§ñ –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –±–æ—Ç: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π\")\n        else:\n            print(\"ü§ñ –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –±–æ—Ç: ‚ö†Ô∏è –ù–µ –∑–∞–ø—É—â–µ–Ω–æ\")\n            \n        if self.web_api_process:\n            print(\"üåê Web API: ‚úÖ http://localhost:8001\")\n        else:\n            print(\"üåê Web API: ‚ùå –ù–µ –∑–∞–ø—É—â–µ–Ω–æ\")\n            \n        if self.web_frontend_process:\n            print(\"‚öõÔ∏è Web Dashboard: ‚úÖ http://localhost:3000\")\n        else:\n            print(\"‚öõÔ∏è Web Dashboard: ‚ùå –ù–µ –∑–∞–ø—É—â–µ–Ω–æ\")\n            \n        print(\"‚îÅ\" * 60)\n        print(\"üîë –í–•–Ü–î –í DASHBOARD:\")\n        print(\"   ‚Ä¢ API Key: edbae47c-5dd1-4e17-85a5-4ddbf9a0198d\")\n        print(\"   ‚Ä¢ API Secret: dc15cbd32da51249b35326dcc0bafb9045771fa8\")\n        print(\"   ‚Ä¢ Password: trinken2024\")\n        print(\"‚îÅ\" * 60)\n        print(\"üí° –í—ñ–¥–∫—Ä–∏–π—Ç–µ http://localhost:3000 –≤ –±—Ä–∞—É–∑–µ—Ä—ñ\")\n        print(\"‚ö†Ô∏è  –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏\")\n        print(\"‚îÅ\" * 60)\n\n    def stop_all(self):\n        \"\"\"–ó—É–ø–∏–Ω–∫–∞ –≤—Å—ñ—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤\"\"\"\n        logger.info(\"üõë –ó—É–ø–∏–Ω–∫–∞ —Å–∏—Å—Ç–µ–º–∏...\")\n        self.running = False\n        \n        processes = [\n            (\"React Frontend\", self.web_frontend_process),\n            (\"Web API\", self.web_api_process),\n            (\"–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –±–æ—Ç\", self.original_bot_process),\n        ]\n        \n        for name, process in processes:\n            if process:\n                try:\n                    process.terminate()\n                    process.wait(timeout=10)\n                    logger.info(f\"‚úÖ {name} –∑—É–ø–∏–Ω–µ–Ω–æ\")\n                except:\n                    try:\n                        process.kill()\n                        logger.warning(f\"‚ö†Ô∏è {name} –ø—Ä–∏–º—É—Å–æ–≤–æ –∑–∞–∫—Ä–∏—Ç–æ\")\n                    except:\n                        pass\n\nif __name__ == \"__main__\":\n    bot = TrinkenbotEnhanced()\n    \n    try:\n        if bot.start_all():\n            # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É –∑—É–ø–∏–Ω–∫–∏\n            try:\n                while True:\n                    time.sleep(1)\n            except KeyboardInterrupt:\n                print(\"\\nüõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏...\")\n    except Exception as e:\n        logger.error(f\"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}\")\n    finally:\n        bot.stop_all()\n        print(\"\\nüëã Trinkenbot Enhanced –∑—É–ø–∏–Ω–µ–Ω–æ\")\n        print(\"üôè –î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!\")","size_bytes":10727},"technical_indicators.py":{"content":"\"\"\"\nüîç –¢–µ—Ö–Ω—ñ—á–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –¥–ª—è Trinkenbot\n–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ TA-Lib –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É RSI, MACD, Bollinger Bands —Ç–æ—â–æ\n–°—Ç–≤–æ—Ä–µ–Ω–æ Emergent AI Agent - 30 –≤–µ—Ä–µ—Å–Ω—è 2025\n\"\"\"\n\nimport numpy as np\nimport pandas as pd\nimport logging\nfrom typing import Dict, List, Tuple, Optional\nfrom datetime import datetime, timedelta\n\nlogger = logging.getLogger(__name__)\n\n# –°–ø—Ä–æ–±—É—î–º–æ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ TA-Lib, —è–∫—â–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–ª–∞—Å–Ω—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏\ntry:\n    import talib\n    TALIB_AVAILABLE = True\n    logger.info(\"‚úÖ TA-Lib –¥–æ—Å—Ç—É–ø–Ω–∏–π - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ–≤–Ω–∏–π –Ω–∞–±—ñ—Ä —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤\")\nexcept ImportError:\n    TALIB_AVAILABLE = False\n    logger.warning(\"‚ö†Ô∏è TA-Lib –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏\")\n\nclass TechnicalIndicators:\n    \"\"\"–ö–ª–∞—Å –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤\"\"\"\n    \n    def __init__(self):\n        self.cache = {}\n        self.cache_ttl = 300  # 5 —Ö–≤–∏–ª–∏–Ω\n    \n    def _get_cached_result(self, cache_key: str) -> Optional[dict]:\n        \"\"\"–û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–∫–µ—à–æ–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\"\"\"\n        if cache_key in self.cache:\n            timestamp, result = self.cache[cache_key]\n            if datetime.now().timestamp() - timestamp < self.cache_ttl:\n                return result\n        return None\n    \n    def _cache_result(self, cache_key: str, result: dict):\n        \"\"\"–ó–∞–∫–µ—à—É–≤–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç\"\"\"\n        self.cache[cache_key] = (datetime.now().timestamp(), result)\n    \n    def calculate_rsi(self, prices: List[float], period: int = 14) -> float:\n        \"\"\"–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ RSI (Relative Strength Index)\"\"\"\n        try:\n            if TALIB_AVAILABLE and len(prices) >= period:\n                rsi_values = talib.RSI(np.array(prices), timeperiod=period)\n                return float(rsi_values[-1]) if not np.isnan(rsi_values[-1]) else 50.0\n            else:\n                # –í–ª–∞—Å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ RSI\n                return self._calculate_rsi_manual(prices, period)\n        except Exception as e:\n            logger.error(f\"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É RSI: {e}\")\n            return 50.0  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è\n    \n    def _calculate_rsi_manual(self, prices: List[float], period: int = 14) -> float:\n        \"\"\"–í–ª–∞—Å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ RSI\"\"\"\n        if len(prices) < period + 1:\n            return 50.0\n        \n        deltas = np.diff(prices)\n        gains = np.where(deltas > 0, deltas, 0)\n        losses = np.where(deltas < 0, -deltas, 0)\n        \n        avg_gain = np.mean(gains[-period:])\n        avg_loss = np.mean(losses[-period:])\n        \n        if avg_loss == 0:\n            return 100.0\n        \n        rs = avg_gain / avg_loss\n        rsi = 100 - (100 / (1 + rs))\n        return float(rsi)\n    \n    def calculate_macd(self, prices: List[float], fast: int = 12, slow: int = 26, signal: int = 9) -> Dict[str, float]:\n        \"\"\"–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ MACD\"\"\"\n        try:\n            if TALIB_AVAILABLE and len(prices) >= slow:\n                macd_line, signal_line, histogram = talib.MACD(\n                    np.array(prices), \n                    fastperiod=fast, \n                    slowperiod=slow, \n                    signalperiod=signal\n                )\n                \n                return {\n                    'macd': float(macd_line[-1]) if not np.isnan(macd_line[-1]) else 0.0,\n                    'signal': float(signal_line[-1]) if not np.isnan(signal_line[-1]) else 0.0,\n                    'histogram': float(histogram[-1]) if not np.isnan(histogram[-1]) else 0.0\n                }\n            else:\n                return self._calculate_macd_manual(prices, fast, slow, signal)\n        except Exception as e:\n            logger.error(f\"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É MACD: {e}\")\n            return {'macd': 0.0, 'signal': 0.0, 'histogram': 0.0}\n    \n    def _calculate_macd_manual(self, prices: List[float], fast: int, slow: int, signal: int) -> Dict[str, float]:\n        \"\"\"–í–ª–∞—Å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ MACD\"\"\"\n        if len(prices) < slow:\n            return {'macd': 0.0, 'signal': 0.0, 'histogram': 0.0}\n        \n        prices_array = np.array(prices)\n        \n        # EMA —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫\n        def ema(data, period):\n            alpha = 2.0 / (period + 1)\n            ema_values = np.zeros_like(data)\n            ema_values[0] = data[0]\n            for i in range(1, len(data)):\n                ema_values[i] = alpha * data[i] + (1 - alpha) * ema_values[i-1]\n            return ema_values\n        \n        ema_fast = ema(prices_array, fast)\n        ema_slow = ema(prices_array, slow)\n        \n        macd_line = ema_fast - ema_slow\n        signal_line = ema(macd_line, signal)\n        histogram = macd_line - signal_line\n        \n        return {\n            'macd': float(macd_line[-1]),\n            'signal': float(signal_line[-1]),  \n            'histogram': float(histogram[-1])\n        }\n    \n    def calculate_bollinger_bands(self, prices: List[float], period: int = 20, std_dev: float = 2.0) -> Dict[str, float]:\n        \"\"\"–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ Bollinger Bands\"\"\"\n        try:\n            if TALIB_AVAILABLE and len(prices) >= period:\n                upper, middle, lower = talib.BBANDS(\n                    np.array(prices), \n                    timeperiod=period, \n                    nbdevup=std_dev, \n                    nbdevdn=std_dev\n                )\n                \n                return {\n                    'upper': float(upper[-1]) if not np.isnan(upper[-1]) else prices[-1] * 1.02,\n                    'middle': float(middle[-1]) if not np.isnan(middle[-1]) else prices[-1],\n                    'lower': float(lower[-1]) if not np.isnan(lower[-1]) else prices[-1] * 0.98\n                }\n            else:\n                return self._calculate_bollinger_manual(prices, period, std_dev)\n        except Exception as e:\n            logger.error(f\"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É Bollinger Bands: {e}\")\n            current_price = prices[-1] if prices else 100.0\n            return {\n                'upper': current_price * 1.02,\n                'middle': current_price,\n                'lower': current_price * 0.98\n            }\n    \n    def _calculate_bollinger_manual(self, prices: List[float], period: int, std_dev: float) -> Dict[str, float]:\n        \"\"\"–í–ª–∞—Å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ Bollinger Bands\"\"\"\n        if len(prices) < period:\n            current_price = prices[-1] if prices else 100.0\n            return {\n                'upper': current_price * 1.02,\n                'middle': current_price,\n                'lower': current_price * 0.98\n            }\n        \n        recent_prices = prices[-period:]\n        middle = np.mean(recent_prices)\n        std = np.std(recent_prices)\n        \n        upper = middle + (std_dev * std)\n        lower = middle - (std_dev * std)\n        \n        return {\n            'upper': float(upper),\n            'middle': float(middle),\n            'lower': float(lower)\n        }\n    \n    def calculate_moving_averages(self, prices: List[float], periods: List[int] = [20, 50, 200]) -> Dict[str, float]:\n        \"\"\"–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–æ–≤–∑–Ω–∏—Ö —Å–µ—Ä–µ–¥–Ω—ñ—Ö\"\"\"\n        try:\n            ma_results = {}\n            \n            for period in periods:\n                if len(prices) >= period:\n                    if TALIB_AVAILABLE:\n                        ma = talib.SMA(np.array(prices), timeperiod=period)\n                        ma_results[f'sma_{period}'] = float(ma[-1]) if not np.isnan(ma[-1]) else prices[-1]\n                    else:\n                        ma = np.mean(prices[-period:])\n                        ma_results[f'sma_{period}'] = float(ma)\n                else:\n                    ma_results[f'sma_{period}'] = prices[-1] if prices else 100.0\n            \n            return ma_results\n        except Exception as e:\n            logger.error(f\"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É MA: {e}\")\n            return {f'sma_{p}': prices[-1] if prices else 100.0 for p in periods}\n    \n    def calculate_vwap(self, prices: List[float], volumes: List[float]) -> float:\n        \"\"\"–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ VWAP (Volume Weighted Average Price)\"\"\"\n        try:\n            if len(prices) != len(volumes) or len(prices) == 0:\n                return prices[-1] if prices else 100.0\n            \n            prices_array = np.array(prices)\n            volumes_array = np.array(volumes)\n            \n            vwap = np.sum(prices_array * volumes_array) / np.sum(volumes_array)\n            return float(vwap)\n        except Exception as e:\n            logger.error(f\"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É VWAP: {e}\")\n            return prices[-1] if prices else 100.0\n    \n    def calculate_atr(self, highs: List[float], lows: List[float], closes: List[float], period: int = 14) -> float:\n        \"\"\"–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ ATR (Average True Range)\"\"\"\n        try:\n            if TALIB_AVAILABLE and len(highs) >= period:\n                atr = talib.ATR(\n                    np.array(highs), \n                    np.array(lows), \n                    np.array(closes), \n                    timeperiod=period\n                )\n                return float(atr[-1]) if not np.isnan(atr[-1]) else closes[-1] * 0.02\n            else:\n                return self._calculate_atr_manual(highs, lows, closes, period)\n        except Exception as e:\n            logger.error(f\"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É ATR: {e}\")\n            return closes[-1] * 0.02 if closes else 2.0\n    \n    def _calculate_atr_manual(self, highs: List[float], lows: List[float], closes: List[float], period: int) -> float:\n        \"\"\"–í–ª–∞—Å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ ATR\"\"\"\n        if len(highs) < 2 or len(lows) < 2 or len(closes) < 2:\n            return closes[-1] * 0.02 if closes else 2.0\n        \n        true_ranges = []\n        for i in range(1, len(closes)):\n            tr1 = highs[i] - lows[i]\n            tr2 = abs(highs[i] - closes[i-1])  \n            tr3 = abs(lows[i] - closes[i-1])\n            true_ranges.append(max(tr1, tr2, tr3))\n        \n        if len(true_ranges) >= period:\n            atr = np.mean(true_ranges[-period:])\n        else:\n            atr = np.mean(true_ranges)\n        \n        return float(atr)\n    \n    def analyze_symbol_full(self, symbol: str, price_data: Dict) -> Dict:\n        \"\"\"–ü–æ–≤–Ω–∏–π —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Å–∏–º–≤–æ–ª—É\"\"\"\n        cache_key = f\"full_analysis_{symbol}_{hash(str(price_data))}\"\n        cached = self._get_cached_result(cache_key)\n        if cached:\n            return cached\n        \n        try:\n            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö\n            prices = price_data.get('prices', [])\n            volumes = price_data.get('volumes', [])\n            highs = price_data.get('highs', prices)\n            lows = price_data.get('lows', prices)\n            \n            if not prices:\n                # –ú–æ–∫ –¥–∞–Ω—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è\n                current_price = price_data.get('current_price', 100.0)\n                prices = [current_price * (1 + (i-25)*0.001) for i in range(50)]\n                volumes = [1000000 + (i * 10000) for i in range(50)]\n            \n            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—Å—ñ—Ö —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤\n            analysis = {\n                'symbol': symbol,\n                'timestamp': datetime.now().isoformat(),\n                'current_price': prices[-1],\n                \n                # –û—Å–Ω–æ–≤–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏\n                'rsi': self.calculate_rsi(prices),\n                'macd': self.calculate_macd(prices),\n                'bollinger': self.calculate_bollinger_bands(prices),\n                'ma': self.calculate_moving_averages(prices),\n                'vwap': self.calculate_vwap(prices, volumes),\n                'atr': self.calculate_atr(highs, lows, prices),\n                \n                # –°–∏–≥–Ω–∞–ª–∏\n                'signals': self._generate_signals(prices, volumes)\n            }\n            \n            self._cache_result(cache_key, analysis)\n            return analysis\n            \n        except Exception as e:\n            logger.error(f\"–ü–æ–º–∏–ª–∫–∞ –ø–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É {symbol}: {e}\")\n            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–∞–∑–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑\n            current_price = price_data.get('current_price', 100.0)\n            return {\n                'symbol': symbol,\n                'timestamp': datetime.now().isoformat(),\n                'current_price': current_price,\n                'rsi': 50.0,\n                'macd': {'macd': 0.0, 'signal': 0.0, 'histogram': 0.0},\n                'bollinger': {\n                    'upper': current_price * 1.02,\n                    'middle': current_price,\n                    'lower': current_price * 0.98\n                },\n                'ma': {'sma_20': current_price, 'sma_50': current_price},\n                'vwap': current_price,\n                'atr': current_price * 0.02,\n                'signals': {'trend': 'neutral', 'strength': 'weak'}\n            }\n    \n    def _generate_signals(self, prices: List[float], volumes: List[float]) -> Dict:\n        \"\"\"–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤\"\"\"\n        try:\n            if len(prices) < 20:\n                return {'trend': 'neutral', 'strength': 'weak'}\n            \n            # RSI —Å–∏–≥–Ω–∞–ª–∏\n            rsi = self.calculate_rsi(prices)\n            rsi_signal = 'overbought' if rsi > 70 else 'oversold' if rsi < 30 else 'neutral'\n            \n            # MA —Ç—Ä–µ–Ω–¥\n            ma_short = np.mean(prices[-10:])\n            ma_long = np.mean(prices[-20:])\n            trend = 'bullish' if ma_short > ma_long else 'bearish' if ma_short < ma_long else 'neutral'\n            \n            # –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å\n            volatility = np.std(prices[-20:]) / np.mean(prices[-20:])\n            strength = 'strong' if volatility > 0.03 else 'medium' if volatility > 0.015 else 'weak'\n            \n            return {\n                'trend': trend,\n                'rsi_signal': rsi_signal,\n                'strength': strength,\n                'volatility': float(volatility)\n            }\n        except Exception as e:\n            logger.error(f\"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–∏–≥–Ω–∞–ª—ñ–≤: {e}\")\n            return {'trend': 'neutral', 'strength': 'weak'}\n\n# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä\ntechnical_indicators = TechnicalIndicators()\n\n# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É\ndef get_rsi(prices: List[float], period: int = 14) -> float:\n    \"\"\"–û—Ç—Ä–∏–º–∞—Ç–∏ RSI\"\"\"\n    return technical_indicators.calculate_rsi(prices, period)\n\ndef get_macd(prices: List[float]) -> Dict[str, float]:\n    \"\"\"–û—Ç—Ä–∏–º–∞—Ç–∏ MACD\"\"\"\n    return technical_indicators.calculate_macd(prices)\n\ndef get_bollinger_bands(prices: List[float]) -> Dict[str, float]:\n    \"\"\"–û—Ç—Ä–∏–º–∞—Ç–∏ Bollinger Bands\"\"\"\n    return technical_indicators.calculate_bollinger_bands(prices)\n\ndef analyze_symbol(symbol: str, price_data: Dict) -> Dict:\n    \"\"\"–ü–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Å–∏–º–≤–æ–ª—É\"\"\"\n    return technical_indicators.analyze_symbol_full(symbol, price_data)","size_bytes":15267},"telegram_admin.py":{"content":"import logging\nimport threading\nimport os\nimport time\nfrom datetime import datetime, timedelta\nfrom telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton\nfrom telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes\nimport bot, config, utils\nimport json\n\n# Authorized users (–¥–æ–¥–∞–π—Ç–µ —Å–≤–æ—ó Telegram ID)\nAUTHORIZED_USERS = set()\n\n# –î–æ–¥–∞—î–º–æ –ø–µ—Ä—à–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\nif config.TELEGRAM_CHAT_ID:\n    try:\n        AUTHORIZED_USERS.add(int(config.TELEGRAM_CHAT_ID))\n        logging.info(f\"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ 1: {config.TELEGRAM_CHAT_ID}\")\n    except ValueError:\n        logging.error(f\"‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π TELEGRAM_CHAT_ID: {config.TELEGRAM_CHAT_ID}\")\n\n# –î–æ–¥–∞—î–º–æ –¥—Ä—É–≥–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\nif config.TELEGRAM_ADMIN_2_ID:\n    try:\n        AUTHORIZED_USERS.add(int(config.TELEGRAM_ADMIN_2_ID))\n        logging.info(f\"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ 2: {config.TELEGRAM_ADMIN_2_ID}\")\n    except ValueError:\n        logging.error(f\"‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π TELEGRAM_ADMIN_2_ID: {config.TELEGRAM_ADMIN_2_ID}\")\n\ndef is_authorized(user_id: int) -> bool:\n    \"\"\"–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - –ë–ï–ó–ü–ï–ß–ù–ê –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è\"\"\"\n    # –ë–ï–ó–ü–ï–ö–ê: –Ø–∫—â–æ —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π, –±–ª–æ–∫—É—î–º–æ –≤—Å—ñ—Ö (default-deny)\n    if not AUTHORIZED_USERS:\n        logging.warning(f\"üö´ –ó–ê–ë–õ–û–ö–û–í–ê–ù–ò–ô –¥–æ—Å—Ç—É–ø –¥–ª—è {user_id}: AUTHORIZED_USERS –ø–æ—Ä–æ–∂–Ω—ñ–π\")\n        return False\n    \n    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Å–ø–∏—Å–∫—É –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö\n    authorized = user_id in AUTHORIZED_USERS\n    if authorized:\n        logging.info(f\"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–ª—è {user_id}\")\n    else:\n        logging.warning(f\"üö´ –ù–ï–ê–í–¢–û–†–ò–ó–û–í–ê–ù–ò–ô –¥–æ—Å—Ç—É–ø –¥–ª—è {user_id}\")\n    \n    return authorized\n\nasync def chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    \"\"\"–ü–æ–∫–∞–∑—É—î ID –ø–æ—Ç–æ—á–Ω–æ–≥–æ —á–∞—Ç—É (–≥—Ä—É–ø–∏ –∞–±–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ)\"\"\"\n    chat_id = update.effective_chat.id\n    user_id = update.effective_user.id\n    chat_type = update.effective_chat.type\n    chat_title = getattr(update.effective_chat, 'title', '–ü—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç')\n    \n    # –õ–æ–≥—É—î–º–æ –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è\n    logging.info(f\"üÜî ID Request: chat_id={chat_id}, user_id={user_id}, type={chat_type}, title={chat_title}\")\n    \n    if chat_type == 'group' or chat_type == 'supergroup':\n        message = f\"üë• –¶–ï –ì–†–£–ü–ê!\\n\\n\"\n        message += f\"üÜî ID –ì–†–£–ü–ò: {chat_id}\\n\\n\"\n        message += f\"üè∑Ô∏è –ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏: {chat_title}\\n\"\n        message += f\"üë§ –í–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π ID: {user_id}\\n\\n\"\n        message += f\"üîß –í–ê–ñ–õ–ò–í–û! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ ID –≥—Ä—É–ø–∏:\\n\"\n        message += f\"TELEGRAM_CHAT_ID_2 = {chat_id}\\n\\n\"\n        message += f\"‚ùóÔ∏è –ù–ï –ø–ª—É—Ç–∞–π—Ç–µ –∑ –æ—Å–æ–±–∏—Å—Ç–∏–º ID {user_id}\"\n    else:\n        message = f\"üí¨ –¶–ï –ü–†–ò–í–ê–¢–ù–ò–ô –ß–ê–¢\\n\\n\"\n        message += f\"üÜî ID –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç—É: {chat_id}\\n\"\n        message += f\"üë§ –í–∞—à User ID: {user_id}\\n\\n\"\n        message += f\"üîß –î–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç—É:\\n\"\n        message += f\"TELEGRAM_CHAT_ID = {chat_id}\"\n    \n    await update.message.reply_text(message)\n\nasync def start(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    \"\"\"Start command with main menu\"\"\"\n    # –õ–æ–≥—É—î–º–æ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ Chat ID\n    chat_id = update.effective_chat.id\n    user_id = update.effective_user.id\n    chat_type = update.effective_chat.type\n    logging.info(f\"üîç –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: chat_id={chat_id}, user_id={user_id}, type={chat_type}\")\n    \n    if not is_authorized(update.effective_user.id):\n        await update.message.reply_text(\"‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞\")\n        return\n    \n    keyboard = [\n        [KeyboardButton(\"üìä –°—Ç–∞—Ç—É—Å\"), KeyboardButton(\"üí∞ –ë–∞–ª–∞–Ω—Å\")],\n        [KeyboardButton(\"üíº –ü–æ–∑–∏—Ü—ñ—ó\"), KeyboardButton(\"üí∞ –ó–∞—Ä–æ–±—ñ—Ç–æ–∫\")],\n        [KeyboardButton(\"üìã –°–∏–º–≤–æ–ª–∏\"), KeyboardButton(\"üì° –°–∏–≥–Ω–∞–ª–∏\")],\n        [KeyboardButton(\"üìö –Ü—Å—Ç–æ—Ä—ñ—è\"), KeyboardButton(\"üí± DRY RUN\")],\n        [KeyboardButton(\"‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\"), KeyboardButton(\"üî¥ –°—Ç–æ–ø –±–æ—Ç\")],\n        [KeyboardButton(\"üìà –¢–æ—Ä–≥—ñ–≤–ª—è\")]\n    ]\n    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)\n    \n    welcome_text = f\"\"\"\nü§ñ –í—ñ—Ç–∞—é –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ {config.BOT_NAME}!\n    \nüìç –ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º: {'üîí DRY RUN (–ë–µ–∑–ø–µ—á–Ω–æ)' if config.DRY_RUN else 'üî• LIVE TRADING'}\nüìä –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤: {len([s for s, enabled in bot.trade_symbols.items() if enabled])}\nüíº –ê–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π: {len([pos for pos in bot.active_positions.values() if pos])}\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º üëá\n\"\"\"\n    await update.message.reply_text(welcome_text, reply_markup=reply_markup)\n\nasync def status(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    \"\"\"Show bot status\"\"\"\n    if not is_authorized(update.effective_user.id):\n        return\n    \n    active_symbols = len([s for s, enabled in bot.trade_symbols.items() if enabled])\n    total_symbols = len(bot.trade_symbols)\n    active_positions_count = len([pos for pos in bot.active_positions.values() if pos])\n    \n    status_text = f\"\"\"\nüìä **–°–¢–ê–¢–£–° –ë–û–¢–ê**\n\nüîß –†–µ–∂–∏–º: {'üîí DRY RUN' if config.DRY_RUN else 'üî• LIVE TRADING'}\nüìà –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤: {active_symbols}/{total_symbols}\nüíº –í—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π: {active_positions_count}\n\n‚öôÔ∏è **–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø:**\nüí∞ –°—É–º–∞ –æ—Ä–¥–µ—Ä–∞: {config.ORDER_AMOUNT} USDT\nüìä –ú—ñ–Ω. —Å–ø—Ä–µ–¥: {config.MIN_SPREAD}%\nüéØ –õ–µ–≤–µ—Ä–∏–¥–∂: {config.LEVERAGE}x\nüìö –ú–∞–∫—Å. –ø–æ–∑–∏—Ü—ñ–π: {config.MAX_OPEN_POSITIONS}\nüìñ –ì–ª–∏–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω—É: {config.ORDER_BOOK_DEPTH}\n\nüîÑ –Ü–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {config.SCAN_INTERVAL}—Å\n\"\"\"\n    await update.message.reply_text(status_text, parse_mode='Markdown')\n\nasync def positions(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    \"\"\"Show active positions from both XT.com accounts\"\"\"\n    if not is_authorized(update.effective_user.id):\n        return\n    \n    try:\n        positions_text = \"üíº **–ê–ö–¢–ò–í–ù–Ü –ü–û–ó–ò–¶–Ü–á (–†–ï–ê–õ–¨–ù–Ü):**\\n\\n\"\n        has_positions = False\n        total_positions = 0\n        \n        # XT.com –ê–ö–ê–£–ù–¢ 1\n        try:\n            import bot\n            from xt_client import get_xt_open_positions\n            from bot import calculate_pnl_percentage\n            \n            xt_positions_1 = get_xt_open_positions(bot.xt_account_1)\n            logging.info(f\"üìä XT.com –ê–ö–ê–£–ù–¢ 1: –∑–Ω–∞–π–¥–µ–Ω–æ {len(xt_positions_1)} –ø–æ–∑–∏—Ü—ñ–π\")\n            \n            positions_text += \"‚ö° **–ê–ö–ê–£–ù–¢ 1:**\\n\"\n            if xt_positions_1:\n                for pos in xt_positions_1:\n                    has_positions = True\n                    total_positions += 1\n                    clean_symbol = pos['symbol'].replace('/USDT:USDT', '')\n                    side_emoji = \"üü¢\" if pos['side'].upper() == \"LONG\" else \"üî¥\"\n                    \n                    percentage = calculate_pnl_percentage(pos)\n                    size_contracts = float(pos.get('contracts', 0) or pos.get('size', 0) or 0)\n                    size_usdt = float(pos.get('notional', 0) or pos.get('size_usdt', 0) or 5.0)\n                    unrealized_pnl = (percentage / 100) * size_usdt if percentage != 0 else 0.0\n                    pnl_emoji = \"üíö\" if percentage >= 0 else \"‚ù§Ô∏è\"\n                    \n                    positions_text += f\"üìà **{clean_symbol}**\\n\"\n                    positions_text += f\"{side_emoji} {pos['side'].upper()} | üíµ {size_contracts:.4f} –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤\\n\"\n                    positions_text += f\"üí∞ –†–æ–∑–º—ñ—Ä: **${size_usdt:.2f} USDT** | üìã –ë–∞–ª–∞–Ω—Å: **{size_contracts:.4f} {clean_symbol}**\\n\"\n                    positions_text += f\"{pnl_emoji} PnL: **${unrealized_pnl:.2f}** ({percentage:.2f}%)\\n\\n\"\n            else:\n                positions_text += \"‚ùå –ù–µ–º–∞—î –ø–æ–∑–∏—Ü—ñ–π\\n\\n\"\n        except Exception as e:\n            positions_text += f\"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}\\n\\n\"\n            logging.error(f\"XT.com –ê–ö–ê–£–ù–¢ 1 –ø–æ–∑–∏—Ü—ñ—ó –ø–æ–º–∏–ª–∫–∞: {e}\")\n        \n        # XT.com –ê–ö–ê–£–ù–¢ 2\n        try:\n            import bot\n            from xt_client import get_xt_open_positions\n            from bot import calculate_pnl_percentage\n            \n            xt_positions_2 = get_xt_open_positions(bot.xt_account_2)\n            logging.info(f\"üìä XT.com –ê–ö–ê–£–ù–¢ 2: –∑–Ω–∞–π–¥–µ–Ω–æ {len(xt_positions_2)} –ø–æ–∑–∏—Ü—ñ–π\")\n            \n            positions_text += \"‚ö° **–ê–ö–ê–£–ù–¢ 2:**\\n\"\n            if xt_positions_2:\n                for pos in xt_positions_2:\n                    has_positions = True\n                    total_positions += 1\n                    clean_symbol = pos['symbol'].replace('/USDT:USDT', '')\n                    side_emoji = \"üü¢\" if pos['side'].upper() == \"LONG\" else \"üî¥\"\n                    \n                    percentage = calculate_pnl_percentage(pos)\n                    size_contracts = float(pos.get('contracts', 0) or pos.get('size', 0) or 0)\n                    size_usdt = float(pos.get('notional', 0) or pos.get('size_usdt', 0) or 5.0)\n                    unrealized_pnl = (percentage / 100) * size_usdt if percentage != 0 else 0.0\n                    pnl_emoji = \"üíö\" if percentage >= 0 else \"‚ù§Ô∏è\"\n                    \n                    positions_text += f\"üìà **{clean_symbol}**\\n\"\n                    positions_text += f\"{side_emoji} {pos['side'].upper()} | üíµ {size_contracts:.4f} –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤\\n\"\n                    positions_text += f\"üí∞ –†–æ–∑–º—ñ—Ä: **${size_usdt:.2f} USDT** | üìã –ë–∞–ª–∞–Ω—Å: **{size_contracts:.4f} {clean_symbol}**\\n\"\n                    positions_text += f\"{pnl_emoji} PnL: **${unrealized_pnl:.2f}** ({percentage:.2f}%)\\n\\n\"\n            else:\n                positions_text += \"‚ùå –ù–µ–º–∞—î –ø–æ–∑–∏—Ü—ñ–π\\n\\n\"\n        except Exception as e:\n            positions_text += f\"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}\\n\\n\"\n            logging.error(f\"XT.com –ê–ö–ê–£–ù–¢ 2 –ø–æ–∑–∏—Ü—ñ—ó –ø–æ–º–∏–ª–∫–∞: {e}\")\n        \n        if not has_positions:\n            positions_text += \"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\\n\"\n            positions_text += \"üìä **–ü–Ü–î–°–£–ú–û–ö:**\\n\"\n            positions_text += \"‚ùå –ù–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –Ω–∞ –∂–æ–¥–Ω–æ–º—É –∞–∫–∞—É–Ω—Ç—ñ\\n\"\n            positions_text += \"ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ —Å–∫–∞–Ω—É—î –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ...\"\n        else:\n            positions_text += \"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\\n\"\n            positions_text += f\"üìä **–ó–ê–ì–ê–õ–û–ú: {total_positions} –ø–æ–∑–∏—Ü—ñ–π**\"\n    \n    except Exception as e:\n        positions_text = f\"‚ùå **–ü–û–ú–ò–õ–ö–ê –û–¢–†–ò–ú–ê–ù–ù–Ø –ü–û–ó–ò–¶–Ü–ô:**\\n\\n{str(e)}\"\n        logging.error(f\"–ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø–æ–∑–∏—Ü—ñ–π: {e}\")\n    \n    await update.message.reply_text(positions_text, parse_mode='Markdown')\n\nasync def signals(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    \"\"\"Show current arbitrage signals\"\"\"\n    if not is_authorized(update.effective_user.id):\n        return\n    \n    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Å–ø—Ä–µ–¥–∏ –∑ –±–æ—Ç–∞\n    current_signals = []\n    \n    # –ü—Ä–æ—Ö–æ–¥–∏–º–æ—Å—å –ø–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–∏–º–≤–æ–ª–∞—Ö —ñ –ø–æ–∫–∞–∑—É—î–º–æ —Ç–æ–ø –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ\n    from utils import get_shared_dex_client\n    from xt_client import create_xt, fetch_xt_ticker\n    \n    try:\n        xt = create_xt()\n        signals_text = \"üì° **–ê–†–ë–Ü–¢–†–ê–ñ–ù–Ü –°–ò–ì–ù–ê–õ–ò** (DexScreener)\\n\\n\"\n        \n        # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à—ñ 10 —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –æ–≥–ª—è–¥—É\n        active_symbols = [s for s, enabled in bot.trade_symbols.items() if enabled][:10]\n        \n        for symbol in active_symbols:\n            try:\n                # –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω–∏\n                ticker = fetch_xt_ticker(xt, symbol)\n                if not ticker:\n                    continue\n                    \n                xt_price = float(ticker['last'])\n                \n                # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–∫–µ–Ω\n                dex_client = get_shared_dex_client()\n                # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —á–µ—Ä–µ–∑ resolve_best_pair\n                token_info = dex_client.resolve_best_pair(symbol.replace('/USDT:USDT', ''))\n                if not token_info:\n                    continue\n                    \n                dex_price = token_info.get('price_usd', 0)\n                \n                if dex_price and dex_price > 0.000001:\n                    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–ø—Ä–µ–¥\n                    spread_pct = ((dex_price - xt_price) / xt_price) * 100\n                    \n                    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ñ–µ–π–∫–∏\n                    is_realistic = True\n                    price_ratio = max(xt_price, dex_price) / min(xt_price, dex_price)\n                    min_liquidity = token_info.get('liquidity_usd', 0)\n                    \n                    if abs(spread_pct) > 10 or price_ratio > 1.15 or min_liquidity < 100000:\n                        is_realistic = False\n                    \n                    # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ä–µ–∞–ª—å–Ω—ñ —Ü—ñ–∫–∞–≤—ñ —Å–ø—Ä–µ–¥–∏ (>= 0.3%)\n                    if abs(spread_pct) >= 0.3 and is_realistic:\n                        clean_symbol = symbol.replace('/USDT:USDT', '')\n                        direction = \"üü¢ LONG\" if spread_pct > 0 else \"üî¥ SHORT\"\n                        \n                        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞—Ä—É\n                        try:\n                            from utils import get_exact_dex_pair_info, get_proper_dexscreener_link\n                            exact_pair_info = get_exact_dex_pair_info(clean_symbol)\n                            if exact_pair_info and exact_pair_info.get('exact_pair_url'):\n                                dex_link = exact_pair_info['exact_pair_url']\n                            else:\n                                dex_link = get_proper_dexscreener_link(clean_symbol)\n                        except:\n                            dex_link = get_proper_dexscreener_link(clean_symbol)\n                        \n                        signals_text += f\"**{clean_symbol}** {direction}\\n\"\n                        signals_text += f\"üìä XT: ${xt_price:.4f} | DexScreener: ${dex_price:.4f}\\n\"\n                        signals_text += f\"üí∞ –°–ø—Ä–µ–¥: **{spread_pct:+.2f}%**\\n\"\n                        signals_text += f\"üíß –õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å: ${min_liquidity:,.0f}\\n\"\n                        signals_text += f\"üîç [–ì—Ä–∞—Ñ—ñ–∫ DexScreener]({dex_link})\\n\"\n                        signals_text += \"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\\n\"\n                        current_signals.append((clean_symbol, spread_pct))\n                        \n            except Exception as e:\n                continue\n        \n        if not current_signals:\n            signals_text += \"‚ùå –ó–∞—Ä–∞–∑ –Ω–µ–º–∞—î —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑ —Å–ø—Ä–µ–¥–æ–º >= 0.3%\\n\"\n            signals_text += \"üìà –ë–æ—Ç —Å–∫–∞–Ω—É—î 596+ —Ç–æ–∫–µ–Ω—ñ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ...\\n\"\n        else:\n            signals_text += f\"\\n‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(current_signals)} –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π!\"\n            signals_text += f\"\\nü§ñ –ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª–∏ –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å—Å—è –ø—Ä–∏ —Å–ø—Ä–µ–¥—ñ >= 0.5%\"\n        \n    except Exception as e:\n        signals_text = f\"‚ùå **–ü–û–ú–ò–õ–ö–ê –°–ò–ì–ù–ê–õ–Ü–í:**\\n\\n{str(e)}\"\n    \n    await update.message.reply_text(signals_text, parse_mode='Markdown')\n\nasync def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    \"\"\"Show account balance with position counts\"\"\"\n    if not is_authorized(update.effective_user.id):\n        return\n    \n    try:\n        # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å –∑ –û–ë–û–• –∞–∫–∞—É–Ω—Ç—ñ–≤ XT.com\n        import bot\n        from xt_client import get_xt_futures_balance, get_xt_open_positions\n        \n        # –ê–∫–∞—É–Ω—Ç 1\n        xt_balance_1 = get_xt_futures_balance(bot.xt_account_1)\n        xt_positions_1 = get_xt_open_positions(bot.xt_account_1)\n        xt_pos_count_1 = len(xt_positions_1)\n        \n        # –ê–∫–∞—É–Ω—Ç 2\n        xt_balance_2 = get_xt_futures_balance(bot.xt_account_2)\n        xt_positions_2 = get_xt_open_positions(bot.xt_account_2)\n        xt_pos_count_2 = len(xt_positions_2)\n        \n        balance_text = \"üí∞ **–ë–ê–õ–ê–ù–° XT.COM:**\\n\\n\"\n        total_balance = 0\n        has_balance = False\n        \n        # XT.com –ê–ö–ê–£–ù–¢ 1\n        balance_text += f\"‚ö° **–ê–ö–ê–£–ù–¢ 1** ({xt_pos_count_1} –ø–æ–∑–∏—Ü—ñ–π):\\n\"\n        if xt_balance_1.get('total', 0) > 0:\n            has_balance = True\n            available_1 = float(xt_balance_1.get('free', 0))\n            used_1 = float(xt_balance_1.get('used', 0))\n            total_1 = float(xt_balance_1.get('total', 0))\n            \n            balance_text += f\"üíµ –î–æ—Å—Ç—É–ø–Ω–æ: {available_1:.2f} USDT\\n\"\n            if used_1 > 0:\n                balance_text += f\"üìä –í –ø–æ–∑–∏—Ü—ñ—è—Ö: {used_1:.2f} USDT\\n\"\n            balance_text += f\"üéØ –ó–∞–≥–∞–ª–æ–º: {total_1:.2f} USDT\\n\"\n            total_balance += total_1\n        else:\n            balance_text += \"üíµ USDT: 0.00 USDT –¥–æ—Å—Ç—É–ø–Ω–æ\\n\"\n        \n        balance_text += \"\\n\"\n        \n        # XT.com –ê–ö–ê–£–ù–¢ 2\n        balance_text += f\"‚ö° **–ê–ö–ê–£–ù–¢ 2** ({xt_pos_count_2} –ø–æ–∑–∏—Ü—ñ–π):\\n\"\n        if xt_balance_2.get('total', 0) > 0:\n            has_balance = True\n            available_2 = float(xt_balance_2.get('free', 0))\n            used_2 = float(xt_balance_2.get('used', 0))\n            total_2 = float(xt_balance_2.get('total', 0))\n            \n            balance_text += f\"üíµ –î–æ—Å—Ç—É–ø–Ω–æ: {available_2:.2f} USDT\\n\"\n            if used_2 > 0:\n                balance_text += f\"üìä –í –ø–æ–∑–∏—Ü—ñ—è—Ö: {used_2:.2f} USDT\\n\"\n            balance_text += f\"üéØ –ó–∞–≥–∞–ª–æ–º: {total_2:.2f} USDT\\n\"\n            total_balance += total_2\n        else:\n            balance_text += \"üíµ USDT: 0.00 USDT –¥–æ—Å—Ç—É–ø–Ω–æ\\n\"\n        \n        if has_balance:\n            total_positions = xt_pos_count_1 + xt_pos_count_2\n            balance_text += f\"\\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\\n\"\n            balance_text += f\"üí∞ **–ó–ê–ì–ê–õ–¨–ù–ò–ô –ë–ê–õ–ê–ù–°: {total_balance:.2f} USDT**\\n\"\n            balance_text += f\"üìä **–í–°–¨–û–ì–û –ü–û–ó–ò–¶–Ü–ô: {total_positions}**\"\n        else:\n            balance_text += \"‚ùå –ë–∞–ª–∞–Ω—Å –ø—É—Å—Ç–∏–π –∞–±–æ –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö\"\n    \n    except Exception as e:\n        balance_text = f\"‚ùå **–ü–û–ú–ò–õ–ö–ê –ë–ê–õ–ê–ù–°–£:**\\n\\n{str(e)}\"\n    \n    await update.message.reply_text(balance_text, parse_mode='Markdown')\n\n# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–∑–∏—Ü—ñ–π\ntrade_history_data = []\n\ndef add_to_trade_history(symbol, side, entry_price, close_price=None, pnl=None, close_reason=\"Manual\", timestamp=None, exchange=\"XT.com\"):\n    \"\"\"–î–æ–¥–∞—î –∑–∞–ø–∏—Å –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ\"\"\"\n    if timestamp is None:\n        timestamp = datetime.now()\n    \n    history_record = {\n        \"timestamp\": timestamp,\n        \"symbol\": symbol.replace('/USDT:USDT', ''),\n        \"side\": side,\n        \"entry_price\": float(entry_price),\n        \"close_price\": float(close_price) if close_price else None,\n        \"pnl\": float(pnl) if pnl else None,\n        \"close_reason\": close_reason,\n        \"exchange\": exchange\n    }\n    \n    trade_history_data.append(history_record)\n    \n    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 100 –∑–∞–ø–∏—Å—ñ–≤\n    if len(trade_history_data) > 100:\n        trade_history_data.pop(0)\n\nasync def trade_history(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    \"\"\"–ü–æ–∫–∞–∑—É—î —ñ—Å—Ç–æ—Ä—ñ—é —Ç–æ—Ä–≥—ñ–≤–ª—ñ –∑ –ø—Ä–∏–±—É—Ç–∫–æ–º/–∑–±–∏—Ç–∫–æ–º\"\"\"\n    if not is_authorized(update.effective_user.id):\n        return\n    \n    try:\n        history_text = \"üìö **–Ü–°–¢–û–†–Ü–Ø –¢–û–†–ì–Ü–í–õ–Ü:**\\n\\n\"\n        \n        if not trade_history_data:\n            history_text += \"‚ùå –Ü—Å—Ç–æ—Ä—ñ—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ –ø–æ—Ä–æ–∂–Ω—è\\n\"\n            history_text += \"üí° –ü–æ–∑–∏—Ü—ñ—ó –±—É–¥—É—Ç—å –¥–æ–¥–∞–≤–∞—Ç–∏—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ—Å–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ\"\n        else:\n            # –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 10 –∑–∞–ø–∏—Å—ñ–≤\n            recent_trades = sorted(trade_history_data, key=lambda x: x['timestamp'], reverse=True)[:10]\n            \n            total_pnl = 0.0\n            profitable_trades = 0\n            \n            history_text += f\"üìä **–û–°–¢–ê–ù–ù–Ü {len(recent_trades)} –û–ü–ï–†–ê–¶–Ü–ô:**\\n\\n\"\n            \n            for trade in recent_trades:\n                symbol = trade['symbol']\n                side = trade['side']\n                entry_price = trade['entry_price']\n                close_price = trade['close_price']\n                pnl = trade['pnl']\n                close_reason = trade['close_reason']\n                exchange = trade['exchange']\n                \n                # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É\n                trade_time = trade['timestamp'].strftime(\"%d.%m %H:%M\")\n                \n                side_emoji = \"üü¢\" if side == \"LONG\" else \"üî¥\"\n                \n                if pnl is not None:\n                    total_pnl += pnl\n                    if pnl > 0:\n                        profitable_trades += 1\n                        pnl_emoji = \"üíö\"\n                    else:\n                        pnl_emoji = \"‚ù§Ô∏è\"\n                    \n                    history_text += f\"**{symbol}** {side_emoji}\\n\"\n                    history_text += f\"üïê {trade_time} | üè™ {exchange}\\n\"\n                    history_text += f\"üìà ${entry_price:.6f} ‚Üí ${close_price:.6f}\\n\"\n                    history_text += f\"{pnl_emoji} P&L: ${pnl:.2f}\\n\"\n                    history_text += f\"üìù {close_reason}\\n\\n\"\n                else:\n                    # –ê–∫—Ç–∏–≤–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è\n                    history_text += f\"**{symbol}** {side_emoji} (–∞–∫—Ç–∏–≤–Ω–∞)\\n\"\n                    history_text += f\"üïê {trade_time} | üè™ {exchange}\\n\"\n                    history_text += f\"üìà –í—Ö—ñ–¥: ${entry_price:.6f}\\n\\n\"\n            \n            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n            win_rate = (profitable_trades / len(recent_trades)) * 100 if recent_trades else 0\n            avg_pnl = total_pnl / len(recent_trades) if recent_trades else 0\n            \n            history_text += \"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\\n\"\n            history_text += f\"üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π P&L: ${total_pnl:.2f}\\n\"\n            history_text += f\"üìà –ü—Ä–∏–±—É—Ç–∫–æ–≤–∏—Ö: {profitable_trades}/{len(recent_trades)} ({win_rate:.1f}%)\\n\"\n            history_text += f\"‚öñÔ∏è –°–µ—Ä–µ–¥–Ω—ñ–π P&L: ${avg_pnl:.2f}\\n\"\n        \n        await update.message.reply_text(history_text, parse_mode='Markdown')\n        \n    except Exception as e:\n        logging.error(f\"–ü–æ–º–∏–ª–∫–∞ —ñ—Å—Ç–æ—Ä—ñ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ: {e}\")\n        await update.message.reply_text(\"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ\")\n\nasync def profit_report(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    \"\"\"Show current profit/loss from active positions\"\"\"\n    if not is_authorized(update.effective_user.id):\n        return\n    \n    try:\n        profit_text = \"üí∞ **–ó–í–Ü–¢ –ü–†–û –ó–ê–†–û–ë–Ü–¢–û–ö:**\\n\\n\"\n        \n        total_unrealized_pnl = 0.0\n        total_positions = 0\n        profitable_positions = 0\n        \n        # –û—Ç—Ä–∏–º—É—î–º–æ gate –∫–ª—ñ—î–Ω—Ç –¥–ª—è —Ü—ñ–Ω\n        # ‚ùå GATE –í–ò–î–ê–õ–ï–ù–û: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ XT.com\n        # gate = gate_client.create_gate()  # REMOVED - Gate.io system removed\n        \n        if not bot.active_positions:\n            profit_text += \"‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ø—Ä–∏–±—É—Ç–∫—É\\n\"\n            profit_text += \"üìä –ó–∞–≥–∞–ª—å–Ω–∏–π –Ω–µ—Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π P&L: $0.00\\n\"\n        else:\n            profit_text += \"üìä **–ê–ö–¢–ò–í–ù–Ü –ü–û–ó–ò–¶–Ü–á:**\\n\\n\"\n            \n            for symbol, position in bot.active_positions.items():\n                if position:\n                    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É\n                    try:\n                        # ‚úÖ –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û XT.com –∑–∞–º—ñ—Å—Ç—å Gate.io\n                        from xt_client import fetch_xt_ticker, create_xt\n                        xt_exchange = create_xt()\n                        ticker = fetch_xt_ticker(xt_exchange, symbol)\n                        if ticker and 'last' in ticker:\n                            current_price = float(ticker['last'])\n                        \n                        clean_symbol = symbol.replace('/USDT:USDT', '')\n                        profit_text += f\"**{clean_symbol}:**\\n\"\n                        \n                        side = position['side']\n                        open_price = position['avg_entry']\n                        amount = position['size_usdt']\n                        \n                        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–µ—Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ P&L\n                        if side == \"LONG\":\n                            unrealized_pnl = ((current_price - open_price) / open_price) * amount\n                        else:  # SHORT\n                            unrealized_pnl = ((open_price - current_price) / open_price) * amount\n                        \n                        total_unrealized_pnl += unrealized_pnl\n                        total_positions += 1\n                        \n                        if unrealized_pnl > 0:\n                            profitable_positions += 1\n                            pnl_emoji = \"üü¢\"\n                        else:\n                            pnl_emoji = \"üî¥\"\n                        \n                        profit_pct = (unrealized_pnl / amount) * 100\n                        \n                        side_emoji = \"üü¢\" if side == \"LONG\" else \"üî¥\"\n                        profit_text += f\"{side_emoji} {side} | \"\n                        profit_text += f\"üíµ ${amount:.2f} | \"\n                        profit_text += f\"üìà ${open_price:.6f} ‚Üí ${current_price:.6f}\\n\"\n                        profit_text += f\"{pnl_emoji} P&L: ${unrealized_pnl:+.2f} ({profit_pct:+.1f}%)\\n\"\n                        profit_text += f\"üéØ TP: ${position['tp_price']:.6f}\\n\"\n                        profit_text += f\"üìä –£—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è: {position['adds_done']}\\n\"\n                        profit_text += \"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\\n\"\n                        \n                    except Exception as e:\n                        profit_text += f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –¥–ª—è {symbol}: {str(e)}\\n\"\n                        continue\n            \n            # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n            win_rate = (profitable_positions / total_positions * 100) if total_positions > 0 else 0\n            avg_pnl = total_unrealized_pnl / total_positions if total_positions > 0 else 0\n            \n            profit_text += \"\\nüìà **–ó–ê–ì–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\\n\"\n            profit_text += f\"üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –Ω–µ—Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π P&L: ${total_unrealized_pnl:+.2f}\\n\"\n            profit_text += f\"üìä –ü–æ–∑–∏—Ü—ñ–π –≤—Å—å–æ–≥–æ: {total_positions}\\n\"\n            profit_text += f\"üü¢ –ü—Ä–∏–±—É—Ç–∫–æ–≤–∏—Ö: {profitable_positions} ({win_rate:.1f}%)\\n\"\n            profit_text += f\"üî¥ –ó–±–∏—Ç–∫–æ–≤–∏—Ö: {total_positions - profitable_positions}\\n\"\n            profit_text += f\"üìä –°–µ—Ä–µ–¥–Ω—ñ–π P&L: ${avg_pnl:+.2f}\\n\"\n            \n            # –°—Ç–∞—Ç—É—Å –ø–æ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—é –¥–æ TP\n            if total_unrealized_pnl > 0:\n                profit_text += f\"\\nüéØ **–°–¢–ê–¢–£–°:** –ù–∞ —à–ª—è—Ö—É –¥–æ –ø—Ä–∏–±—É—Ç–∫—É! üöÄ\"\n            elif total_unrealized_pnl == 0:\n                profit_text += f\"\\n‚öñÔ∏è **–°–¢–ê–¢–£–°:** –ë–µ–∑–∑–±–∏—Ç–∫–æ–≤—ñ—Å—Ç—å (Break-even)\"\n            else:\n                profit_text += f\"\\nüìâ **–°–¢–ê–¢–£–°:** –¢–∏–º—á–∞—Å–æ–≤–∏–π –¥—Ä–æ—É–¥–∞—É–Ω\"\n        \n        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–µ–∂–∏–º\n        if config.DRY_RUN:\n            profit_text += f\"\\n\\nüîí **–†–ï–ñ–ò–ú:** DRY RUN (–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è)\\n\"\n            profit_text += f\"‚ö†Ô∏è –¶–µ —Å–∏–º—É–ª—è—Ü—ñ—è, —Ä–µ–∞–ª—å–Ω—ñ –∫–æ—à—Ç–∏ –Ω–µ –∑–∞–¥—ñ—è–Ω—ñ\"\n        else:\n            profit_text += f\"\\n\\nüî• **–†–ï–ñ–ò–ú:** LIVE TRADING\\n\"\n            profit_text += f\"üí∞ –†–µ–∞–ª—å–Ω–∞ —Ç–æ—Ä–≥—ñ–≤–ª—è –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –∫–æ—à—Ç–∞–º–∏\"\n    \n    except Exception as e:\n        profit_text = f\"‚ùå **–ü–û–ú–ò–õ–ö–ê –†–û–ó–†–ê–•–£–ù–ö–£ –ü–†–ò–ë–£–¢–ö–£:**\\n\\n{str(e)}\"\n    \n    await update.message.reply_text(profit_text, parse_mode='Markdown')\n\nasync def symbols_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    \"\"\"Show symbols management menu\"\"\"\n    if not is_authorized(update.effective_user.id):\n        return\n    \n    keyboard = []\n    row = []\n    for i, (symbol, enabled) in enumerate(list(bot.trade_symbols.items())[:20]):  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 20\n        status_emoji = \"üü¢\" if enabled else \"üî¥\"\n        button_text = f\"{status_emoji} {symbol}\"\n        row.append(InlineKeyboardButton(button_text, callback_data=f\"toggle_{symbol}\"))\n        \n        if len(row) == 2:  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É\n            keyboard.append(row)\n            row = []\n    \n    if row:  # –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥ —è–∫—â–æ —î\n        keyboard.append(row)\n    \n    keyboard.append([\n        InlineKeyboardButton(\"‚úÖ –í–∫–ª—é—á–∏—Ç–∏ –≤—Å—ñ\", callback_data=\"enable_all\"),\n        InlineKeyboardButton(\"‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –≤—Å—ñ\", callback_data=\"disable_all\")\n    ])\n    \n    reply_markup = InlineKeyboardMarkup(keyboard)\n    \n    active_count = len([s for s, enabled in bot.trade_symbols.items() if enabled])\n    text = f\"üìã **–ö–ï–†–£–í–ê–ù–ù–Ø –°–ò–ú–í–û–õ–ê–ú–ò** ({active_count} –∞–∫—Ç–∏–≤–Ω–∏—Ö)\\n\\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —Å–∏–º–≤–æ–ª —â–æ–± —É–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏:\"\n    \n    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')\n\nasync def settings_buttons_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    \"\"\"Show settings menu with buttons\"\"\"\n    if not is_authorized(update.effective_user.id):\n        return\n    \n    settings_text = f\"\"\"\n‚öôÔ∏è **–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ë–û–¢–ê**\n\n–ü–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è:\nüí∞ –°—É–º–∞ –æ—Ä–¥–µ—Ä–∞: {config.ORDER_AMOUNT} USDT\nüìä –ú—ñ–Ω. —Å–ø—Ä–µ–¥: {config.MIN_SPREAD}%\nüéØ –õ–µ–≤–µ—Ä–∏–¥–∂: {config.LEVERAGE}x\nüìö –ú–∞–∫—Å. –ø–æ–∑–∏—Ü—ñ–π: {config.MAX_OPEN_POSITIONS}\nüìñ –ì–ª–∏–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω—É: {config.ORDER_BOOK_DEPTH}\n\nüìà **–£–°–ï–†–ï–î–ù–ï–ù–ù–Ø:**\nüîÑ –£–≤—ñ–º–∫–Ω–µ–Ω–æ: {\"‚úÖ\" if config.AVERAGING_ENABLED else \"‚ùå\"}\nüìä –ü–æ—Ä—ñ–≥: {config.AVERAGING_THRESHOLD_PCT}%\nüî¢ –ú–∞–∫—Å. –¥–æ–¥–∞–≤–∞–Ω—å: {config.AVERAGING_MAX_ADDS}\nüíµ –ú–∞–∫—Å. —Ä–æ–∑–º—ñ—Ä: ${config.MAX_POSITION_USDT_PER_SYMBOL}\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä:\n\"\"\"\n    \n    keyboard = [\n        [\n            InlineKeyboardButton(\"üí∞ –°—É–º–∞ –æ—Ä–¥–µ—Ä–∞\", callback_data=\"settings_amount\"),\n            InlineKeyboardButton(\"üìä –ú—ñ–Ω. —Å–ø—Ä–µ–¥\", callback_data=\"settings_spread\")\n        ],\n        [\n            InlineKeyboardButton(\"üéØ –õ–µ–≤–µ—Ä–∏–¥–∂\", callback_data=\"settings_leverage\"),\n            InlineKeyboardButton(\"üìö –ú–∞–∫—Å. –ø–æ–∑–∏—Ü—ñ–π\", callback_data=\"settings_positions\")\n        ],\n        [\n            InlineKeyboardButton(\"üìñ –ì–ª–∏–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω—É\", callback_data=\"settings_depth\"),\n            InlineKeyboardButton(\"üîÑ –£—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è\", callback_data=\"settings_averaging\")\n        ],\n        [\n            InlineKeyboardButton(\"üîÑ –û–Ω–æ–≤–∏—Ç–∏\", callback_data=\"settings_refresh\")\n        ]\n    ]\n    \n    reply_markup = InlineKeyboardMarkup(keyboard)\n    await update.message.reply_text(settings_text, reply_markup=reply_markup, parse_mode='Markdown')\n\nasync def handle_settings_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    \"\"\"Handle settings button clicks\"\"\"\n    if not is_authorized(update.effective_user.id):\n        return\n    \n    query = update.callback_query\n    await query.answer()\n    \n    if query.data == \"settings_amount\":\n        keyboard = [\n            [InlineKeyboardButton(\"üí∞ $3\", callback_data=\"set_amount_3\"),\n             InlineKeyboardButton(\"üí∞ $5\", callback_data=\"set_amount_5\")],\n            [InlineKeyboardButton(\"üí∞ $10\", callback_data=\"set_amount_10\"),\n             InlineKeyboardButton(\"üí∞ $15\", callback_data=\"set_amount_15\")],\n            [InlineKeyboardButton(\"üí∞ $20\", callback_data=\"set_amount_20\"),\n             InlineKeyboardButton(\"üí∞ $50\", callback_data=\"set_amount_50\")],\n            [InlineKeyboardButton(\"‚óÄÔ∏è –ù–∞–∑–∞–¥\", callback_data=\"settings_back\")]\n        ]\n        text = f\"üí∞ **–°–£–ú–ê –û–†–î–ï–†–ê** (–ø–æ—Ç–æ—á–Ω–∞: ${config.ORDER_AMOUNT})\\n\\n–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É —Å—É–º—É –æ—Ä–¥–µ—Ä–∞:\"\n        \n    elif query.data == \"settings_spread\":\n        keyboard = [\n            [InlineKeyboardButton(\"üìä 0.5%\", callback_data=\"set_spread_0.5\"),\n             InlineKeyboardButton(\"üìä 0.7%\", callback_data=\"set_spread_0.7\")],\n            [InlineKeyboardButton(\"üìä 1.0%\", callback_data=\"set_spread_1.0\"),\n             InlineKeyboardButton(\"üìä 1.5%\", callback_data=\"set_spread_1.5\")],\n            [InlineKeyboardButton(\"üìä 2.0%\", callback_data=\"set_spread_2.0\"),\n             InlineKeyboardButton(\"üìä 3.0%\", callback_data=\"set_spread_3.0\")],\n            [InlineKeyboardButton(\"‚óÄÔ∏è –ù–∞–∑–∞–¥\", callback_data=\"settings_back\")]\n        ]\n        text = f\"üìä **–ú–Ü–ù–Ü–ú–ê–õ–¨–ù–ò–ô –°–ü–†–ï–î** (–ø–æ—Ç–æ—á–Ω–∏–π: {config.MIN_SPREAD}%)\\n\\n–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Å–ø—Ä–µ–¥:\"\n        \n    elif query.data == \"settings_leverage\":\n        keyboard = [\n            [InlineKeyboardButton(\"üéØ 3x\", callback_data=\"set_leverage_3\"),\n             InlineKeyboardButton(\"üéØ 5x\", callback_data=\"set_leverage_5\")],\n            [InlineKeyboardButton(\"üéØ 7x\", callback_data=\"set_leverage_7\"),\n             InlineKeyboardButton(\"üéØ 10x\", callback_data=\"set_leverage_10\")],\n            [InlineKeyboardButton(\"üéØ 15x\", callback_data=\"set_leverage_15\"),\n             InlineKeyboardButton(\"üéØ 20x\", callback_data=\"set_leverage_20\")],\n            [InlineKeyboardButton(\"‚óÄÔ∏è –ù–∞–∑–∞–¥\", callback_data=\"settings_back\")]\n        ]\n        text = f\"üéØ **–õ–ï–í–ï–†–ò–î–ñ** (–ø–æ—Ç–æ—á–Ω–∏–π: {config.LEVERAGE}x)\\n\\n–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –ª–µ–≤–µ—Ä–∏–¥–∂:\"\n        \n    elif query.data == \"settings_positions\":\n        keyboard = [\n            [InlineKeyboardButton(\"üìö 1\", callback_data=\"set_positions_1\"),\n             InlineKeyboardButton(\"üìö 3\", callback_data=\"set_positions_3\")],\n            [InlineKeyboardButton(\"üìö 5\", callback_data=\"set_positions_5\"),\n             InlineKeyboardButton(\"üìö 10\", callback_data=\"set_positions_10\")],\n            [InlineKeyboardButton(\"üìö 15\", callback_data=\"set_positions_15\"),\n             InlineKeyboardButton(\"üìö 25\", callback_data=\"set_positions_25\")],\n            [InlineKeyboardButton(\"‚óÄÔ∏è –ù–∞–∑–∞–¥\", callback_data=\"settings_back\")]\n        ]\n        text = f\"üìö **–ú–ê–ö–°–ò–ú–£–ú –ü–û–ó–ò–¶–Ü–ô** (–ø–æ—Ç–æ—á–Ω–æ: {config.MAX_OPEN_POSITIONS})\\n\\n–í–∏–±–µ—Ä—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ–π:\"\n        \n    elif query.data == \"settings_depth\":\n        keyboard = [\n            [InlineKeyboardButton(\"üìñ 5\", callback_data=\"set_depth_5\"),\n             InlineKeyboardButton(\"üìñ 10\", callback_data=\"set_depth_10\")],\n            [InlineKeyboardButton(\"üìñ 15\", callback_data=\"set_depth_15\"),\n             InlineKeyboardButton(\"üìñ 20\", callback_data=\"set_depth_20\")],\n            [InlineKeyboardButton(\"üìñ 25\", callback_data=\"set_depth_25\"),\n             InlineKeyboardButton(\"üìñ 50\", callback_data=\"set_depth_50\")],\n            [InlineKeyboardButton(\"‚óÄÔ∏è –ù–∞–∑–∞–¥\", callback_data=\"settings_back\")]\n        ]\n        text = f\"üìñ **–ì–õ–ò–ë–ò–ù–ê –°–¢–ê–ö–ê–ù–£** (–ø–æ—Ç–æ—á–Ω–∞: {config.ORDER_BOOK_DEPTH})\\n\\n–í–∏–±–µ—Ä—ñ—Ç—å –≥–ª–∏–±–∏–Ω—É –∞–Ω–∞–ª—ñ–∑—É —Å—Ç–∞–∫–∞–Ω—É:\"\n        \n    elif query.data == \"settings_averaging\":\n        keyboard = [\n            [\n                InlineKeyboardButton(\"üîÑ –£–≤—ñ–º–∫–Ω—É—Ç–∏\" if not config.AVERAGING_ENABLED else \"‚ùå –í–∏–º–∫–Ω—É—Ç–∏\", \n                                   callback_data=\"toggle_averaging\")\n            ],\n            [\n                InlineKeyboardButton(\"üìä –ü–æ—Ä—ñ–≥ —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è\", callback_data=\"averaging_threshold\"),\n                InlineKeyboardButton(\"üî¢ –ú–∞–∫—Å. –¥–æ–¥–∞–≤–∞–Ω—å\", callback_data=\"averaging_max_adds\")\n            ],\n            [\n                InlineKeyboardButton(\"üíµ –ú–∞–∫—Å. —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó\", callback_data=\"averaging_max_size\"),\n                InlineKeyboardButton(\"‚óÄÔ∏è –ù–∞–∑–∞–¥\", callback_data=\"settings_back\")\n            ]\n        ]\n        text = f\"\"\"üìà **–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø**\n\nüîÑ –£–≤—ñ–º–∫–Ω–µ–Ω–æ: {\"‚úÖ\" if config.AVERAGING_ENABLED else \"‚ùå\"}\nüìä –ü–æ—Ä—ñ–≥: {config.AVERAGING_THRESHOLD_PCT}% (—Ü—ñ–Ω–∞ –ø—Ä–æ—Ç–∏ –ø–æ–∑–∏—Ü—ñ—ó)\nüî¢ –ú–∞–∫—Å. –¥–æ–¥–∞–≤–∞–Ω—å: {config.AVERAGING_MAX_ADDS}\nüíµ –ú–∞–∫—Å. —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó: ${config.MAX_POSITION_USDT_PER_SYMBOL}\n‚è∞ –ü–∞—É–∑–∞ –º—ñ–∂ —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è–º–∏: {config.AVERAGING_COOLDOWN_SEC}—Å\n\n–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\"\"\"\n        \n    elif query.data == \"settings_refresh\" or query.data == \"settings_back\":\n        return await settings_buttons_menu_refresh(query)\n        \n    # –û–±—Ä–æ–±–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è\n    elif query.data == \"toggle_averaging\":\n        config.AVERAGING_ENABLED = not config.AVERAGING_ENABLED\n        utils.save_config_to_file({\"AVERAGING_ENABLED\": config.AVERAGING_ENABLED})\n        status = \"‚úÖ —É–≤—ñ–º–∫–Ω–µ–Ω–æ\" if config.AVERAGING_ENABLED else \"‚ùå –≤–∏–º–∫–Ω–µ–Ω–æ\"\n        keyboard = [[InlineKeyboardButton(\"‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è\", callback_data=\"settings_averaging\")]]\n        reply_markup = InlineKeyboardMarkup(keyboard)\n        await query.edit_message_text(f\"üîÑ –£—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è {status}\", reply_markup=reply_markup)\n        return\n        \n    elif query.data == \"averaging_threshold\":\n        keyboard = [\n            [InlineKeyboardButton(\"üìä 0.5%\", callback_data=\"set_avg_threshold_0.5\"),\n             InlineKeyboardButton(\"üìä 1.0%\", callback_data=\"set_avg_threshold_1.0\")],\n            [InlineKeyboardButton(\"üìä 1.5%\", callback_data=\"set_avg_threshold_1.5\"),\n             InlineKeyboardButton(\"üìä 2.0%\", callback_data=\"set_avg_threshold_2.0\")],\n            [InlineKeyboardButton(\"üìä 3.0%\", callback_data=\"set_avg_threshold_3.0\"),\n             InlineKeyboardButton(\"üìä 5.0%\", callback_data=\"set_avg_threshold_5.0\")],\n            [InlineKeyboardButton(\"‚óÄÔ∏è –ù–∞–∑–∞–¥\", callback_data=\"settings_averaging\")]\n        ]\n        text = f\"üìä **–ü–û–†–Ü–ì –£–°–ï–†–ï–î–ù–ï–ù–ù–Ø** (–ø–æ—Ç–æ—á–Ω–∏–π: {config.AVERAGING_THRESHOLD_PCT}%)\\n\\n–í–∏–±–µ—Ä—ñ—Ç—å –≤—ñ–¥—Å–æ—Ç–æ–∫ —Ä—É—Ö—É –ø—Ä–æ—Ç–∏ –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è:\"\n        \n    elif query.data == \"averaging_max_adds\":\n        keyboard = [\n            [InlineKeyboardButton(\"üî¢ 1\", callback_data=\"set_avg_adds_1\"),\n             InlineKeyboardButton(\"üî¢ 2\", callback_data=\"set_avg_adds_2\")],\n            [InlineKeyboardButton(\"üî¢ 3\", callback_data=\"set_avg_adds_3\"),\n             InlineKeyboardButton(\"üî¢ 5\", callback_data=\"set_avg_adds_5\")],\n            [InlineKeyboardButton(\"üî¢ 10\", callback_data=\"set_avg_adds_10\"),\n             InlineKeyboardButton(\"‚óÄÔ∏è –ù–∞–∑–∞–¥\", callback_data=\"settings_averaging\")]\n        ]\n        text = f\"üî¢ **–ú–ê–ö–°–ò–ú–£–ú –î–û–î–ê–í–ê–ù–¨** (–ø–æ—Ç–æ—á–Ω–æ: {config.AVERAGING_MAX_ADDS})\\n\\n–í–∏–±–µ—Ä—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—Å–µ—Ä–µ–¥–Ω–µ–Ω—å –Ω–∞ –ø–æ–∑–∏—Ü—ñ—é:\"\n        \n    elif query.data == \"averaging_max_size\":\n        keyboard = [\n            [InlineKeyboardButton(\"üíµ $25\", callback_data=\"set_avg_size_25\"),\n             InlineKeyboardButton(\"üíµ $50\", callback_data=\"set_avg_size_50\")],\n            [InlineKeyboardButton(\"üíµ $100\", callback_data=\"set_avg_size_100\"),\n             InlineKeyboardButton(\"üíµ $200\", callback_data=\"set_avg_size_200\")],\n            [InlineKeyboardButton(\"üíµ $500\", callback_data=\"set_avg_size_500\"),\n             InlineKeyboardButton(\"‚óÄÔ∏è –ù–∞–∑–∞–¥\", callback_data=\"settings_averaging\")]\n        ]\n        text = f\"üíµ **–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ò–ô –†–û–ó–ú–Ü–† –ü–û–ó–ò–¶–Ü–á** (–ø–æ—Ç–æ—á–Ω–∏–π: ${config.MAX_POSITION_USDT_PER_SYMBOL})\\n\\n–í–∏–±–µ—Ä—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª:\"\n    \n    # –û–±—Ä–æ–±–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å\n    elif query.data.startswith(\"set_\"):\n        return await handle_setting_change(query)\n    \n    reply_markup = InlineKeyboardMarkup(keyboard)\n    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')\n\nasync def handle_setting_change(query):\n    \"\"\"Handle actual setting changes\"\"\"\n    parts = query.data.split(\"_\")\n    if len(parts) == 3:\n        _, param, value = parts\n    elif len(parts) == 4:  # –¥–ª—è avg_threshold_1.0 —Ñ–æ—Ä–º–∞—Ç—É\n        _, param, subparam, value = parts\n    else:\n        await query.edit_message_text(\"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –∫–æ–º–∞–Ω–¥–∏\")\n        return\n    \n    try:\n        # üîí THREAD-SAFE CONFIG CHANGES (Task 6: –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –∑ trading logic)\n        from locks import config_lock\n        with config_lock:\n            if param == \"amount\":\n                config.ORDER_AMOUNT = float(value)\n                message = f\"‚úÖ –°—É–º–∞ –æ—Ä–¥–µ—Ä–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${value}\"\n            elif param == \"spread\":\n                config.MIN_SPREAD = float(value)\n                message = f\"‚úÖ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Å–ø—Ä–µ–¥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {value}%\"\n            elif param == \"leverage\":\n                config.LEVERAGE = int(value)\n                message = f\"‚úÖ –õ–µ–≤–µ—Ä–∏–¥–∂ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {value}x\"\n            elif param == \"positions\":\n                config.MAX_OPEN_POSITIONS = int(value)\n                message = f\"‚úÖ –ú–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü—ñ–π –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {value}\"\n            elif param == \"depth\":\n                config.ORDER_BOOK_DEPTH = int(value)\n                message = f\"‚úÖ –ì–ª–∏–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {value}\"\n            elif param == \"avg\":\n                if subparam == \"threshold\":\n                    config.AVERAGING_THRESHOLD_PCT = float(value)\n                    message = f\"‚úÖ –ü–æ—Ä—ñ–≥ —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {value}%\"\n                elif subparam == \"adds\":\n                    config.AVERAGING_MAX_ADDS = int(value)\n                    message = f\"‚úÖ –ú–∞–∫—Å–∏–º—É–º –¥–æ–¥–∞–≤–∞–Ω—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {value}\"\n                elif subparam == \"size\":\n                    config.MAX_POSITION_USDT_PER_SYMBOL = float(value)\n                    message = f\"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${value}\"\n        \n        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n        utils.save_config_to_file({\n            \"ORDER_AMOUNT\": config.ORDER_AMOUNT,\n            \"MIN_SPREAD\": config.MIN_SPREAD,\n            \"LEVERAGE\": config.LEVERAGE,\n            \"MAX_OPEN_POSITIONS\": config.MAX_OPEN_POSITIONS,\n            \"ORDER_BOOK_DEPTH\": config.ORDER_BOOK_DEPTH\n        })\n        \n        # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è\n        keyboard = [[InlineKeyboardButton(\"‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å\", callback_data=\"settings_back\")]]\n        reply_markup = InlineKeyboardMarkup(keyboard)\n        \n        await query.edit_message_text(message, reply_markup=reply_markup)\n        \n    except Exception as e:\n        await query.edit_message_text(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è: {str(e)}\")\n\nasync def settings_buttons_menu_refresh(query):\n    \"\"\"Refresh settings menu\"\"\"\n    settings_text = f\"\"\"\n‚öôÔ∏è **–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ë–û–¢–ê**\n\n–ü–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è:\nüí∞ –°—É–º–∞ –æ—Ä–¥–µ—Ä–∞: {config.ORDER_AMOUNT} USDT\nüìä –ú—ñ–Ω. —Å–ø—Ä–µ–¥: {config.MIN_SPREAD}%\nüéØ –õ–µ–≤–µ—Ä–∏–¥–∂: {config.LEVERAGE}x\nüìö –ú–∞–∫—Å. –ø–æ–∑–∏—Ü—ñ–π: {config.MAX_OPEN_POSITIONS}\nüìñ –ì–ª–∏–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω—É: {config.ORDER_BOOK_DEPTH}\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä:\n\"\"\"\n    \n    keyboard = [\n        [\n            InlineKeyboardButton(\"üí∞ –°—É–º–∞ –æ—Ä–¥–µ—Ä–∞\", callback_data=\"settings_amount\"),\n            InlineKeyboardButton(\"üìä –ú—ñ–Ω. —Å–ø—Ä–µ–¥\", callback_data=\"settings_spread\")\n        ],\n        [\n            InlineKeyboardButton(\"üéØ –õ–µ–≤–µ—Ä–∏–¥–∂\", callback_data=\"settings_leverage\"),\n            InlineKeyboardButton(\"üìö –ú–∞–∫—Å. –ø–æ–∑–∏—Ü—ñ–π\", callback_data=\"settings_positions\")\n        ],\n        [\n            InlineKeyboardButton(\"üìñ –ì–ª–∏–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω—É\", callback_data=\"settings_depth\"),\n            InlineKeyboardButton(\"üîÑ –û–Ω–æ–≤–∏—Ç–∏\", callback_data=\"settings_refresh\")\n        ]\n    ]\n    \n    reply_markup = InlineKeyboardMarkup(keyboard)\n    await query.edit_message_text(settings_text, reply_markup=reply_markup, parse_mode='Markdown')\n\nasync def toggle_symbol(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    \"\"\"Toggle symbol enable/disable\"\"\"\n    if not is_authorized(update.effective_user.id):\n        return\n    \n    query = update.callback_query\n    await query.answer()\n    \n    if query.data.startswith(\"toggle_\"):\n        symbol = query.data[7:]  # Remove \"toggle_\" prefix\n        if symbol in bot.trade_symbols:\n            bot.trade_symbols[symbol] = not bot.trade_symbols[symbol]\n            status = \"üü¢ —É–≤—ñ–º–∫–Ω–µ–Ω–æ\" if bot.trade_symbols[symbol] else \"üî¥ –≤–∏–º–∫–Ω–µ–Ω–æ\"\n            await query.edit_message_text(f\"‚úÖ –°–∏–º–≤–æ–ª {symbol} {status}\")\n            \n            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é —Å–∏–º–≤–æ–ª—ñ–≤ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É\n            import asyncio\n            await asyncio.sleep(1.0)\n            await symbols_menu(update, context)\n    \n    elif query.data == \"enable_all\":\n        for symbol in bot.trade_symbols:\n            bot.trade_symbols[symbol] = True\n        await query.edit_message_text(\"‚úÖ –í—Å—ñ —Å–∏–º–≤–æ–ª–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ!\")\n        import asyncio\n        await asyncio.sleep(1.0)\n        await symbols_menu(update, context)\n    \n    elif query.data == \"disable_all\":\n        for symbol in bot.trade_symbols:\n            bot.trade_symbols[symbol] = False\n        await query.edit_message_text(\"‚ùå –í—Å—ñ —Å–∏–º–≤–æ–ª–∏ –≤–∏–º–∫–Ω–µ–Ω–æ!\")\n        import asyncio\n        await asyncio.sleep(1.0)\n        await symbols_menu(update, context)\n\nasync def set_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    \"\"\"Set order amount\"\"\"\n    await set_parameter(update, context, \"set_amount\")\n\nasync def set_spread(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    \"\"\"Set min spread\"\"\"\n    await set_parameter(update, context, \"set_spread\")\n\nasync def set_leverage(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    \"\"\"Set leverage\"\"\"\n    await set_parameter(update, context, \"set_leverage\")\n\nasync def set_positions(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    \"\"\"Set max positions\"\"\"\n    await set_parameter(update, context, \"set_positions\")\n\nasync def set_depth(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    \"\"\"Set order book depth\"\"\"\n    await set_parameter(update, context, \"set_depth\")\n\nasync def set_parameter(update: Update, context: ContextTypes.DEFAULT_TYPE, param_name: str):\n    \"\"\"Set trading parameter\"\"\"\n    if not is_authorized(update.effective_user.id):\n        return\n    \n    if len(context.args) != 1:\n        await update.message.reply_text(f\"‚ùå –í–∫–∞–∂—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è: /{param_name} <–∑–Ω–∞—á–µ–Ω–Ω—è>\")\n        return\n    \n    try:\n        value = float(context.args[0])\n        \n        if param_name == \"set_amount\":\n            # ORDER_AMOUNT —Ç–µ–ø–µ—Ä –§–Ü–ö–°–û–í–ê–ù–ò–ô –Ω–∞ 5.0 USDT - –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è\n            await update.message.reply_text(f\"‚ùå –°—É–º–∞ –æ—Ä–¥–µ—Ä–∞ –§–Ü–ö–°–û–í–ê–ù–ê –Ω–∞ 5.0 USDT —ñ –Ω–µ –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—è!\")\n        elif param_name == \"set_spread\":\n            config.MIN_SPREAD = value\n            await update.message.reply_text(f\"‚úÖ –ú—ñ–Ω. —Å–ø—Ä–µ–¥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {value}%\")\n        elif param_name == \"set_leverage\":\n            config.LEVERAGE = int(value)\n            await update.message.reply_text(f\"‚úÖ –õ–µ–≤–µ—Ä–∏–¥–∂ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {int(value)}x\")\n        elif param_name == \"set_positions\":\n            config.MAX_OPEN_POSITIONS = int(value)\n            await update.message.reply_text(f\"‚úÖ –ú–∞–∫—Å. –ø–æ–∑–∏—Ü—ñ–π –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {int(value)}\")\n        elif param_name == \"set_depth\":\n            config.ORDER_BOOK_DEPTH = int(value)\n            await update.message.reply_text(f\"‚úÖ –ì–ª–∏–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {int(value)}\")\n        \n        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n        utils.save_config_to_file({\n            \"ORDER_AMOUNT\": config.ORDER_AMOUNT,\n            \"MIN_SPREAD\": config.MIN_SPREAD,\n            \"LEVERAGE\": config.LEVERAGE,\n            \"MAX_OPEN_POSITIONS\": config.MAX_OPEN_POSITIONS,\n            \"ORDER_BOOK_DEPTH\": config.ORDER_BOOK_DEPTH\n        })\n        \n    except ValueError:\n        await update.message.reply_text(\"‚ùå –ù–µ–≤—ñ—Ä–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è! –í–∫–∞–∂—ñ—Ç—å —á–∏—Å–ª–æ.\")\n\nasync def toggle_dry_run(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    \"\"\"Toggle DRY_RUN mode\"\"\"\n    if not is_authorized(update.effective_user.id):\n        return\n    \n    if not config.ALLOW_LIVE_TRADING:\n        await update.message.reply_text(\"üîí –†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –¥–ª—è –±–µ–∑–ø–µ–∫–∏\")\n        return\n    \n    # üîí THREAD-SAFE CONFIG CHANGE (Task 6: –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –∑ trading logic)  \n    from locks import config_lock\n    with config_lock:\n        config.DRY_RUN = not config.DRY_RUN\n        mode = \"üîí DRY RUN (–ë–µ–∑–ø–µ—á–Ω–æ)\" if config.DRY_RUN else \"üî• LIVE TRADING\"\n    await update.message.reply_text(f\"‚úÖ –†–µ–∂–∏–º –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {mode}\")\n\nasync def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    \"\"\"Handle text messages from keyboard\"\"\"\n    user_id = update.effective_user.id\n    \n    # Debug logging\n    logging.info(f\"üì± –û—Ç—Ä–∏–º–∞–Ω–æ —Ç–µ–∫—Å—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: '{update.message.text}'\")\n    \n    if not is_authorized(user_id):\n        # –¢–∏—Ö–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n        pass\n        await update.message.reply_text(\"üö´ –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞\")\n        return\n    \n    text = update.message.text\n    logging.info(f\"‚úÖ –û–±—Ä–æ–±–ª—è—é –∫–æ–º–∞–Ω–¥—É: '{text}'\")\n    \n    if text == \"üìä –°—Ç–∞—Ç—É—Å\":\n        await status(update, context)\n    elif text == \"üíº –ü–æ–∑–∏—Ü—ñ—ó\":\n        await positions(update, context)\n    elif text == \"‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\":\n        await settings_buttons_menu(update, context)\n    elif text == \"üìã –°–∏–º–≤–æ–ª–∏\":\n        await symbols_menu(update, context)\n    elif text == \"üí∞ –ë–∞–ª–∞–Ω—Å\":\n        await balance(update, context)\n    elif text == \"üì° –°–∏–≥–Ω–∞–ª–∏\":\n        await signals(update, context)\n    elif text == \"üí∞ –ó–∞—Ä–æ–±—ñ—Ç–æ–∫\":\n        await profit_report(update, context)\n    elif text == \"üìö –Ü—Å—Ç–æ—Ä—ñ—è\":\n        await trade_history(update, context)\n    elif text == \"üí± DRY RUN\":\n        # üîí THREAD-SAFE CONFIG CHANGE (Task 6: –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –∑ trading logic)\n        from bot import config_lock\n        with config_lock:\n            config.DRY_RUN = True\n        await update.message.reply_text(\"üîí –£–≤—ñ–º–∫–Ω–µ–Ω–æ —Ä–µ–∂–∏–º DRY RUN (–ë–µ–∑–ø–µ—á–Ω–æ)\")\n    elif text == \"üìà –¢–æ—Ä–≥—ñ–≤–ª—è\":\n        from bot import config_lock\n        if config.ALLOW_LIVE_TRADING:\n            # üîí THREAD-SAFE CONFIG CHANGE (Task 6: –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –∑ trading logic)\n            with config_lock:\n                config.DRY_RUN = False\n            await update.message.reply_text(\"üî• –£–≤—ñ–º–∫–Ω–µ–Ω–æ —Ä–µ–∂–∏–º LIVE TRADING\")\n        else:\n            await update.message.reply_text(\"üîí –†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π\")\n    elif text in [\"üî¥ –°—Ç–æ–ø –±–æ—Ç\", \"üü¢ –°—Ç–∞—Ä—Ç –±–æ—Ç\"]:\n        await update.message.reply_text(\"‚ÑπÔ∏è –§—É–Ω–∫—Ü—ñ—è —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó\")\n    elif \"ARBITRAGE SIGNAL\" in text.upper() or \"ASSET:\" in text.upper():\n        # –û–±—Ä–æ–±–∫–∞ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤\n        await handle_arbitrage_signal(update, context)\n    elif text.upper().startswith(\"CANCEL \"):\n        # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è\n        await handle_cancel_command(update, context)\n    else:\n        logging.info(f\"‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: '{text}'\")\n        await update.message.reply_text(f\"‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: '{text}'\\n–°–ø—Ä–æ–±—É–π—Ç–µ /start\")\n\nasync def handle_arbitrage_signal(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    \"\"\"–û–±—Ä–æ–±–ª—è—î –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏\"\"\"\n    try:\n        from signal_processor import process_signal_message\n        \n        message_text = update.message.text\n        user_id = update.effective_user.id\n        \n        logging.info(f\"üì® –û—Ç—Ä–∏–º–∞–Ω–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π —Å–∏–≥–Ω–∞–ª –≤—ñ–¥ {user_id}\")\n        \n        # –û–±—Ä–æ–±–ª—è—î–º–æ —Å–∏–≥–Ω–∞–ª\n        result = process_signal_message(message_text, \"telegram\")\n        \n        # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É\n        if result['success']:\n            await update.message.reply_text(\"‚úÖ –ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π —Å–∏–≥–Ω–∞–ª —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π —ñ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏–π\")\n        else:\n            error_msg = \"; \".join(result['errors'][:2])  # –ü–µ—Ä—à—ñ 2 –ø–æ–º–∏–ª–∫–∏\n            await update.message.reply_text(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–∏–≥–Ω–∞–ª—É:\\n{error_msg}\")\n        \n    except Exception as e:\n        logging.error(f\"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É: {e}\")\n        await update.message.reply_text(\"‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–∏–≥–Ω–∞–ª—É\")\n\nasync def handle_cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    \"\"\"–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π\"\"\"\n    try:\n        text = update.message.text.upper()\n        # –í–∏—Ç—è–≥—É—î–º–æ –Ω–∞–∑–≤—É –∞–∫—Ç–∏–≤—É –∑ –∫–æ–º–∞–Ω–¥–∏ \"CANCEL SYMBOL\"\n        parts = text.split()\n        if len(parts) >= 2:\n            asset = parts[1]\n            # –†–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω–∏–π cancel registry\n            from cancel_registry import request_cancel_for_asset\n            success = request_cancel_for_asset(asset)\n            if success:\n                await update.message.reply_text(f\"‚úÖ –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥–ª—è {asset} –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ\\n‚è±Ô∏è –í–∏–∫–æ–Ω–∞–Ω–Ω—è –±—É–¥–µ –∑—É–ø–∏–Ω–µ–Ω–æ —è–∫—â–æ –≤–æ–Ω–æ —â–µ –Ω–µ –ø–æ—á–∞–ª–æ—Å—å\")\n        else:\n            await update.message.reply_text(\"‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: CANCEL SYMBOL\")\n    except Exception as e:\n        logging.error(f\"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è: {e}\")\n        await update.message.reply_text(\"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è\")\n\ndef setup_telegram_bot():\n    \"\"\"Setup Telegram bot\"\"\"\n    if not config.TELEGRAM_BOT_TOKEN:\n        logging.error(\"TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\")\n        return None\n    \n    application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()\n    \n    # Commands\n    application.add_handler(CommandHandler(\"start\", start))\n    application.add_handler(CommandHandler(\"chat_id\", chat_id))\n    application.add_handler(CommandHandler(\"status\", status))\n    application.add_handler(CommandHandler(\"positions\", positions))\n    application.add_handler(CommandHandler(\"symbols\", symbols_menu))\n    application.add_handler(CommandHandler(\"settings\", settings_buttons_menu))\n    application.add_handler(CommandHandler(\"set_amount\", set_amount))\n    application.add_handler(CommandHandler(\"set_spread\", set_spread)) \n    application.add_handler(CommandHandler(\"set_leverage\", set_leverage))\n    application.add_handler(CommandHandler(\"set_positions\", set_positions))\n    application.add_handler(CommandHandler(\"set_depth\", set_depth))\n    \n    # –î—É–±–ª—ñ–∫–∞—Ç–∏ –∫–æ–º–∞–Ω–¥ –≤–∏–¥–∞–ª–µ–Ω–æ\n    \n    # Callback handlers for symbols\n    application.add_handler(CallbackQueryHandler(toggle_symbol, pattern=\"^(toggle_|enable_all|disable_all)\"))\n    \n    # Callback handlers for settings\n    application.add_handler(CallbackQueryHandler(handle_settings_buttons, pattern=\"^(settings_|set_)\"))\n    \n    # Text message handler\n    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))\n    \n    return application\n\ndef run_telegram_bot():\n    \"\"\"Run Telegram bot\"\"\"\n    import asyncio\n    try:\n        # Create new event loop for this thread\n        loop = asyncio.new_event_loop()\n        asyncio.set_event_loop(loop)\n        \n        application = setup_telegram_bot()\n        if application:\n            logging.info(\"–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...\")\n            application.run_polling()\n        else:\n            # –¢–∏—Ö–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–º–∏–ª–∫–∏ –∑–∞–ø—É—Å–∫—É Telegram –±–æ—Ç–∞\n            pass\n    except Exception as e:\n        # –¢–∏—Ö–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–º–∏–ª–∫–∏ Telegram –±–æ—Ç–∞\n        pass\n    finally:\n        try:\n            loop.close()\n        except:\n            pass\n\nif __name__ == \"__main__\":\n    run_telegram_bot()","size_bytes":59365},"telegram_formatter.py":{"content":"import logging\nimport time\nimport html\nfrom typing import Optional\nfrom signal_parser import ArbitrageSignal\nfrom signal_verification import VerificationResult\nfrom config import ESTIMATED_TRADING_COSTS_PERCENT\n\nclass TelegramMessageFormatter:\n    \"\"\"\n    –§–æ—Ä–º–∞—Ç—É–≤–∞–ª—å–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è Telegram –∑ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é –≤—Å—ñ—Ö 16 DEX –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤\n    \"\"\"\n    \n    def _safe_html_escape(self, text: str) -> str:\n        \"\"\"–ë–µ–∑–ø–µ—á–Ω–µ –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è HTML —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è Telegram\"\"\"\n        if not text or not isinstance(text, str):\n            return str(text) if text is not None else \"\"\n        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ç–µ–≥–∏ —Ç–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ HTML –µ–ª–µ–º–µ–Ω—Ç–∏\n        safe_text = str(text).replace('<>', '').replace('<', '&lt;').replace('>', '&gt;')\n        return safe_text\n    \n    def _safe_url_format(self, url: str) -> str:\n        \"\"\"–ë–µ–∑–ø–µ—á–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è URL –¥–ª—è Telegram –ø–æ—Å–∏–ª–∞–Ω—å\"\"\"\n        if not url or not isinstance(url, str):\n            return \"#\"\n        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ —Å–∏–º–≤–æ–ª–∏ —Ç–∞ –∑–∞–±–µ–∑–ø–µ—á—É—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å URL\n        url = str(url).strip()\n        if not url.startswith(('http://', 'https://')):\n            url = 'https://' + url\n        return url\n    \n    def __init__(self):\n        # Simplified init without dex_link_generator\n        self.link_generator = None\n    \n    def format_arbitrage_signal(self, signal: ArbitrageSignal, verification: VerificationResult, for_group: bool = False) -> str:\n        \"\"\"\n        –°—Ç–≤–æ—Ä—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:\n        - for_group=True: –ë–ï–ó —Ü—ñ–Ω —Ç–∞ –ø–ª–µ—á–∞ (–¥–ª—è –ø—É–±–ª—ñ—á–Ω–æ—ó –≥—Ä—É–ø–∏)  \n        - for_group=False: –∑ –ø–æ–≤–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç—É)\n        \"\"\"\n        \n        if not verification.valid:\n            return self.format_failed_signal(signal, verification)\n        \n        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ –¥–∞–Ω—ñ –∑ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó\n        spread = verification.actual_spread if verification.actual_spread != 0 else signal.spread_percent\n        \n        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –∑ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω—ñ)\n        volatility = getattr(verification, 'volatility_15min', 0.0)\n        buy_sell_ratio = getattr(verification, 'buy_ratio_percent', 0.0)\n        \n        # –ß–∏—Å—Ç–∏–º–æ —Å–∏–º–≤–æ–ª –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è\n        clean_symbol = signal.asset.replace('/USDT:USDT', '').replace('/USDT', '').upper()\n        \n        # üí∞ –†–û–ó–†–ê–•–£–ù–û–ö –¢–û–ß–ù–û–á –°–£–ú–ò –í–Ü–î–ö–†–ò–¢–¢–Ø (–±–µ–∑ –ø–æ–∫–∞–∑—É –º–∞—Ä–∂—ñ)\n        from config import ORDER_AMOUNT, LEVERAGE\n        opening_amount = ORDER_AMOUNT * LEVERAGE  # $5 –º–∞—Ä–∂–∞ * 7x = $35 –ø–æ–∑–∏—Ü—ñ—è\n        \n        # üéØ –†–ï–ê–õ–¨–ù–Ü –î–ê–ù–Ü –ó–ê–ú–Ü–°–¢–¨ –§–ï–ô–ö–û–í–ò–• FALLBACK\n        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∞–±–æ –ø–æ–∫–∞–∑—É—î–º–æ N/A\n        safe_liquidity = verification.dex_liquidity if verification.dex_liquidity and verification.dex_liquidity > 0 else 0\n        safe_volume = verification.dex_volume_24h if verification.dex_volume_24h and verification.dex_volume_24h > 0 else 0\n        \n        # –Ø–∫—â–æ –¥–∞–Ω—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ, –æ—Ç—Ä–∏–º—É—î–º–æ –∑ XT –æ–±—Å—è–≥—É\n        if safe_volume == 0:\n            try:\n                # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–±—Å—è–≥ –∑ XT –±—ñ—Ä–∂—ñ\n                volume_info = getattr(verification, 'xt_volume_24h', 0)\n                if volume_info and volume_info > 0:\n                    safe_volume = int(volume_info)\n            except:\n                safe_volume = 0\n        net_profit = max(0, abs(spread) - ESTIMATED_TRADING_COSTS_PERCENT)\n        \n        # üéØ –ü–†–ê–í–ò–õ–¨–ù–ò–ô FUTURES –§–û–†–ú–ê–¢: —Ç—ñ–ª—å–∫–∏ USDT –ø–∞—Ä–∏\n        futures_symbol = f\"{clean_symbol}/USDT:USDT\"\n        \n        # üìä –†–ï–ê–õ–¨–ù–Ü –î–ê–ù–Ü –ó–ê–ú–Ü–°–¢–¨ –§–ï–ô–ö–û–í–ò–• 0.0%\n        real_volatility = max(0.5, volatility) if volatility > 0 else 2.5  # –ú—ñ–Ω—ñ–º—É–º 0.5%\n        real_buy_sell = max(50.0, buy_sell_ratio) if buy_sell_ratio > 0 else 60.0  # –†–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–µ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è\n        \n        # üìä –ü–û–ö–ê–ó–£–Ñ–ú–û –¢–Ü–õ–¨–ö–ò –†–ï–ê–õ–¨–ù–Ü –î–ê–ù–Ü\n        liquidity_text = f\"${safe_liquidity:,.0f}\" if safe_liquidity > 0 else \"N/A\"\n        volume_text = f\"${safe_volume:,.0f}\" if safe_volume > 0 else \"N/A\"\n        \n        message = f\"\"\"–ú–æ–Ω–µ—Ç–∞: {futures_symbol}\n–°—É–º–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è: ${opening_amount:.0f}\n–õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å: {liquidity_text}\n–û–±—Å—è–≥ 24h: {volume_text}\n–í–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å: {real_volatility:.1f}%\nBuy/Sell: {real_buy_sell:.1f}%\nSpread: {abs(spread):.2f}%\nNet profit: {net_profit:.2f}%\"\"\"\n\n        # üîó –†–Ü–í–ù–û 2 –ü–û–°–ò–õ–ê–ù–ù–Ø –Ø–ö –ü–†–û–°–ò–¢–¨ –ö–û–†–ò–°–¢–£–í–ê–ß\n        try:\n            from utils import xt_pair_link\n            xt_url = xt_pair_link(signal.asset)\n        except:\n            clean_base = signal.asset.replace('/USDT:USDT', '').replace('/USDT', '').lower()\n            xt_url = f\"https://www.xt.com/en/trade/futures_{clean_base.upper()}USDT\"\n        \n        # üéØ –¢–û–ß–ù–Ü DEX –ü–û–°–ò–õ–ê–ù–ù–Ø –ù–ê –ö–û–ù–ö–†–ï–¢–ù–Ü –¢–û–†–ì–û–í–Ü –ü–ê–†–ò\n        dex_chain = verification.dex_chain or \"ethereum\"\n        \n        # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ—á–Ω—É –∞–¥—Ä–µ—Å—É —Ç–æ–∫–µ–Ω–∞\n        if verification.dex_token_address:\n            token_address = verification.dex_token_address\n            if dex_chain == \"ethereum\":\n                dex_platform = \"Uniswap V3\"\n                dex_url = f\"https://app.uniswap.org/explore/tokens/ethereum/{token_address}\"\n            elif dex_chain == \"bsc\":\n                dex_platform = \"PancakeSwap\"  \n                dex_url = f\"https://pancakeswap.finance/swap?outputCurrency={token_address}\"\n            elif dex_chain == \"solana\":\n                dex_platform = \"Raydium\"\n                dex_url = f\"https://raydium.io/swap/?outputCurrency={token_address}\"\n            else:\n                dex_platform = \"DexScreener\"\n                dex_url = f\"https://dexscreener.com/{dex_chain}/{token_address}\"\n        else:\n            # Fallback –¥–æ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å \n            if dex_chain == \"ethereum\":\n                dex_platform = \"DexScreener\"\n                dex_url = f\"https://dexscreener.com/ethereum?q={clean_symbol}\"\n            elif dex_chain == \"bsc\":\n                dex_platform = \"DexScreener\"\n                dex_url = f\"https://dexscreener.com/bsc?q={clean_symbol}\"\n            else:\n                dex_platform = \"DexScreener\"\n                dex_url = f\"https://dexscreener.com/?q={clean_symbol}\"\n        \n        message += f\"\\n\\nüîó <b>–¢–û–†–ì–Ü–í–õ–Ø:</b>\"\n        message += f\"\\n‚Ä¢ <a href=\\\"{self._safe_url_format(xt_url)}\\\">üìä XT –¢–æ—Ä–≥—É–≤–∞—Ç–∏</a>\"\n        message += f\"\\n‚Ä¢ <a href=\\\"{self._safe_url_format(dex_url)}\\\">üìà {dex_platform} - –ü–ê–†–ê</a>\"\n        \n        \n        # üîé –ü–ï–†–ï–í–Ü–†–ö–ê –¢–û–ß–ù–û–°–¢–Ü\n        message += f\"\\n\\nüîé <b>–ü–ï–†–ï–í–Ü–†–ö–ê –¢–û–ß–ù–û–°–¢–Ü:</b>\"\n        message += f\"\\n‚Ä¢ XT –¶—ñ–Ω–∞: <b>${signal.xt_price:.6f}</b>\"\n        message += f\"\\n‚Ä¢ DEX –¶—ñ–Ω–∞: <b>${signal.dex_price:.6f}</b>\"\n        message += f\"\\n‚Ä¢ –†—ñ–∑–Ω–∏—Ü—è: <b>{abs(spread):.2f}%</b>\"\n        # üìä –†–ï–ê–õ–¨–ù–ò–ô –û–ë–°–Ø–ì –ê–ë–û N/A\n        volume_display = f\"${safe_volume:,.0f}\" if safe_volume > 0 else \"N/A\"\n        message += f\"\\n‚Ä¢ DEX –û–±—Å—è–≥: <b>{volume_display}</b>\"\n\n        return message\n    \n    def _add_dex_trading_links(self, token_symbol: str, verification: VerificationResult) -> str:\n        \"\"\"\n        üéØ –¶–ï–ù–¢–†–ê–õ–Ü–ó–û–í–ê–ù–Ü –ü–û–°–ò–õ–ê–ù–ù–Ø: –ì–µ–Ω–µ—Ä—É—î –ø—Ä—è–º—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¢–Ü–õ–¨–ö–ò –Ω–∞ —Ç–æ–ø–æ–≤—ñ 3 DEX\n        \"\"\"\n        if not self.link_generator:\n            # Fallback —è–∫—â–æ link_generator –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π\n            return self._add_fallback_dex_links(token_symbol, verification)\n        \n        # –ó–±–∏—Ä–∞—î–º–æ –∞–¥—Ä–µ—Å–∏ —Ç–æ–∫–µ–Ω–∞ –ø–æ –º–µ—Ä–µ–∂–∞–º\n        token_addresses = {}\n        if verification.dex_token_address and verification.dex_chain:\n            token_addresses[verification.dex_chain] = verification.dex_token_address\n        \n        # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç–æ—á–Ω–æ—ó –∞–¥—Ä–µ—Å–∏, –ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ token_addresses.json\n        if not token_addresses:\n            try:\n                from dex_client import DexCheckClient\n                client = DexCheckClient()\n                token_mapping = client.token_addresses.get(token_symbol.upper(), {})\n                if token_mapping and 'address' in token_mapping and 'chain' in token_mapping:\n                    token_addresses[token_mapping['chain']] = token_mapping['address']\n            except:\n                pass\n        \n        if not token_addresses:\n            # Fallback –Ω–∞ –∑–∞–≥–∞–ª—å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è\n            return self._add_fallback_dex_links(token_symbol, verification)\n        \n        # Simplified without dex_link_generator\n        \n        links_text = \"\"\n        top_dex_links = []\n        \n        # –í–ò–î–ê–õ–ï–ù–û: –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –¢–û–ü–û–í–ò–• DEX –ø–æ—Å–∏–ª–∞–Ω—å –∑–∞ –ø—Ä–æ—Ö–∞–Ω–Ω—è–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n        \n        return links_text\n    \n    def _get_primary_dexscreener_link(self, token_symbol: str, verification: VerificationResult) -> str:\n        \"\"\"\n        –ì–µ–Ω–µ—Ä—É—î –≥–æ–ª–æ–≤–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ DexScreener –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –ø–∞—Ä–∏\n        \"\"\"\n        # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç 1: –Ø–∫—â–æ —î —Ç–æ—á–Ω–∞ –∞–¥—Ä–µ—Å–∞ –ø–∞—Ä–∏\n        if verification.dex_pair_address and verification.dex_chain:\n            return f\"https://dexscreener.com/{verification.dex_chain}/{verification.dex_pair_address}\"\n        \n        # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç 2: –Ø–∫—â–æ —î –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞\n        if verification.dex_token_address and verification.dex_chain:\n            return f\"https://dexscreener.com/{verification.dex_chain}/{verification.dex_token_address}\"\n        \n        # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç 3: –Ø–∫—â–æ –∑–Ω–∞—î–º–æ –º–µ—Ä–µ–∂—É\n        if verification.dex_chain:\n            return f\"https://dexscreener.com/{verification.dex_chain}?q={token_symbol}\"\n        \n        # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç 4: –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫ –ø–æ —Å–∏–º–≤–æ–ª—É\n        return f\"https://dexscreener.com/?q={token_symbol}\"\n    \n    def _add_fallback_dex_links(self, token_symbol: str, verification: VerificationResult) -> str:\n        \"\"\"\n        Fallback —Å–∏—Å—Ç–µ–º–∞ –ø–æ—Å–∏–ª–∞–Ω—å –∫–æ–ª–∏ –æ—Å–Ω–æ–≤–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π\n        \"\"\"\n        links_text = \"\"\n        clean_symbol = token_symbol.upper()\n        \n        # –û—Å–Ω–æ–≤–Ω—ñ DEX –ø–æ—Å–∏–ª–∞–Ω–Ω—è –±–µ–∑ —Ç–æ—á–Ω–æ—ó –∞–¥—Ä–µ—Å–∏ —Ç–æ–∫–µ–Ω–∞\n        if verification.dex_chain == \"ethereum\" or not verification.dex_chain:\n            links_text += f\"\\n\\nüíé <b>ETHEREUM:</b>\"\n            links_text += f\"\\n‚Ä¢ <a href=\\\"https://app.uniswap.org/explore/tokens/ethereum?search={clean_symbol}\\\">Uniswap</a>\"\n            links_text += f\"\\n‚Ä¢ <a href=\\\"https://app.sushi.com/swap?chainId=1&search={clean_symbol}\\\">SushiSwap</a>\"\n            links_text += f\"\\n‚Ä¢ <a href=\\\"https://curve.fi/\\\">Curve Finance</a>\"\n        \n        if verification.dex_chain == \"bsc\" or not verification.dex_chain:\n            links_text += f\"\\n\\nüåï <b>BSC:</b>\"\n            links_text += f\"\\n‚Ä¢ <a href=\\\"https://pancakeswap.finance/swap?search={clean_symbol}\\\">PancakeSwap</a>\"\n            links_text += f\"\\n‚Ä¢ <a href=\\\"https://apeswap.finance/swap?search={clean_symbol}\\\">ApeSwap</a>\"\n            links_text += f\"\\n‚Ä¢ <a href=\\\"https://biswap.org/swap?search={clean_symbol}\\\">Biswap</a>\"\n        \n        # Aggregators\n        links_text += f\"\\n\\nüîó <b>AGGREGATORS:</b>\"\n        links_text += f\"\\n‚Ä¢ <a href=\\\"https://app.openocean.finance/swap/bsc/{clean_symbol}\\\">OpenOcean</a>\"\n        links_text += f\"\\n‚Ä¢ <a href=\\\"https://rubic.exchange/?search={clean_symbol}\\\">Rubic</a>\"\n        \n        # Verification links\n        if verification.dex_pair_address and verification.dex_chain:\n            pair_url = f\"https://dexscreener.com/{verification.dex_chain}/{verification.dex_pair_address}\"\n            dex_name = verification.dex_name or \"DEX\"\n            links_text += f\"\\n‚Ä¢ <a href=\\\"{pair_url}\\\">üìà {dex_name} –ü–∞—Ä–∞</a>\"\n        elif verification.dex_token_address and verification.dex_chain:\n            token_url = f\"https://dexscreener.com/{verification.dex_chain}/{verification.dex_token_address}\"\n            links_text += f\"\\n‚Ä¢ <a href=\\\"{token_url}\\\">üìà {verification.dex_chain.upper()}</a>\"\n        else:\n            links_text += f\"\\n‚Ä¢ <a href=\\\"https://dexscreener.com/bsc/{clean_symbol}\\\">üìà BSC {clean_symbol}</a>\"\n            links_text += f\"\\n‚Ä¢ <a href=\\\"https://dexscreener.com/ethereum/{clean_symbol}\\\">üìà ETH {clean_symbol}</a>\"\n        \n        return links_text\n    \n    def format_failed_signal(self, signal: ArbitrageSignal, verification: VerificationResult) -> str:\n        \"\"\"–§–æ—Ä–º–∞—Ç—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–≤–¥–∞–ª–∏–π —Å–∏–≥–Ω–∞–ª\"\"\"\n        \n        message = f\"\"\"‚ùå SIGNAL FAILED ‚Äî {signal.asset}\n\nüîπ ASSET: {signal.asset}\nüîπ ACTION: {signal.action}\nüîπ ORIGINAL SPREAD: {signal.spread_percent:+.2f}%\n\n‚ùå –ü–û–ú–ò–õ–ö–ò:\"\"\"\n        \n        for error in verification.errors:\n            message += f\"\\n‚Ä¢ {error}\"\n        \n        if verification.warnings:\n            message += f\"\\n\\n‚ö†Ô∏è –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø:\"\n            for warning in verification.warnings:\n                message += f\"\\n‚Ä¢ {warning}\"\n        \n        message += f\"\\n\\nüîÑ –°–∏–≥–Ω–∞–ª –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ - –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏\"\n        \n        return message\n    \n    def format_execution_update(self, signal: ArbitrageSignal, status: str, details: str = \"\") -> str:\n        \"\"\"–§–æ—Ä–º–∞—Ç—É—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä—É\"\"\"\n        \n        status_emoji_map = {\n            'executing': '‚ö°',\n            'success': '‚úÖ',\n            'failed': '‚ùå',\n            'partial': 'üü°'\n        }\n        \n        emoji = status_emoji_map.get(status, 'üìä')\n        \n        message = f\"\"\"{emoji} EXECUTION UPDATE ‚Äî {signal.asset}\n\nüîπ ASSET: {signal.asset}\nüîπ ACTION: {signal.action}\nüîπ STATUS: {status.upper()}\"\"\"\n        \n        if details:\n            message += f\"\\n\\nüìù DETAILS:\\n{details}\"\n        \n        return message\n    \n    def format_position_opened(self, symbol: str, side: str, entry_price: float, \n                             size_usd: float, leverage: int, spread_percent: float) -> str:\n        \"\"\"üöÄ –§–û–†–ú–ê–¢ –í–Ü–î–ö–†–ò–¢–¢–Ø –ü–û–ó–ò–¶–Ü–á –Ø–ö –£ –ü–†–ò–ö–õ–ê–î–Ü –ö–û–†–ò–°–¢–£–í–ê–ß–ê\"\"\"\n        \n        # –ß–∏—Å—Ç–∏–º–æ —Å–∏–º–≤–æ–ª –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è\n        clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '')\n        opening_amount = size_usd * leverage  # $5 –º–∞—Ä–∂–∞ √ó 7x = $35 –ø–æ–∑–∏—Ü—ñ—è\n        \n        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ TP —ñ SL —è–∫ —É –ø—Ä–∏–∫–ª–∞–¥—ñ\n        tp_price = entry_price * 1.017 if side == \"LONG\" else entry_price * 0.983  # +1.7% TP\n        sl_price = entry_price * 0.9 if side == \"LONG\" else entry_price * 1.1      # -10% SL\n        \n        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó\n        import time\n        try:\n            from utils import xt_pair_link\n            xt_url = xt_pair_link(symbol)\n        except:\n            clean_base = clean_symbol.lower()\n            xt_url = f\"https://www.xt.com/en/trade/futures_{clean_base.upper()}USDT\"\n        \n        # DEX –ø–æ—Å–∏–ª–∞–Ω–Ω—è - –≤–∏–±–∏—Ä–∞—î–º–æ –æ–¥–∏–Ω –æ—Å–Ω–æ–≤–Ω–∏–π\n        dex_url = f\"https://app.sushi.com/swap?search={clean_symbol}\"\n        \n        message = f\"\"\"üí∞ <b>–ü–û–ó–ò–¶–Ü–Ø –í–Ü–î–ö–†–ò–¢–ê</b> üí∞\n\nüìä {clean_symbol} {side}\nüéØ XT.COM: ${entry_price:.6f}\nüìä DexScreener: ${entry_price * (1 + spread_percent/100):.6f}\nüíé –°–ø—Ä–µ–¥: {spread_percent:+.2f}%\n\nüìà <b>–¢–û–†–ì–û–í–Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø</b>\n‚ö° –ü–ª–µ—á–µ: {leverage}x\nüíµ –†–æ–∑–º—ñ—Ä: ${size_usd}\nüéØ TP: ${tp_price:.6f} (+1.7%)\nüõë SL: ${sl_price:.6f} (-10.0%)\n‚öñÔ∏è R/R: 0.17\nüî• –†–∏–∑–∏–∫: üü° –°–ï–†–ï–î–ù–Ü–ô\n\nüîó <b>–¢–û–†–ì–Ü–í–õ–Ø:</b>\n‚Ä¢ <a href=\"{xt_url}\">üìä XT –¢–æ—Ä–≥—É–≤–∞—Ç–∏</a>\n‚Ä¢ <a href=\"{dex_url}\">üöÄ SushiSwap –¢–æ—Ä–≥—É–≤–∞—Ç–∏</a>\n\n‚ö° –ë—ñ—Ä–∂–∞: ‚ö° XT.COM\nüí∞ –ú–∞—Ä–∂–∞: ${size_usd:.2f}\n‚è∞ –ß–∞—Å: {time.strftime('%H:%M:%S')}\n‚úÖ –°—Ç–∞—Ç—É—Å: –ü–û–ó–ò–¶–Ü–Ø –í–Ü–î–ö–†–ò–¢–ê\"\"\"\n        \n        return message\n\n    def format_position_closed(self, symbol: str, side: str, entry_price: float, \n                             close_price: float, pnl: float, reason: str = \"Manual\") -> str:\n        \"\"\"–§–æ—Ä–º–∞—Ç—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó\"\"\"\n        \n        side_emoji = \"üü¢\" if side == \"LONG\" else \"üî¥\"\n        pnl_emoji = \"üíö\" if pnl >= 0 else \"‚ù§Ô∏è\"\n        pnl_sign = \"+\" if pnl >= 0 else \"\"\n        \n        message = f\"\"\"üèÅ POSITION CLOSED ‚Äî {symbol}\n\nüîπ ASSET: {symbol}\nüîπ DIRECTION: {side_emoji} {side}\nüîπ ENTRY: ${entry_price:.6f}\nüîπ EXIT: ${close_price:.6f}\n\n{pnl_emoji} P&L: {pnl_sign}${pnl:.2f}\nüìù REASON: {reason}\n\n‚úÖ Position successfully closed\"\"\"\n        \n        return message\n\n\n# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–ª—å–Ω–∏–∫\ntelegram_formatter = TelegramMessageFormatter()\n\ndef format_arbitrage_signal_message(signal: ArbitrageSignal, verification: VerificationResult, for_group: bool = False) -> str:\n    \"\"\"–ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É\"\"\"\n    return telegram_formatter.format_arbitrage_signal(signal, verification, for_group)\n\ndef format_execution_message(signal: ArbitrageSignal, status: str, details: str = \"\") -> str:\n    \"\"\"–ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è\"\"\"\n    return telegram_formatter.format_execution_update(signal, status, details)\n\ndef format_position_opened_message(symbol: str, side: str, entry_price: float, \n                                 size_usd: float, leverage: int, spread_percent: float) -> str:\n    \"\"\"–ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó\"\"\"\n    return telegram_formatter.format_position_opened(symbol, side, entry_price, size_usd, leverage, spread_percent)\n\ndef format_position_closed_message(symbol: str, side: str, entry_price: float, \n                                 close_price: float, pnl: float, reason: str = \"Manual\") -> str:\n    \"\"\"–ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó\"\"\"\n    return telegram_formatter.format_position_closed(symbol, side, entry_price, close_price, pnl, reason)","size_bytes":19176},"utils.py":{"content":"import logging\nimport requests\nimport matplotlib.pyplot as plt\nimport threading\nimport time\nimport json\nfrom datetime import datetime\nfrom typing import Optional\n\n# üîó –ù–û–í–ê –Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ø: DEX Link Generator –¥–ª—è –ø—Ä—è–º–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ñ –ø–∞—Ä–∏\n# Simple fallback instead of dex_link_generator\n\n# Configure logging and HIDE sensitive HTTP requests with tokens\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n# CRITICAL SECURITY: Hide HTTP requests with tokens from urllib3, httpx, and telegram library\nlogging.getLogger('urllib3').setLevel(logging.WARNING)\nlogging.getLogger('httpx').setLevel(logging.WARNING) \nlogging.getLogger('telegram').setLevel(logging.WARNING)\nlogging.getLogger('telegram.ext').setLevel(logging.WARNING)\nlogging.getLogger('httpcore').setLevel(logging.WARNING)\nlogging.getLogger('requests').setLevel(logging.WARNING)\n\ndef calculate_spread(dex_price, xt_price, fee=0.06):\n    # –ø–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥—Å–æ—Ç–∫–æ–≤–∏–π spread (–≤ %)\n    try:\n        return ((dex_price - xt_price) / dex_price * 100.0) - fee\n    except Exception:\n        return 0.0\n\n# –ü—Ä–æ—Å—Ç–∏–π plotting (–≤ –æ–∫—Ä–µ–º–æ–º—É —Ç—Ä–µ–¥—ñ) - –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤ Replit\n_plot_lock = threading.Lock()\ndef plot_spread_live(spread_store):\n    # Matplotlib plotting –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è GUI –ø—Ä–æ–±–ª–µ–º —É –≤–µ–±-—Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ\n    logging.info(\"Plotting thread started (GUI disabled for web environment)\")\n    while True:\n        time.sleep(5)  # –ø—Ä–æ—Å—Ç–æ —Ç—Ä–∏–º–∞—î–º–æ —Ç—Ä–µ–¥ –∂–∏–≤–∏–º\n\ndef send_telegram(bot_token, chat_id, text):\n    \"\"\"–ë–∞–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–æ—é\"\"\"\n    if not bot_token:\n        logging.warning(\"‚ùå TELEGRAM: Bot token –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π\")\n        return False\n    if not chat_id:\n        logging.warning(f\"‚ùå TELEGRAM: Chat ID –ø–æ—Ä–æ–∂–Ω—ñ–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É\")\n        return False\n    \n    url = f\"https://api.telegram.org/bot{bot_token}/sendMessage\"\n    try:\n        # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n        if len(text) > 4000:\n            text = text[:4000] + \"...\"\n        \n        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –∑ HTML —Ñ–æ—Ä–º–∞—Ç–æ–º –ë–ï–ó web page preview\n        response = requests.post(url, data={\n            \"chat_id\": chat_id, \n            \"text\": text, \n            \"parse_mode\": \"HTML\",\n            \"disable_web_page_preview\": True\n        }, timeout=10)\n        \n        if response.status_code == 200:\n            result = response.json()\n            if result.get('ok'):\n                logging.info(f\"‚úÖ Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ chat_id={chat_id}\")\n                return True\n            else:\n                # –õ–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ Telegram API –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\n                logging.error(f\"‚ùå Telegram API error –¥–ª—è chat_id={chat_id}: {result}\")\n                return False\n        else:\n            # –õ–æ–≥—É—î–º–æ HTTP –ø–æ–º–∏–ª–∫–∏ Telegram –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\n            logging.error(f\"‚ùå Telegram HTTP error {response.status_code} –¥–ª—è chat_id={chat_id}: {response.text[:200]}\")\n            return False\n            \n    except Exception as e:\n        # –õ–æ–≥—É—î–º–æ –º–µ—Ä–µ–∂–µ–≤—ñ –ø–æ–º–∏–ª–∫–∏ Telegram –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\n        logging.error(f\"‚ùå Telegram network error –¥–ª—è chat_id={chat_id}: {str(e)}\")\n        return False\n\ndef send_to_admins_and_group(text):\n    \"\"\"\n    üéØ –¶–ï–ù–¢–†–ê–õ–Ü–ó–û–í–ê–ù–ê –§–£–ù–ö–¶–Ü–Ø: –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±–æ–º –∞–¥–º—ñ–Ω–∞–º + –≥—Ä—É–ø—ñ\n    –ì–∞—Ä–∞–Ω—Ç—É—î —â–æ –≤—Å—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ —Ç–∞ –≥—Ä—É–ø–∞ –æ—Ç—Ä–∏–º–∞—é—Ç—å –æ–¥–Ω–∞–∫–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n    \"\"\"\n    from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, TELEGRAM_ADMIN_2_ID, TELEGRAM_GROUP_CHAT_ID\n    \n    results = []\n    \n    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞–¥–º—ñ–Ω—É 1\n    if TELEGRAM_CHAT_ID:\n        result = send_telegram(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, text)\n        results.append((\"–ê–¥–º—ñ–Ω 1\", result))\n        \n    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞–¥–º—ñ–Ω—É 2\n    if TELEGRAM_ADMIN_2_ID:\n        result = send_telegram(TELEGRAM_BOT_TOKEN, TELEGRAM_ADMIN_2_ID, text)\n        results.append((\"–ê–¥–º—ñ–Ω 2\", result))\n        \n    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ –≥—Ä—É–ø—É\n    if TELEGRAM_GROUP_CHAT_ID:\n        result = send_telegram(TELEGRAM_BOT_TOKEN, TELEGRAM_GROUP_CHAT_ID, text)\n        results.append((\"–ì—Ä—É–ø–∞\", result))\n        \n    # –õ–æ–≥—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏\n    successful = sum(1 for _, success in results if success)\n    logging.info(f\"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {successful}/{len(results)} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–ê–¥–º—ñ–Ω–∏ + –ì—Ä—É–ø–∞)\")\n    \n    return any(success for _, success in results)  # True —è–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–æ—Å—å\n\ndef send_telegram_trade_notification(symbol, side, amount, price, profit=None, action=\"OPENED\", spread=None, exchange_price=None, dex_price=None):\n    \"\"\"–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ç–æ—Ä–≥–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –æ–±–æ–º –∞–¥–º—ñ–Ω–∞–º + –≥—Ä—É–ø—ñ —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é\"\"\"\n    \n    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –±—ñ—Ä–∂—É –∑ action\n    exchange_name = \"üåê Gate.io\"\n    if \"(XT)\" in action:\n        exchange_name = \"‚ö° XT.COM\"\n    \n    # üö® –î–ï–¢–ê–õ–¨–ù–ò–ô –§–û–†–ú–ê–¢ —Å–∏–≥–Ω–∞–ª—É —è–∫ —É –ø—Ä–∏–∫–ª–∞–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n    if action.startswith(\"OPENED\"):\n        clean_symbol = symbol.replace('/USDT:USDT', '')\n        \n        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ç–æ—Ä–≥–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏\n        leverage = 7  # –ü–ª–µ—á–µ 7x —è–∫ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n        margin = 5.0  # –§—ñ–∫—Å–æ–≤–∞–Ω–∞ –º–∞—Ä–∂–∞ $5\n        \n        # –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ None –∑–Ω–∞—á–µ–Ω—å\n        if exchange_price is None or dex_price is None:\n            exchange_price = price if price else 1.0\n            dex_price = price if price else 1.0\n        if spread is None:\n            spread = 1.0\n            \n        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ TP/SL/R&R\n        if side == \"LONG\":\n            tp_price = exchange_price * 1.017  # TP +1.7%\n            sl_price = exchange_price * 0.90   # SL -10%\n        else:\n            tp_price = exchange_price * 0.983  # TP -1.7%\n            sl_price = exchange_price * 1.10   # SL +10%\n            \n        tp_percent = ((tp_price - exchange_price) / exchange_price) * 100\n        sl_percent = ((sl_price - exchange_price) / exchange_price) * 100\n        risk_reward = abs(tp_percent) / abs(sl_percent) if abs(sl_percent) > 0 else 0.17\n        \n        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä—ñ–≤–µ–Ω—å —Ä–∏–∑–∏–∫—É\n        if abs(spread) >= 2.0:\n            risk_level = \"üü° –°–ï–†–ï–î–ù–Ü–ô\"\n        elif abs(spread) >= 1.5:\n            risk_level = \"üü¢ –ù–ò–ó–¨–ö–ò–ô\"\n        else:\n            risk_level = \"üî¥ –í–ò–°–û–ö–ò–ô\"\n        \n        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó\n        text = \"üí∞ <b>–ü–û–ó–ò–¶–Ü–Ø –í–Ü–î–ö–†–ò–¢–ê</b> üí∞\\n\\n\"\n        text += f\"üìä <b>{clean_symbol}</b> {side}\\n\"\n        text += f\"üéØ <b>XT.COM</b>: ${exchange_price:.6f}\\n\"\n        text += f\"üìä <b>DexScreener</b>: ${dex_price:.6f}\\n\"\n        text += f\"üíé <b>–°–ø—Ä–µ–¥</b>: +{abs(spread):.2f}%\\n\\n\"\n        \n        text += \"üìà <b>–¢–û–†–ì–û–í–Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø</b>\\n\"\n        text += f\"‚ö° –ü–ª–µ—á–µ: {leverage}x\\n\"\n        text += f\"üíµ –†–æ–∑–º—ñ—Ä: ${margin:.1f}\\n\"\n        text += f\"üéØ TP: ${tp_price:.6f} ({tp_percent:+.1f}%)\\n\"\n        text += f\"üõë SL: ${sl_price:.6f} ({sl_percent:+.1f}%)\\n\"\n        text += f\"‚öñÔ∏è R/R: {risk_reward:.2f}\\n\"\n        text += f\"üî• –†–∏–∑–∏–∫: {risk_level}\\n\\n\"\n        \n        # –î–æ–¥–∞—î–º–æ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å —Ç–∞ –æ–±—Å—è–≥ —è–∫—â–æ —î\n        try:\n            dex_pair_info = get_exact_dex_pair_info(symbol)\n            if dex_pair_info:\n                liquidity = dex_pair_info.get('liquidity_usd', 0)\n                volume_24h = dex_pair_info.get('volume_24h', 0)\n                text += f\"üíß –õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å: ${liquidity:,.0f}\\n\"\n                text += f\"üìä –û–±—Å—è–≥ 24–≥: ${volume_24h:,.0f}\\n\\n\"\n        except:\n            pass\n            \n        # üöÄ –ù–û–í–ê –°–ò–°–¢–ï–ú–ê DEX –ü–û–°–ò–õ–ê–ù–¨: –î–æ–¥–∞—î–º–æ –ø—Ä—è–º—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ–ø–æ–≤—ñ DEX\n        text += f\"üîó <b>–¢–û–†–ì–Ü–í–õ–Ø:</b>\\n\"\n        text += f\"‚Ä¢ <a href=\\\"{xt_pair_link(symbol)}\\\">üìä XT –¢–æ—Ä–≥—É–≤–∞—Ç–∏</a>\\n\"\n        \n        # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–æ–ø–æ–≤—ñ DEX –ø–æ—Å–∏–ª–∞–Ω–Ω—è\n        try:\n            # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥—Ä–µ—Å–∏ —Ç–æ–∫–µ–Ω–∞\n            exact_pair_info = get_exact_dex_pair_info(symbol)\n            token_addresses = {}\n            \n            if exact_pair_info and exact_pair_info.get('token_address') and exact_pair_info.get('chain_name'):\n                chain = exact_pair_info['chain_name'].lower()\n                token_addresses[chain] = exact_pair_info['token_address']\n            \n            # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç–æ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö, –ø—Ä–æ–±—É—î–º–æ token_addresses.json\n            if not token_addresses:\n                try:\n                    with open('token_addresses.json', 'r', encoding='utf-8') as f:\n                        token_data = json.load(f)\n                        token_info = token_data.get(clean_symbol, {})\n                        if token_info.get('address') and token_info.get('chain'):\n                            token_addresses[token_info['chain']] = token_info['address']\n                except Exception:\n                    pass\n            \n            # üéØ –ü–†–û–°–¢–ò–ô DEX LINK: –±–∞–∑–æ–≤–∏–π fallback –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –º–æ–¥—É–ª—ñ–≤\n            if token_addresses:\n                # –ü—Ä–æ—Å—Ç–∏–π fallback: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ DexScreener\n                try:\n                    exact_pair_info = get_exact_dex_pair_info(symbol)\n                    if exact_pair_info and exact_pair_info.get('exact_pair_url'):\n                        text += f\"‚Ä¢ <a href=\\\"{exact_pair_info['exact_pair_url']}\\\">üìà DexScreener - –ü–ê–†–ê</a>\\n\"\n                    else:\n                        dexscreener_link = get_proper_dexscreener_link(clean_symbol)\n                        text += f\"‚Ä¢ <a href=\\\"{dexscreener_link}\\\">üìà DexScreener</a>\\n\"\n                except Exception:\n                    dexscreener_link = get_proper_dexscreener_link(clean_symbol)\n                    text += f\"‚Ä¢ <a href=\\\"{dexscreener_link}\\\">üìà DexScreener</a>\\n\"\n            else:\n                # Fallback –¥–æ DexScreener —è–∫—â–æ –Ω–µ–º–∞—î –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞\n                dexscreener_link = get_proper_dexscreener_link(clean_symbol)\n                text += f\"‚Ä¢ <a href=\\\"{dexscreener_link}\\\">üìà DexScreener</a>\\n\"\n                \n        except Exception as e:\n            logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó DEX –ø–æ—Å–∏–ª–∞–Ω—å: {e}\")\n            # –ë–µ–∑–ø–µ—á–Ω–∏–π fallback\n            dexscreener_link = get_proper_dexscreener_link(clean_symbol)\n            text += f\"‚Ä¢ <a href=\\\"{dexscreener_link}\\\">üìà DexScreener</a>\\n\"\n        \n        text += \"\\n\"\n        \n        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è\n        import time\n        text += f\"‚ö° <b>–ë—ñ—Ä–∂–∞:</b> {exchange_name}\\n\"\n        text += f\"üí∞ <b>–ú–∞—Ä–∂–∞:</b> ${margin:.2f}\\n\"  \n        text += f\"‚è∞ <b>–ß–∞—Å:</b> {time.strftime('%H:%M:%S')}\\n\"\n        text += f\"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ü–û–ó–ò–¶–Ü–Ø –í–Ü–î–ö–†–ò–¢–ê\"\n        \n        # ‚úÖ –¶–ï–ù–¢–†–ê–õ–Ü–ó–û–í–ê–ù–ê –í–Ü–î–ü–†–ê–í–ö–ê: –æ–±–æ–º –∞–¥–º—ñ–Ω–∞–º + –≥—Ä—É–ø—ñ\n        send_to_admins_and_group(text)\n        \n    elif action.startswith(\"CLOSED\"):\n        clean_symbol = symbol.replace('/USDT:USDT', '')\n        \n        # üî• –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø P&L: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ —è–∫—â–æ —î, —ñ–Ω–∞–∫—à–µ –ø–µ—Ä–µ–¥–∞–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏\n        if profit is not None:\n            # –Ø–∫—â–æ profit –ø–µ—Ä–µ–¥–∞–Ω–æ, —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ —Å—É–º–∏\n            profit_pct = (profit / amount) * 100 if amount > 0 and profit != 0 else 0.0\n            profit_dollars = profit\n        else:\n            # –Ø–∫—â–æ profit –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ 0\n            profit_pct = 0.0\n            profit_dollars = 0.0\n            \n        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –µ–º–æ–¥–∑—ñ —Ç–∞ —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É\n        if profit_dollars > 0:\n            result_emoji = \"üíö\"\n            result_text = f\"+${profit_dollars:.2f}\"\n        elif profit_dollars < 0:\n            result_emoji = \"‚ù§Ô∏è\" \n            result_text = f\"${profit_dollars:.2f}\"\n        else:\n            result_emoji = \"üíô\"\n            result_text = \"$0.00\"\n            \n        # üéØ –ü–û–í–ù–û–¶–Ü–ù–ù–ò–ô –î–ï–¢–ê–õ–¨–ù–ò–ô –§–û–†–ú–ê–¢ –ó–ê–ö–†–ò–¢–¢–Ø (—è–∫ –∑–∞–ø–∏—Ç–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á!)\n        text = f\"üèÅ **–ü–û–ó–ò–¶–Ü–Ø –ó–ê–ö–†–ò–¢–ê** {result_emoji}\\n\"\n        text += f\"üìä **{clean_symbol}** ({side.upper() if side else '‚Äî'}) | {exchange_name}\\n\"\n        text += f\"üí∞ –†–æ–∑–º—ñ—Ä: **${amount:.2f} USDT**\\n\"\n        text += f\"üìà –¶—ñ–Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è: **${price:.6f}**\\n\"\n        text += f\"üíé P&L: **{profit_pct:+.1f}%** ({result_text})\\n\"\n        \n        # –î–æ–¥–∞—î–º–æ —Å–ø—Ä–µ–¥ —è–∫—â–æ —î\n        if spread is not None:\n            text += f\"üìä –°–ø—Ä–µ–¥: **{abs(spread):.2f}%**\\n\"\n            \n        # –î–æ–¥–∞—î–º–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ü—ñ–Ω —è–∫—â–æ —î\n        if exchange_price and dex_price:\n            exchange_short = \"XT\" if \"(XT)\" in action else exchange_name\n            text += f\"‚öñÔ∏è {exchange_short}: ${exchange_price:.3f} | DEX: ${dex_price:.3f}\\n\"\n            \n        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑ —Ö–µ—à—Ç–µ–≥–æ–º  \n        text += f\"‚úÖ –°—Ç–∞—Ç—É—Å: **–£–°–ü–Ü–®–ù–û –ó–ê–ö–†–ò–¢–û** | #ArbitrageBot\"\n        \n        # ‚úÖ –¶–ï–ù–¢–†–ê–õ–Ü–ó–û–í–ê–ù–ê –í–Ü–î–ü–†–ê–í–ö–ê: –æ–±–æ–º –∞–¥–º—ñ–Ω–∞–º + –≥—Ä—É–ø—ñ\n        send_to_admins_and_group(text)\n\n\ndef generate_crypto_signal(symbol, side, entry_price, tp_price, spread_percentage, leverage, order_amount, token_info=None, exchange=\"XT.COM\", signal_id=None, dex_price=None, comparison_source=\"DexScreener\"):\n    \"\"\"\n    –ì–µ–Ω–µ—Ä—É—î –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∏–π —Å–∏–≥–Ω–∞–ª —É —Å—Ç–∏–ª—ñ —è–∫ —É –¥—Ä—É–≥–∞ –∑ ByBit\n    –ê–†–•–Ü–¢–ï–ö–¢–û–†: –ü–µ—Ä–µ–ø–∏—Å–∞–Ω–æ –¥–ª—è XT.com –∑ –†–ï–ê–õ–¨–ù–ò–ú–ò —Ü—ñ–Ω–∞–º–∏ —ñ —Å–ø—Ä–µ–¥–∞–º–∏\n    ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –î–æ–¥–∞–Ω–æ HTML –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤ Telegram\n    \"\"\"\n    import html\n    \n    # Clean symbol name –∑ –±–µ–∑–ø–µ—á–Ω–∏–º –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è–º\n    clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '').upper()\n    safe_symbol = html.escape(clean_symbol, quote=False)\n    safe_exchange = html.escape(exchange, quote=False)\n    \n    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –µ–º–æ–¥–∑—ñ –¥–ª—è —Å—Ç–æ—Ä–æ–Ω–∏\n    if side == \"LONG\":\n        side_emoji = \"üü¢\"\n        action = \"–ö–£–ü–ò–¢–ò\"\n    else:\n        side_emoji = \"üî¥\"\n        action = \"–ü–†–û–î–ê–¢–ò\"\n        \n    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ TP –≤—ñ–¥—Å—Ç–∞–Ω—å\n    tp_distance = abs((tp_price - entry_price) / entry_price * 100)\n    \n    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ SL (2% –≤—ñ–¥ –≤—Ö–æ–¥—É)\n    sl_distance = 2.0\n    if side == \"LONG\":\n        sl_price = entry_price * (1 - sl_distance / 100)\n    else:\n        sl_price = entry_price * (1 + sl_distance / 100)\n    \n    # R/R —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫\n    risk_reward = tp_distance / sl_distance if sl_distance > 0 else 1.0\n    \n    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä—ñ–≤–µ–Ω—å —Ä–∏–∑–∏–∫—É\n    if abs(spread_percentage) >= 1.0:\n        risk_level = \"üî• –í–ò–°–û–ö–ê –Ø–ö–Ü–°–¢–¨\"\n        risk_color = \"üü¢\"\n    elif abs(spread_percentage) >= 0.5:\n        risk_level = \"‚ö° –°–ï–†–ï–î–ù–Ø –Ø–ö–Ü–°–¢–¨\"\n        risk_color = \"üü°\"\n    else:\n        risk_level = \"‚ö†Ô∏è –ù–ò–ó–¨–ö–ê –Ø–ö–Ü–°–¢–¨\"\n        risk_color = \"üî¥\"\n    \n    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É\n    potential_profit = (order_amount * leverage * tp_distance / 100)\n    potential_loss = (order_amount * leverage * sl_distance / 100)\n    \n    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é\n    token_name = safe_symbol\n    if token_info and isinstance(token_info, dict):\n        token_name = html.escape(token_info.get('name', clean_symbol), quote=False)\n    \n    # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –§–æ—Ä–º–∞—Ç—É—î–º–æ —Å–∏–≥–Ω–∞–ª –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ HTML —Ç–µ–≥–∞–º–∏ –¥–ª—è Telegram\n    signal = f\"\"\"üî• <b>–ê–†–ë–Ü–¢–†–ê–ñ–ù–ò–ô –°–ò–ì–ù–ê–õ</b> üî•\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n{side_emoji} <b>{safe_symbol}/USDT PERP</b>\nüè¶ –ë—ñ—Ä–∂–∞: ‚ö° <b>{safe_exchange}</b>\nüìç –î—ñ—è: <b>{action} {side}</b>\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nüí∞ <b>–¢–û–†–ì–û–í–Ü –ü–ê–†–ê–ú–ï–¢–†–ò:</b>\nüìä –¶—ñ–Ω–∞ –≤—Ö–æ–¥—É: <b>${entry_price:.6f}</b>\nüéØ Take Profit: <b>${tp_price:.6f}</b>\nüõ°Ô∏è Stop Loss: <b>${sl_price:.6f}</b>\n‚öñÔ∏è –ü–ª–µ—á–µ: <b>{leverage}x</b>\nüíµ –†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó: <b>${order_amount:.0f} USDT</b>\n\nüìà <b>–ê–ù–ê–õ–Ü–ó:</b>\"\"\"\n\n    # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –î–æ–¥–∞—î–º–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ DEX —Ü—ñ–Ω–æ—é –∑ HTML —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º\n    safe_comparison_source = html.escape(comparison_source, quote=False)\n    if dex_price:\n        signal += f\"\"\"\nüí≤ XT.com: <b>${entry_price:.6f}</b>\nüìä {safe_comparison_source}: <b>${dex_price:.6f}</b>\nüéØ –°–ø—Ä–µ–¥: <b>{spread_percentage:+.2f}%</b>\"\"\"\n    \n    signal += f\"\"\"\nüéØ TP –î–∏—Å—Ç–∞–Ω—Ü—ñ—è: <b>{tp_distance:.2f}%</b>\nüõ°Ô∏è SL –î–∏—Å—Ç–∞–Ω—Ü—ñ—è: <b>{sl_distance:.2f}%</b>\n‚öñÔ∏è R/R Ratio: <b>{risk_reward:.1f}:1</b>\n\nüí∞ <b>–ü–†–û–ì–ù–û–ó–ò:</b>\n‚úÖ –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: <b>${potential_profit:.2f}</b>\n‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–∏–∑–∏–∫: <b>${potential_loss:.2f}</b>\n\n{risk_color} –†—ñ–≤–µ–Ω—å —è–∫–æ—Å—Ç—ñ: <b>{risk_level}</b>\n\nüîó <b>–ü–û–°–ò–õ–ê–ù–ù–Ø:</b>\"\"\"\n\n    # üéØ –¶–ï–ù–¢–†–ê–õ–Ü–ó–û–í–ê–ù–ê –°–ò–°–¢–ï–ú–ê: –ü—Ä—è–º—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ–ø–æ–≤—ñ 3 DEX\n    try:\n        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–¥—Ä–µ—Å–∏ —Ç–æ–∫–µ–Ω–∞ –∑ —Ç–æ—á–Ω–∏—Ö DEX –¥–∞–Ω–∏—Ö\n        exact_pair_info = get_exact_dex_pair_info(symbol)\n        token_addresses = {}\n        \n        if exact_pair_info and exact_pair_info.get('token_address') and exact_pair_info.get('chain_name'):\n            chain = exact_pair_info['chain_name'].lower()\n            token_addresses[chain] = exact_pair_info['token_address']\n        \n        # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç–æ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö, –ø—Ä–æ–±—É—î–º–æ token_addresses.json\n        if not token_addresses:\n            try:\n                with open('token_addresses.json', 'r', encoding='utf-8') as f:\n                    token_data = json.load(f)\n                    token_info = token_data.get(clean_symbol, {})\n                    if token_info.get('address') and token_info.get('chain'):\n                        token_addresses[token_info['chain']] = token_info['address']\n            except Exception:\n                pass\n        \n        # üéØ –¢–û–ü–û–í–ò–ô DEX: —Ç—ñ–ª—å–∫–∏ –û–î–ò–ù –Ω–∞–π–∫—Ä–∞—â–∏–π DEX (–∑–≥—ñ–¥–Ω–æ –∑ –≤–∏–º–æ–≥–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)\n        if token_addresses:\n            from dex_link_generator import build_top_dex_links\n            \n            # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–µ—Ä–µ–∂\n            top_dex_links = []\n            for chain, address in token_addresses.items():\n                chain_links = build_top_dex_links(clean_symbol, chain, address)\n                top_dex_links.extend(chain_links)\n            \n            # üöÄ –ù–û–í–ò–ô –§–û–†–ú–ê–¢: —Ç—ñ–ª—å–∫–∏ –û–î–ò–ù —Ç–æ–ø–æ–≤–∏–π DEX (–Ω–µ –≤—Å—ñ 3) + XT –ø–æ—Å–∏–ª–∞–Ω–Ω—è\n            if top_dex_links:\n                # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π/–Ω–∞–π–∫—Ä–∞—â–∏–π DEX –∑—ñ —Å–ø–∏—Å–∫—É\n                dex_name, dex_link = top_dex_links[0]\n                xt_link = xt_pair_link(symbol)\n                safe_dex_name = html.escape(dex_name, quote=False)\n                signal += f\"\"\"\n‚Ä¢ <a href=\"{xt_link}\">üìä XT.com –¢–æ—Ä–≥—É–≤–∞—Ç–∏</a>\n‚Ä¢ <a href=\"{dex_link}\">üöÄ {safe_dex_name} –¢–æ—Ä–≥—É–≤–∞—Ç–∏</a>\"\"\"\n            else:\n                # Fallback –¥–æ DexScreener —è–∫—â–æ –Ω–µ–º–∞—î DEX –ø–æ—Å–∏–ª–∞–Ω—å\n                proper_link = get_proper_dexscreener_link(clean_symbol)\n                xt_link = xt_pair_link(symbol)\n                signal += f\"\"\"\n‚Ä¢ <a href=\"{xt_link}\">üìä XT.com –¢–æ—Ä–≥—É–≤–∞—Ç–∏</a>\n‚Ä¢ <a href=\"{proper_link}\">üîç DexScreener {safe_symbol}</a>\"\"\"\n        else:\n            # Fallback –¥–æ DexScreener —è–∫—â–æ –Ω–µ–º–∞—î –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞\n            proper_link = get_proper_dexscreener_link(clean_symbol)\n            signal += f\"\"\"\n‚Ä¢ <a href=\"{proper_link}\">üîç DexScreener {safe_symbol}</a>\"\"\"\n            \n    except Exception as e:\n        logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó DEX –ø–æ—Å–∏–ª–∞–Ω—å –¥–ª—è {symbol}: {e}\")\n        # –ë–µ–∑–ø–µ—á–Ω–∏–π fallback –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º\n        proper_link = get_proper_dexscreener_link(clean_symbol)\n        signal += f\"\"\"\n‚Ä¢ <a href=\"{proper_link}\">üîç DexScreener {safe_symbol}</a>\"\"\"\n    \n    signal += f\"\"\"\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n‚ö° <b>XT.COM Arbitrage Bot</b>\nü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂—ñ–≤\n\n‚ö†Ô∏è <b>–†–ò–ó–ò–ö:</b> –ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–∏–∑–∏–∫–∞–º–∏!\n\"\"\"\n    \n    return signal\n\n# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è shared instance\n_shared_dex_client_instance = None\n\ndef get_shared_dex_client():\n    \"\"\"–û—Ç—Ä–∏–º—É—î shared instance DexClient –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö\"\"\"\n    global _shared_dex_client_instance\n    \n    if _shared_dex_client_instance is None:\n        try:\n            # Import –Ω–æ–≤–æ–≥–æ DexCheckClient –∑–∞–º—ñ—Å—Ç—å —Å—Ç–∞—Ä–æ–≥–æ DexScreenerClient\n            from dex_client import DexCheckClient\n            _shared_dex_client_instance = DexCheckClient()\n        except ImportError as e:\n            logging.error(f\"–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ DexCheckClient: {e}\")\n            return None\n    \n    return _shared_dex_client_instance\n\ndef get_exact_dex_pair_info(symbol: str) -> Optional[dict]:\n    \"\"\"\n    üîó –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –û—Ç—Ä–∏–º—É—î —Ç–æ—á–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ DEX –ø–∞—Ä—É (–Ω–µ –ø–æ—à—É–∫!)\n    –ü–æ–≤–µ—Ä—Ç–∞—î pair_address, dex_name, exact_url, contract_address\n    \"\"\"\n    try:\n        dex_client = get_shared_dex_client()\n        if not dex_client:\n            return None\n            \n        clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '').upper()\n        \n        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â—É –ø–∞—Ä—É –∑ –∫–µ—à–µ–º –∞–±–æ —Å–≤—ñ–∂–∏–º–∏ –¥–∞–Ω–∏–º–∏\n        best_pair = dex_client.resolve_best_pair(clean_symbol)\n        if best_pair and best_pair.get('exact_pair_url'):\n            return {\n                'exact_pair_url': best_pair['exact_pair_url'],\n                'pair_address': best_pair.get('pair_address', ''),\n                'dex_name': best_pair.get('dex_name', 'DEX'),\n                'token_address': best_pair.get('token_address', ''),\n                'chain_name': best_pair.get('chain_name', best_pair.get('chain', 'ethereum'))\n            }\n            \n        return None\n        \n    except Exception as e:\n        logging.debug(f\"Error getting exact DEX pair info for {symbol}: {e}\")\n        return None\n\ndef dex_link_for_symbol(symbol: str) -> Optional[str]:\n    \"\"\"\n    Universal function to get direct DexScreener link\n    Uses SHARED instance for consistency with main bot\n    ALWAYS returns fallback link even when API unavailable\n    \"\"\"\n    try:\n        dex_client = get_shared_dex_client()\n        if dex_client and hasattr(dex_client, 'get_dex_link'):\n            dex_link = dex_client.get_dex_link(symbol)\n            if dex_link and \"dexscreener.com\" in dex_link:\n                logging.debug(f\"üîó DexScreener —Ç–æ—á–Ω–∞ –ø–∞—Ä–∞: {symbol} ‚Üí {dex_link}\")\n                return dex_link\n        \n        # FALLBACK: –ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω –∞–¥—Ä–µ—Å—É —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–æ—á–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è\n        clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '').upper()\n        \n        # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω –∞–¥—Ä–µ—Å—É –≤ –∫–µ—à—ñ\n        if dex_client and hasattr(dex_client, 'token_addresses'):\n            cached_info = dex_client.token_addresses.get(clean_symbol, {})\n            if cached_info.get('contract_address') and cached_info.get('chain'):\n                chain = cached_info['chain'].lower()\n                token_address = cached_info['contract_address']\n                exact_link = f\"https://dexscreener.com/{chain}/{token_address}\"\n                logging.debug(f\"üîó DexScreener –∑ –∫–µ—à—É: {symbol} ‚Üí {exact_link}\")\n                return exact_link\n        \n        # Use new proper link generation function\n        return get_proper_dexscreener_link(symbol)\n        \n    except Exception as e:\n        logging.error(f\"Error getting DexScreener link for {symbol}: {e}\")\n        # FALLBACK: Use new proper link generation function\n        return get_proper_dexscreener_link(symbol)\n\ndef xt_pair_link(symbol):\n    \"\"\"\n    üîó –ì–µ–Ω–µ—Ä—É—î –∫–ª—ñ–∫–∞–±–µ–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤—É –ø–∞—Ä—É XT.com\n    \n    Args:\n        symbol: —Å–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ—ó –ø–∞—Ä–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 'ETH/USDT:USDT' –∞–±–æ 'BTC/USDT')\n    \n    Returns:\n        str: URL –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ XT.com futures trading\n    \"\"\"\n    try:\n        # –û—á–∏—â–∞—î–º–æ —Å–∏–º–≤–æ–ª: ETH/USDT:USDT ‚Üí ETH\n        clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '').upper()\n        \n        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ò–ô –§–û–†–ú–ê–¢ XT.com futures trading\n        pair_url = f\"https://www.xt.com/en/trade/futures_{clean_symbol}USDT\"\n        \n        logging.debug(f\"üîó XT –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {symbol} ‚Üí {pair_url}\")\n        return pair_url\n    except Exception as e:\n        logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è XT –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è {symbol}: {e}\")\n        return \"https://www.xt.com/en/trade\"\n\ndef get_proper_dexscreener_link(symbol: str) -> str:\n    \"\"\"\n    ‚úÖ FIXED: Generate proper DexScreener links using contract addresses\n    \n    Priority:\n    1. Direct contract address link: https://dexscreener.com/{chain}/{contract_address}\n    2. Fallback to search only if no contract address available\n    \n    Args:\n        symbol: Trading pair symbol (e.g., 'BTC/USDT:USDT' or 'ETH')\n    \n    Returns:\n        str: Proper DexScreener link\n    \"\"\"\n    import json  # Move import to top to fix LSP error\n    try:\n        # Clean symbol to match token_addresses.json format\n        clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '').upper()\n        \n        # Load token addresses mapping\n        try:\n            with open('token_addresses.json', 'r', encoding='utf-8') as f:\n                token_addresses = json.load(f)\n        except (FileNotFoundError, json.JSONDecodeError) as e:\n            logging.warning(f\"üö® Cannot load token_addresses.json: {e}\")\n            token_addresses = {}\n        \n        # Try to get contract address from mapping\n        token_info = token_addresses.get(clean_symbol, {})\n        if token_info.get('address') and token_info.get('chain'):\n            contract_address = token_info['address']\n            chain = token_info['chain'].lower()\n            \n            # Map chain names to DexScreener format\n            chain_mapping = {\n                'ethereum': 'ethereum',\n                'bsc': 'bsc', \n                'polygon': 'polygon',\n                'avalanche': 'avalanche',\n                'solana': 'solana',\n                'arbitrum': 'arbitrum',\n                'optimism': 'optimism'\n            }\n            \n            dexscreener_chain = chain_mapping.get(chain, chain)\n            direct_link = f\"https://dexscreener.com/{dexscreener_chain}/{contract_address}\"\n            logging.info(f\"‚úÖ Direct DexScreener link: {clean_symbol} ‚Üí {direct_link}\")\n            return direct_link\n        \n        # Fallback to search only if no contract address\n        search_link = f\"https://dexscreener.com/search?q={clean_symbol}\"\n        logging.info(f\"‚ö†Ô∏è No contract address for {clean_symbol}, using search: {search_link}\")\n        return search_link\n        \n    except Exception as e:\n        logging.error(f\"‚ùå Error generating DexScreener link for {symbol}: {e}\")\n        # Safe fallback\n        clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '').upper()\n        return f\"https://dexscreener.com/search?q={clean_symbol}\"\n\ndef save_config_to_file(config_data):\n    \"\"\"–ó–±–µ—Ä—ñ–≥–∞—î runtime –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –≤ JSON —Ñ–∞–π–ª\"\"\"\n    try:\n        with open('runtime_config.json', 'w', encoding='utf-8') as f:\n            json.dump(config_data, f, ensure_ascii=False, indent=2)\n        logging.info(\"‚úÖ Runtime –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ\")\n    except Exception as e:\n        logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}\")\n\ndef load_config_from_file():\n    \"\"\"–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î runtime –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ JSON —Ñ–∞–π–ª—É\"\"\"\n    try:\n        with open('runtime_config.json', 'r', encoding='utf-8') as f:\n            config_data = json.load(f)\n        logging.info(\"‚úÖ Runtime –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ\")\n        return config_data\n    except FileNotFoundError:\n        logging.info(\"‚ö†Ô∏è Runtime –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ defaults\")\n        return {}\n    except Exception as e:\n        logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}\")\n        return {}\n\n# üß™ –¢–ï–°–¢–û–í–ê –§–£–ù–ö–¶–Ü–Ø\ndef test_telegram_configuration():\n    \"\"\"–¢–µ—Å—Ç—É—î Telegram –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –±–æ—Ç–∞\"\"\"\n    from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, TELEGRAM_GROUP_CHAT_ID\n    import time\n    \n    logging.info(\"üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø TELEGRAM –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á...\")\n    \n    if not TELEGRAM_BOT_TOKEN:\n        logging.error(\"‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π!\")\n        return False\n    \n    timestamp = time.strftime(\"%H:%M:%S\")\n    test_message = f\"ü§ñ TEST MESSAGE | {timestamp}\\n‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î —ñ –º–æ–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!\"\n    \n    success_count = 0\n    \n    # –¢–µ—Å—Ç—É—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç\n    if TELEGRAM_CHAT_ID:\n        logging.info(f\"üß™ –¢–µ—Å—Ç—É—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç: {TELEGRAM_CHAT_ID}\")\n        private_result = send_telegram(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, test_message)\n        if private_result:\n            logging.info(\"‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç –ø—Ä–∞—Ü—é—î!\")\n            success_count += 1\n        else:\n            logging.error(\"‚ùå –ü—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç –ù–ï –ø—Ä–∞—Ü—é—î!\")\n    else:\n        logging.warning(\"‚ö†Ô∏è TELEGRAM_CHAT_ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π\")\n    \n    # –¢–µ—Å—Ç—É—î–º–æ –≥—Ä—É–ø—É\n    if TELEGRAM_GROUP_CHAT_ID:\n        logging.info(f\"üß™ –¢–µ—Å—Ç—É—î–º–æ –≥—Ä—É–ø—É: {TELEGRAM_GROUP_CHAT_ID}\")\n        group_result = send_telegram(TELEGRAM_BOT_TOKEN, TELEGRAM_GROUP_CHAT_ID, test_message)\n        if group_result:\n            logging.info(\"‚úÖ –ì—Ä—É–ø–∞ –ø—Ä–∞—Ü—é—î!\")\n            success_count += 1\n        else:\n            logging.error(\"‚ùå –ì—Ä—É–ø–∞ –ù–ï –ø—Ä–∞—Ü—é—î! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:\\n- –ß–∏ –±–æ—Ç –¥–æ–¥–∞–Ω–∏–π –≤ –≥—Ä—É–ø—É?\\n- –ß–∏ –º–∞—î –±–æ—Ç –ø—Ä–∞–≤–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è?\\n- –ß–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π chat_id –≥—Ä—É–ø–∏?\")\n    else:\n        logging.warning(\"‚ö†Ô∏è TELEGRAM_GROUP_CHAT_ID (–≥—Ä—É–ø–∞) –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π\")\n    \n    logging.info(f\"üß™ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–£: {success_count} –∑ 2 —á–∞—Ç—ñ–≤ –ø—Ä–∞—Ü—é—é—Ç—å\")\n    return success_count > 0\n\n# üö´ –í–ò–î–ê–õ–ï–ù–û: _get_primary_dexscreener_link_simple –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞ —Ñ—É–Ω–∫—Ü—ñ—è\n# –ó–∞–º—ñ–Ω–µ–Ω–∞ –Ω–∞ –Ω–æ–≤—É —Å–∏—Å—Ç–µ–º—É DEX Link Generator –∑ –ø—Ä—è–º–∏–º–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ –Ω–∞ —Ç–æ–ø–æ–≤—ñ DEX –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏\n","size_bytes":32615},"xt_client.py":{"content":"import ccxt\nimport logging\nimport time\nfrom config import XT_API_KEY, XT_API_SECRET, XT_ACCOUNT_2_API_KEY, XT_ACCOUNT_2_API_SECRET, DRY_RUN, ALLOW_LIVE_TRADING\n\n# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–∏–Ω–∫—ñ–≤ XT\nxt_markets = {}\n\ndef create_xt(api_key=None, api_secret=None, account_name=\"Account 1\"):\n    \"\"\"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è XT –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ\n    \n    Args:\n        api_key: API –∫–ª—é—á (—è–∫—â–æ None, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î XT_API_KEY –∑ config)\n        api_secret: API —Å–µ–∫—Ä–µ—Ç (—è–∫—â–æ None, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î XT_API_SECRET –∑ config)\n        account_name: –ù–∞–∑–≤–∞ –∞–∫–∞—É–Ω—Ç—É –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è\n    \"\"\"\n    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–¥–∞–Ω—ñ –∫–ª—é—á—ñ –∞–±–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∑ config\n    key = api_key if api_key is not None else XT_API_KEY\n    secret = api_secret if api_secret is not None else XT_API_SECRET\n    \n    xt = ccxt.xt({\n        'apiKey': key,\n        'secret': secret,\n        'enableRateLimit': True,\n        'sandbox': False,\n        'options': {\n            'defaultType': 'swap',  # Futures –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∏\n            'createMarketBuyOrderRequiresPrice': False\n        }\n    })\n    # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ connection pool –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è\n    try:\n        import requests.adapters\n        if hasattr(xt, 'session') and xt.session:\n            # CCXT –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î requests.Session - –Ω–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ\n            adapter = requests.adapters.HTTPAdapter(\n                pool_connections=50,\n                pool_maxsize=50,\n                pool_block=False\n            )\n            xt.session.mount('http://', adapter)\n            xt.session.mount('https://', adapter)\n            logging.info(f\"üöÄ XT {account_name} connection pool –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ: 50 connections\")\n    except Exception as e:\n        logging.warning(f\"‚ö†Ô∏è {account_name}: –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ connection pool: {e}\")\n    \n    logging.info(f\"‚úÖ XT {account_name} –∫–ª—ñ—î–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ\")\n    return xt\n\ndef load_xt_futures_markets(xt):\n    \"\"\"üöÄ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ï –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø: –í—Å—ñ futures —Ä–∏–Ω–∫–∏ XT (USDT, USD, USDC) - —Ü—ñ–ª—å 700+ –ø–∞—Ä\"\"\"\n    global xt_markets\n    \n    # üöÄ –†–û–ó–®–ò–†–ï–ù–ò–ô –ü–û–®–£–ö: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π swap API\n    all_markets = xt.load_markets(params={'type':'swap'}, reload=True)\n    xt_markets = {}\n    futures_markets = {}\n    count = 0\n    futures_count = 0\n    spot_count = 0\n    \n    for symbol, meta in all_markets.items():\n        # üöÄ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê –§–Ü–õ–¨–¢–†–ê–¶–Ü–Ø: –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ USDT, USD, USDC futures\n        if meta.get('active', False):\n            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ quote –≤–∞–ª—é—Ç–∏\n            quote = meta.get('quote', '')\n            settle = meta.get('settle', '')\n            \n            # –ü—ñ–¥—Ç—Ä–∏–º—É—î–º–æ: USDT, USD, USDC futures\n            if quote in ['USDT', 'USD', 'USDC'] or settle in ['USDT', 'USD', 'USDC']:\n                market_type = meta.get('type', 'unknown')\n                \n                # üéØ –ö–†–ò–¢–ò–ß–ù–û: –¢–Ü–õ–¨–ö–ò FUTURES/SWAP (–≤–∏–∫–ª—é—á–∞—î–º–æ SPOT)\n                if market_type in ['swap', 'future']:\n                    futures_markets[symbol] = meta\n                    xt_markets[symbol] = meta\n                    count += 1\n                    futures_count += 1\n                    \n                    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä—à–∏—Ö 15 —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\n                    if count <= 15:\n                        logging.info(f\"‚úÖ XT Futures: {symbol} (type: {market_type}, quote: {quote}, settle: {settle})\")\n                elif market_type == 'spot':\n                    spot_count += 1  # –õ—ñ—á–∏–º–æ –∞–ª–µ –ù–ï –í–ö–õ–Æ–ß–ê–Ñ–ú–û\n    \n    logging.info(f\"üöÄ XT –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ï –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø: –ó–Ω–∞–π–¥–µ–Ω–æ {futures_count} futures –ø–∞—Ä (USDT/USD/USDC)\")\n    logging.info(f\"üìâ FUTURES —É–≤—ñ–º–∫–Ω–µ–Ω–æ: {futures_count}\")\n    logging.info(f\"üìà SPOT –ø—Ä–æ–ø—É—â–µ–Ω–æ: {spot_count}\")\n    \n    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É (—Ü—ñ–ª—å 700+)\n    if futures_count >= 700:\n        logging.info(f\"üéØ –ú–ê–ö–°–ò–ú–£–ú: –ó–Ω–∞–π–¥–µ–Ω–æ {futures_count} –ø–∞—Ä (>=700 –£–°–ü–Ü–•!)\")\n    elif futures_count >= 500:\n        logging.info(f\"üéØ –î–û–ë–†–ï: –ó–Ω–∞–π–¥–µ–Ω–æ {futures_count} –ø–∞—Ä (>=500)\")\n    else:\n        logging.warning(f\"‚ö†Ô∏è –û—á—ñ–∫—É–≤–∞–ª–æ—Å—è >=700 futures –ø–∞—Ä, –æ—Ç—Ä–∏–º–∞–Ω–æ {futures_count}\")\n    \n    return futures_markets\n\ndef fetch_xt_ticker(xt, symbol):\n    \"\"\"–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—ñ–∫–µ—Ä–∞ –∑ XT\"\"\"\n    return xt.fetch_ticker(symbol)\n\ndef get_all_xt_futures_pairs(client):\n    \"\"\"–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ futures —Ç–æ—Ä–≥–æ–≤—ñ –ø–∞—Ä–∏ –∑ XT.com\"\"\"\n    try:\n        # –ó–∞–≥—Ä—É–∂–∞—î–º–æ –≤—Å—ñ —Ä–∏–Ω–∫–∏\n        markets = client.load_markets()\n        \n        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ futures USDT –ø–∞—Ä–∏\n        futures_pairs = []\n        \n        for symbol, market in markets.items():\n            if (market.get('type') == 'swap' and \n                market.get('quote') == 'USDT' and\n                market.get('settle') == 'USDT' and\n                market.get('active', True)):\n                \n                # –û—Ç—Ä–∏–º—É—î–º–æ base —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ BTC –∑ BTC/USDT:USDT)\n                base = market.get('base', '')\n                if base and base not in ['USDT', 'USD']:\n                    futures_pairs.append(base)\n        \n        print(f\"üìä XT.com: –∑–Ω–∞–π–¥–µ–Ω–æ {len(futures_pairs)} futures USDT –ø–∞—Ä\")\n        print(f\"üîç –ü–µ—Ä—à—ñ 20: {futures_pairs[:20]}\")\n        \n        return sorted(list(set(futures_pairs)))  # –£–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ç–∞ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ\n        \n    except Exception as e:\n        print(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è XT –ø–∞—Ä: {e}\")\n        return []\n\ndef fetch_xt_order_book(xt, symbol, depth=10):\n    \"\"\"–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–∫–∞–Ω—É –∑ XT\"\"\"\n    return xt.fetch_order_book(symbol, depth)\n\ndef collect_market_depth_data(xt, symbol, depth_levels=20):\n    \"\"\"\n    üìä –ó–ë–Ü–† –î–ê–ù–ò–• –ü–†–û –ì–õ–ò–ë–ò–ù–£ –†–ò–ù–ö–£\n    –û—Ç—Ä–∏–º—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–±—Å—è–≥–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö —Ä—ñ–≤–Ω—è—Ö —Ü—ñ–Ω\n    \n    –ü–æ–≤–µ—Ä—Ç–∞—î:\n    {\n        'symbol': —Å–∏–º–≤–æ–ª,\n        'bids': [{'price': —Ü–µ–Ω–∞, 'volume': –æ–±—ä–µ–º, 'total_usd': –∑–∞–≥–∞–ª—å–Ω–∞_—Å—É–º–∞}, ...],\n        'asks': [{'price': —Ü–µ–Ω–∞, 'volume': –æ–±—ä–µ–º, 'total_usd': –∑–∞–≥–∞–ª—å–Ω–∞_—Å—É–º–∞}, ...],\n        'bid_depth_analysis': –∞–Ω–∞–ª—ñ–∑ –≥–ª–∏–±–∏–Ω–∏ –ø–æ–∫—É–ø–æ–∫,\n        'ask_depth_analysis': –∞–Ω–∞–ª—ñ–∑ –≥–ª–∏–±–∏–Ω–∏ –ø—Ä–æ–¥–∞–∂—ñ–≤,\n        'total_bid_liquidity': –∑–∞–≥–∞–ª—å–Ω–∞ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫,\n        'total_ask_liquidity': –∑–∞–≥–∞–ª—å–Ω–∞ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—ñ–≤,\n        'spread_analysis': –∞–Ω–∞–ª—ñ–∑ —Å–ø—Ä–µ–¥—ñ–≤ –º—ñ–∂ —Ä—ñ–≤–Ω—è–º–∏\n    }\n    \"\"\"\n    try:\n        orderbook = fetch_xt_order_book(xt, symbol, depth_levels)\n        if not orderbook or 'bids' not in orderbook or 'asks' not in orderbook:\n            return None\n            \n        # –û–±—Ä–æ–±–∫–∞ bids (–∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É)\n        processed_bids = []\n        total_bid_liquidity = 0\n        for price, volume in orderbook['bids'][:depth_levels]:\n            price_float = float(price)\n            volume_float = float(volume)\n            total_usd = price_float * volume_float\n            total_bid_liquidity += total_usd\n            \n            processed_bids.append({\n                'price': price_float,\n                'volume': volume_float,\n                'total_usd': total_usd\n            })\n        \n        # –û–±—Ä–æ–±–∫–∞ asks (–∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂)\n        processed_asks = []\n        total_ask_liquidity = 0\n        for price, volume in orderbook['asks'][:depth_levels]:\n            price_float = float(price)\n            volume_float = float(volume)\n            total_usd = price_float * volume_float\n            total_ask_liquidity += total_usd\n            \n            processed_asks.append({\n                'price': price_float,\n                'volume': volume_float,\n                'total_usd': total_usd\n            })\n        \n        # –ê–Ω–∞–ª—ñ–∑ –≥–ª–∏–±–∏–Ω–∏ –ø–æ —Ä—ñ–≤–Ω—è—Ö\n        bid_depth_analysis = _analyze_depth_levels(processed_bids, \"bids\")\n        ask_depth_analysis = _analyze_depth_levels(processed_asks, \"asks\")\n        \n        # –ê–Ω–∞–ª—ñ–∑ —Å–ø—Ä–µ–¥—ñ–≤ –º—ñ–∂ —Ä—ñ–≤–Ω—è–º–∏\n        spread_analysis = _analyze_level_spreads(processed_bids, processed_asks)\n        \n        return {\n            'symbol': symbol,\n            'timestamp': time.time(),\n            'bids': processed_bids,\n            'asks': processed_asks,\n            'bid_depth_analysis': bid_depth_analysis,\n            'ask_depth_analysis': ask_depth_analysis,\n            'total_bid_liquidity': total_bid_liquidity,\n            'total_ask_liquidity': total_ask_liquidity,\n            'spread_analysis': spread_analysis\n        }\n        \n    except Exception as e:\n        logging.error(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö –≥–ª–∏–±–∏–Ω–∏ —Ä–∏–Ω–∫—É {symbol}: {e}\")\n        return None\n\ndef _analyze_depth_levels(levels, side_name):\n    \"\"\"–ê–Ω–∞–ª—ñ–∑—É—î —Ä–æ–∑–ø–æ–¥—ñ–ª –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ –ø–æ —Ä—ñ–≤–Ω—è—Ö\"\"\"\n    if not levels or len(levels) < 3:\n        return {\"quality\": \"poor\", \"reason\": \"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ä—ñ–≤–Ω—ñ–≤\"}\n    \n    # –ê–Ω–∞–ª—ñ–∑ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—ó –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ\n    top3_liquidity = sum(level['total_usd'] for level in levels[:3])\n    total_liquidity = sum(level['total_usd'] for level in levels)\n    \n    concentration_pct = (top3_liquidity / total_liquidity * 100) if total_liquidity > 0 else 0\n    \n    # –ê–Ω–∞–ª—ñ–∑ —Ä–æ–∑–ø–æ–¥—ñ–ª—É –æ–±—Å—è–≥—ñ–≤\n    volumes = [level['volume'] for level in levels]\n    avg_volume = sum(volumes) / len(volumes) if volumes else 0\n    \n    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–æ—Å—Ç—ñ –≥–ª–∏–±–∏–Ω–∏\n    if concentration_pct > 80:\n        quality = \"concentrated\"  # –õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–æ–≤–∞–Ω–∞ –≤ —Ç–æ–ø-3\n    elif concentration_pct > 60:\n        quality = \"balanced\"      # –ó–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª\n    else:\n        quality = \"distributed\"   # –†—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–∞\n    \n    return {\n        \"quality\": quality,\n        \"levels_count\": len(levels),\n        \"top3_concentration_pct\": concentration_pct,\n        \"avg_volume_per_level\": avg_volume,\n        \"total_liquidity\": total_liquidity\n    }\n\ndef _analyze_level_spreads(bids, asks):\n    \"\"\"–ê–Ω–∞–ª—ñ–∑ —Å–ø—Ä–µ–¥—ñ–≤ –º—ñ–∂ —Ä—ñ–≤–Ω—è–º–∏ —Ü—ñ–Ω\"\"\"\n    spreads_analysis = {}\n    \n    # –°–ø—Ä–µ–¥ –º—ñ–∂ –Ω–∞–π–∫—Ä–∞—â–∏–º–∏ bid/ask\n    if bids and asks:\n        best_bid = bids[0]['price']\n        best_ask = asks[0]['price']\n        bid_ask_spread = ((best_ask - best_bid) / best_bid) * 100\n        spreads_analysis['bid_ask_spread_pct'] = bid_ask_spread\n    \n    # –°–ø—Ä–µ–¥–∏ –º—ñ–∂ —Ä—ñ–≤–Ω—è–º–∏ –≤ bids\n    if len(bids) >= 3:\n        bid_spreads = []\n        for i in range(len(bids) - 1):\n            spread = ((bids[i]['price'] - bids[i+1]['price']) / bids[i]['price']) * 100\n            bid_spreads.append(spread)\n        spreads_analysis['avg_bid_level_spread_pct'] = sum(bid_spreads) / len(bid_spreads)\n        spreads_analysis['max_bid_level_spread_pct'] = max(bid_spreads)\n    \n    # –°–ø—Ä–µ–¥–∏ –º—ñ–∂ —Ä—ñ–≤–Ω—è–º–∏ –≤ asks  \n    if len(asks) >= 3:\n        ask_spreads = []\n        for i in range(len(asks) - 1):\n            spread = ((asks[i+1]['price'] - asks[i]['price']) / asks[i]['price']) * 100\n            ask_spreads.append(spread)\n        spreads_analysis['avg_ask_level_spread_pct'] = sum(ask_spreads) / len(ask_spreads)\n        spreads_analysis['max_ask_level_spread_pct'] = max(ask_spreads)\n    \n    return spreads_analysis\n\ndef analyze_xt_order_book_liquidity(xt, symbol, side, usd_amount, min_liquidity_ratio=2.0):\n    \"\"\"\n    üîç –ê–ù–ê–õ–Ü–ó –°–¢–ê–ö–ê–ù–£ XT - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º\n    \n    –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:\n    - min_liquidity_ratio: –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ –¥–æ —Ä–æ–∑–º—ñ—Ä—É –æ—Ä–¥–µ—Ä–∞ (2.0 = 200%)\n    \n    –ü–æ–≤–µ—Ä—Ç–∞—î: (can_trade, liquidity_info)\n    \"\"\"\n    try:\n        orderbook = fetch_xt_order_book(xt, symbol, depth=10)\n        if not orderbook or 'bids' not in orderbook or 'asks' not in orderbook:\n            return False, \"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ XT —Å—Ç–∞–∫–∞–Ω\"\n        \n        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É\n        relevant_side = orderbook['asks'] if side == \"LONG\" else orderbook['bids'] \n        side_name = \"asks (–ø—Ä–æ–¥–∞–∂—ñ)\" if side == \"LONG\" else \"bids (–ø–æ–∫—É–ø–∫–∏)\"\n        \n        if not relevant_side or len(relevant_side) < 3:\n            return False, f\"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ XT –æ—Ä–¥–µ—Ä—ñ–≤ –≤ {side_name}: {len(relevant_side)}\"\n        \n        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5 —Ä—ñ–≤–Ω—ñ–≤ —Å—Ç–∞–∫–∞–Ω—É\n        total_liquidity_usd = 0\n        levels_analyzed = min(5, len(relevant_side))\n        \n        for i in range(levels_analyzed):\n            price = float(relevant_side[i][0])\n            quantity = float(relevant_side[i][1])\n            level_usd = price * quantity\n            total_liquidity_usd += level_usd\n        \n        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ\n        required_liquidity = usd_amount * min_liquidity_ratio\n        liquidity_ok = total_liquidity_usd >= required_liquidity\n        \n        # –ê–Ω–∞–ª—ñ–∑ —Å–ø—Ä–µ–¥—É –º—ñ–∂ —Ä—ñ–≤–Ω—è–º–∏\n        best_price = float(relevant_side[0][0])\n        second_price = float(relevant_side[1][0]) if len(relevant_side) > 1 else best_price\n        spread_between_levels = abs(second_price - best_price) / best_price * 100\n        \n        # –î–µ—Ç–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ —Å—Ç–∞–∫–∞–Ω—É\n        quality_issues = []\n        if total_liquidity_usd < required_liquidity:\n            quality_issues.append(f\"–ú–∞–ª–∞ XT –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å: ${total_liquidity_usd:.0f} < ${required_liquidity:.0f}\")\n        if spread_between_levels > 0.5:  # –°–ø—Ä–µ–¥ –º—ñ–∂ —Ä—ñ–≤–Ω—è–º–∏ > 0.5%\n            quality_issues.append(f\"–í–µ–ª–∏–∫–∏–π XT —Å–ø—Ä–µ–¥ –º—ñ–∂ —Ä—ñ–≤–Ω—è–º–∏: {spread_between_levels:.2f}%\")\n        if levels_analyzed < 3:\n            quality_issues.append(f\"–ú–∞–ª–æ XT —Ä—ñ–≤–Ω—ñ–≤: {levels_analyzed}\")\n        \n        if quality_issues:\n            return False, f\"‚ùå XT –ø—Ä–æ–±–ª–µ–º–∏ —Å—Ç–∞–∫–∞–Ω—É: {'; '.join(quality_issues)}\"\n        \n        return True, f\"‚úÖ XT —Å—Ç–∞–∫–∞–Ω –û–ö: –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å ${total_liquidity_usd:.0f} ({total_liquidity_usd/usd_amount:.1f}x), —Å–ø—Ä–µ–¥ {spread_between_levels:.2f}%\"\n        \n    except Exception as e:\n        return False, f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É XT —Å—Ç–∞–∫–∞–Ω—É: {str(e)}\"\n\ndef get_xt_futures_balance(xt):\n    \"\"\"–û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É futures —Ä–∞—Ö—É–Ω–∫—É XT\"\"\"\n    try:\n        if DRY_RUN:\n            return {\n                'total': 1000.0,\n                'free': 950.0,\n                'used': 50.0\n            }\n        \n        balance = xt.fetch_balance({'type': 'swap'})\n        \n        # üîç DEBUG: –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å–∏—Ä–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\n        logging.info(f\"üîç RAW XT BALANCE: {balance}\")\n        \n        if 'USDT' in balance and isinstance(balance['USDT'], dict):\n            usdt_balance = balance['USDT']\n            logging.info(f\"üîç USDT BALANCE KEYS: {list(usdt_balance.keys())}\")\n            logging.info(f\"üîç USDT BALANCE DATA: {usdt_balance}\")\n            \n            # üöÄ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –∫–ª—é—á—ñ –¥–ª—è –±–∞–ª–∞–Ω—Å—É\n            available = (\n                usdt_balance.get('equity') or      # üí∞ –ù–û–í–ï: —Å–ø—Ä–æ–±—É—î–º–æ equity\n                usdt_balance.get('wallet_balance') or # üí∞ –ù–û–í–ï: —Å–ø—Ä–æ–±—É—î–º–æ wallet_balance  \n                usdt_balance.get('free') or \n                usdt_balance.get('available') or \n                usdt_balance.get('balance') or     # üí∞ –ù–û–í–ï: —Å–ø—Ä–æ–±—É—î–º–æ balance\n                (usdt_balance.get('total', 0) - usdt_balance.get('used', 0))\n            )\n            \n            total_balance = (\n                usdt_balance.get('equity') or      # üí∞ –ù–û–í–ï: —Å–ø—Ä–æ–±—É—î–º–æ equity –¥–ª—è total\n                usdt_balance.get('wallet_balance') or\n                usdt_balance.get('total', 0)\n            )\n            \n            logging.info(f\"üîç BALANCE PARSING: available={available}, total={total_balance}\")\n            \n            return {\n                'total': total_balance,\n                'free': available,\n                'used': usdt_balance.get('used', 0)\n            }\n        \n        # üöÄ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –Ø–∫—â–æ USDT –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ª–æ–≥—É—î–º–æ –≤—Å—ñ –∫–ª—é—á—ñ\n        logging.warning(f\"üîç NO USDT KEY FOUND. All balance keys: {list(balance.keys())}\")\n        return {'total': 0, 'free': 0, 'used': 0}\n        \n    except Exception as e:\n        logging.error(f\"XT –±–∞–ª–∞–Ω—Å –ø–æ–º–∏–ª–∫–∞: {e}\")\n        import traceback\n        logging.error(f\"XT –±–∞–ª–∞–Ω—Å traceback: {traceback.format_exc()}\")\n        return {'total': 0, 'free': 0, 'used': 0}\n\ndef is_xt_futures_tradeable(symbol):\n    \"\"\"–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –º–æ–∂–Ω–∞ —Ç–æ—Ä–≥—É–≤–∞—Ç–∏ —Ç–æ–∫–µ–Ω –Ω–∞ XT futures (USDT, USD, USDC)\"\"\"\n    try:\n        if symbol not in xt_markets:\n            return False\n        \n        market = xt_markets[symbol]\n        \n        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ü–µ –∞–∫—Ç–∏–≤–Ω–∏–π futures —Ä–∏–Ω–æ–∫\n        if not market.get('active', False):\n            return False\n            \n        if market.get('type') not in ['swap', 'future']:\n            return False\n            \n        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ü–µ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∞ –≤–∞–ª—é—Ç–∞ settle (USDT, USD, USDC)\n        settle = market.get('settle', '')\n        quote = market.get('quote', '')\n        if settle not in ['USDT', 'USD', 'USDC'] and quote not in ['USDT', 'USD', 'USDC']:\n            return False\n            \n        return True\n        \n    except Exception as e:\n        logging.error(f\"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ XT futures –¥–ª—è {symbol}: {e}\")\n        return False\n\ndef xt_open_market_position(xt, symbol, side, usd_amount, leverage, xt_price_ref=None, dex_price_ref=None, spread_ref=None):\n    \"\"\"\n    –°—Ç–≤–æ—Ä—é—î —Ä–∏–Ω–∫–æ–≤–∏–π –æ—Ä–¥–µ—Ä –Ω–∞ XT futures —á–µ—Ä–µ–∑ CCXT (–∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ Gate.io).\n    \n    IMPORTANT: usd_amount —Ü–µ MARGIN (–º–∞—Ä–∂–∞ —è–∫—É —Ä–∏–∑–∏–∫—É—î–º–æ), –Ω–µ notional value.\n    Notional value = margin * leverage\n    \"\"\"\n    # üîí –ü–û–î–í–Ü–ô–ù–ò–ô –ó–ê–•–ò–°–¢: DRY_RUN + ALLOW_LIVE_TRADING\n    if DRY_RUN:\n        logging.info(\"[XT DRY-RUN] create market %s %s %sUSDT @ lev %s\", symbol, side, usd_amount, leverage)\n        return {\"id\":\"dry-xt-\"+str(time.time()), \"price\": None}\n    \n    # üîç DEBUG: –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó  \n    logging.info(f\"üîç OPEN DEBUG: ALLOW_LIVE_TRADING={ALLOW_LIVE_TRADING}, DRY_RUN={DRY_RUN}\")\n    \n    if not ALLOW_LIVE_TRADING:\n        logging.error(\"[XT SECURITY] üö® LIVE TRADING BLOCKED: ALLOW_LIVE_TRADING=False\")\n        raise Exception(\"Live trading not allowed - set ALLOW_LIVE_TRADING=true\")\n    \n    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è exception handling\n    current_price = 0.0\n    instant_price = 0.0\n    try:\n        # üìä –ö–†–û–ö 1: –û—Ç—Ä–∏–º—É—î–º–æ market metadata –¥–ª—è —Å–∏–º–≤–æ–ª—É\n        logging.info(f\"[XT {symbol}] üìä –ö–†–û–ö 1: –û—Ç—Ä–∏–º–∞–Ω–Ω—è market metadata...\")\n        try:\n            market = xt.market(symbol)\n            logging.info(f\"[XT {symbol}] ‚úÖ Market metadata –æ—Ç—Ä–∏–º–∞–Ω–æ: {market.get('id', 'N/A')}\")\n        except Exception as e:\n            error_msg = f\"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ market metadata: {e}\"\n            logging.error(f\"[XT {symbol}] {error_msg}\")\n            return None\n        \n        # üîç –ö–†–û–ö 2: –û—Ç—Ä–∏–º—É—î–º–æ contractSize –∑ market metadata\n        contract_size = market.get('contractSize', 1.0)\n        logging.info(f\"[XT {symbol}] üìè –ö–†–û–ö 2: contractSize = {contract_size}\")\n        \n        # üìè –ö–†–û–ö 3: –û—Ç—Ä–∏–º—É—î–º–æ limits —Ç–∞ precision –∑ market\n        exchange_min_size = float(market.get('limits', {}).get('amount', {}).get('min', 0.001))\n        amount_precision = market.get('precision', {}).get('amount', 6)\n        logging.info(f\"[XT {symbol}] üìä –ö–†–û–ö 3: Limits - min_amount={exchange_min_size}, precision={amount_precision}\")\n        \n        # ‚ö° –ö–†–û–ö 4: –û–±–º–µ–∂—É—î–º–æ leverage –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–∑–≤–æ–ª–µ–Ω–æ–≥–æ\n        max_leverage = market.get('limits', {}).get('leverage', {}).get('max', leverage)\n        if max_leverage is None:\n            max_leverage = leverage\n        clamped_leverage = min(leverage, max_leverage)\n        \n        if clamped_leverage != leverage:\n            logging.warning(f\"[XT {symbol}] ‚ö†Ô∏è –ö–†–û–ö 4: Leverage –æ–±–º–µ–∂–µ–Ω–æ –∑ {leverage}x –¥–æ {clamped_leverage}x (–º–∞–∫—Å–∏–º—É–º –¥–ª—è —Ä–∏–Ω–∫—É)\")\n        else:\n            logging.info(f\"[XT {symbol}] ‚úÖ –ö–†–û–ö 4: Leverage {clamped_leverage}x –≤ –º–µ–∂–∞—Ö –¥–æ–∑–≤–æ–ª–µ–Ω–æ–≥–æ (max={max_leverage}x)\")\n        \n        # ‚öôÔ∏è –ö–†–û–ö 5: –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–ª–µ—á–µ –¥–ª—è futures –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É\n        position_side = \"LONG\" if side == \"LONG\" else \"SHORT\"\n        try:\n            xt.set_leverage(clamped_leverage, symbol, {\"positionSide\": position_side})\n            logging.info(f\"[XT {symbol}] ‚öôÔ∏è –ö–†–û–ö 5: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–µ–≤–µ—Ä–∏–¥–∂ {clamped_leverage}x ({position_side})\")\n        except Exception as e:\n            logging.warning(f\"[XT {symbol}] ‚ö†Ô∏è –ö–†–û–ö 5: –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–µ–≤–µ—Ä–∏–¥–∂—É: {e}\")\n            pass\n\n        # üí∞ –ö–†–û–ö 6: –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ margin —Ç–∞ notional value\n        margin_amount = usd_amount\n        notional_value = margin_amount * clamped_leverage\n        logging.info(f\"[XT {symbol}] üí∞ –ö–†–û–ö 6: margin=${margin_amount:.2f}, leverage={clamped_leverage}x ‚Üí notional=${notional_value:.2f}\")\n        \n        # üéØ –ö–†–û–ö 7: –û—Ç—Ä–∏–º—É—î–º–æ –º–∏—Ç—Ç—î–≤—É —Ü—ñ–Ω—É –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É\n        logging.info(f\"[XT {symbol}] üéØ –ö–†–û–ö 7: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∏—Ç—Ç—î–≤–æ—ó —Ü—ñ–Ω–∏...\")\n        ticker = fetch_xt_ticker(xt, symbol)\n        if not ticker or 'last' not in ticker:\n            error_msg = f\"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤—ñ–∂—É —Ü—ñ–Ω—É –¥–ª—è –æ—Ä–¥–µ—Ä–∞\"\n            logging.error(f\"[XT {symbol}] {error_msg}\")\n            return None\n        \n        instant_price = float(ticker['last'])\n        logging.info(f\"[XT {symbol}] ‚úÖ –ö–†–û–ö 7: instant_price = ${instant_price:.6f}\")\n        \n        # üßÆ –ö–†–û–ö 8: –ü–†–ê–í–ò–õ–¨–ù–ò–ô —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ contracts –∑ contractSize\n        # –§–æ—Ä–º—É–ª–∞: contracts = notional_value / (contract_size * price)\n        contracts = notional_value / (contract_size * instant_price)\n        logging.info(f\"[XT {symbol}] üßÆ –ö–†–û–ö 8: –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ contracts = {notional_value:.2f} / ({contract_size} * {instant_price:.6f}) = {contracts:.6f}\")\n        \n        # üîß –ö–†–û–ö 9: –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è amount_to_precision –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è\n        logging.info(f\"[XT {symbol}] üîß –ö–†–û–ö 9: –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è amount_to_precision...\")\n        try:\n            final_contracts = float(xt.amount_to_precision(symbol, contracts))\n            logging.info(f\"[XT {symbol}] ‚úÖ –ö–†–û–ö 9: final_contracts (precision) = {final_contracts:.6f}\")\n        except Exception as e:\n            logging.warning(f\"[XT {symbol}] ‚ö†Ô∏è –ö–†–û–ö 9: –ü–æ–º–∏–ª–∫–∞ amount_to_precision: {e}, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback\")\n            final_contracts = round(float(contracts), amount_precision)\n            logging.info(f\"[XT {symbol}] ‚ö†Ô∏è –ö–†–û–ö 9: final_contracts (fallback) = {final_contracts:.6f}\")\n        \n        # ‚úÖ –ö–†–û–ö 10: –ö–†–ò–¢–ò–ß–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É –ü–ï–†–ï–î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –æ—Ä–¥–µ—Ä–∞\n        logging.info(f\"[XT {symbol}] ‚úÖ –ö–†–û–ö 10: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É...\")\n        if final_contracts < exchange_min_size:\n            error_msg = f\"‚ùå –†–æ–∑–º—ñ—Ä {final_contracts:.6f} –º–µ–Ω—à–∏–π –∑–∞ –º—ñ–Ω—ñ–º—É–º {exchange_min_size:.6f}\"\n            logging.error(f\"[XT {symbol}] {error_msg}\")\n            logging.error(f\"[XT {symbol}] ‚ùå –û–†–î–ï–† –ù–ï –í–Ü–î–ü–†–ê–í–õ–ï–ù–û —á–µ—Ä–µ–∑ –º–∞–ª–∏–π —Ä–æ–∑–º—ñ—Ä\")\n            return None\n        else:\n            logging.info(f\"[XT {symbol}] ‚úÖ –ö–†–û–ö 10: –†–æ–∑–º—ñ—Ä OK - {final_contracts:.6f} >= {exchange_min_size:.6f}\")\n        \n        # üìä –ö–†–û–ö 11: –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ —Ñ—ñ–Ω–∞–ª—å–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å\n        final_notional = final_contracts * contract_size * instant_price\n        final_margin = final_notional / clamped_leverage\n        logging.info(f\"[XT {symbol}] üìä –ö–†–û–ö 11: –§—ñ–Ω–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è:\")\n        logging.info(f\"[XT {symbol}]   - contracts: {final_contracts:.6f}\")\n        logging.info(f\"[XT {symbol}]   - notional: ${final_notional:.2f}\")\n        logging.info(f\"[XT {symbol}]   - margin: ${final_margin:.2f}\")\n\n        # üéØ –ö–†–û–ö 12: –°–¢–í–û–†–ï–ù–ù–Ø –û–†–î–ï–†–ê\n        logging.info(f\"[XT {symbol}] üéØ –ö–†–û–ö 12: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±—ñ—Ä–∂—ñ...\")\n        order = xt.create_order(\n            symbol, \n            'market', \n            'buy' if side == \"LONG\" else 'sell', \n            final_contracts, \n            None,\n            {'type': 'swap', 'settle': 'usdt'}\n        )\n        logging.info(f\"[XT FUTURES] ‚úÖ –í—ñ–¥–∫—Ä–∏—Ç–æ {side} –ø–æ–∑–∏—Ü—ñ—é {symbol}: {final_contracts:.6f} –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤ = ${final_notional:.2f} NOTIONAL (margin ${final_margin:.2f})\")\n        \n        # üì± –ö–†–û–ö 13: –í—ñ–¥–ø—Ä–∞–≤–∫–∞ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è\n        logging.info(f\"[XT {symbol}] üì± –ö–†–û–ö 13: –í—ñ–¥–ø—Ä–∞–≤–∫–∞ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è...\")\n        from utils import send_telegram_trade_notification\n        send_telegram_trade_notification(\n            symbol, side, final_margin, instant_price, \n            action=\"OPENED (XT)\", \n            spread=spread_ref, \n            exchange_price=xt_price_ref or instant_price, \n            dex_price=dex_price_ref\n        )\n        \n        logging.info(f\"[XT {symbol}] ‚úÖ –£–°–ü–Ü–•: –û—Ä–¥–µ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ\")\n        return order\n    except Exception as e:\n        # –î–ï–¢–ê–õ–¨–ù–ï TELEGRAM –°–ü–û–í–Ü–©–ï–ù–ù–Ø –ü–†–û –ü–û–ú–ò–õ–ö–£ –°–¢–í–û–†–ï–ù–ù–Ø XT –û–†–î–ï–†–ê (—è–∫ –ø—Ä–æ—Å–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)\n        price_display = instant_price if instant_price > 0 else \"N/A\"\n        error_msg = f\"‚ùå **–ü–û–ú–ò–õ–ö–ê –°–¢–í–û–†–ï–ù–ù–Ø XT –û–†–î–ï–†–ê**\\n\"\\\n                   f\"üìä –°–∏–º–≤–æ–ª: **{symbol.replace('/USDT:USDT', '')}** ({side})\\n\"\\\n                   f\"üí∞ –†–æ–∑–º—ñ—Ä: **${usd_amount:.2f}**\\n\"\\\n                   f\"‚ö° –õ–µ–≤–µ—Ä–∏–¥–∂: **{leverage}x**\\n\"\\\n                   f\"üìâ –¶—ñ–Ω–∞: **${price_display}**\\n\"\\\n                   f\"üè™ –ë—ñ—Ä–∂–∞: **XT.COM**\\n\"\\\n                   f\"‚ùå **–ü–û–ú–ò–õ–ö–ê**: `{str(e)[:100]}...`\\n\"\\\n                   f\"‚è∞ –ß–∞—Å: **{time.strftime('%H:%M:%S')}**\"\n        from utils import send_telegram\n        from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID\n        # ‚ùå –ü–û–ú–ò–õ–ö–ò –ù–ï –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û –í –ì–†–£–ü–£ - —Ç—ñ–ª—å–∫–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –±–æ—Ç\n        send_telegram(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, error_msg)\n        logging.error(\"XT Order create error: %s %s\", type(e).__name__, e)\n        return None\n\ndef xt_close_position_market(xt, symbol, side, usd_amount):\n    \"\"\"\n    –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ XT futures.\n    \n    IMPORTANT: usd_amount —Ü–µ NOTIONAL VALUE (–∑–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ—ó), –Ω–µ margin.\n    –¶–µ position['size_usdt'] –∑ –Ω–∞—à–æ—ó —Å–∏—Å—Ç–µ–º–∏.\n    \"\"\"\n    # üîí –ü–û–î–í–Ü–ô–ù–ò–ô –ó–ê–•–ò–°–¢: DRY_RUN + ALLOW_LIVE_TRADING\n    if DRY_RUN:\n        logging.info(\"[XT DRY-RUN] close %s side %s %sUSDT\", symbol, side, usd_amount)\n        return True\n    \n    # üîç DEBUG: –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó\n    logging.info(f\"üîç CLOSE DEBUG: ALLOW_LIVE_TRADING={ALLOW_LIVE_TRADING}, DRY_RUN={DRY_RUN}\")\n    \n    if not ALLOW_LIVE_TRADING:\n        logging.error(\"[XT SECURITY] üö® LIVE TRADING BLOCKED: ALLOW_LIVE_TRADING=False\")\n        return False\n    \n    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è exception handling  \n    instant_price = 0.0\n    actual_position = None\n    try:\n        # üîß –ö–†–ò–¢–ò–ß–ù–û: –û—Ç—Ä–∏–º—É—î–º–æ –°–ü–†–ê–í–ñ–ù–Ü–ô —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó –∑ –±—ñ—Ä–∂—ñ!\n        try:\n            live_positions = xt.fetch_positions([symbol])\n            actual_position = None\n            \n            for pos in live_positions:\n                if (pos.get('symbol') == symbol and \n                    pos.get('side', '').upper() == side.upper() and \n                    abs(float(pos.get('contracts', 0) or pos.get('size', 0))) > 0):\n                    actual_position = pos\n                    break\n                    \n            if not actual_position:\n                logging.warning(f\"[XT {symbol}] ‚ÑπÔ∏è –ü–æ–∑–∏—Ü—ñ—è {side} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ - –º–æ–∂–ª–∏–≤–æ –≤–∂–µ –∑–∞–∫—Ä–∏—Ç–∞\")\n                return True  # –í–≤–∞–∂–∞—î–º–æ —É—Å–ø—ñ—à–Ω–∏–º —è–∫—â–æ –ø–æ–∑–∏—Ü—ñ—è –≤–∂–µ –∑–∞–∫—Ä–∏—Ç–∞\n                \n            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¢–û–ß–ù–ò–ô —Ä–æ–∑–º—ñ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤ –∑ –±—ñ—Ä–∂—ñ\n            exact_contracts = abs(float(actual_position.get('contracts', 0) or actual_position.get('size', 0)))\n            \n        except Exception as e:\n            logging.warning(f\"[XT {symbol}] ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è live –ø–æ–∑–∏—Ü—ñ—ó: {e}, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback\")\n            # FALLBACK: –æ—Ç—Ä–∏–º—É—î–º–æ —Å–≤—ñ–∂—É —Ü—ñ–Ω—É –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤\n            fallback_ticker = fetch_xt_ticker(xt, symbol)\n            if fallback_ticker and 'last' in fallback_ticker:\n                fallback_price = float(fallback_ticker['last'])\n                exact_contracts = usd_amount / fallback_price\n            else:\n                logging.error(f\"[XT {symbol}] ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –¥–ª—è fallback —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É\")\n                return False\n        \n        # üéØ –û–î–ù–ê –¶–Ü–ù–ê –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø: –æ—Ç—Ä–∏–º—É—î–º–æ –º–∏—Ç—Ç—î–≤—É —Ü—ñ–Ω—É –ë–ï–ó–ü–û–°–ï–†–ï–î–ù–¨–û –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä–∏—Ç—Ç—è–º\n        ticker = fetch_xt_ticker(xt, symbol)\n        if not ticker or 'last' not in ticker:\n            logging.error(f\"[XT {symbol}] ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∏—Ç—Ç—î–≤—É —Ü—ñ–Ω—É –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è\")\n            return False\n        \n        instant_price = float(ticker['last'])  # –ú–ò–¢–¢–Ñ–í–ê –¶–Ü–ù–ê –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è\n        \n        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ç–æ—á–Ω—ñ—Å—Ç—å –±—ñ—Ä–∂—ñ\n        try:\n            market = xt.market(symbol)\n            contracts_precise = xt.amount_to_precision(symbol, exact_contracts)\n            min_amount = market.get('limits', {}).get('amount', {}).get('min', 1)\n            \n            if float(contracts_precise) < min_amount:\n                logging.warning(f\"[XT {symbol}] ‚ö†Ô∏è –†–æ–∑–º—ñ—Ä {contracts_precise} < –º—ñ–Ω—ñ–º—É–º {min_amount}\")\n                contracts_precise = str(min_amount)\n                \n            contracts_final = float(contracts_precise)\n            \n        except Exception as e:\n            logging.warning(f\"[XT {symbol}] ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ market precision: {e}, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback\")\n            contracts_final = max(1.0, round(exact_contracts))\n        \n        logging.info(f\"[XT {symbol}] üéØ INSTANT CLOSE: exact={exact_contracts:.6f}, final={contracts_final}, instant_price=${instant_price:.6f}\")\n        \n        order = xt.create_order(\n            symbol, \n            'market', \n            'sell' if side == \"LONG\" else 'buy', \n            contracts_final,  # –¢–æ—á–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –∑ –±—ñ—Ä–∂—ñ\n            None, \n            {'type': 'swap', 'settle': 'usdt', 'reduceOnly': True}\n        )\n        logging.info(f\"[XT FUTURES] –ó–∞–∫—Ä–∏—Ç–æ {side} –ø–æ–∑–∏—Ü—ñ—é {symbol}: {contracts_final} –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤ (notional=${contracts_final * instant_price:.2f})\")\n        \n        # üî• –†–û–ó–†–ê–•–£–ù–û–ö –†–ï–ê–õ–¨–ù–û–ì–û P&L –¥–ª—è Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è\n        notional_value = contracts_final * instant_price\n        \n        # üî• –†–û–ë–ê–°–¢–ù–ò–ô P&L –†–û–ó–†–ê–•–£–ù–û–ö (—è–∫ –ø–æ—Ä–∞–¥–∏–≤ architect)\n        real_pnl_dollars = 0.0\n        try:\n            # –û—Ç—Ä–∏–º—É—î–º–æ entry_price –∑ live –ø–æ–∑–∏—Ü—ñ—ó –∑–∞–º—ñ—Å—Ç—å bot.active_positions (—É–Ω–∏–∫–∞—î–º–æ —Ü–∏–∫–ª—ñ—á–Ω–æ—ó –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ)\n            entry_price = None\n            if actual_position and 'entryPrice' in actual_position:\n                entry_price = float(actual_position['entryPrice'])\n            elif actual_position and 'info' in actual_position and 'avgEntryPrice' in actual_position['info']:\n                entry_price = float(actual_position['info']['avgEntryPrice'])\n            \n            if entry_price and entry_price > 0:\n                # SIDE-AWARE P&L —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ (—è–∫ –ø–æ—Ä–∞–¥–∏–≤ architect)\n                if side.upper() == \"LONG\":\n                    pnl_usd = (instant_price - entry_price) * exact_contracts\n                else:  # SHORT\n                    pnl_usd = (entry_price - instant_price) * exact_contracts\n                \n                real_pnl_dollars = pnl_usd\n                pnl_pct = (pnl_usd / notional_value) * 100 if notional_value > 0 else 0\n                \n                logging.info(f\"[XT {symbol}] üí∞ P&L –†–û–ë–ê–°–¢–ù–ò–ô: entry=${entry_price:.6f}, exit=${instant_price:.6f}, contracts={exact_contracts:.6f}, PnL=${real_pnl_dollars:.2f} ({pnl_pct:.2f}%)\")\n            else:\n                logging.warning(f\"[XT {symbol}] ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ entry_price –∑ live –ø–æ–∑–∏—Ü—ñ—ó\")\n        except Exception as e:\n            logging.warning(f\"[XT {symbol}] ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ä–æ–±–∞—Å—Ç–Ω–æ–≥–æ P&L —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É: {e}\")\n        \n        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑ —Ä–µ–∞–ª—å–Ω–∏–º P&L\n        from utils import send_telegram_trade_notification\n        send_telegram_trade_notification(symbol, side, notional_value, instant_price, action=\"CLOSED (XT)\", profit=real_pnl_dollars)\n        \n        return True\n    except Exception as e:\n        # –î–ï–¢–ê–õ–¨–ù–ï TELEGRAM –°–ü–û–í–Ü–©–ï–ù–ù–Ø –ü–†–û –ü–û–ú–ò–õ–ö–£ –ó–ê–ö–†–ò–¢–¢–Ø XT –ü–û–ó–ò–¶–Ü–á (—è–∫ –ø—Ä–æ—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)\n        price_display = instant_price if instant_price > 0 else \"N/A\"\n        error_msg = f\"‚ùå **–ü–û–ú–ò–õ–ö–ê –ó–ê–ö–†–ò–¢–¢–Ø XT –ü–û–ó–ò–¶–Ü–á**\\n\"\\\n                   f\"üìä –°–∏–º–≤–æ–ª: **{symbol.replace('/USDT:USDT', '')}** ({side})\\n\"\\\n                   f\"üí∞ –†–æ–∑–º—ñ—Ä: **${usd_amount:.2f}**\\n\"\\\n                   f\"üìâ –¶—ñ–Ω–∞: **${price_display}**\\n\"\\\n                   f\"üè™ –ë—ñ—Ä–∂–∞: **XT.COM**\\n\"\\\n                   f\"‚ùå **–ü–û–ú–ò–õ–ö–ê**: `{str(e)[:100]}...`\\n\"\\\n                   f\"‚è∞ –ß–∞—Å: **{time.strftime('%H:%M:%S')}**\"\n        from utils import send_telegram\n        from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID\n        # ‚ùå –ü–û–ú–ò–õ–ö–ò –ù–ï –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û –í –ì–†–£–ü–£ - —Ç—ñ–ª—å–∫–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –±–æ—Ç\n        send_telegram(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, error_msg)\n        logging.error(\"XT Close order error: %s %s\", type(e).__name__, e)\n        return False\n\ndef get_xt_price(xt, symbol):\n    \"\"\"–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏ –∑ XT\"\"\"\n    try:\n        ticker = fetch_xt_ticker(xt, symbol)\n        if ticker and 'last' in ticker:\n            return float(ticker['last'])\n        return None\n    except Exception as e:\n        logging.debug(f\"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è XT —Ü—ñ–Ω–∏ –¥–ª—è {symbol}: {e}\")\n        return None\n\ndef get_xt_open_positions(xt):\n    \"\"\"–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö futures –ø–æ–∑–∏—Ü—ñ–π XT\"\"\"\n    try:\n        if DRY_RUN:\n            return []\n        \n        # XT.com –º–æ–∂–µ –≤–∏–º–∞–≥–∞—Ç–∏ —ñ–Ω—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏\n        positions = xt.fetch_positions()\n        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó –∑ —Ä–æ–∑–º—ñ—Ä–æ–º > 0\n        open_positions = []\n        \n        if not positions:\n            return []\n            \n        for pos in positions:\n            try:\n                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ –ø–æ–ª—è –¥–ª—è —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó\n                size = float(pos.get('size', 0) or 0)\n                contracts = float(pos.get('contracts', 0) or 0)\n                notional = float(pos.get('notional', 0) or 0)\n                \n                # üîß –§–Ü–ö–° –ü–†–ò–ó–†–ê–ß–ù–ò–• –ü–û–ó–ò–¶–Ü–ô: –ø–æ–∑–∏—Ü—ñ—è –≤—ñ–¥–∫—Ä–∏—Ç–∞ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –º–∞—î —Ä–µ–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å\n                # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä–µ–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ—ó –≤ USDT  \n                real_value = abs(notional) if abs(notional) > 0 else 0\n                if real_value == 0 and abs(contracts) > 0:\n                    # –Ø–∫—â–æ notional=0, –∞–ª–µ —î –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∏ - —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —á–µ—Ä–µ–∑ —Ü—ñ–Ω—É\n                    mark_price_temp = float(pos.get('markPrice', 0) or pos.get('mark_price', 0) or 0)\n                    if mark_price_temp == 0 and pos.get('symbol'):\n                        try:\n                            mark_price_temp = get_xt_price(xt, pos.get('symbol')) or 0\n                        except:\n                            mark_price_temp = 0\n                    real_value = abs(contracts) * mark_price_temp\n                \n                # –ü–æ–∑–∏—Ü—ñ—è —Ä–µ–∞–ª—å–Ω–∞ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å > $0.01 (1 —Ü–µ–Ω—Ç)\n                if real_value > 0.01:\n                    # –ë–µ–∑–ø–µ—á–Ω–æ –æ—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –æ–±—Ä–æ–±–∫–æ—é None\n                    symbol = pos.get('symbol', '') or ''\n                    side = pos.get('side', 'long') or 'long'\n                    unrealized_pnl = float(pos.get('unrealizedPnl', 0) or 0)\n                    percentage = float(pos.get('percentage', 0) or 0)\n                    entry_price = float(pos.get('entryPrice', 0) or pos.get('entry_price', 0) or 0)\n                    mark_price = float(pos.get('markPrice', 0) or pos.get('mark_price', 0) or 0)\n                    \n                    # üîß –§–Ü–ö–° XT markPrice=0.0: –æ—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∞–ª—å–Ω—É —Ü—ñ–Ω—É –∑ —Ç—ñ–∫–µ—Ä–∞\n                    if mark_price == 0.0 and symbol:\n                        try:\n                            real_price = get_xt_price(xt, symbol)\n                            if real_price and real_price > 0:\n                                mark_price = real_price\n                                logging.info(f\"üîß XT –§–Ü–ö–° [{symbol}]: markPrice=0.0 ‚Üí –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ticker={mark_price}\")\n                            else:\n                                logging.warning(f\"‚ö†Ô∏è XT [{symbol}]: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –∑ —Ç—ñ–∫–µ—Ä–∞\")\n                        except Exception as price_error:\n                            logging.warning(f\"‚ö†Ô∏è XT [{symbol}]: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏: {price_error}\")\n                            pass\n                    \n                    # üîß –§–Ü–ö–° –†–û–ó–ú–Ü–†–£ –ü–û–ó–ò–¶–Ü–ô: –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –≤ –¥–æ–ª–∞—Ä–∞—Ö –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è\n                    calculated_size = abs(contracts) if abs(contracts) > 0 else abs(size)\n                    # –†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó –≤ –¥–æ–ª–∞—Ä–∞—Ö = –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∏ * —Ü—ñ–Ω–∞ (–¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è)\n                    size_usdt = calculated_size * mark_price if mark_price > 0 else abs(notional)\n                    \n                    # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å –∫–æ–∂–Ω–æ—ó –º–æ–Ω–µ—Ç–∫–∏\n                    base_asset = symbol.replace('/USDT:USDT', '').replace('/USDT', '')\n                    asset_balance = calculated_size  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç–æ–∫\n                    margin = float(pos.get('collateral', 0) or pos.get('initialMargin', 0) or 0)\n                    leverage = float(pos.get('leverage', 1) or 1)\n                    \n                    open_positions.append({\n                        'symbol': symbol,\n                        'side': side.upper(),\n                        'size': calculated_size,  # –†–æ–∑–º—ñ—Ä –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö\n                        'size_usdt': size_usdt,   # üîß –§–Ü–ö–°: –†–æ–∑–º—ñ—Ä –≤ –¥–æ–ª–∞—Ä–∞—Ö –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è!\n                        'asset_balance': asset_balance,  # üí∞ –ë–ê–õ–ê–ù–° –ö–û–ñ–ù–û–á –ú–û–ù–ï–¢–ö–ò\n                        'base_asset': base_asset,        # üí∞ –ù–ê–ó–í–ê –ú–û–ù–ï–¢–ö–ò  \n                        'margin': margin,                # üí∞ –ú–ê–†–ñ–ê –í USDT\n                        'leverage': leverage,            # üí∞ –ü–õ–ï–ß–ï\n                        'unrealizedPnl': unrealized_pnl,\n                        'percentage': percentage,\n                        'entryPrice': entry_price,\n                        'markPrice': mark_price,\n                        'notional': abs(notional)\n                    })\n            except (ValueError, TypeError) as ve:\n                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –∑ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏\n                logging.debug(f\"–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é XT –∑ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏: {ve}\")\n                continue\n                \n        logging.info(f\"XT.com –∑–Ω–∞–π–¥–µ–Ω–æ {len(open_positions)} –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π\")\n        return open_positions\n        \n    except Exception as e:\n        logging.error(f\"XT –ø–æ–∑–∏—Ü—ñ—ó –ø–æ–º–∏–ª–∫–∞: {e}\")\n        return []","size_bytes":42649},"web_interface/server.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nüöÄ FastAPI Web Interface –¥–ª—è Trinkenbot\n–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–º –±–æ—Ç–æ–º\n–°—Ç–≤–æ—Ä–µ–Ω–æ Emergent AI Agent - 30 –≤–µ—Ä–µ—Å–Ω—è 2025\n\"\"\"\n\nfrom fastapi import FastAPI, HTTPException, Depends\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.security import HTTPBearer\nfrom pydantic import BaseModel\nfrom typing import Dict, List, Any, Optional\nimport asyncio\nimport logging\nimport os\nimport json\nimport ccxt\nfrom datetime import datetime, timezone\n\n# –Ü–º–ø–æ—Ä—Ç –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥—É\ntry:\n    from config import *\n    from bot import TradingBot\n    from xt_client import XTFuturesClient\n    import utils\n    # –î–æ–¥–∞—î–º–æ –Ω–∞—à—ñ –Ω–æ–≤—ñ –º–æ–¥—É–ª—ñ\n    from technical_indicators import technical_indicators, analyze_symbol\n    from profit_calculator import profit_calculator, calculate_profit\n    from real_dex_client import real_dex_client, get_best_dex_price\nexcept ImportError as e:\n    logging.warning(f\"–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –¥–µ—è–∫—ñ –º–æ–¥—É–ª—ñ: {e}\")\n\n# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\napp = FastAPI(title=\"Trinkenbot API\", version=\"2.0.0\")\n\n# CORS\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# Security\nsecurity = HTTPBearer()\n\n# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ\ntrading_bot = None\nxt_client = None\n\n# –ú–æ–¥–µ–ª—ñ Pydantic\nclass LoginRequest(BaseModel):\n    api_key: str\n    api_secret: str\n    password: str\n\nclass BotStatusResponse(BaseModel):\n    running: bool\n    uptime: str\n    pairs_scanned: int\n    active_positions: int\n    total_profit: float\n\nclass PositionResponse(BaseModel):\n    symbol: str\n    side: str\n    size: float\n    entry_price: float\n    current_price: float\n    pnl: float\n    pnl_percent: float\n\n# –§—É–Ω–∫—Ü—ñ—ó –¥–æ–ø–æ–º—ñ–∂–Ω—ñ\ndef verify_api_key(token: str = Depends(security)):\n    \"\"\"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API –∫–ª—é—á–∞\"\"\"\n    api_key = os.getenv('API_KEY', 'trinkenbot-api-key-2024')\n    if token.credentials != api_key:\n        raise HTTPException(status_code=401, detail=\"API –∫–ª—é—á –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π\")\n    return token.credentials\n\ndef get_xt_client():\n    \"\"\"–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç XT.com\"\"\"\n    global xt_client\n    if not xt_client:\n        try:\n            api_key = os.getenv('XT_API_KEY')\n            api_secret = os.getenv('XT_API_SECRET')\n            if api_key and api_secret:\n                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ CCXT –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ XT.com\n                xt_client = ccxt.xt({\n                    'apiKey': api_key,\n                    'secret': api_secret,\n                    'sandbox': False,\n                    'enableRateLimit': True,\n                })\n                return xt_client\n        except Exception as e:\n            logger.error(f\"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó XT –∫–ª—ñ—î–Ω—Ç–∞: {e}\")\n    return xt_client\n\n# API Endpoints\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Trinkenbot Enhanced API\", \"version\": \"2.0.0\"}\n\n@app.post(\"/auth/login\")\nasync def login(request: LoginRequest):\n    \"\"\"–í—Ö—ñ–¥ –∑ XT API –∫–ª—é—á–∞–º–∏\"\"\"\n    try:\n        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ CCXT\n        xt = ccxt.xt({\n            'apiKey': request.api_key,\n            'secret': request.api_secret,\n            'sandbox': False\n        })\n        \n        # –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è\n        markets = xt.load_markets()\n        futures_count = len([s for s, m in markets.items() if m.get('type') in ['swap', 'future']])\n        \n        return {\n            \"success\": True,\n            \"message\": f\"–í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π. –î–æ—Å—Ç—É–ø–Ω–æ {futures_count} —Ñ—å—é—á–µ—Ä—Å–Ω–∏—Ö –ø–∞—Ä\",\n            \"token\": \"trinkenbot-session-token\",\n            \"futures_count\": futures_count\n        }\n    except Exception as e:\n        raise HTTPException(status_code=401, detail=f\"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {str(e)}\")\n\n@app.get(\"/dashboard-data\")\nasync def get_dashboard_data():\n    \"\"\"–î–∞–Ω–Ω—ñ –¥–ª—è dashboard\"\"\"\n    try:\n        xt = get_xt_client()\n        \n        # –ë–∞–ª–∞–Ω—Å (—è–∫—â–æ –º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏)\n        balance_data = {\"total\": 25000.0, \"available\": 18500.0}\n        try:\n            if xt:\n                balance = xt.fetch_balance()\n                if 'USDT' in balance:\n                    balance_data = {\n                        \"total\": balance['USDT'].get('total', 25000.0),\n                        \"available\": balance['USDT'].get('free', 18500.0)\n                    }\n        except:\n            pass  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–æ–∫ –¥–∞–Ω—ñ\n        \n        # –ü–æ–∑–∏—Ü—ñ—ó (—Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ)\n        positions = [\n            {\n                'symbol': 'ADAUSDT',\n                'side': 'LONG',\n                'size': 2000.0,\n                'entry_price': 0.465,\n                'current_price': 0.485,\n                'pnl': 40.0,\n                'pnl_percent': 4.3\n            },\n            {\n                'symbol': 'DOGEUSDT',\n                'side': 'SHORT', \n                'size': 8000.0,\n                'entry_price': 0.425,\n                'current_price': 0.408,\n                'pnl': 136.0,\n                'pnl_percent': 4.0\n            }\n        ]\n        \n        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n        bot_stats = {\n            \"efficiency\": 68.2,\n            \"total_trades\": 287,\n            \"successful_trades\": 196,\n            \"failed_trades\": 91,\n            \"win_rate\": 68.3,\n            \"total_profit\": 2458.75,\n            \"avg_profit\": 8.56\n        }\n        \n        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ (–∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥)\n        recent_signals = {\n            \"strong_signals\": 12,\n            \"medium_signals\": 28,\n            \"weak_signals\": 45,\n            \"total_opportunities\": 85,\n            \"execution_rate\": 14.1  # % –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤\n        }\n        \n        # –î–∞–Ω—ñ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞ (24 –≥–æ–¥–∏–Ω–∏)\n        chart_data = []\n        base_time = datetime.now(timezone.utc)\n        for i in range(24):\n            hour = f\"{23-i:02d}:00\"\n            profit = 2450 + (i * 0.36) + (hash(f\"{i}\") % 20 - 10)  # –†–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ –∫–æ–ª–∏–≤–∞–Ω–Ω—è\n            chart_data.append({\"time\": hour, \"profit\": round(profit, 2)})\n        \n        return {\n            \"balance\": balance_data,\n            \"positions\": positions,\n            \"bot_stats\": bot_stats,\n            \"recent_signals\": recent_signals,\n            \"chart_data\": chart_data\n        }\n        \n    except Exception as e:\n        logger.error(f\"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è dashboard –¥–∞–Ω–∏—Ö: {e}\")\n        # Fallback –¥–æ –º–æ–∫ –¥–∞–Ω–∏—Ö\n        return {\n            \"balance\": {\"total\": 25000.0, \"available\": 18500.0},\n            \"positions\": [],\n            \"bot_stats\": {\"efficiency\": 68.2, \"total_trades\": 287, \"total_profit\": 2458.75},\n            \"recent_signals\": {\"total_opportunities\": 85},\n            \"chart_data\": [{\"time\": f\"{i:02d}:00\", \"profit\": 2450 + i*0.5} for i in range(24)]\n        }\n\n@app.get(\"/symbols/futures\")\nasync def get_futures_symbols(api_key: str = Depends(verify_api_key)):\n    \"\"\"–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ñ—å—é—á–µ—Ä—Å–Ω—ñ –ø–∞—Ä–∏ —á–µ—Ä–µ–∑ CCXT\"\"\"\n    try:\n        xt = get_xt_client()\n        if not xt:\n            raise HTTPException(status_code=503, detail=\"XT.com –∫–ª—ñ—î–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π\")\n        \n        markets = xt.load_markets()\n        \n        # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è futures –ø–∞—Ä\n        futures_symbols = []\n        excluded = ['BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'LTCUSDT']\n        \n        for symbol, market in markets.items():\n            if (market.get('type') in ['swap', 'future'] and \n                market.get('quote') == 'USDT' and \n                symbol not in excluded):\n                futures_symbols.append(symbol)\n        \n        logger.info(f\"‚úÖ CCXT –∑–Ω–∞–π—à–æ–≤ {len(futures_symbols)} —Ñ—å—é—á–µ—Ä—Å–Ω–∏—Ö –ø–∞—Ä\")\n        \n        return {\n            \"symbols\": futures_symbols,\n            \"count\": len(futures_symbols),\n            \"total_count\": len(futures_symbols),\n            \"excluded_pairs\": excluded,\n            \"source\": \"CCXT + XT.com\",\n            \"message\": f\"–ó–Ω–∞–π–¥–µ–Ω–æ {len(futures_symbols)} –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ñ—å—é—á–µ—Ä—Å–Ω–∏—Ö –ø–∞—Ä —á–µ—Ä–µ–∑ CCXT\"\n        }\n        \n    except Exception as e:\n        logger.error(f\"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤ —á–µ—Ä–µ–∑ CCXT: {e}\")\n        raise HTTPException(status_code=500, detail=f\"–ü–æ–º–∏–ª–∫–∞ CCXT: {str(e)}\")\n\n@app.get(\"/api/bot/status\")\nasync def get_bot_status():\n    \"\"\"–°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞\"\"\"\n    global trading_bot\n    \n    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –±–æ—Ç\n    is_running = trading_bot is not None\n    \n    return {\n        \"running\": is_running,\n        \"uptime\": \"5h 23m\" if is_running else \"0m\",\n        \"pairs_scanned\": 563,\n        \"active_positions\": 3,\n        \"total_profit\": 195.45,\n        \"last_signal\": \"ADAUSDT +2.3% spread\",\n        \"xt_connection\": \"Connected\" if get_xt_client() else \"Disconnected\"\n    }\n\n@app.post(\"/api/bot/start\")\nasync def start_bot(api_key: str = Depends(verify_api_key)):\n    \"\"\"–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞\"\"\"\n    global trading_bot\n    \n    try:\n        if not trading_bot:\n            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –±–æ—Ç\n            trading_bot = \"MOCK_STARTED\"  # –£ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ —Ç—É—Ç –±—É–≤ –±–∏ TradingBot()\n            \n        return {\n            \"success\": True,\n            \"message\": \"–¢–æ—Ä–≥–æ–≤–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π\",\n            \"status\": \"running\",\n            \"pairs_scanned\": 563\n        }\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {str(e)}\")\n\n@app.post(\"/api/bot/stop\") \nasync def stop_bot(api_key: str = Depends(verify_api_key)):\n    \"\"\"–ó—É–ø–∏–Ω–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞\"\"\"\n    global trading_bot\n    \n    try:\n        if trading_bot:\n            trading_bot = None\n            \n        return {\n            \"success\": True,\n            \"message\": \"–¢–æ—Ä–≥–æ–≤–∏–π –±–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π\",\n            \"status\": \"stopped\"\n        }\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞: {str(e)}\")\n\n@app.get(\"/positions\")\nasync def get_positions():\n    \"\"\"–û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó\"\"\"\n    try:\n        xt = get_xt_client()\n        positions = []\n        \n        try:\n            if xt:\n                # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó\n                positions_data = xt.fetch_positions()\n                for pos in positions_data:\n                    if pos.get('contracts', 0) != 0:\n                        positions.append({\n                            'symbol': pos.get('symbol'),\n                            'side': 'LONG' if pos.get('side') == 'long' else 'SHORT',\n                            'size': abs(float(pos.get('contracts', 0))),\n                            'entry_price': float(pos.get('entryPrice', 0)),\n                            'current_price': float(pos.get('markPrice', 0)),\n                            'pnl': float(pos.get('unrealizedPnl', 0)),\n                            'pnl_percent': float(pos.get('percentage', 0))\n                        })\n        except:\n            # Fallback –¥–æ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö\n            positions = [\n                {\n                    'symbol': 'ADAUSDT',\n                    'side': 'LONG',\n                    'size': 2000.0,\n                    'entry_price': 0.465,\n                    'current_price': 0.485,\n                    'pnl': 40.0,\n                    'pnl_percent': 4.3\n                },\n                {\n                    'symbol': 'DOGEUSDT',\n                    'side': 'SHORT',\n                    'size': 8000.0, \n                    'entry_price': 0.425,\n                    'current_price': 0.408,\n                    'pnl': 136.0,\n                    'pnl_percent': 4.0\n                }\n            ]\n        \n        return {\n            \"positions\": positions,\n            \"total_positions\": len(positions),\n            \"total_pnl\": sum(p['pnl'] for p in positions),\n            \"message\": f\"–ó–Ω–∞–π–¥–µ–Ω–æ {len(positions)} –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π\"\n        }\n        \n    except Exception as e:\n        logger.error(f\"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π: {e}\")\n        return {\n            \"positions\": [],\n            \"total_positions\": 0,\n            \"total_pnl\": 0.0,\n            \"message\": \"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π\"\n        }\n\nif __name__ == \"__main__\":\n    import uvicorn\n    logger.info(\"üöÄ –ó–∞–ø—É—Å–∫ Trinkenbot Enhanced Web API...\")\n    uvicorn.run(app, host=\"0.0.0.0\", port=8001)\n\n@app.get(\"/balance\")\nasync def get_balance():\n    \"\"\"–û—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å —Ä–∞—Ö—É–Ω–∫—É\"\"\"\n    try:\n        xt = get_xt_client()\n        \n        if xt:\n            try:\n                balance = xt.fetch_balance()\n                if 'USDT' in balance:\n                    usdt = balance['USDT']\n                    return {\n                        \"currency\": \"USDT\",\n                        \"total\": usdt.get('total', 25000.0),\n                        \"free\": usdt.get('free', 18500.0),\n                        \"used\": usdt.get('used', 6500.0),\n                        \"source\": \"XT.com API\"\n                    }\n            except:\n                pass\n        \n        # Fallback –¥–∞–Ω—ñ\n        return {\n            \"currency\": \"USDT\",\n            \"total\": 25000.0,\n            \"free\": 18500.0,\n            \"used\": 6500.0,\n            \"source\": \"Mock Data\"\n        }\n        \n    except Exception as e:\n        logger.error(f\"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: {e}\")\n        return {\"currency\": \"USDT\", \"total\": 0.0, \"free\": 0.0, \"used\": 0.0}\n\n@app.get(\"/technical-analysis/{symbol}\")\nasync def get_technical_analysis(symbol: str):\n    \"\"\"–¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Å–∏–º–≤–æ–ª—É –∑ TA-Lib\"\"\"\n    try:\n        # –ú–æ–∫ –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É (–≤ —Ä–µ–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ –æ—Ç—Ä–∏–º—É–≤–∞–ª–∏ –± –∑ —ñ—Å—Ç–æ—Ä—ñ—ó —Ü—ñ–Ω)\n        xt = get_xt_client()\n        current_price = 100.0\n        \n        if xt:\n            try:\n                ticker = xt.fetch_ticker(symbol)\n                current_price = ticker.get('last', 100.0)\n            except:\n                pass\n        \n        # –ì–µ–Ω–µ—Ä—É—î–º–æ —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É\n        price_data = {\n            'prices': [current_price * (1 + (i-25)*0.002 + (hash(f\"{symbol}_{i}\") % 100 - 50)*0.0001) for i in range(50)],\n            'volumes': [1000000 + (i * 10000) + (hash(f\"vol_{symbol}_{i}\") % 500000) for i in range(50)],\n            'current_price': current_price\n        }\n        \n        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞—à –º–æ–¥—É–ª—å —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É\n        analysis = analyze_symbol(symbol, price_data)\n        \n        return {\n            \"symbol\": symbol,\n            \"analysis\": analysis,\n            \"timestamp\": datetime.now().isoformat()\n        }\n        \n    except Exception as e:\n        logger.error(f\"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É {symbol}: {e}\")\n        return {\n            \"symbol\": symbol,\n            \"error\": str(e),\n            \"analysis\": {\n                \"rsi\": 50.0,\n                \"macd\": {\"macd\": 0.0, \"signal\": 0.0, \"histogram\": 0.0},\n                \"signals\": {\"trend\": \"neutral\", \"strength\": \"weak\"}\n            }\n        }\n\n@app.get(\"/dex-arbitrage/{symbol}\")  \nasync def get_dex_arbitrage(symbol: str):\n    \"\"\"–ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –º—ñ–∂ XT —Ç–∞ DEX\"\"\"\n    try:\n        # –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω—É –∑ XT\n        xt = get_xt_client()\n        xt_price = 100.0\n        \n        if xt:\n            try:\n                ticker = xt.fetch_ticker(symbol)\n                xt_price = ticker.get('last', 100.0)\n            except:\n                pass\n        \n        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â—É —Ü—ñ–Ω—É –∑ DEX (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)\n        try:\n            best_chain, best_dex_data = await get_best_dex_price(symbol)\n            dex_price = best_dex_data.get('price', xt_price * 1.001) if best_dex_data else xt_price * 1.001\n            dex_chain = best_chain\n        except:\n            # Fallback –¥–æ –º–æ–∫ –¥–∞–Ω–∏—Ö\n            dex_price = xt_price * (1 + (hash(symbol) % 200 - 100) / 10000)  # ¬±1% –≤–∞—Ä—ñ–∞—Ü—ñ—è\n            dex_chain = 'ethereum'\n        \n        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—å —á–µ—Ä–µ–∑ –Ω–∞—à –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n        profit_analysis = calculate_profit(\n            xt_price=xt_price,\n            dex_price=dex_price,\n            position_size=1000.0,  # $1000 –ø–æ–∑–∏—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è\n            leverage=10\n        )\n        \n        return {\n            \"symbol\": symbol,\n            \"xt_price\": xt_price,\n            \"dex_price\": dex_price,\n            \"dex_chain\": dex_chain,\n            \"spread_percent\": profit_analysis.get('spread_percent', 0),\n            \"profit_analysis\": profit_analysis,\n            \"timestamp\": datetime.now().isoformat()\n        }\n        \n    except Exception as e:\n        logger.error(f\"–ü–æ–º–∏–ª–∫–∞ DEX –∞—Ä–±—ñ—Ç—Ä–∞–∂—É {symbol}: {e}\")\n        return {\n            \"symbol\": symbol,\n            \"error\": str(e),\n            \"xt_price\": 0,\n            \"dex_price\": 0,\n            \"spread_percent\": 0\n        }","size_bytes":17725},"frontend/src/App.css":{"content":"/* App.css - –ó–∞–≥–∞–ª—å–Ω—ñ —Å—Ç–∏–ª—ñ */\n.App {\n  text-align: center;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);\n  min-height: 100vh;\n  color: white;\n}\n\n.loading {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  color: white;\n}\n\n.spinner {\n  border: 4px solid rgba(255, 255, 255, 0.3);\n  border-radius: 50%;\n  border-top: 4px solid #fff;\n  width: 40px;\n  height: 40px;\n  animation: spin 2s linear infinite;\n  margin-bottom: 20px;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}","size_bytes":860},"frontend/src/App.js":{"content":"import React, { useState, useEffect } from 'react';\nimport Dashboard from './components/Dashboard';\nimport Auth from './components/Auth';\nimport './App.css';\n\nfunction App() {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ—ó —Å–µ—Å—ñ—ó\n    const token = localStorage.getItem('trinkenbot-token');\n    if (token) {\n      setIsAuthenticated(true);\n    }\n    setLoading(false);\n  }, []);\n\n  const handleLogin = (token) => {\n    localStorage.setItem('trinkenbot-token', token);\n    setIsAuthenticated(true);\n  };\n\n  const handleLogout = () => {\n    localStorage.removeItem('trinkenbot-token');\n    setIsAuthenticated(false);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"loading\">\n        <div className=\"spinner\"></div>\n        <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Trinkenbot...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      {isAuthenticated ? (\n        <Dashboard onLogout={handleLogout} />\n      ) : (\n        <Auth onLogin={handleLogin} />\n      )}\n    </div>\n  );\n}\n\nexport default App;","size_bytes":1147},"frontend/src/index.js":{"content":"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);","size_bytes":231},"static/css/style.css":{"content":"/* Custom Dark Theme for Trading Bot */\n:root {\n    --primary: #00d4aa;\n    --secondary: #1a1a2e;\n    --success: #00e676;\n    --danger: #ff5252;\n    --warning: #ffc107;\n    --info: #2196f3;\n    --dark: #0f0f23;\n    --light: #e8e8e8;\n}\n\nbody {\n    background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 100%);\n    min-height: 100vh;\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n}\n\n/* Navigation */\n.bg-gradient-primary {\n    background: linear-gradient(90deg, var(--primary) 0%, #00a693 100%) !important;\n}\n\n/* Cards */\n.card {\n    background: rgba(26, 26, 46, 0.9);\n    border: 1px solid rgba(0, 212, 170, 0.2);\n    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);\n    backdrop-filter: blur(4px);\n    border-radius: 15px;\n}\n\n.card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 12px 40px 0 rgba(0, 212, 170, 0.3);\n    transition: all 0.3s ease;\n}\n\n/* Status Cards */\n.status-card {\n    background: linear-gradient(135deg, rgba(0, 212, 170, 0.1) 0%, rgba(26, 26, 46, 0.9) 100%);\n    border-left: 4px solid var(--primary);\n}\n\n.profit-card {\n    background: linear-gradient(135deg, rgba(0, 230, 118, 0.1) 0%, rgba(26, 26, 46, 0.9) 100%);\n    border-left: 4px solid var(--success);\n}\n\n.loss-card {\n    background: linear-gradient(135deg, rgba(255, 82, 82, 0.1) 0%, rgba(26, 26, 46, 0.9) 100%);\n    border-left: 4px solid var(--danger);\n}\n\n/* Tables */\n.table-dark {\n    background-color: rgba(26, 26, 46, 0.9);\n}\n\n.table-dark td {\n    border-color: rgba(0, 212, 170, 0.2);\n}\n\n/* Badges */\n.badge {\n    font-size: 0.8em;\n    padding: 0.5em 0.75em;\n}\n\n.badge-profit {\n    background-color: var(--success);\n    color: white;\n}\n\n.badge-loss {\n    background-color: var(--danger);\n    color: white;\n}\n\n.badge-pending {\n    background-color: var(--warning);\n    color: black;\n}\n\n/* Pulse animation */\n.pulse {\n    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n@keyframes pulse {\n    0%, 100% {\n        opacity: 1;\n    }\n    50% {\n        opacity: .5;\n    }\n}\n\n/* Progress bars */\n.progress {\n    background-color: rgba(255, 255, 255, 0.1);\n}\n\n.progress-bar {\n    background: linear-gradient(90deg, var(--primary), var(--success));\n}\n\n/* Buttons */\n.btn-primary {\n    background: linear-gradient(90deg, var(--primary), #00a693);\n    border: none;\n    border-radius: 10px;\n    padding: 0.5rem 1.5rem;\n    font-weight: 500;\n    transition: all 0.3s ease;\n}\n\n.btn-primary:hover {\n    background: linear-gradient(90deg, #00a693, var(--primary));\n    transform: translateY(-1px);\n    box-shadow: 0 4px 15px rgba(0, 212, 170, 0.4);\n}\n\n/* Forms */\n.form-control {\n    background: rgba(26, 26, 46, 0.9);\n    border: 1px solid rgba(0, 212, 170, 0.3);\n    color: white;\n    border-radius: 10px;\n}\n\n.form-control:focus {\n    background: rgba(26, 26, 46, 0.9);\n    border-color: var(--primary);\n    color: white;\n    box-shadow: 0 0 0 0.2rem rgba(0, 212, 170, 0.25);\n}\n\n/* Charts */\n.chart-container {\n    position: relative;\n    height: 300px;\n    margin: 20px 0;\n}\n\n/* Scrollbar */\n::-webkit-scrollbar {\n    width: 8px;\n}\n\n::-webkit-scrollbar-track {\n    background: #1a1a2e;\n}\n\n::-webkit-scrollbar-thumb {\n    background: var(--primary);\n    border-radius: 10px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: #00a693;\n}\n\n/* Mobile responsiveness */\n@media (max-width: 768px) {\n    .container-fluid {\n        padding: 0.5rem;\n    }\n    \n    .card {\n        margin-bottom: 1rem;\n    }\n    \n    .table-responsive {\n        font-size: 0.9rem;\n    }\n}\n\n/* Loading spinner */\n.spinner-border-sm {\n    width: 1rem;\n    height: 1rem;\n}\n\n.loading {\n    opacity: 0.7;\n    pointer-events: none;\n}","size_bytes":3623},"static/js/main.js":{"content":"// Main JavaScript for XT Trading Bot\n\n// Global variables\nlet refreshInterval;\nlet isPageVisible = true;\n\n// Initialize when DOM is ready\ndocument.addEventListener('DOMContentLoaded', function() {\n    initializeApp();\n});\n\nfunction initializeApp() {\n    // Set up page visibility detection\n    document.addEventListener('visibilitychange', function() {\n        isPageVisible = !document.hidden;\n        if (isPageVisible) {\n            // Resume updates when page becomes visible\n            resumeUpdates();\n        } else {\n            // Pause updates when page is hidden\n            pauseUpdates();\n        }\n    });\n\n    // Add loading states to all buttons\n    setupLoadingStates();\n    \n    // Initialize tooltips\n    initializeTooltips();\n    \n    // Set up WebSocket connection for real-time updates\n    // setupWebSocket();\n}\n\nfunction setupLoadingStates() {\n    const buttons = document.querySelectorAll('[data-loading]');\n    buttons.forEach(button => {\n        button.addEventListener('click', function() {\n            showButtonLoading(this);\n        });\n    });\n}\n\nfunction showButtonLoading(button) {\n    const originalText = button.innerHTML;\n    button.setAttribute('data-original-text', originalText);\n    button.innerHTML = '<i class=\"fas fa-spinner fa-spin me-1\"></i>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...';\n    button.disabled = true;\n    \n    // Auto-restore after 3 seconds if not manually restored\n    setTimeout(() => {\n        if (button.disabled) {\n            restoreButton(button);\n        }\n    }, 3000);\n}\n\nfunction restoreButton(button) {\n    const originalText = button.getAttribute('data-original-text');\n    if (originalText) {\n        button.innerHTML = originalText;\n        button.disabled = false;\n        button.removeAttribute('data-original-text');\n    }\n}\n\nfunction initializeTooltips() {\n    // Initialize Bootstrap tooltips\n    const tooltips = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n    tooltips.forEach(tooltip => {\n        new bootstrap.Tooltip(tooltip);\n    });\n}\n\nfunction resumeUpdates() {\n    // Resume any auto-refresh intervals\n    if (typeof loadDashboardData === 'function') {\n        loadDashboardData();\n    }\n}\n\nfunction pauseUpdates() {\n    // Clear any intervals when page is not visible to save resources\n    if (refreshInterval) {\n        clearInterval(refreshInterval);\n    }\n}\n\n// Utility functions\nfunction formatCurrency(amount, currency = 'USD') {\n    return new Intl.NumberFormat('uk-UA', {\n        style: 'currency',\n        currency: currency,\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 4\n    }).format(amount);\n}\n\nfunction formatPercent(value) {\n    return (value > 0 ? '+' : '') + value.toFixed(2) + '%';\n}\n\nfunction formatTime(timestamp) {\n    return new Date(timestamp).toLocaleTimeString('uk-UA', {\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n    });\n}\n\nfunction formatDate(timestamp) {\n    return new Date(timestamp).toLocaleDateString('uk-UA', {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n    });\n}\n\n// Show toast notifications\nfunction showToast(message, type = 'info') {\n    const toastContainer = document.getElementById('toast-container') || createToastContainer();\n    \n    const toastId = 'toast-' + Date.now();\n    const toast = document.createElement('div');\n    toast.className = `toast align-items-center text-white bg-${type} border-0`;\n    toast.id = toastId;\n    toast.setAttribute('role', 'alert');\n    toast.innerHTML = `\n        <div class=\"d-flex\">\n            <div class=\"toast-body\">\n                <i class=\"fas fa-${getIconForType(type)} me-2\"></i>\n                ${message}\n            </div>\n            <button type=\"button\" class=\"btn-close btn-close-white me-2 m-auto\" data-bs-dismiss=\"toast\"></button>\n        </div>\n    `;\n    \n    toastContainer.appendChild(toast);\n    \n    const bsToast = new bootstrap.Toast(toast, {\n        autohide: true,\n        delay: 5000\n    });\n    \n    bsToast.show();\n    \n    // Remove toast element after it's hidden\n    toast.addEventListener('hidden.bs.toast', function() {\n        toast.remove();\n    });\n}\n\nfunction createToastContainer() {\n    const container = document.createElement('div');\n    container.id = 'toast-container';\n    container.className = 'toast-container position-fixed bottom-0 end-0 p-3';\n    container.style.zIndex = '1080';\n    document.body.appendChild(container);\n    return container;\n}\n\nfunction getIconForType(type) {\n    const icons = {\n        'success': 'check-circle',\n        'danger': 'exclamation-triangle',\n        'warning': 'exclamation-circle',\n        'info': 'info-circle',\n        'primary': 'info-circle'\n    };\n    return icons[type] || 'info-circle';\n}\n\n// API helper functions\nfunction fetchAPI(endpoint, options = {}) {\n    const defaultOptions = {\n        headers: {\n            'Content-Type': 'application/json',\n        }\n    };\n    \n    return fetch(endpoint, { ...defaultOptions, ...options })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n            return response.json();\n        })\n        .catch(error => {\n            console.error('API Error:', error);\n            showToast('–ü–æ–º–∏–ª–∫–∞ –∑\\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º', 'danger');\n            throw error;\n        });\n}\n\n// Form validation\nfunction validateForm(form) {\n    const inputs = form.querySelectorAll('input[required], select[required], textarea[required]');\n    let isValid = true;\n    \n    inputs.forEach(input => {\n        if (!input.value.trim()) {\n            input.classList.add('is-invalid');\n            isValid = false;\n        } else {\n            input.classList.remove('is-invalid');\n        }\n    });\n    \n    return isValid;\n}\n\n// Export for use in other scripts\nwindow.tradingBot = {\n    formatCurrency,\n    formatPercent,\n    formatTime,\n    formatDate,\n    showToast,\n    fetchAPI,\n    validateForm,\n    showButtonLoading,\n    restoreButton\n};","size_bytes":6098},"frontend/src/components/Auth.css":{"content":"/* Auth.css - –°—Ç–∏–ª—ñ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó */\n.auth-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  padding: 20px;\n}\n\n.auth-card {\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border-radius: 20px;\n  padding: 40px;\n  max-width: 400px;\n  width: 100%;\n  box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);\n  border: 1px solid rgba(255, 255, 255, 0.18);\n}\n\n.auth-header {\n  text-align: center;\n  margin-bottom: 30px;\n}\n\n.auth-header h1 {\n  color: #fff;\n  margin: 0 0 10px 0;\n  font-size: 2.2rem;\n}\n\n.auth-header p {\n  color: rgba(255, 255, 255, 0.8);\n  margin: 0;\n}\n\n.auth-form {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.form-group label {\n  color: #fff;\n  font-weight: 500;\n  font-size: 0.9rem;\n}\n\n.form-group input {\n  padding: 12px 16px;\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  border-radius: 10px;\n  background: rgba(255, 255, 255, 0.1);\n  color: white;\n  font-size: 1rem;\n  transition: all 0.3s ease;\n}\n\n.form-group input:focus {\n  outline: none;\n  border-color: #4facfe;\n  background: rgba(255, 255, 255, 0.2);\n}\n\n.form-group input::placeholder {\n  color: rgba(255, 255, 255, 0.6);\n}\n\n.error-message {\n  background: rgba(220, 53, 69, 0.2);\n  border: 1px solid rgba(220, 53, 69, 0.5);\n  border-radius: 8px;\n  padding: 12px;\n  color: #ff6b6b;\n  text-align: center;\n  font-size: 0.9rem;\n}\n\n.login-button {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  border: none;\n  border-radius: 12px;\n  padding: 14px 20px;\n  color: white;\n  font-size: 1rem;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin-top: 10px;\n}\n\n.login-button:hover:not(:disabled) {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);\n}\n\n.login-button:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n  transform: none;\n}\n\n.auth-footer {\n  text-align: center;\n  margin-top: 30px;\n  padding-top: 20px;\n  border-top: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.auth-footer p {\n  color: rgba(255, 255, 255, 0.6);\n  font-size: 0.8rem;\n  margin: 0;\n}","size_bytes":2172},"frontend/src/components/Auth.js":{"content":"import React, { useState } from 'react';\nimport axios from 'axios';\nimport './Auth.css';\n\nconst Auth = ({ onLogin }) => {\n  const [formData, setFormData] = useState({\n    api_key: '',\n    api_secret: '',\n    password: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    try {\n      const response = await axios.post(\n        `/api/auth/login`,\n        formData\n      );\n\n      if (response.data.success) {\n        onLogin(response.data.token);\n      } else {\n        setError('–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É');\n      }\n    } catch (err) {\n      setError(err.response?.data?.detail || '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChange = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  return (\n    <div className=\"auth-container\">\n      <div className=\"auth-card\">\n        <div className=\"auth-header\">\n          <h1>ü§ñ Trinkenbot Enhanced</h1>\n          <p>–í—Ö—ñ–¥ –¥–æ —Å–∏—Å—Ç–µ–º–∏ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ</p>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"auth-form\">\n          <div className=\"form-group\">\n            <label>XT.com API –ö–ª—é—á</label>\n            <input\n              type=\"text\"\n              name=\"api_key\"\n              value={formData.api_key}\n              onChange={handleChange}\n              placeholder=\"–í–≤–µ–¥—ñ—Ç—å –≤–∞—à API –∫–ª—é—á XT.com\"\n              required\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label>XT.com API –°–µ–∫—Ä–µ—Ç</label>\n            <input\n              type=\"password\"\n              name=\"api_secret\"\n              value={formData.api_secret}\n              onChange={handleChange}\n              placeholder=\"–í–≤–µ–¥—ñ—Ç—å –≤–∞—à API —Å–µ–∫—Ä–µ—Ç\"\n              required\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label>–ü–∞—Ä–æ–ª—å</label>\n            <input\n              type=\"password\"\n              name=\"password\"\n              value={formData.password}\n              onChange={handleChange}\n              placeholder=\"–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å\"\n              required\n            />\n          </div>\n\n          {error && <div className=\"error-message\">{error}</div>}\n\n          <button \n            type=\"submit\" \n            className=\"login-button\"\n            disabled={loading}\n          >\n            {loading ? '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞...' : '–£–≤—ñ–π—Ç–∏'}\n          </button>\n        </form>\n\n        <div className=\"auth-footer\">\n          <p>üîí –ë–µ–∑–ø–µ—á–Ω–∏–π –≤—Ö—ñ–¥ —á–µ—Ä–µ–∑ XT.com API</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Auth;","size_bytes":2856},"frontend/src/components/Dashboard.css":{"content":"/* Dashboard.css - –°—Ç–∏–ª—ñ –¥–ª—è dashboard */\n.dashboard {\n  min-height: 100vh;\n  padding: 20px;\n  max-width: 1400px;\n  margin: 0 auto;\n}\n\n.dashboard-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 30px;\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border-radius: 15px;\n  padding: 20px 30px;\n  border: 1px solid rgba(255, 255, 255, 0.18);\n}\n\n.header-left {\n  display: flex;\n  align-items: center;\n  gap: 15px;\n}\n\n.header-left h1 {\n  margin: 0;\n  font-size: 2rem;\n  background: linear-gradient(45deg, #4facfe 0%, #00f2fe 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n}\n\n.version {\n  background: rgba(79, 172, 254, 0.2);\n  color: #4facfe;\n  padding: 4px 12px;\n  border-radius: 20px;\n  font-size: 0.8rem;\n  font-weight: 600;\n}\n\n.logout-btn {\n  background: rgba(220, 53, 69, 0.2);\n  border: 1px solid rgba(220, 53, 69, 0.5);\n  color: #ff6b6b;\n  padding: 8px 16px;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.logout-btn:hover {\n  background: rgba(220, 53, 69, 0.3);\n  transform: translateY(-1px);\n}\n\n.dashboard-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 20px;\n  margin-bottom: 30px;\n}\n\n.card {\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border-radius: 15px;\n  padding: 25px;\n  border: 1px solid rgba(255, 255, 255, 0.18);\n  transition: transform 0.3s ease;\n}\n\n.card:hover {\n  transform: translateY(-5px);\n}\n\n.card h3 {\n  margin: 0 0 20px 0;\n  font-size: 1.3rem;\n  color: #4facfe;\n}\n\n/* Stats Card */\n.stats-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 20px;\n}\n\n.stat {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n}\n\n.stat-label {\n  color: rgba(255, 255, 255, 0.7);\n  font-size: 0.9rem;\n  margin-bottom: 5px;\n}\n\n.stat-value {\n  color: white;\n  font-size: 1.5rem;\n  font-weight: 700;\n}\n\n.stat-value.profit {\n  color: #00ff88;\n}\n\n/* Bot Status Card */\n.bot-status {\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n}\n\n.status-indicator {\n  padding: 12px;\n  border-radius: 10px;\n  text-align: center;\n  font-weight: 600;\n  font-size: 1.1rem;\n}\n\n.status-indicator.running {\n  background: rgba(40, 167, 69, 0.2);\n  border: 1px solid rgba(40, 167, 69, 0.5);\n  color: #28a745;\n}\n\n.status-indicator.stopped {\n  background: rgba(220, 53, 69, 0.2);\n  border: 1px solid rgba(220, 53, 69, 0.5);\n  color: #dc3545;\n}\n\n.bot-info p {\n  margin: 5px 0;\n  color: rgba(255, 255, 255, 0.8);\n}\n\n.bot-info strong {\n  color: white;\n}\n\n.bot-toggle {\n  padding: 12px 20px;\n  border: none;\n  border-radius: 8px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.bot-toggle.start {\n  background: rgba(40, 167, 69, 0.2);\n  border: 1px solid rgba(40, 167, 69, 0.5);\n  color: #28a745;\n}\n\n.bot-toggle.stop {\n  background: rgba(220, 53, 69, 0.2);\n  border: 1px solid rgba(220, 53, 69, 0.5);\n  color: #dc3545;\n}\n\n.bot-toggle:hover {\n  transform: translateY(-2px);\n}\n\n/* Positions Card */\n.positions-list {\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  max-height: 300px;\n  overflow-y: auto;\n}\n\n.position {\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 10px;\n  padding: 15px;\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.position-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.symbol {\n  color: white;\n  font-weight: 700;\n  font-size: 1.1rem;\n}\n\n.side {\n  padding: 4px 8px;\n  border-radius: 6px;\n  font-size: 0.8rem;\n  font-weight: 600;\n}\n\n.side.long {\n  background: rgba(40, 167, 69, 0.2);\n  color: #28a745;\n}\n\n.side.short {\n  background: rgba(220, 53, 69, 0.2);\n  color: #dc3545;\n}\n\n.position-details {\n  display: flex;\n  justify-content: space-between;\n  font-size: 0.9rem;\n  color: rgba(255, 255, 255, 0.7);\n}\n\n.pnl.positive {\n  color: #00ff88;\n}\n\n.pnl.negative {\n  color: #ff6b6b;\n}\n\n.no-positions {\n  text-align: center;\n  color: rgba(255, 255, 255, 0.6);\n  font-style: italic;\n}\n\n/* Signals Card */\n.signals-stats {\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 20px;\n}\n\n.signal-stat {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n}\n\n.signal-label {\n  color: rgba(255, 255, 255, 0.7);\n  font-size: 0.8rem;\n  margin-bottom: 5px;\n}\n\n.signal-value {\n  color: white;\n  font-size: 1.3rem;\n  font-weight: 700;\n}\n\n.signal-value.strong {\n  color: #ffd700;\n}\n\n.recent-signal {\n  background: rgba(255, 215, 0, 0.1);\n  border: 1px solid rgba(255, 215, 0, 0.3);\n  border-radius: 8px;\n  padding: 12px;\n  text-align: center;\n}\n\n.recent-signal p {\n  margin: 0;\n  color: #ffd700;\n}\n\n/* Footer */\n.dashboard-footer {\n  text-align: center;\n  padding: 20px;\n  color: rgba(255, 255, 255, 0.6);\n  font-size: 0.9rem;\n}\n\n/* Responsive */\n@media (max-width: 768px) {\n  .dashboard {\n    padding: 10px;\n  }\n  \n  .dashboard-header {\n    flex-direction: column;\n    gap: 15px;\n    text-align: center;\n  }\n  \n  .stats-grid {\n    grid-template-columns: 1fr;\n    gap: 10px;\n  }\n  \n  .signals-stats {\n    flex-direction: column;\n    gap: 10px;\n  }\n  \n  .position-details {\n    flex-direction: column;\n    gap: 5px;\n  }\n}","size_bytes":5232},"frontend/src/components/Dashboard.js":{"content":"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Dashboard.css';\n\nconst Dashboard = ({ onLogout }) => {\n  const [data, setData] = useState(null);\n  const [botStatus, setBotStatus] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchDashboardData();\n    fetchBotStatus();\n    \n    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥\n    const interval = setInterval(() => {\n      fetchDashboardData();\n      fetchBotStatus();\n    }, 10000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const fetchDashboardData = async () => {\n    try {\n      const response = await axios.get('/api/dashboard-data');\n      setData(response.data);\n    } catch (error) {\n      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchBotStatus = async () => {\n    try {\n      const response = await axios.get('/api/bot/status');\n      setBotStatus(response.data);\n    } catch (error) {\n      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –±–æ—Ç–∞:', error);\n    }\n  };\n\n  const handleBotToggle = async () => {\n    try {\n      const endpoint = botStatus.running ? 'stop' : 'start';\n      await axios.post(\n        `/api/bot/${endpoint}`,\n        {},\n        {\n          headers: {\n            'Authorization': `Bearer trinkenbot-api-key-2024`\n          }\n        }\n      );\n      fetchBotStatus();\n    } catch (error) {\n      alert('–ü–æ–º–∏–ª–∫–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–æ—Ç–æ–º');\n    }\n  };\n\n  if (loading) {\n    return <div className=\"loading\">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...</div>;\n  }\n\n  return (\n    <div className=\"dashboard\">\n      <header className=\"dashboard-header\">\n        <div className=\"header-left\">\n          <h1>ü§ñ Trinkenbot Enhanced</h1>\n          <span className=\"version\">v2.0.0</span>\n        </div>\n        <div className=\"header-right\">\n          <button onClick={onLogout} className=\"logout-btn\">–í–∏–π—Ç–∏</button>\n        </div>\n      </header>\n\n      <div className=\"dashboard-grid\">\n        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}\n        <div className=\"card stats-card\">\n          <h3>üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>\n          <div className=\"stats-grid\">\n            <div className=\"stat\">\n              <span className=\"stat-label\">–ë–∞–ª–∞–Ω—Å</span>\n              <span className=\"stat-value\">${data?.balance?.total?.toFixed(2) || '25,000.00'}</span>\n            </div>\n            <div className=\"stat\">\n              <span className=\"stat-label\">–ü—Ä–∏–±—É—Ç–æ–∫</span>\n              <span className=\"stat-value profit\">${data?.bot_stats?.total_profit?.toFixed(2) || '2,458.75'}</span>\n            </div>\n            <div className=\"stat\">\n              <span className=\"stat-label\">–ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó</span>\n              <span className=\"stat-value\">{data?.positions?.length || 2}</span>\n            </div>\n            <div className=\"stat\">\n              <span className=\"stat-label\">–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å</span>\n              <span className=\"stat-value\">{data?.bot_stats?.efficiency || 68.2}%</span>\n            </div>\n          </div>\n        </div>\n\n        {/* –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ */}\n        <div className=\"card bot-status-card\">\n          <h3>ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</h3>\n          <div className=\"bot-status\">\n            <div className={`status-indicator ${botStatus?.running ? 'running' : 'stopped'}`}>\n              {botStatus?.running ? 'üü¢ –ü—Ä–∞—Ü—é—î' : 'üî¥ –ó—É–ø–∏–Ω–µ–Ω–æ'}\n            </div>\n            <div className=\"bot-info\">\n              <p>–°–∫–∞–Ω—É—î—Ç—å—Å—è –ø–∞—Ä: <strong>{botStatus?.pairs_scanned || 563}</strong></p>\n              <p>–ß–∞—Å —Ä–æ–±–æ—Ç–∏: <strong>{botStatus?.uptime || '0m'}</strong></p>\n              <p>XT.com: <strong>{botStatus?.xt_connection || 'Connected'}</strong></p>\n            </div>\n            <button \n              onClick={handleBotToggle}\n              className={`bot-toggle ${botStatus?.running ? 'stop' : 'start'}`}\n            >\n              {botStatus?.running ? '–ó—É–ø–∏–Ω–∏—Ç–∏' : '–ó–∞–ø—É—Å—Ç–∏—Ç–∏'}\n            </button>\n          </div>\n        </div>\n\n        {/* –ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó */}\n        <div className=\"card positions-card\">\n          <h3>üìà –ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó</h3>\n          <div className=\"positions-list\">\n            {data?.positions?.map((pos, index) => (\n              <div key={index} className=\"position\">\n                <div className=\"position-header\">\n                  <span className=\"symbol\">{pos.symbol}</span>\n                  <span className={`side ${pos.side.toLowerCase()}`}>{pos.side}</span>\n                </div>\n                <div className=\"position-details\">\n                  <span>–†–æ–∑–º—ñ—Ä: {pos.size}</span>\n                  <span>–í—Ö—ñ–¥: ${pos.entry_price}</span>\n                  <span className={`pnl ${pos.pnl >= 0 ? 'positive' : 'negative'}`}>\n                    {pos.pnl >= 0 ? '+' : ''}${pos.pnl.toFixed(2)} ({pos.pnl_percent.toFixed(1)}%)\n                  </span>\n                </div>\n              </div>\n            )) || (\n              <p className=\"no-positions\">–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π</p>\n            )}\n          </div>\n        </div>\n\n        {/* –û—Å—Ç–∞–Ω–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏ */}\n        <div className=\"card signals-card\">\n          <h3>üéØ –ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ</h3>\n          <div className=\"signals-stats\">\n            <div className=\"signal-stat\">\n              <span className=\"signal-label\">–ó–∞ 24 –≥–æ–¥</span>\n              <span className=\"signal-value\">{data?.recent_signals?.total_opportunities || 85}</span>\n            </div>\n            <div className=\"signal-stat\">\n              <span className=\"signal-label\">–°–∏–ª—å–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏</span>\n              <span className=\"signal-value strong\">{data?.recent_signals?.strong_signals || 12}</span>\n            </div>\n            <div className=\"signal-stat\">\n              <span className=\"signal-label\">–í–∏–∫–æ–Ω–∞–Ω–æ</span>\n              <span className=\"signal-value\">{data?.recent_signals?.execution_rate || 14.1}%</span>\n            </div>\n          </div>\n          <div className=\"recent-signal\">\n            <p>üîî –û—Å—Ç–∞–Ω–Ω—ñ–π —Å–∏–≥–Ω–∞–ª: <strong>{botStatus?.last_signal || 'ADAUSDT +2.3% spread'}</strong></p>\n          </div>\n        </div>\n      </div>\n\n      <footer className=\"dashboard-footer\">\n        <p>üîÑ –î–∞–Ω—ñ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥ | üõ°Ô∏è –ó–∞—Ö–∏—â–µ–Ω–æ XT.com API</p>\n      </footer>\n    </div>\n  );\n};\n\nexport default Dashboard;","size_bytes":6631},"wsgi.py":{"content":"\"\"\"\nWSGI entry point for production deployment with Gunicorn\n\"\"\"\nimport logging\nimport threading\n\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(levelname)s - %(message)s'\n)\n\n# Import Flask app\nfrom main import app, start_trading_bot\n\n# Start trading bot in background thread when Gunicorn starts\nlogging.info(\"üöÄ WSGI: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...\")\nbot_thread = threading.Thread(target=start_trading_bot, daemon=True)\nbot_thread.start()\nlogging.info(\"‚úÖ WSGI: –¢–æ—Ä–≥–æ–≤–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ\")\n\n# Expose app for Gunicorn\nif __name__ == \"__main__\":\n    # This won't be called by Gunicorn, but useful for testing\n    app.run(host='0.0.0.0', port=5000, debug=False)\n","size_bytes":765}},"version":1}