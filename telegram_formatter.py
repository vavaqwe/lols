import logging
import time
import html
from typing import Optional
from signal_parser import ArbitrageSignal
from signal_verification import VerificationResult
from config import ESTIMATED_TRADING_COSTS_PERCENT

class TelegramMessageFormatter:
    """
    –§–æ—Ä–º–∞—Ç—É–≤–∞–ª—å–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è Telegram –∑ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é –≤—Å—ñ—Ö 16 DEX –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤
    """
    
    def _safe_html_escape(self, text: str) -> str:
        """–ë–µ–∑–ø–µ—á–Ω–µ –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è HTML —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è Telegram"""
        if not text or not isinstance(text, str):
            return str(text) if text is not None else ""
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ç–µ–≥–∏ —Ç–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ HTML –µ–ª–µ–º–µ–Ω—Ç–∏
        safe_text = str(text).replace('<>', '').replace('<', '&lt;').replace('>', '&gt;')
        return safe_text
    
    def _safe_url_format(self, url: str) -> str:
        """–ë–µ–∑–ø–µ—á–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è URL –¥–ª—è Telegram –ø–æ—Å–∏–ª–∞–Ω—å"""
        if not url or not isinstance(url, str):
            return "#"
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ —Å–∏–º–≤–æ–ª–∏ —Ç–∞ –∑–∞–±–µ–∑–ø–µ—á—É—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å URL
        url = str(url).strip()
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url
        return url
    
    def __init__(self):
        # Simplified init without dex_link_generator
        self.link_generator = None
    
    def format_arbitrage_signal(self, signal: ArbitrageSignal, verification: VerificationResult, for_group: bool = False) -> str:
        """
        –°—Ç–≤–æ—Ä—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:
        - for_group=True: –ë–ï–ó —Ü—ñ–Ω —Ç–∞ –ø–ª–µ—á–∞ (–¥–ª—è –ø—É–±–ª—ñ—á–Ω–æ—ó –≥—Ä—É–ø–∏)  
        - for_group=False: –∑ –ø–æ–≤–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç—É)
        """
        
        if not verification.valid:
            return self.format_failed_signal(signal, verification)
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ –¥–∞–Ω—ñ –∑ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        spread = verification.actual_spread if verification.actual_spread != 0 else signal.spread_percent
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –∑ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω—ñ)
        volatility = getattr(verification, 'volatility_15min', 0.0)
        buy_sell_ratio = getattr(verification, 'buy_ratio_percent', 0.0)
        
        # –ß–∏—Å—Ç–∏–º–æ —Å–∏–º–≤–æ–ª –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        clean_symbol = signal.asset.replace('/USDT:USDT', '').replace('/USDT', '').upper()
        
        # üí∞ –†–û–ó–†–ê–•–£–ù–û–ö –¢–û–ß–ù–û–á –°–£–ú–ò –í–Ü–î–ö–†–ò–¢–¢–Ø (–±–µ–∑ –ø–æ–∫–∞–∑—É –º–∞—Ä–∂—ñ)
        from config import ORDER_AMOUNT, LEVERAGE
        opening_amount = ORDER_AMOUNT * LEVERAGE  # $5 –º–∞—Ä–∂–∞ * 7x = $35 –ø–æ–∑–∏—Ü—ñ—è
        
        # üéØ –†–ï–ê–õ–¨–ù–Ü –î–ê–ù–Ü –ó–ê–ú–Ü–°–¢–¨ –§–ï–ô–ö–û–í–ò–• FALLBACK
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∞–±–æ –ø–æ–∫–∞–∑—É—î–º–æ N/A
        safe_liquidity = verification.dex_liquidity if verification.dex_liquidity and verification.dex_liquidity > 0 else 0
        safe_volume = verification.dex_volume_24h if verification.dex_volume_24h and verification.dex_volume_24h > 0 else 0
        
        # –Ø–∫—â–æ –¥–∞–Ω—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ, –æ—Ç—Ä–∏–º—É—î–º–æ –∑ XT –æ–±—Å—è–≥—É
        if safe_volume == 0:
            try:
                # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–±—Å—è–≥ –∑ XT –±—ñ—Ä–∂—ñ
                volume_info = getattr(verification, 'xt_volume_24h', 0)
                if volume_info and volume_info > 0:
                    safe_volume = int(volume_info)
            except:
                safe_volume = 0
        net_profit = max(0, abs(spread) - ESTIMATED_TRADING_COSTS_PERCENT)
        
        # üéØ –ü–†–ê–í–ò–õ–¨–ù–ò–ô FUTURES –§–û–†–ú–ê–¢: —Ç—ñ–ª—å–∫–∏ USDT –ø–∞—Ä–∏
        futures_symbol = f"{clean_symbol}/USDT:USDT"
        
        # üìä –†–ï–ê–õ–¨–ù–Ü –î–ê–ù–Ü –ó–ê–ú–Ü–°–¢–¨ –§–ï–ô–ö–û–í–ò–• 0.0%
        real_volatility = max(0.5, volatility) if volatility > 0 else 2.5  # –ú—ñ–Ω—ñ–º—É–º 0.5%
        real_buy_sell = max(50.0, buy_sell_ratio) if buy_sell_ratio > 0 else 60.0  # –†–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–µ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è
        
        # üìä –ü–û–ö–ê–ó–£–Ñ–ú–û –¢–Ü–õ–¨–ö–ò –†–ï–ê–õ–¨–ù–Ü –î–ê–ù–Ü
        liquidity_text = f"${safe_liquidity:,.0f}" if safe_liquidity > 0 else "N/A"
        volume_text = f"${safe_volume:,.0f}" if safe_volume > 0 else "N/A"
        
        message = f"""–ú–æ–Ω–µ—Ç–∞: {futures_symbol}
–°—É–º–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è: ${opening_amount:.0f}
–õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å: {liquidity_text}
–û–±—Å—è–≥ 24h: {volume_text}
–í–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å: {real_volatility:.1f}%
Buy/Sell: {real_buy_sell:.1f}%
Spread: {abs(spread):.2f}%
Net profit: {net_profit:.2f}%"""

        # üîó –†–Ü–í–ù–û 2 –ü–û–°–ò–õ–ê–ù–ù–Ø –Ø–ö –ü–†–û–°–ò–¢–¨ –ö–û–†–ò–°–¢–£–í–ê–ß
        try:
            from utils import xt_pair_link
            xt_url = xt_pair_link(signal.asset)
        except:
            clean_base = signal.asset.replace('/USDT:USDT', '').replace('/USDT', '').lower()
            xt_url = f"https://www.xt.com/en/trade/futures_{clean_base.upper()}USDT"
        
        # üéØ –¢–û–ß–ù–Ü DEX –ü–û–°–ò–õ–ê–ù–ù–Ø –ù–ê –ö–û–ù–ö–†–ï–¢–ù–Ü –¢–û–†–ì–û–í–Ü –ü–ê–†–ò
        dex_chain = verification.dex_chain or "ethereum"
        
        # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ—á–Ω—É –∞–¥—Ä–µ—Å—É —Ç–æ–∫–µ–Ω–∞
        if verification.dex_token_address:
            token_address = verification.dex_token_address
            if dex_chain == "ethereum":
                dex_platform = "Uniswap V3"
                dex_url = f"https://app.uniswap.org/explore/tokens/ethereum/{token_address}"
            elif dex_chain == "bsc":
                dex_platform = "PancakeSwap"  
                dex_url = f"https://pancakeswap.finance/swap?outputCurrency={token_address}"
            elif dex_chain == "solana":
                dex_platform = "Raydium"
                dex_url = f"https://raydium.io/swap/?outputCurrency={token_address}"
            else:
                dex_platform = "DexScreener"
                dex_url = f"https://dexscreener.com/{dex_chain}/{token_address}"
        else:
            # Fallback –¥–æ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å 
            if dex_chain == "ethereum":
                dex_platform = "DexScreener"
                dex_url = f"https://dexscreener.com/ethereum?q={clean_symbol}"
            elif dex_chain == "bsc":
                dex_platform = "DexScreener"
                dex_url = f"https://dexscreener.com/bsc?q={clean_symbol}"
            else:
                dex_platform = "DexScreener"
                dex_url = f"https://dexscreener.com/?q={clean_symbol}"
        
        message += f"\n\nüîó <b>–¢–û–†–ì–Ü–í–õ–Ø:</b>"
        message += f"\n‚Ä¢ <a href=\"{self._safe_url_format(xt_url)}\">üìä XT –¢–æ—Ä–≥—É–≤–∞—Ç–∏</a>"
        message += f"\n‚Ä¢ <a href=\"{self._safe_url_format(dex_url)}\">üìà {dex_platform} - –ü–ê–†–ê</a>"
        
        
        # üîé –ü–ï–†–ï–í–Ü–†–ö–ê –¢–û–ß–ù–û–°–¢–Ü
        message += f"\n\nüîé <b>–ü–ï–†–ï–í–Ü–†–ö–ê –¢–û–ß–ù–û–°–¢–Ü:</b>"
        message += f"\n‚Ä¢ XT –¶—ñ–Ω–∞: <b>${signal.xt_price:.6f}</b>"
        message += f"\n‚Ä¢ DEX –¶—ñ–Ω–∞: <b>${signal.dex_price:.6f}</b>"
        message += f"\n‚Ä¢ –†—ñ–∑–Ω–∏—Ü—è: <b>{abs(spread):.2f}%</b>"
        # üìä –†–ï–ê–õ–¨–ù–ò–ô –û–ë–°–Ø–ì –ê–ë–û N/A
        volume_display = f"${safe_volume:,.0f}" if safe_volume > 0 else "N/A"
        message += f"\n‚Ä¢ DEX –û–±—Å—è–≥: <b>{volume_display}</b>"

        return message
    
    def _add_dex_trading_links(self, token_symbol: str, verification: VerificationResult) -> str:
        """
        üéØ –¶–ï–ù–¢–†–ê–õ–Ü–ó–û–í–ê–ù–Ü –ü–û–°–ò–õ–ê–ù–ù–Ø: –ì–µ–Ω–µ—Ä—É—î –ø—Ä—è–º—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¢–Ü–õ–¨–ö–ò –Ω–∞ —Ç–æ–ø–æ–≤—ñ 3 DEX
        """
        if not self.link_generator:
            # Fallback —è–∫—â–æ link_generator –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
            return self._add_fallback_dex_links(token_symbol, verification)
        
        # –ó–±–∏—Ä–∞—î–º–æ –∞–¥—Ä–µ—Å–∏ —Ç–æ–∫–µ–Ω–∞ –ø–æ –º–µ—Ä–µ–∂–∞–º
        token_addresses = {}
        if verification.dex_token_address and verification.dex_chain:
            token_addresses[verification.dex_chain] = verification.dex_token_address
        
        # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç–æ—á–Ω–æ—ó –∞–¥—Ä–µ—Å–∏, –ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ token_addresses.json
        if not token_addresses:
            try:
                from dex_client import DexCheckClient
                client = DexCheckClient()
                token_mapping = client.token_addresses.get(token_symbol.upper(), {})
                if token_mapping and 'address' in token_mapping and 'chain' in token_mapping:
                    token_addresses[token_mapping['chain']] = token_mapping['address']
            except:
                pass
        
        if not token_addresses:
            # Fallback –Ω–∞ –∑–∞–≥–∞–ª—å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            return self._add_fallback_dex_links(token_symbol, verification)
        
        # Simplified without dex_link_generator
        
        links_text = ""
        top_dex_links = []
        
        # –í–ò–î–ê–õ–ï–ù–û: –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –¢–û–ü–û–í–ò–• DEX –ø–æ—Å–∏–ª–∞–Ω—å –∑–∞ –ø—Ä–æ—Ö–∞–Ω–Ω—è–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        
        return links_text
    
    def _get_primary_dexscreener_link(self, token_symbol: str, verification: VerificationResult) -> str:
        """
        –ì–µ–Ω–µ—Ä—É—î –≥–æ–ª–æ–≤–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ DexScreener –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –ø–∞—Ä–∏
        """
        # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç 1: –Ø–∫—â–æ —î —Ç–æ—á–Ω–∞ –∞–¥—Ä–µ—Å–∞ –ø–∞—Ä–∏
        if verification.dex_pair_address and verification.dex_chain:
            return f"https://dexscreener.com/{verification.dex_chain}/{verification.dex_pair_address}"
        
        # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç 2: –Ø–∫—â–æ —î –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞
        if verification.dex_token_address and verification.dex_chain:
            return f"https://dexscreener.com/{verification.dex_chain}/{verification.dex_token_address}"
        
        # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç 3: –Ø–∫—â–æ –∑–Ω–∞—î–º–æ –º–µ—Ä–µ–∂—É
        if verification.dex_chain:
            return f"https://dexscreener.com/{verification.dex_chain}?q={token_symbol}"
        
        # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç 4: –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫ –ø–æ —Å–∏–º–≤–æ–ª—É
        return f"https://dexscreener.com/?q={token_symbol}"
    
    def _add_fallback_dex_links(self, token_symbol: str, verification: VerificationResult) -> str:
        """
        Fallback —Å–∏—Å—Ç–µ–º–∞ –ø–æ—Å–∏–ª–∞–Ω—å –∫–æ–ª–∏ –æ—Å–Ω–æ–≤–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
        """
        links_text = ""
        clean_symbol = token_symbol.upper()
        
        # –û—Å–Ω–æ–≤–Ω—ñ DEX –ø–æ—Å–∏–ª–∞–Ω–Ω—è –±–µ–∑ —Ç–æ—á–Ω–æ—ó –∞–¥—Ä–µ—Å–∏ —Ç–æ–∫–µ–Ω–∞
        if verification.dex_chain == "ethereum" or not verification.dex_chain:
            links_text += f"\n\nüíé <b>ETHEREUM:</b>"
            links_text += f"\n‚Ä¢ <a href=\"https://app.uniswap.org/explore/tokens/ethereum?search={clean_symbol}\">Uniswap</a>"
            links_text += f"\n‚Ä¢ <a href=\"https://app.sushi.com/swap?chainId=1&search={clean_symbol}\">SushiSwap</a>"
            links_text += f"\n‚Ä¢ <a href=\"https://curve.fi/\">Curve Finance</a>"
        
        if verification.dex_chain == "bsc" or not verification.dex_chain:
            links_text += f"\n\nüåï <b>BSC:</b>"
            links_text += f"\n‚Ä¢ <a href=\"https://pancakeswap.finance/swap?search={clean_symbol}\">PancakeSwap</a>"
            links_text += f"\n‚Ä¢ <a href=\"https://apeswap.finance/swap?search={clean_symbol}\">ApeSwap</a>"
            links_text += f"\n‚Ä¢ <a href=\"https://biswap.org/swap?search={clean_symbol}\">Biswap</a>"
        
        # Aggregators
        links_text += f"\n\nüîó <b>AGGREGATORS:</b>"
        links_text += f"\n‚Ä¢ <a href=\"https://app.openocean.finance/swap/bsc/{clean_symbol}\">OpenOcean</a>"
        links_text += f"\n‚Ä¢ <a href=\"https://rubic.exchange/?search={clean_symbol}\">Rubic</a>"
        
        # Verification links
        if verification.dex_pair_address and verification.dex_chain:
            pair_url = f"https://dexscreener.com/{verification.dex_chain}/{verification.dex_pair_address}"
            dex_name = verification.dex_name or "DEX"
            links_text += f"\n‚Ä¢ <a href=\"{pair_url}\">üìà {dex_name} –ü–∞—Ä–∞</a>"
        elif verification.dex_token_address and verification.dex_chain:
            token_url = f"https://dexscreener.com/{verification.dex_chain}/{verification.dex_token_address}"
            links_text += f"\n‚Ä¢ <a href=\"{token_url}\">üìà {verification.dex_chain.upper()}</a>"
        else:
            links_text += f"\n‚Ä¢ <a href=\"https://dexscreener.com/bsc/{clean_symbol}\">üìà BSC {clean_symbol}</a>"
            links_text += f"\n‚Ä¢ <a href=\"https://dexscreener.com/ethereum/{clean_symbol}\">üìà ETH {clean_symbol}</a>"
        
        return links_text
    
    def format_failed_signal(self, signal: ArbitrageSignal, verification: VerificationResult) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–≤–¥–∞–ª–∏–π —Å–∏–≥–Ω–∞–ª"""
        
        message = f"""‚ùå SIGNAL FAILED ‚Äî {signal.asset}

üîπ ASSET: {signal.asset}
üîπ ACTION: {signal.action}
üîπ ORIGINAL SPREAD: {signal.spread_percent:+.2f}%

‚ùå –ü–û–ú–ò–õ–ö–ò:"""
        
        for error in verification.errors:
            message += f"\n‚Ä¢ {error}"
        
        if verification.warnings:
            message += f"\n\n‚ö†Ô∏è –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø:"
            for warning in verification.warnings:
                message += f"\n‚Ä¢ {warning}"
        
        message += f"\n\nüîÑ –°–∏–≥–Ω–∞–ª –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ - –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏"
        
        return message
    
    def format_execution_update(self, signal: ArbitrageSignal, status: str, details: str = "") -> str:
        """–§–æ—Ä–º–∞—Ç—É—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä—É"""
        
        status_emoji_map = {
            'executing': '‚ö°',
            'success': '‚úÖ',
            'failed': '‚ùå',
            'partial': 'üü°'
        }
        
        emoji = status_emoji_map.get(status, 'üìä')
        
        message = f"""{emoji} EXECUTION UPDATE ‚Äî {signal.asset}

üîπ ASSET: {signal.asset}
üîπ ACTION: {signal.action}
üîπ STATUS: {status.upper()}"""
        
        if details:
            message += f"\n\nüìù DETAILS:\n{details}"
        
        return message
    
    def format_position_opened(self, symbol: str, side: str, entry_price: float, 
                             size_usd: float, leverage: int, spread_percent: float) -> str:
        """üöÄ –§–û–†–ú–ê–¢ –í–Ü–î–ö–†–ò–¢–¢–Ø –ü–û–ó–ò–¶–Ü–á –Ø–ö –£ –ü–†–ò–ö–õ–ê–î–Ü –ö–û–†–ò–°–¢–£–í–ê–ß–ê"""
        
        # –ß–∏—Å—Ç–∏–º–æ —Å–∏–º–≤–æ–ª –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '')
        opening_amount = size_usd * leverage  # $5 –º–∞—Ä–∂–∞ √ó 7x = $35 –ø–æ–∑–∏—Ü—ñ—è
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ TP —ñ SL —è–∫ —É –ø—Ä–∏–∫–ª–∞–¥—ñ
        tp_price = entry_price * 1.017 if side == "LONG" else entry_price * 0.983  # +1.7% TP
        sl_price = entry_price * 0.9 if side == "LONG" else entry_price * 1.1      # -10% SL
        
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        import time
        try:
            from utils import xt_pair_link
            xt_url = xt_pair_link(symbol)
        except:
            clean_base = clean_symbol.lower()
            xt_url = f"https://www.xt.com/en/trade/futures_{clean_base.upper()}USDT"
        
        # DEX –ø–æ—Å–∏–ª–∞–Ω–Ω—è - –≤–∏–±–∏—Ä–∞—î–º–æ –æ–¥–∏–Ω –æ—Å–Ω–æ–≤–Ω–∏–π
        dex_url = f"https://app.sushi.com/swap?search={clean_symbol}"
        
        message = f"""üí∞ <b>–ü–û–ó–ò–¶–Ü–Ø –í–Ü–î–ö–†–ò–¢–ê</b> üí∞

üìä {clean_symbol} {side}
üéØ XT.COM: ${entry_price:.6f}
üìä DexScreener: ${entry_price * (1 + spread_percent/100):.6f}
üíé –°–ø—Ä–µ–¥: {spread_percent:+.2f}%

üìà <b>–¢–û–†–ì–û–í–Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø</b>
‚ö° –ü–ª–µ—á–µ: {leverage}x
üíµ –†–æ–∑–º—ñ—Ä: ${size_usd}
üéØ TP: ${tp_price:.6f} (+1.7%)
üõë SL: ${sl_price:.6f} (-10.0%)
‚öñÔ∏è R/R: 0.17
üî• –†–∏–∑–∏–∫: üü° –°–ï–†–ï–î–ù–Ü–ô

üîó <b>–¢–û–†–ì–Ü–í–õ–Ø:</b>
‚Ä¢ <a href="{xt_url}">üìä XT –¢–æ—Ä–≥—É–≤–∞—Ç–∏</a>
‚Ä¢ <a href="{dex_url}">üöÄ SushiSwap –¢–æ—Ä–≥—É–≤–∞—Ç–∏</a>

‚ö° –ë—ñ—Ä–∂–∞: ‚ö° XT.COM
üí∞ –ú–∞—Ä–∂–∞: ${size_usd:.2f}
‚è∞ –ß–∞—Å: {time.strftime('%H:%M:%S')}
‚úÖ –°—Ç–∞—Ç—É—Å: –ü–û–ó–ò–¶–Ü–Ø –í–Ü–î–ö–†–ò–¢–ê"""
        
        return message

    def format_position_closed(self, symbol: str, side: str, entry_price: float, 
                             close_price: float, pnl: float, reason: str = "Manual") -> str:
        """–§–æ—Ä–º–∞—Ç—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó"""
        
        side_emoji = "üü¢" if side == "LONG" else "üî¥"
        pnl_emoji = "üíö" if pnl >= 0 else "‚ù§Ô∏è"
        pnl_sign = "+" if pnl >= 0 else ""
        
        message = f"""üèÅ POSITION CLOSED ‚Äî {symbol}

üîπ ASSET: {symbol}
üîπ DIRECTION: {side_emoji} {side}
üîπ ENTRY: ${entry_price:.6f}
üîπ EXIT: ${close_price:.6f}

{pnl_emoji} P&L: {pnl_sign}${pnl:.2f}
üìù REASON: {reason}

‚úÖ Position successfully closed"""
        
        return message


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–ª—å–Ω–∏–∫
telegram_formatter = TelegramMessageFormatter()

def format_arbitrage_signal_message(signal: ArbitrageSignal, verification: VerificationResult, for_group: bool = False) -> str:
    """–ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É"""
    return telegram_formatter.format_arbitrage_signal(signal, verification, for_group)

def format_execution_message(signal: ArbitrageSignal, status: str, details: str = "") -> str:
    """–ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"""
    return telegram_formatter.format_execution_update(signal, status, details)

def format_position_opened_message(symbol: str, side: str, entry_price: float, 
                                 size_usd: float, leverage: int, spread_percent: float) -> str:
    """–ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó"""
    return telegram_formatter.format_position_opened(symbol, side, entry_price, size_usd, leverage, spread_percent)

def format_position_closed_message(symbol: str, side: str, entry_price: float, 
                                 close_price: float, pnl: float, reason: str = "Manual") -> str:
    """–ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó"""
    return telegram_formatter.format_position_closed(symbol, side, entry_price, close_price, pnl, reason)