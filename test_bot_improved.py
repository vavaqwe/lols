#!/usr/bin/env python3
"""–¢–µ—Å—Ç –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –±–æ—Ç–∞ –∑ async —Ç–∞ reconnect"""
import os
import sys
import time
import logging

# ENV
os.environ['ADMIN_PASSWORD'] = 'Admin123'
os.environ['XT_API_KEY'] = 'edbae47c-5dd1-4e17-85a5-4ddbf9a0198d'
os.environ['XT_API_SECRET'] = 'dc15cbd32da51249b35326dcc0bafb9045771fa8'
os.environ['TELEGRAM_BOT_TOKEN'] = '7198851873:AAFkiFUMNpdt8o7_jb_ZYGfHH_nZUVU_9Lw'
os.environ['TELEGRAM_CHAT_ID'] = '7820995179'
os.environ['ALLOW_LIVE_TRADING'] = 'True'

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def test_blockchain_client():
    """–¢–µ—Å—Ç blockchain –∫–ª—ñ—î–Ω—Ç–∞ –∑ reconnect"""
    try:
        from blockchain_pools_client import BlockchainPoolsClient
        
        client = BlockchainPoolsClient()
        
        # –¢–µ—Å—Ç heartbeat
        logging.info("üß™ –¢–µ—Å—Ç heartbeat...")
        client._log_heartbeat()
        
        # –¢–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è
        logging.info("üß™ –¢–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è Ethereum...")
        result = client._ensure_connection('ethereum')
        logging.info(f"   Ethereum: {result}")
        
        logging.info("üß™ –¢–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è BSC...")
        result = client._ensure_connection('bsc')
        logging.info(f"   BSC: {result}")
        
        # –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏
        logging.info("üß™ –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ BTC...")
        price = client.get_token_price('BTC')
        if price:
            logging.info(f"   ‚úÖ BTC: ${price:.2f}")
        else:
            logging.warning("   ‚ö†Ô∏è BTC —Ü—ñ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–º–æ–∂–ª–∏–≤–æ Web3 –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = client.get_stats()
        logging.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['total_requests']} –∑–∞–ø–∏—Ç—ñ–≤, {stats['success_rate_percent']:.1f}% —É—Å–ø—ñ—Ö")
        
        return True
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ blockchain client: {e}")
        return False

def test_async_wrapper():
    """–¢–µ—Å—Ç async wrapper"""
    try:
        import asyncio
        from dex_async import batch_fetch_spreads
        from dex_client import dex_client
        from xt_client import create_xt
        
        logging.info("üß™ –¢–µ—Å—Ç async wrapper...")
        
        xt = create_xt()
        if not xt:
            logging.warning("   ‚ö†Ô∏è XT client –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ async —Ç–µ—Å—Ç")
            return True
        
        # –¢–µ—Å—Ç –∑ 3 —Å–∏–º–≤–æ–ª–∞–º–∏
        symbols = ['BTC/USDT:USDT', 'ETH/USDT:USDT', 'BNB/USDT:USDT']
        
        async def run_test():
            start = time.time()
            results = await batch_fetch_spreads(symbols, dex_client, xt)
            duration = time.time() - start
            
            logging.info(f"   ‚ö° –û—Ç—Ä–∏–º–∞–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑–∞ {duration:.2f}—Å")
            for r in results:
                logging.info(f"   {r['symbol']}: —Å–ø—Ä–µ–¥ {r['spread_abs']:.2f}%")
            
            return len(results) > 0
        
        result = asyncio.run(run_test())
        return result
        
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ async wrapper: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_config():
    """–¢–µ—Å—Ç –Ω–æ–≤–∏—Ö config –∑–Ω–∞—á–µ–Ω—å"""
    try:
        import config
        
        logging.info("üß™ –¢–µ—Å—Ç config...")
        logging.info(f"   MIN_SPREAD: {config.MIN_SPREAD}% (–º–∞—î –±—É—Ç–∏ 2.0%)")
        logging.info(f"   MAX_SPREAD: {config.MAX_SPREAD}% (–º–∞—î –±—É—Ç–∏ 3.0%)")
        logging.info(f"   MIN_NET_PROFIT: {config.MIN_NET_PROFIT_PERCENT}% (–º–∞—î –±—É—Ç–∏ 1.4%)")
        
        assert config.MIN_SPREAD == 2.0, f"MIN_SPREAD –º–∞—î –±—É—Ç–∏ 2.0%, –∞ –Ω–µ {config.MIN_SPREAD}%"
        assert config.MAX_SPREAD == 3.0, f"MAX_SPREAD –º–∞—î –±—É—Ç–∏ 3.0%, –∞ –Ω–µ {config.MAX_SPREAD}%"
        
        logging.info("   ‚úÖ Config –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π")
        return True
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ config: {e}")
        return False

if __name__ == '__main__':
    logging.info("üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –±–æ—Ç–∞...")
    logging.info("=" * 60)
    
    results = []
    
    # –¢–µ—Å—Ç 1: Config
    logging.info("\nüìã –¢–ï–°–¢ 1: Config (spread 2-3%)")
    results.append(('Config', test_config()))
    
    # –¢–µ—Å—Ç 2: Blockchain client
    logging.info("\nüîó –¢–ï–°–¢ 2: Blockchain Client (reconnect + heartbeat)")
    results.append(('Blockchain', test_blockchain_client()))
    
    # –¢–µ—Å—Ç 3: Async wrapper
    logging.info("\n‚ö° –¢–ï–°–¢ 3: Async Wrapper (–ø–∞—Ä–∞–ª–µ–ª—å–Ω—ñ –∑–∞–ø–∏—Ç–∏)")
    results.append(('Async', test_async_wrapper()))
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏
    logging.info("\n" + "=" * 60)
    logging.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò:")
    for name, success in results:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        logging.info(f"   {status} {name}")
    
    all_passed = all(r[1] for r in results)
    if all_passed:
        logging.info("\nüéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–®–õ–ò!")
        sys.exit(0)
    else:
        logging.error("\n‚ùå –î–ï–Ø–ö–Ü –¢–ï–°–¢–ò –ù–ï –ü–†–û–ô–®–õ–ò")
        sys.exit(1)
