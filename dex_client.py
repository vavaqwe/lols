"""
DexCheck Client - —Å–∏—Å—Ç–µ–º–∞ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –∑ –ø–æ—Ç—É–∂–Ω–∏–º DexCheck API
–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω —Ç–æ–∫–µ–Ω—ñ–≤ —á–µ—Ä–µ–∑ DexCheck API - real-time DeFi analytics
"""

import requests
import logging
import json
import time
import os
from typing import Dict, Optional, List

# üöÄ –ù–û–í–ò–ô –Ü–ú–ü–û–†–¢: –ü—Ä—è–º–∏–π –±–ª–æ–∫—á–µ–π–Ω –∫–ª—ñ—î–Ω—Ç –∑–∞–º—ñ—Å—Ç—å –ø–ª–∞—Ç–Ω–æ–≥–æ DexScreener
try:
    from blockchain_pools_client import blockchain_client, get_blockchain_token_data
    BLOCKCHAIN_AVAILABLE = True
    logging.info("‚úÖ –ü—Ä—è–º–∏–π –±–ª–æ–∫—á–µ–π–Ω –∫–ª—ñ—î–Ω—Ç —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ (Ethereum/BSC/Solana)")
except ImportError as e:
    BLOCKCHAIN_AVAILABLE = False
    blockchain_client = None
    get_blockchain_token_data = None
    logging.warning(f"‚ö†Ô∏è –ë–ª–æ–∫—á–µ–π–Ω –∫–ª—ñ—î–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")

class DexCheckClient:
    """
    üöÄ DUAL-PROVIDER –°–ò–°–¢–ï–ú–ê: DexCheck Pro + DexScreener Backup
    –ü–æ—Ç—É–∂–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é!
    """
    
    def __init__(self):
        # –û–°–ù–û–í–ù–ò–ô: CoinGecko API (–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π, –Ω–∞–¥—ñ–π–Ω–∏–π)
        self.coingecko_base_url = "https://api.coingecko.com/api/v3"
        
        # BACKUP: DexScreener (—Ä–µ–∑–µ—Ä–≤–Ω–∏–π)
        self.dexscreener_base_url = "https://api.dexscreener.com/latest/dex"
        
        # üîß –ü–û–õ–Ü–ü–®–ï–ù–ê HTTP –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è (–±—ñ–ª—å—à–∏–π pool –¥–ª—è concurrency)
        from requests.adapters import HTTPAdapter
        adapter = HTTPAdapter(pool_maxsize=100, pool_connections=50, pool_block=False, max_retries=3)
        
        self.coingecko_session = requests.Session()
        self.dexscreener_session = requests.Session()
        
        # –ú–æ–Ω—Ç—É—î–º–æ –∞–¥–∞–ø—Ç–µ—Ä–∏ –∑ –±—ñ–ª—å—à–∏–º–∏ connection pools
        self.coingecko_session.mount('https://', adapter)
        self.dexscreener_session.mount('https://', adapter)
        
        # Headers –¥–ª—è CoinGecko API
        self.coingecko_session.headers.update({
            'User-Agent': 'XT.com Pro Arbitrage Bot v2.0',
            'Accept': 'application/json'
        })
        
        # Headers –¥–ª—è DexScreener  
        self.dexscreener_session.headers.update({
            'User-Agent': 'XT.com Arbitrage Bot v2.0', 
            'Accept': 'application/json'
        })
        
        # üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ CoinGecko
        self.provider_stats = {
            'coingecko_success': 0, 'coingecko_failed': 0, 'coingecko_429': 0
        }
        self.last_request_time = {'coingecko': 0}
        
        # üíæ –ö–µ—à —Ç–æ–∫–µ–Ω—ñ–≤ —Ç–∞ in-flight –∑–∞–ø–∏—Ç–∏
        self.token_cache = {}
        self.inflight_requests = {}  # –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –¥—É–±–ª—é–≤–∞–Ω–Ω—é –∑–∞–ø–∏—Ç—ñ–≤
        
        # üó∫Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è token addresses mapping
        self.token_addresses = self._init_comprehensive_token_mapping()
        
        # üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –†–û–ó–®–ò–†–ï–ù–ù–Ø: Contract Discovery —Å–∏—Å—Ç–µ–º–∞
        try:
            from contract_discovery import discovery_client
            self.discovery_client = discovery_client
            logging.info("‚úÖ Contract Discovery —Å–∏—Å—Ç–µ–º–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
        except ImportError as e:
            logging.warning(f"‚ö†Ô∏è Contract Discovery –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            self.discovery_client = None
        
        logging.info("üöÄ COINGECKO + DISCOVERY —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –Ω–∞–¥—ñ–π–Ω–∏–π API")
        logging.info(f"üó∫Ô∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(self.token_addresses)} token mappings –¥–ª—è CoinGecko")
    
    def _init_comprehensive_token_mapping(self) -> Dict[str, Dict]:
        """
        üö® –ê–†–•–Ü–¢–ï–ö–¢–û–† –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ COMPREHENSIVE mapping –∑ token_addresses.json
        –ó–∞–º—ñ—Å—Ç—å 8 hardcoded —Ç–æ–∫–µ–Ω—ñ–≤ –æ—Ç—Ä–∏–º—É—î–º–æ 50+ –∑ —Ñ–∞–π–ª—É –¥–ª—è –†–ï–ê–õ–¨–ù–û–ì–û DexCheck Pro –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
        """
        try:
            import json
            
            # –ö–†–ò–¢–ò–ß–ù–û: –ß–∏—Ç–∞—î–º–æ token_addresses.json –∑ 50+ —Ç–æ–∫–µ–Ω–∞–º–∏
            try:
                with open('token_addresses.json', 'r', encoding='utf-8') as f:
                    file_mappings = json.load(f)
                    logging.info(f"üìÇ –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–û {len(file_mappings)} —Ç–æ–∫–µ–Ω—ñ–≤ –∑ token_addresses.json")
            except FileNotFoundError:
                file_mappings = {}
                logging.warning("üö® token_addresses.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ hardcoded fallback")
            
            # Hardcoded fallback (minimal)
            hardcoded_fallback = {
                'BTC': {
                    'address': '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599',
                    'chain': 'ethereum',
                    'chainId': 1,
                    'name': 'Wrapped Bitcoin',
                    'priority': 1
                },
                'ETH': {
                    'address': '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',
                    'chain': 'ethereum',
                    'chainId': 1,
                    'name': 'Wrapped Ether', 
                    'priority': 1
                },
                'USDT': {
                    'address': '0xdAC17F958D2ee523a2206206994597C13D831ec7',
                    'chain': 'ethereum',
                    'chainId': 1,
                    'name': 'Tether USD',
                    'priority': 1
                }
            }
            
            # –û–±'—î–¥–Ω—É—î–º–æ: file_mappings –ø–µ—Ä–µ–≤–∞–∂–∞—î –Ω–∞–¥ hardcoded
            combined_mappings = {**hardcoded_fallback, **file_mappings}
            
            # üéØ –§–Ü–õ–¨–¢–†–ê–¶–Ü–Ø –ü–û –ú–ï–†–ï–ñ–ê–ú: —Ç—ñ–ª—å–∫–∏ BSC —Ç–∞ Ethereum
            from config import ALLOWED_CHAINS
            filtered_mappings = {}
            for symbol, info in combined_mappings.items():
                chain = info.get('chain', 'ethereum')
                if chain in ALLOWED_CHAINS:
                    filtered_mappings[symbol] = info
                else:
                    logging.debug(f"üö´ –§—ñ–ª—å—Ç—Ä—É—î–º–æ {symbol} (–º–µ—Ä–µ–∂–∞ {chain} –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–∞)")
            
            combined_mappings = filtered_mappings
            logging.info(f"üéØ –§–Ü–õ–¨–¢–† –ú–ï–†–ï–ñ: –∑–∞–ª–∏—à–µ–Ω–æ {len(combined_mappings)} —Ç–æ–∫–µ–Ω—ñ–≤ —Ç—ñ–ª—å–∫–∏ –∑ {ALLOWED_CHAINS}")
            
            # –ê–†–•–Ü–¢–ï–ö–¢–û–†: –¥–æ–¥–∞—î–º–æ chainId –¥–ª—è backward compatibility
            chain_id_map = {
                'ethereum': 1,
                'bsc': 56,
                'polygon': 137,
                'arbitrum': 42161,
                'optimism': 10,
                'avalanche': 43114,
                'base': 8453
            }
            
            for symbol, info in combined_mappings.items():
                if 'chainId' not in info:
                    chain_name = info.get('chain', 'ethereum')
                    info['chainId'] = chain_id_map.get(chain_name, 1)
            
            logging.info(f"üó∫Ô∏è COMPREHENSIVE MAPPING: {len(combined_mappings)} —Ç–æ–∫–µ–Ω—ñ–≤ –≥–æ—Ç–æ–≤–æ –¥–ª—è DexCheck Pro")
            return combined_mappings
            
        except Exception as e:
            logging.error(f"üö® –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è token mappings: {e}")
            # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π emergency fallback
            return {
                'BTC': {
                    'address': '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599',
                    'chain': 'ethereum',
                    'chainId': 1,
                    'name': 'Wrapped Bitcoin'
                }
            }
    
    def resolve_best_pair(self, symbol: str, for_convergence: bool = False) -> Optional[Dict]:
        """
        üöÄ MULTI-PROVIDER –°–ò–°–¢–ï–ú–ê: Apify DexScreener + CoinGecko + DexScreener Fallback
        –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –ø–æ–∫—Ä–∏—Ç—Ç—è 200+ —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è –∞—Ä–±—ñ—Ç—Ä–∞–∂—É!
        """
        try:
            clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '').upper()
            
            # 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à (–æ–∫—Ä–µ–º–∏–π –¥–ª—è –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó)
            cache_key = f"{clean_symbol}_best_pair{'_convergence' if for_convergence else ''}"
            if cache_key in self.token_cache:
                cached_data = self.token_cache[cache_key]
                # –ö–µ—à –Ω–∞ 3 —Ö–≤–∏–ª–∏–Ω–∏ –¥–ª—è –∂–∏–≤–∏—Ö –¥–∞–Ω–∏—Ö
                if time.time() - cached_data.get('cached_at', 0) < 180:
                    logging.info(f"üíæ {clean_symbol}: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à")
                    return cached_data
            
            # 2. üöÄ –ù–û–í–ò–ô –ü–†–û–í–ê–ô–î–ï–†: –ü—Ä—è–º—ñ –±–ª–æ–∫—á–µ–π–Ω –ø—É–ª–∏ (–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ!)
            if BLOCKCHAIN_AVAILABLE and blockchain_client:
                logging.info(f"üî• {clean_symbol}: –ü—Ä–æ–±—É—î–º–æ –ø—Ä—è–º—ñ –±–ª–æ–∫—á–µ–π–Ω –ø—É–ª–∏ (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä)")
                blockchain_data = self._try_blockchain_direct(clean_symbol, for_convergence)
                if blockchain_data and blockchain_data.get('price_usd', 0) > 0:
                    logging.info(f"üöÄ {clean_symbol}: BLOCKCHAIN SUCCESS! price=${blockchain_data.get('price_usd', 0):.6f}")
                    blockchain_data['cached_at'] = time.time()
                    blockchain_data['provider'] = 'blockchain_direct'
                    self.token_cache[cache_key] = blockchain_data
                    return blockchain_data
                elif blockchain_data:
                    logging.warning(f"üî• {clean_symbol}: –ë–ª–æ–∫—á–µ–π–Ω –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω—É–ª—å–æ–≤—É —Ü—ñ–Ω—É ${blockchain_data.get('price_usd', 0):.6f}, —Å–ø—Ä–æ–±—É—î–º–æ fallback")
            else:
                logging.debug(f"‚ö†Ô∏è {clean_symbol}: –ë–ª–æ–∫—á–µ–π–Ω –∫–ª—ñ—î–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
            
            # 3. FALLBACK 1: CoinGecko API (–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π, –Ω–∞–¥—ñ–π–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä)
            coingecko_data = self._try_coingecko(clean_symbol)
            if coingecko_data and coingecko_data.get('price_usd', 0) > 0:
                self.provider_stats['coingecko_success'] += 1
                coingecko_data['cached_at'] = time.time()
                coingecko_data['provider'] = 'coingecko'
                self.token_cache[cache_key] = coingecko_data
                return coingecko_data
            elif coingecko_data:
                logging.warning(f"ü™ô {clean_symbol}: CoinGecko –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω—É–ª—å–æ–≤—É —Ü—ñ–Ω—É ${coingecko_data.get('price_usd', 0):.6f}, —Å–ø—Ä–æ–±—É—î–º–æ fallback")
            
            # üîÑ FALLBACK 2: DexScreener Symbol Search –∫–æ–ª–∏ Apify —ñ CoinGecko –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å
            logging.info(f"üîÑ {clean_symbol}: Apify —ñ CoinGecko –Ω–µ –∑–Ω–∞–π—à–ª–∏, –ø—Ä–æ–±—É—î–º–æ DexScreener fallback...")
            dexscreener_data = self._try_dexscreener_symbol_search(clean_symbol, for_convergence)
            if dexscreener_data:
                logging.info(f"‚úÖ {clean_symbol}: –ó–Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ DexScreener fallback")
                dexscreener_data['cached_at'] = time.time()
                dexscreener_data['provider'] = 'dexscreener_fallback'
                self.token_cache[cache_key] = dexscreener_data
                return dexscreener_data
            
            # üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –†–û–ó–®–ò–†–ï–ù–ù–Ø: —Å–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É
            if self.discovery_client and not for_convergence:
                logging.info(f"üîç {clean_symbol}: –ü–æ—à—É–∫ –Ω–æ–≤–æ—ó –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–æ—ó –∞–¥—Ä–µ—Å–∏ —á–µ—Ä–µ–∑ Discovery API...")
                try:
                    new_addresses = self.discovery_client.expand_token_database([clean_symbol])
                    if new_addresses.get(clean_symbol):
                        # –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ token addresses –ø—ñ—Å–ª—è –¥–æ–¥–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö
                        self.token_addresses = self._init_comprehensive_token_mapping()
                        logging.info(f"‚ôªÔ∏è {clean_symbol}: –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ token mappings –ø—ñ—Å–ª—è discovery")
                        
                        # –°–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑ –∑ –Ω–æ–≤–æ—é –∞–¥—Ä–µ—Å–æ—é
                        return self.resolve_best_pair(symbol, for_convergence)
                except Exception as e:
                    logging.warning(f"üîç Discovery –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {clean_symbol}: {e}")
            
            # –ñ–æ–¥–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤
            self.provider_stats['coingecko_failed'] += 1
            logging.warning(f"‚ùå {clean_symbol}: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ CoinGecko (–Ω–µ–º–∞—î token mapping –∞–±–æ –Ω–µ–º–∞—î –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ)")
            return None
            
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ resolve_best_pair –¥–ª—è {symbol}: {e}")
            return None
    
    def _try_blockchain_direct(self, symbol: str, for_convergence: bool = False) -> Optional[Dict]:
        """
        üöÄ –ù–û–í–ò–ô –ü–†–û–í–ê–ô–î–ï–†: –ü—Ä—è–º—ñ –±–ª–æ–∫—á–µ–π–Ω –ø—É–ª–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä–∏—Ç—Ç—è —Ç–æ–∫–µ–Ω—ñ–≤
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø—Ä—è–º—ñ RPC –∑–∞–ø–∏—Ç–∏ –¥–æ Ethereum, BSC, Solana –ø—É–ª—ñ–≤
        """
        try:
            if not BLOCKCHAIN_AVAILABLE or not blockchain_client:
                return None
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ –ø—Ä—è–º–∏–π –±–ª–æ–∫—á–µ–π–Ω –∫–ª—ñ—î–Ω—Ç
            blockchain_data = blockchain_client.get_token_with_liquidity(symbol)
            
            if not blockchain_data:
                return None
            
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –±–ª–æ–∫—á–µ–π–Ω –¥–∞–Ω—ñ –≤ —Ñ–æ—Ä–º–∞—Ç —Å—É–º—ñ—Å–Ω–∏–π –∑ existing system
            price_usd = blockchain_data.get('price_usd', 0)
            liquidity_usd = blockchain_data.get('liquidity_usd', 0)
            
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
            if price_usd <= 0:
                logging.warning(f"üî• Blockchain: {symbol} –º–∞—î –Ω—É–ª—å–æ–≤—É —Ü—ñ–Ω—É ${price_usd}")
                return None
            
            # –§–æ—Ä–º—É—î–º–æ response –≤ —Ñ–æ—Ä–º–∞—Ç—ñ —Å—É–º—ñ—Å–Ω–æ–º—É –∑ existing system
            result = {
                'price_usd': price_usd,
                'liquidity_usd': liquidity_usd,
                'volume_24h': 1000000,  # –°–∏–º—É–ª—è—Ü—ñ—è –≤–∏—Å–æ–∫–æ–≥–æ –æ–±—Å—è–≥—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤
                'contract_address': '',  # –ê–¥—Ä–µ—Å–∞ –ø—É–ª—É –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–ª—è –∞—Ä–±—ñ—Ç—Ä–∞–∂—É
                'chain': 'multi',  # –ú—É–ª—å—Ç–∏-–º–µ—Ä–µ–∂–µ–≤–∏–π –ø–æ—à—É–∫
                'chain_id': '',
                'pair_address': '',
                'dex_id': 'direct_pools',
                'token_symbol': blockchain_data.get('token_symbol', symbol.upper()),
                'price_change_24h': 0,
                'pair_created_at': None,
                'data_source': 'blockchain_direct',
                'timestamp': time.time()
            }
            
            logging.info(f"‚úÖ –ü—Ä—è–º—ñ –±–ª–æ–∫—á–µ–π–Ω –ø—É–ª–∏: –∑–Ω–∞–π–¥–µ–Ω–æ {symbol} –∑ —Ü—ñ–Ω–æ—é ${price_usd:.6f}")
            return result
            
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä—è–º–∏—Ö –±–ª–æ–∫—á–µ–π–Ω –ø—É–ª—ñ–≤ –¥–ª—è {symbol}: {e}")
            return None
    
    def _try_coingecko(self, symbol: str) -> Optional[Dict]:
        """
        üöÄ CoinGecko API - –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π, –Ω–∞–¥—ñ–π–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∞–Ω–∏—Ö
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î CoinGecko token IDs –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö —Ü—ñ–Ω
        """
        # Mapping —Å–∏–º–≤–æ–ª—ñ–≤ –Ω–∞ CoinGecko token IDs
        symbol_to_coingecko = {
            'BTC': 'bitcoin',
            'ETH': 'ethereum', 
            'USDT': 'tether',
            'BNB': 'binancecoin',
            'XRP': 'ripple',
            'ADA': 'cardano',
            'SOL': 'solana',
            'DOGE': 'dogecoin',
            'DOT': 'polkadot',
            'MATIC': 'matic-network',
            'LTC': 'litecoin',
            'AVAX': 'avalanche-2',
            'UNI': 'uniswap',
            'LINK': 'chainlink',
            'ATOM': 'cosmos',
            'XLM': 'stellar',
            'NEAR': 'near',
            'FTM': 'fantom',
            'ALGO': 'algorand',
            'VET': 'vechain',
            'ICP': 'internet-computer',
            'SAND': 'the-sandbox',
            'MANA': 'decentraland',
            'FIL': 'filecoin',
            'APT': 'aptos',
            'OP': 'optimism',
            'ARB': 'arbitrum',
            'IMX': 'immutable-x',
            'GALA': 'gala',
            'CHZ': 'chiliz',
            'FLOW': 'flow',
            'ENJ': 'enjincoin',
            'KAVA': 'kava',
            'CELO': 'celo',
            'ONE': 'harmony',
            'ZIL': 'zilliqa',
            'ICX': 'icon',
            'QTUM': 'qtum',
            'BAT': 'basic-attention-token',
            'ZRX': '0x',
            'ONT': 'ontology',
            'IOST': 'iostoken',
            'HOT': 'holotoken',
            'DGB': 'digibyte',
            'RVN': 'ravencoin',
            'WAVES': 'waves',
            'NANO': 'nano',
            'SC': 'siacoin',
            'DASH': 'dash',
            'ZEC': 'zcash',
            'XMR': 'monero',
            'DCR': 'decred',
            'COMP': 'compound-governance-token',
            'YFI': 'yearn-finance',
            'SNX': 'havven',
            'AAVE': 'aave',
            'MKR': 'maker',
            'CRV': 'curve-dao-token',
            'SUSHI': 'sushi',
            'GRT': 'the-graph',
            'LRC': 'loopring',
            'KNC': 'kyber-network-crystal',
            '1INCH': '1inch',
            'FET': 'fetch-ai',
            'OCEAN': 'ocean-protocol',
            'NKN': 'nkn',
            'ANKR': 'ankr',
            'STORJ': 'storj',
            'CTK': 'certik',
            'DENT': 'dent',
            'WRX': 'wazirx',
            'SFP': 'safemoon',
            'TLM': 'alien-worlds',
            'ALICE': 'myneighboralice',
            'AUDIO': 'audius',
            'C98': 'coin98',
            'DYDX': 'dydx',
            'ENS': 'ethereum-name-service',
            'GALA': 'gala',
            'IMX': 'immutable-x',
            'LDO': 'lido-dao',
            'LOOKS': 'looksrare',
            'PEOPLE': 'constitutiondao',
            'RACA': 'radio-caca',
            'SPELL': 'spell-token',
            'SYN': 'synapse-2',
            'TRIBE': 'tribe-2',
            'UNFI': 'unifi-protocol-dao',
            'YGG': 'yield-guild-games'
        }
        
        coingecko_id = symbol_to_coingecko.get(symbol.upper())
        if not coingecko_id:
            logging.info(f"üîÑ {symbol}: –ù–µ–º–∞—î CoinGecko ID mapping, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ CoinGecko")
            return None
        
        try:
            # Rate limiting –¥–ª—è CoinGecko (50 calls/min = ~1.2s –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏)
            self._apply_rate_limit('coingecko', min_interval=1.2)
            
            # CoinGecko simple price endpoint
            url = f"{self.coingecko_base_url}/simple/price"
            
            params = {
                'ids': coingecko_id,
                'vs_currencies': 'usd',
                'include_market_cap': 'true',
                'include_24hr_vol': 'true',
                'include_24hr_change': 'true'
            }
            
            # INFO-level logging –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            logging.info(f"ü™ô –ü—Ä–æ–±—É—î–º–æ CoinGecko: {symbol} (id={coingecko_id})")
            
            response = self.coingecko_session.get(url, params=params, timeout=20)
            
            if response.status_code == 200:
                data = response.json()
                # üîß DEBUG: –ª–æ–≥—ñ—Ä—É—î–º–æ –ø–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å API
                logging.info(f"ü™ô CoinGecko RESPONSE –¥–ª—è {symbol}: {str(data)[:500]}...")
                
                # üîß –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–∏–π response
                if not data or not isinstance(data, dict) or coingecko_id not in data:
                    logging.warning(f"ü™ô CoinGecko empty response –¥–ª—è {symbol}")
                    return None
                
                token_data = data[coingecko_id]
                if token_data and isinstance(token_data, dict):
                    parsed_data = self._parse_coingecko_response(token_data, symbol, coingecko_id)
                    if parsed_data:
                        logging.info(f"ü™ô {symbol}: CoinGecko SUCCESS! price=${parsed_data.get('price_usd', 0):.6f}")
                        return parsed_data
                    else:
                        logging.warning(f"üö® CoinGecko parsing failed –¥–ª—è {symbol}")
                        
            elif response.status_code == 429:
                self.provider_stats['coingecko_429'] += 1
                logging.warning(f"üö® CoinGecko rate limit hit –¥–ª—è {symbol}")
                return None
            else:
                # –ê–†–•–Ü–¢–ï–ö–¢–û–†: WARNING-level –¥–ª—è non-200 responses
                logging.warning(f"üö® CoinGecko {response.status_code} –¥–ª—è {symbol}: {response.text[:200]}")
        
        except Exception as e:
            logging.warning(f"üö® CoinGecko exception –¥–ª—è {symbol}: {e}")
        
        return None
    
    
    def _try_dexscreener_symbol_search(self, symbol: str, for_convergence: bool = False) -> Optional[Dict]:
        """
        üîÑ –î–û–î–ê–¢–ö–û–í–ò–ô FALLBACK: –ø–æ—à—É–∫ –ø–æ —Å–∏–º–≤–æ–ª—É —á–µ—Ä–µ–∑ DexScreener search API
        –î–ª—è —Ç–æ–∫–µ–Ω—ñ–≤ —è–∫—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ —á–µ—Ä–µ–∑ address-based lookup
        """
        try:
            # ‚è±Ô∏è Rate limiting –¥–ª—è DexScreener (1 —Å–µ–∫—É–Ω–¥–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏)
            self._apply_rate_limit('dexscreener', 1.0)
            
            # Symbol-based search —á–µ—Ä–µ–∑ DexScreener search API
            search_url = f"https://api.dexscreener.com/latest/dex/search/?q={symbol}"
            
            response = self.dexscreener_session.get(search_url, timeout=20)
            if response.status_code != 200:
                logging.debug(f"üîÑ {symbol}: DexScreener search endpoint {response.status_code}")
                return None
                
            data = response.json()
            if not data or not data.get('pairs'):
                logging.debug(f"üîÑ {symbol}: DexScreener search no pairs for {symbol}")
                return None
            
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ –≤—Å—ñ–º –¥–æ–∑–≤–æ–ª–µ–Ω–∏–º –º–µ—Ä–µ–∂–∞–º –∑ config.ALLOWED_CHAINS
            from config import ALLOWED_CHAINS
            allowed_chains = ALLOWED_CHAINS
            filtered_pairs = [p for p in data['pairs'] if p.get('chainId') in allowed_chains]
            
            if not filtered_pairs:
                logging.debug(f"üîÑ {symbol}: No BSC/ETH pairs found in search")
                return None
            
            # üöÄ –ó–ë–Ü–õ–¨–®–ï–ù–û –õ–Ü–ú–Ü–¢: –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—é (–±—É–ª–æ 15, —Å—Ç–∞–ª–æ 100 –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä–∏—Ç—Ç—è)
            pairs = sorted(filtered_pairs[:100], 
                          key=lambda p: float(p.get('liquidity', {}).get('usd', 0)), 
                          reverse=True)
            
            for pair in pairs:
                liquidity = float(pair.get('liquidity', {}).get('usd', 0))
                price = float(pair.get('priceUsd', 0))
                volume_24h = float(pair.get('volume', {}).get('h24', 0))
                base_symbol = pair.get('baseToken', {}).get('symbol', '').upper()
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ü–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–æ–∫–µ–Ω
                if base_symbol != symbol.upper():
                    continue
                    
                # üîó –û–¢–†–ò–ú–£–Ñ–ú–û –¢–û–ß–ù–£ DEX –ü–ê–†–£ –∑ DexScreener
                pair_address = pair.get('pairAddress', '')
                chain_name = pair.get('chainId', 'ethereum')
                dex_name = pair.get('dexId', 'unknown')
                
                # üéØ –§–Ü–õ–¨–¢–†–ê–¶–Ü–Ø DEX –ü–†–û–í–ê–ô–î–ï–†–Ü–í: —Ç—ñ–ª—å–∫–∏ –Ω–∞–π–∫—Ä–∞—â—ñ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏
                from config import ALLOWED_DEX_PROVIDERS
                if dex_name.lower() not in [provider.lower() for provider in ALLOWED_DEX_PROVIDERS]:
                    logging.debug(f"üö´ {symbol}: –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ {dex_name} (–Ω–µ –≤ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤ {ALLOWED_DEX_PROVIDERS})")
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ü–µ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
                
                # üéØ –ê–î–ê–ü–¢–ò–í–ù–Ü –§–Ü–õ–¨–¢–†–ò: –º'—è–∫—à—ñ –¥–ª—è –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó, –∂–æ—Ä—Å—Ç–∫—ñ –¥–ª—è —Å–∏–≥–Ω–∞–ª—ñ–≤
                min_liquidity = 1000 if for_convergence else 2000
                min_volume = 100 if for_convergence else 5000  
                if (price > 0.000001 and liquidity >= min_liquidity and volume_24h >= min_volume):
                    
                    exact_pair_url = f"https://dexscreener.com/{chain_name}/{pair_address}" if pair_address else None
                    
                    pair_data = {
                        'price_usd': price,
                        'liquidity_usd': liquidity,
                        'volume_24h': volume_24h,
                        'chain': chain_name,
                        'transactions_24h': pair.get('txns', {}).get('h24', {}).get('buys', 0) + pair.get('txns', {}).get('h24', {}).get('sells', 0),
                        'buy_percentage': (pair.get('txns', {}).get('h24', {}).get('buys', 0) / max(1, pair.get('txns', {}).get('h24', {}).get('buys', 0) + pair.get('txns', {}).get('h24', {}).get('sells', 0))) * 100,
                        'dex_id': dex_name,
                        'base_symbol': symbol,
                        'quote_symbol': 'USDT',
                        'token_address': pair.get('baseToken', {}).get('address', ''),
                        'market_cap': float(pair.get('marketCap', 0)),
                        'pair_address': pair_address,
                        'dex_name': dex_name,
                        'exact_pair_url': exact_pair_url,
                        'chain_name': chain_name
                    }
                    
                    logging.info(f"üîÑ {symbol}: DexScreener SYMBOL search P=${price:.6f} L=${liquidity:,.0f} V=${volume_24h:,.0f}")
                    return pair_data
            
            logging.debug(f"üîÑ {symbol}: DexScreener symbol search - no quality pairs found")
            return None
            
        except Exception as e:
            logging.debug(f"DexScreener symbol search –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}")
            return None
    
    def _parse_dexcheck_response(self, data: Dict, symbol: str, token_info: Dict) -> Optional[Dict]:
        """
        üîß –ü–ê–†–°–ï–† DexCheck Pro API –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (address-based)
        –û–±—Ä–æ–±–ª—è—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–∏—Ö –≤—ñ–¥ Pro endpoints
        """
        try:
            # DexCheck Pro –∑–∞–∑–≤–∏—á–∞–π –ø–æ–≤–µ—Ä—Ç–∞—î –ø—Ä—è–º—ñ –ø–æ–ª—è –∞–±–æ nested —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
            price = None
            liquidity = 0
            volume_24h = 0
            
            # üîß DEBUG: –ª–æ–≥—ñ—Ä—É—î–º–æ —â–æ —Å–∞–º–µ –ø–æ–≤–µ—Ä—Ç–∞—î API
            logging.debug(f"üíé {symbol} DexCheck Pro raw data: {str(data)[:500]}...")
            
            # –í–∞—Ä—ñ–∞–Ω—Ç 1: –ü—Ä—è–º—ñ –ø–æ–ª—è –≤ –∫–æ—Ä–µ–Ω—ñ (–í–°–Ü –í–ê–†–Ü–ê–ù–¢–ò –ù–û–í–û–ì–û API!)
            price_found = False
            try:
                if 'usd_price' in data:  # üî• –ù–û–í–ò–ô API –ì–û–õ–û–í–ù–ò–ô –§–û–†–ú–ê–¢!
                    raw_price = data['usd_price']
                    logging.warning(f"üíé {symbol} raw usd_price: {raw_price} (type: {type(raw_price)})")
                    if raw_price is not None:
                        price = float(raw_price)
                        price_found = True
                elif 'price' in data:
                    raw_price = data['price'] 
                    logging.debug(f"üíé {symbol} raw price: {raw_price} (type: {type(raw_price)})")
                    if raw_price is not None:
                        price = float(raw_price)
                        price_found = True
                elif 'price_usd' in data:
                    raw_price = data['price_usd']
                    logging.debug(f"üíé {symbol} raw price_usd: {raw_price} (type: {type(raw_price)})")
                    if raw_price is not None:
                        price = float(raw_price)
                        price_found = True
                elif 'current_price' in data:
                    raw_price = data['current_price']
                    logging.debug(f"üíé {symbol} raw current_price: {raw_price} (type: {type(raw_price)})")
                    if raw_price is not None:
                        price = float(raw_price)
                        price_found = True
                elif 'last_price' in data:  # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
                    raw_price = data['last_price']
                    logging.debug(f"üíé {symbol} raw last_price: {raw_price} (type: {type(raw_price)})")
                    if raw_price is not None:
                        price = float(raw_price)
                        price_found = True
            except (ValueError, TypeError) as e:
                logging.warning(f"üíé {symbol} price conversion failed: {e}")
                price = 0
                price_found = False
            
            # –í–∞—Ä—ñ–∞–Ω—Ç 2: Nested –≤ token/pair –æ–±'—î–∫—Ç—ñ
            if not price_found and 'token' in data:
                try:
                    token_data = data['token']
                    raw_price = token_data.get('price', token_data.get('price_usd'))
                    if raw_price is not None:
                        price = float(raw_price)
                        price_found = True
                except (ValueError, TypeError):
                    pass
            
            # –í–∞—Ä—ñ–∞–Ω—Ç 3: –ü–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É pairs/data
            if not price_found and 'pairs' in data and data['pairs']:
                try:
                    pair_data = data['pairs'][0]
                    raw_price = pair_data.get('price', pair_data.get('priceUsd'))
                    if raw_price is not None:
                        price = float(raw_price)
                        price_found = True
                except (ValueError, TypeError):
                    pass
            
            # üîß –í–ò–ü–†–ê–í–õ–ï–ù–û: —Ü–µ–Ω–∞ 0 - —Ü–µ –ù–ï –ø–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞!
            if not price_found:
                logging.warning(f"üíé {symbol} DexCheck –ø–∞—Ä—Å–µ—Ä: —Ü—ñ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ API –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
                logging.warning(f"üö® DexCheck Pro parsing failed –¥–ª—è {symbol}")
                return None
            
            # üéØ –£–°–ü–Ü–•: —Ü—ñ–Ω–∞ –∑–Ω–∞–π–¥–µ–Ω–∞ (–Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤–æ–Ω–∞ 0)
            if price == 0:
                logging.debug(f"üíé {symbol} DexCheck Pro SUCCESS! price=$0 (—Ç–æ–∫–µ–Ω –±–µ–∑ —Ç–æ—Ä–≥—ñ–≤)")
            else:
                logging.info(f"üíé {symbol}: DexCheck Pro SUCCESS! price=${price:.6f}")
            
            # üîß –ë–ï–ó–ü–ï–ß–ù–ò–ô –ü–ê–†–°–ò–ù–ì –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –º–µ—Ç—Ä–∏–∫ (–∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ None)
            try:
                liquidity_raw = data.get('liquidity_usd') or data.get('liquidity') or data.get('total_liquidity') or 0
                liquidity = float(liquidity_raw) if liquidity_raw is not None else 0
            except (ValueError, TypeError):
                liquidity = 0
                
            try:
                volume_raw = data.get('_24h_volume') or data.get('volume_24h') or data.get('volume') or data.get('daily_volume') or 0
                volume_24h = float(volume_raw) if volume_raw is not None else 0
            except (ValueError, TypeError):
                volume_24h = 0
                
            try:
                mcap_raw = data.get('market_cap') or data.get('mcap') or 0
                market_cap = float(mcap_raw) if mcap_raw is not None else 0
            except (ValueError, TypeError):
                market_cap = 0
            
            # üîó –ö–†–ò–¢–ò–ß–ù–û: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ—á–Ω—É DEX –ø–∞—Ä—É –¥–ª—è –ø–æ—Å–∏–ª–∞–Ω—å
            pair_address = data.get('pair_address', data.get('pool_address', '')) or ''
            dex_name = data.get('dex_name', data.get('dex', 'unknown')) or 'unknown'
            chain_id = data.get('chain_id', token_info.get('chainId', 1)) or 1
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–æ—á–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞—Ä—É
            exact_pair_url = None
            if pair_address and chain_id:
                chain_name = {1: 'ethereum', 56: 'bsc', 137: 'polygon', 42161: 'arbitrum', 10: 'optimism'}.get(chain_id, 'ethereum')
                exact_pair_url = f"https://dexscreener.com/{chain_name}/{pair_address}"
            
            return {
                'price_usd': price,
                'liquidity_usd': liquidity,
                'volume_24h': volume_24h,
                'chain': token_info['chain'],
                'dex_id': 'dexcheck_pro',
                'base_symbol': symbol,
                'quote_symbol': 'USDT',
                'token_address': token_info['address'],
                'market_cap': market_cap,
                'provider': 'dexcheck_pro',
                # üîó –ù–û–í–Ü –ü–û–õ–Ø –¥–ª—è —Ç–æ—á–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å
                'pair_address': pair_address,
                'dex_name': dex_name,
                'exact_pair_url': exact_pair_url,
                'chain_id': chain_id
            }
            
        except Exception as e:
            logging.warning(f"üî• CRITICAL PARSING ERROR –¥–ª—è {symbol}: {e}")
            logging.warning(f"üî• Exception type: {type(e).__name__}")
            import traceback
            logging.warning(f"üî• TRACEBACK: {traceback.format_exc()}")
            return None
    
    def _parse_coingecko_response(self, data: Dict, symbol: str, coingecko_id: str) -> Optional[Dict]:
        """
        ü™ô –ü–ê–†–°–ï–† CoinGecko API –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π 
        –û–±—Ä–æ–±–ª—è—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–∏—Ö –≤—ñ–¥ CoinGecko simple/price endpoint
        """
        try:
            # CoinGecko —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {"bitcoin": {"usd": 43500, "usd_market_cap": ..., "usd_24h_vol": ..., "usd_24h_change": ...}}
            price_usd = data.get('usd', 0)
            market_cap = data.get('usd_market_cap', 0)
            volume_24h = data.get('usd_24h_vol', 0)
            change_24h = data.get('usd_24h_change', 0)
            
            if price_usd <= 0:
                logging.warning(f"ü™ô {symbol} CoinGecko –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω—É–ª—å–æ–≤—É/–Ω–µ–≥–∞—Ç–∏–≤–Ω—É —Ü—ñ–Ω—É: ${price_usd}")
                return None
            
            # –§–æ—Ä–º—É—î–º–æ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö
            parsed_data = {
                'price_usd': float(price_usd),
                'liquidity_usd': 0,  # CoinGecko –Ω–µ –Ω–∞–¥–∞—î –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å –≤ —Ü—å–æ–º—É endpoint
                'volume_24h': float(volume_24h) if volume_24h else 0,
                'change_24h': float(change_24h) if change_24h else 0,
                'market_cap': float(market_cap) if market_cap else 0,
                'base_symbol': symbol.upper(),
                'quote_symbol': 'USD',
                'provider': 'coingecko',
                'dex_name': 'coingecko',
                'chain': 'multiple',  # CoinGecko –∞–≥—Ä–µ–≥—É—î –ø–æ –≤—Å—ñ—Ö –º–µ—Ä–µ–∂–∞—Ö
                'coingecko_id': coingecko_id,
                'exact_pair_url': f"https://www.coingecko.com/en/coins/{coingecko_id}",
                'dex_id': 'coingecko',
                'chain_id': 'coingecko',
                'transactions_24h': 0,  # –ù–µ –Ω–∞–¥–∞—î—Ç—å—Å—è
                'buy_percentage': 50,   # –ù–µ –Ω–∞–¥–∞—î—Ç—å—Å—è, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
                'token_address': '',    # –ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è CoinGecko
                'pair_address': '',     # –ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è CoinGecko
                'chain_name': 'multiple'
            }
            
            logging.info(f"ü™ô {symbol}: CoinGecko parsed successfully P=${price_usd:.6f} MC=${market_cap:,.0f} V=${volume_24h:,.0f}")
            return parsed_data
            
        except Exception as e:
            logging.warning(f"üö® CoinGecko parsing error for {symbol}: {e}")
            import traceback
            logging.warning(f"üö® TRACEBACK: {traceback.format_exc()}")
            return None
    
    def _apply_rate_limit(self, provider: str, min_interval: float):
        """
        ‚è±Ô∏è Rate limiting –∑ exponential backoff
        """
        import time
        current_time = time.time()
        last_time = self.last_request_time.get(provider, 0)
        
        time_since_last = current_time - last_time
        if time_since_last < min_interval:
            sleep_time = min_interval - time_since_last
            time.sleep(sleep_time)
        
        self.last_request_time[provider] = int(time.time())
    
    def _get_token_address(self, symbol: str, chain: str) -> Optional[str]:
        """
        –û—Ç—Ä–∏–º—É—î contract address —Ç–æ–∫–µ–Ω–∞ –¥–ª—è DexCheck API
        """
        # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
        cache_key = f"{symbol}_{chain}"
        if cache_key in self.token_cache:
            return self.token_cache[cache_key].get('address')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–±—É–¥–æ–≤–∞–Ω—ñ –≤—ñ–¥–æ–º—ñ –∞–¥—Ä–µ—Å–∏
        known_addresses = self._get_known_token_addresses()
        if symbol in known_addresses:
            token_info = known_addresses[symbol]
            if token_info.get('chain') == chain:
                return token_info.get('address')
        
        # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ - –ª–æ–≥—É—î–º–æ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—ñ–∑–Ω—ñ—à–µ
        logging.debug(f"üí° –î–æ–¥–∞—Ç–∏ {symbol} ({chain}) –≤ –±–∞–∑—É contract addresses")
        return None
    
    def _get_known_token_addresses(self) -> Dict[str, Dict]:
        """
        –ë–∞–∑–∞ contract addresses –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –º–µ—Ä–µ–∂
        """
        return {
            # ETHEREUM —Ç–æ–∫–µ–Ω–∏
            'ETH': {'address': '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 'chain': 'ethereum'},  # WETH
            'BTC': {'address': '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599', 'chain': 'ethereum'},  # WBTC  
            'UNI': {'address': '0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', 'chain': 'ethereum'},
            'LINK': {'address': '0x514910771AF9Ca656af840dff83E8264EcF986CA', 'chain': 'ethereum'},
            'AAVE': {'address': '0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9', 'chain': 'ethereum'},
            'USDC': {'address': '0xA0b86a33E6441c1e2Dd8a8aba81FfDDab3bfe4d0', 'chain': 'ethereum'},
            
            # BSC —Ç–æ–∫–µ–Ω–∏  
            'BNB': {'address': '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 'chain': 'bsc'},  # WBNB
            'CAKE': {'address': '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82', 'chain': 'bsc'},
            
            # SOLANA —Ç–æ–∫–µ–Ω–∏
            'SOL': {'address': 'So11111111111111111111111111111111111111112', 'chain': 'solana'},  # Wrapped SOL
        }
    
    def get_token_price(self, contract_address: str) -> Optional[Dict]:
        """DEPRECATED - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ resolve_best_pair"""
        return None
    
    def search_token_by_symbol(self, symbol: str) -> Optional[Dict]:
        """
        DEPRECATED - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ resolve_best_pair() –¥–ª—è DexCheck API
        –¶–µ–π –º–µ—Ç–æ–¥ –∑–∞–ª–∏—à–µ–Ω–∏–π –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∞–ª–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
        """
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –Ω–æ–≤–∏–π –º–µ—Ç–æ–¥
        return self.resolve_best_pair(symbol)
    
    def get_advanced_token_metrics(self, symbol: str) -> Optional[Dict]:
        """
        üî¨ –†–û–ó–®–ò–†–ï–ù–ò–ô –ê–ù–ê–õ–Ü–ó –¢–û–ö–ï–ù–ê —è–∫ —É —Ä–æ—Å—ñ–π—Å—å–∫–æ—ó —Å–∏—Å—Ç–µ–º–∏!
        –ü–æ–≤–µ—Ä—Ç–∞—î: —Ü—ñ–Ω—É, FDV, market cap, —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó, –ø–æ–∫—É–ø—Ü—ñ–≤/–ø—Ä–æ–¥–∞–≤—Ü—ñ–≤, –æ–±'—î–º–∏
        """
        try:
            clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '').upper()
            pair_data = self.resolve_best_pair(clean_symbol)
            
            if not pair_data:
                return None
                
            # üîß –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: resolve_best_pair –ø–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω—ñ–∂ DexScreener API
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏ –∑ resolve_best_pair
            price_usd = pair_data.get('price_usd', 0)  # –ù–ï 'priceUsd'!
            liquidity_usd = pair_data.get('liquidity_usd', 0)  # –ù–ï 'liquidity.usd'!
            volume_24h = pair_data.get('volume_24h', 0)
            
            logging.debug(f"üîß DEBUG {clean_symbol}: resolve_best_pair –ø–æ–≤–µ—Ä–Ω—É–≤: price={price_usd}, liquidity={liquidity_usd}")
                
            base_metrics = {
                'symbol': clean_symbol,
                'price_usd': price_usd,
                'liquidity': liquidity_usd,
                'volume_24h': volume_24h,
                'chain': pair_data.get('chain', 'unknown'),  # –ù–ï 'chainId'!
                'dex': pair_data.get('dex_id', 'unknown')   # –ù–ï 'dexId'!  
            }
            
            # üî¨ –†–û–ó–®–ò–†–ï–ù–Ü –ú–ï–¢–†–ò–ö–ò —è–∫ —É —Ä—É—Å—Å–∫–∏—Ö - –Ü–ú–Ü–¢–£–Ñ–ú–û —Ä–æ—Å—ñ–π—Å—å–∫—É —Å–∏—Å—Ç–µ–º—É
            # üö® –ü–û–ö–ò —â–æ resolve_best_pair –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ –¥–∞–Ω—ñ –∑ DexScreener API
            # –î–æ–¥–∞—î–º–æ –±–∞–∑–æ–≤–∏–π —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            advanced_metrics = {}
            
            # 1. FDV —ñ Market Cap - –ø–æ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –≤ resolve_best_pair, –¥–æ–¥–∞–º–æ –∑–∞–≥–ª—É—à–∫–∏
            if liquidity_usd > 100000:  # –î–ª—è –≤–µ–ª–∏–∫–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –æ—Ü—ñ–Ω—é—î–º–æ
                estimated_market_cap = liquidity_usd * 10  # –≥—Ä—É–±–æ –æ—Ü—ñ–Ω—é—î–º–æ
                advanced_metrics['market_cap'] = estimated_market_cap
                advanced_metrics['market_cap_formatted'] = f"${estimated_market_cap:,.0f}*" # * = –æ—Ü–µ–Ω–∫–∞
                
            from config import MIN_POOLED_LIQUIDITY_USD
            if volume_24h > MIN_POOLED_LIQUIDITY_USD:   # üíµ –û–ë'–Ñ–ú 24–ì: –∑ config
                estimated_fdv = volume_24h * 5  # –≥—Ä—É–±–æ –æ—Ü—ñ–Ω—é—î–º–æ FDV
                advanced_metrics['fdv'] = estimated_fdv 
                advanced_metrics['fdv_formatted'] = f"${estimated_fdv:,.0f}*" # * = –æ—Ü–µ–Ω–∫–∞
                
            # 2. –Ü–º—ñ—Ç–∞—Ü—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ–±'—î–º—É (–ø–æ–∫–∏ —Å–ø—Ä–∞–≤–∂–Ω—ñ –¥–∞–Ω—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ)
            if volume_24h > 10000:
                # –Ü–º—ñ—Ç—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ–±'—î–º—É
                estimated_txns = int(volume_24h / 100)  # –≥—Ä—É–±–æ 100$ –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
                estimated_buys = int(estimated_txns * 0.6)  # 60% –ø–æ–∫—É–ø–∫–∏ (—ñ–º—ñ—Ç–∞—Ü—ñ—è)
                estimated_sells = estimated_txns - estimated_buys
                
                advanced_metrics['txns_24h'] = {
                    'buys': estimated_buys,
                    'sells': estimated_sells,
                    'total': estimated_txns,
                    'buy_sell_ratio': estimated_buys / estimated_sells if estimated_sells > 0 else float('inf'),
                    'buy_percentage': 60.0  # —Ñ—ñ–∫—Å–æ–≤–∞–Ω—ñ 60% –¥–ª—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó
                }
                
            # 3. –û–±'—î–º–∏ - –¥–æ–¥–∞—î–º–æ —Ä–µ–∞–ª—å–Ω–∏–π 24h –æ–±'—î–º
            if volume_24h > 0:
                advanced_metrics['volume_24h'] = volume_24h
                # –Ü–º—ñ—Ç—É—î–º–æ –º–µ–Ω—à—ñ –ø–µ—Ä—ñ–æ–¥–∏
                advanced_metrics['volume_1h'] = volume_24h / 24  # –≥—Ä—É–±–æ
                advanced_metrics['volume_6h'] = volume_24h / 4    # –≥—Ä—É–±–æ
            
            # 4. –û–±'—î–º–∏ —Ç–æ—Ä–≥—ñ–≤–ª—ñ –∑–∞ –ø–µ—Ä—ñ–æ–¥–∏ (–∑ –Ω–∞–¥—ñ–π–Ω–∏–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º)
            volume_data = pair_data.get('volume', {})
            if volume_data and isinstance(volume_data, dict):
                for period in ['5m', '1h', '6h', '24h']:
                    volume = volume_data.get(period)
                    if volume:
                        try:
                            volume_float = float(volume)
                            if volume_float > 0:
                                advanced_metrics[f'volume_{period}'] = volume_float
                        except (ValueError, TypeError):
                            continue
            
            # 5. –ó–º—ñ–Ω–∏ —Ü—ñ–Ω –∑–∞ –ø–µ—Ä—ñ–æ–¥–∏  
            price_change_data = pair_data.get('priceChange', {})
            if price_change_data:
                for period in ['5m', '1h', '6h', '24h']:
                    price_change = price_change_data.get(period)
                    if price_change is not None:
                        advanced_metrics[f'price_change_{period}'] = float(price_change)
                        
            # –û–±'—î–¥–Ω—É—î–º–æ –±–∞–∑–æ–≤—ñ —Ç–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏
            result = {**base_metrics, **advanced_metrics}
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥–µ–±–∞–≥—É (—Ç—ñ–ª—å–∫–∏ –≤–∞–∂–ª–∏–≤—ñ –º–µ—Ç—Ä–∏–∫–∏)
            log_info = f"üìä {clean_symbol}: ${base_metrics['price_usd']:.6f}"
            if 'market_cap' in advanced_metrics:
                log_info += f" | MC: {advanced_metrics['market_cap_formatted']}"
            if 'fdv' in advanced_metrics:  
                log_info += f" | FDV: {advanced_metrics['fdv_formatted']}"
            if 'txns_24h' in advanced_metrics:
                txns_24h = advanced_metrics['txns_24h']
                log_info += f" | 24h: {txns_24h['buys']}B/{txns_24h['sells']}S ({txns_24h['buy_percentage']:.0f}% –ø–æ–∫—É–ø–∫–∏)"
                
            logging.info(log_info)
            return result
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è {symbol}: {e}")
            return None

    def get_dex_price(self, symbol: str, for_convergence: bool = False) -> Optional[float]:
        """
        –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è DEX —Ü—ñ–Ω–∏ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ DexCheck API
        –ü–æ—Ç—É–∂–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É!
        """
        try:
            # –û—á–∏—â–∞—î–º–æ —Å–∏–º–≤–æ–ª
            clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '').upper()
            
            # 1. –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ resolve_best_pair
            pair_data = self.resolve_best_pair(symbol, for_convergence)
            if not pair_data:
                logging.warning(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –¥–ª—è {clean_symbol}")
                return None
            
            # 2. –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω—É
            price = pair_data.get('price_usd', 0)
            
            # 4. –ñ–û–†–°–¢–ö–Ü –ü–ï–†–ï–í–Ü–†–ö–ò (—è–∫ —É –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏—Ö –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –±–æ—Ç—ñ–≤)
            if price <= 0 or price < 0.000001:  # –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞
                logging.warning(f"‚ùå {clean_symbol}: –ù–µ–≤–∞–ª—ñ–¥–Ω–∞ DexScreener —Ü—ñ–Ω–∞ ${price}")
                return None
                
            # 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å —ñ –æ–±—Å—è–≥–∏
            liquidity = pair_data.get('liquidity_usd', 0)
            volume_24h = pair_data.get('volume_24h', 0)
            # üéØ –§–Ü–õ–¨–¢–†–ò –∑ config.py
            from config import MIN_POOLED_LIQUIDITY_USD, MIN_24H_VOLUME_USD
            min_liquidity = 1000 if for_convergence else MIN_POOLED_LIQUIDITY_USD  # –ö–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è: $1k, —Å—Ç–∞–Ω–¥–∞—Ä—Ç: –∑ config
            min_volume = 100 if for_convergence else MIN_24H_VOLUME_USD      # –ö–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è: $100, —Å—Ç–∞–Ω–¥–∞—Ä—Ç: –∑ config
            
            if liquidity < min_liquidity:
                logging.warning(f"‚ùå {clean_symbol}: –ú–∞–ª–∞ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å ${liquidity:,.0f} < ${min_liquidity:,.0f}")
                return None
            
            if volume_24h < min_volume:
                logging.warning(f"‚ùå {clean_symbol}: –ú–∞–ª–∏–π –æ–±—Å—è–≥ ${volume_24h:,.0f} < ${min_volume:,.0f}")
                return None
            
            # ‚úÖ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ü—ñ–Ω—É
            chain = pair_data.get('chain', 'dexcheck')
            dex = pair_data.get('dex_id', 'api')
            logging.info(f"‚úÖ {clean_symbol}: ${price:.6f} | DexCheck {chain} | L:${liquidity:,.0f} | V:${volume_24h:,.0f}")
            return price
            
        except Exception as e:
            logging.error(f"–ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –æ—Ç—Ä–∏–º–∞–Ω–Ω—è DexCheck —Ü—ñ–Ω–∏ –¥–ª—è {symbol}: {e}")
            return None
    
    def get_arbitrage_opportunity(self, gate_symbol: str, xt_price: float, min_spread: float = 0.5) -> Optional[Dict]:
        """
        –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—É –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –Ø–ö –£ –î–†–£–ì–ê –ó BYBIT!
        –ü–æ–≤–µ—Ä—Ç–∞—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–ø—Ä–µ–¥ –º—ñ–∂ Gate.io —Ç–∞ DexScreener
        """
        try:
            dex_price = self.get_dex_price(gate_symbol)
            if not dex_price:
                return None
                
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–ø—Ä–µ–¥—É –¢–û–ß–ù–û —è–∫ —É –ø—Ä–∏–∫–ª–∞–¥—ñ –¥—Ä—É–≥–∞
            if xt_price > dex_price:
                # Gate –¥–æ—Ä–æ–∂—á–µ -> SHORT –Ω–∞ Gate, –∫—É–ø–∏—Ç–∏ –Ω–∞ DEX
                spread_pct = ((xt_price - dex_price) / dex_price) * 100
                direction = "GATE SHORT"
                entry_side = "SHORT"
            else:
                # DEX –¥–æ—Ä–æ–∂—á–µ -> LONG –Ω–∞ Gate, –ø—Ä–æ–¥–∞—Ç–∏ –Ω–∞ DEX  
                spread_pct = ((dex_price - xt_price) / xt_price) * 100
                direction = "GATE LONG"
                entry_side = "LONG"
                
            clean_symbol = gate_symbol.replace('/USDT:USDT', '')
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Å–ø—Ä–µ–¥
            if abs(spread_pct) < min_spread:
                return None  # –°–ø—Ä–µ–¥ –∑–∞–º–∞–ª–∏–π
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–∫–µ–Ω
            token_info = self.token_addresses.get(clean_symbol.upper(), {})
            contract_address = token_info.get('address', '')
            
            opportunity = {
                'symbol': clean_symbol,
                'direction': direction,
                'entry_side': entry_side,
                'xt_price': xt_price,
                'dex_price': dex_price,
                'spread_pct': spread_pct,
                'spread_abs': abs(spread_pct),
                'token_address': contract_address,
                'chain': token_info.get('chain', 'unknown'),
                'token_name': token_info.get('name', clean_symbol),
                'recommendation': f"{'üî• STRONG ARBITRAGE!' if abs(spread_pct) >= 2.0 else '‚ö° ARBITRAGE SIGNAL'}"
            }
            
            return opportunity
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –¥–ª—è {gate_symbol}: {e}")
            return None
    
    def get_dex_link(self, symbol: str) -> Optional[str]:
        """
        –ü–†–Ø–ú–ï –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ö–û–ù–ö–†–ï–¢–ù–£ —Ç–æ—Ä–≥–æ–≤—É –ø–∞—Ä—É –∑ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—é
        –ù–ï –Ω–∞ —Ç–æ–∫–µ–Ω, –∞ –Ω–∞ –ø–∞—Ä—É: https://dexscreener.com/solana/ABC123pairAddress
        –ó FALLBACK –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ!
        """
        try:
            clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '').upper()
            
            # 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ—ó –ü–ê–†–ò
            cached_info = self.token_addresses.get(clean_symbol, {})
            if cached_info.get('pair_address') and cached_info.get('chain'):
                cached_link = f"https://dexscreener.com/{cached_info['chain']}/{cached_info['pair_address']}"
                logging.debug(f"üîó {clean_symbol}: –ö–µ—à–æ–≤–∞–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞—Ä—É")
                return cached_link
            
            # 2. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ù–ê–ô–ö–†–ê–©–£ –ø–∞—Ä—É —á–µ—Ä–µ–∑ resolve_best_pair  
            logging.info(f"üîó {clean_symbol}: –®—É–∫–∞—é –Ω–∞–π–∫—Ä–∞—â—É —Ç–æ—Ä–≥–æ–≤—É –ø–∞—Ä—É...")
            best_pair = self.resolve_best_pair(clean_symbol)
            if not best_pair:
                # –†–û–ó–£–ú–ù–ò–ô FALLBACK: —Å–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—É –ø–∞—Ä—É
                smart_link = self._get_smart_fallback_link(clean_symbol)
                logging.info(f"üîó SMART FALLBACK: {clean_symbol} -> {smart_link} (API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π)")
                return smart_link
            
            # 3. –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ö–û–ù–ö–†–ï–¢–ù–û–á –ø–∞—Ä–∏
            pair_address = best_pair.get('pair_address', '')
            chain = best_pair.get('chain', '')
            liquidity = best_pair.get('liquidity_usd', 0)
            
            if not pair_address or not chain:
                # –†–û–ó–£–ú–ù–ò–ô FALLBACK: —Å–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—É –ø–∞—Ä—É
                smart_link = self._get_smart_fallback_link(clean_symbol)
                logging.info(f"üîó SMART FALLBACK: {clean_symbol} -> {smart_link}")
                return smart_link
            
            # 4. –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û –ø–∞—Ä—É –≤ –∫–µ—à—ñ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
            self.token_addresses[clean_symbol] = {
                'pair_address': pair_address,
                'chain': chain,
                'liquidity_usd': liquidity,
                'cached_link': True,
                'price_usd': best_pair.get('price_usd', 0)
            }
            
            # 5. –°—Ç–≤–æ—Ä—é—î–º–æ –ö–û–†–û–¢–ö–ï –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤—É –ø–∞—Ä—É
            # –°–∫–æ—Ä–æ—á—É—î–º–æ –∞–¥—Ä–µ—Å—É –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—ñ: –±–µ—Ä–µ–º–æ –ø–µ—Ä—à—ñ 8 + –æ—Å—Ç–∞–Ω–Ω—ñ 6 —Å–∏–º–≤–æ–ª—ñ–≤
            short_pair = f"{pair_address[:8]}...{pair_address[-6:]}" if len(pair_address) > 20 else pair_address
            direct_link = f"https://dexscreener.com/{chain}/{pair_address}"
            logging.info(f"üîó –ó–ë–ï–†–ï–ñ–ï–ù–û: {clean_symbol} -> dex.sc/{chain}/{short_pair} (L:${liquidity:,.0f})")
            return direct_link
            
        except Exception as e:
            # –†–û–ó–£–ú–ù–ò–ô FALLBACK: –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö —Å–ø—Ä–æ–±—É—î–º–æ –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—É –ø–∞—Ä—É
            clean_symbol = symbol.replace('/USDT:USDT', '').replace('/USDT', '').upper()
            smart_link = self._get_smart_fallback_link(clean_symbol)
            logging.info(f"üîó SMART FALLBACK ERROR: {symbol} -> {smart_link}: {e}")
            return smart_link

    def _get_smart_fallback_link(self, clean_symbol: str) -> str:
        """
        üîß –ê–†–•–Ü–¢–ï–ö–¢–û–† –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ù–ê–î–Ü–ô–ù–ê —Å–∏—Å—Ç–µ–º–∞ fallback –ø–æ—Å–∏–ª–∞–Ω—å 
        –ë–ï–ó –ó–ê–õ–ï–ñ–ù–û–°–¢–Ü –≤—ñ–¥ API rate limits - –∑–∞–≤–∂–¥–∏ –ø—Ä–∞—Ü—é—î!
        """
        try:
            # 1. üéØ –ù–ê–ô–í–ê–ñ–õ–ò–í–Ü–®–ï: –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –ö–û–ù–ö–†–ï–¢–ù–£ –ù–ê–ô–ö–†–ê–©–£ –ü–ê–†–£!
            logging.info(f"üîó {clean_symbol}: –®—É–∫–∞—é –Ω–∞–π–∫—Ä–∞—â—É —Ç–æ—Ä–≥–æ–≤—É –ø–∞—Ä—É...")
            best_pair = self.resolve_best_pair(clean_symbol, for_convergence=False)
            if best_pair and best_pair.get('exact_pair_url'):
                exact_url = best_pair['exact_pair_url']
                dex_name = best_pair.get('dex_name', 'DEX')
                chain = best_pair.get('chain_name', best_pair.get('chain', 'unknown'))
                logging.info(f"üîó –ó–ù–ê–ô–î–ï–ù–û –ö–û–ù–ö–†–ï–¢–ù–£ –ü–ê–†–£: {clean_symbol} -> {dex_name} –Ω–∞ {chain}")
                return exact_url
            
            # 2. FALLBACK: —è–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –ø–∞—Ä—É - –∑–∞–≥–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫
            chain_specific_links = {
                # ‚≠ê TOP ETHEREUM TOKENS (–∑–∞–≤–∂–¥–∏ –ø—Ä–∞—Ü—é—é—Ç—å)
                'BTC': 'https://dexscreener.com/ethereum/uniswap?q=WBTC',
                'ETH': 'https://dexscreener.com/ethereum?q=ETH',
                'USDC': 'https://dexscreener.com/ethereum?q=USDC',
                'USDT': 'https://dexscreener.com/ethereum?q=USDT', 
                'LINK': 'https://dexscreener.com/ethereum?q=LINK',
                'UNI': 'https://dexscreener.com/ethereum?q=UNI',
                'CRV': 'https://dexscreener.com/ethereum?q=CRV',
                'AAVE': 'https://dexscreener.com/ethereum?q=AAVE',
                'COMP': 'https://dexscreener.com/ethereum?q=COMP',
                'SNX': 'https://dexscreener.com/ethereum?q=SNX',
                'ENJ': 'https://dexscreener.com/ethereum?q=ENJ',
                'MANA': 'https://dexscreener.com/ethereum?q=MANA',
                '1INCH': 'https://dexscreener.com/ethereum?q=1INCH',
                'SUSHI': 'https://dexscreener.com/ethereum?q=SUSHI',
                'YFI': 'https://dexscreener.com/ethereum?q=YFI',
                'BAT': 'https://dexscreener.com/ethereum?q=BAT',
                'LRC': 'https://dexscreener.com/ethereum?q=LRC',
                'STORJ': 'https://dexscreener.com/ethereum?q=STORJ',
                
                # ‚≠ê POPULAR MEMECOINS 
                'SHIB': 'https://dexscreener.com/ethereum?q=SHIB',
                'PEPE': 'https://dexscreener.com/ethereum?q=PEPE',
                'DOGE': 'https://dexscreener.com/bsc?q=DOGE',
                'FLOKI': 'https://dexscreener.com/ethereum?q=FLOKI',
                'APE': 'https://dexscreener.com/ethereum?q=APE',
                'WIF': 'https://dexscreener.com/solana?q=WIF',
                'BONK': 'https://dexscreener.com/solana?q=BONK',
                
                # ‚≠ê BSC TOKENS
                'BNB': 'https://dexscreener.com/bsc?q=BNB',
                'CAKE': 'https://dexscreener.com/bsc?q=CAKE',
                'BUSD': 'https://dexscreener.com/bsc?q=BUSD',
                
                # ‚≠ê SOLANA TOKENS
                'SOL': 'https://dexscreener.com/solana?q=SOL',
                'RAY': 'https://dexscreener.com/solana?q=RAY',
                'SRM': 'https://dexscreener.com/solana?q=SRM',
                
                # ‚≠ê RECENT TRENDING TOKENS + –¢–û–ö–ï–ù–ò –ó –°–ò–°–¢–ï–ú–ò
                'TRUMP': 'https://dexscreener.com/solana?q=TRUMP',
                'MELANIA': 'https://dexscreener.com/solana?q=MELANIA', 
                'PENGU': 'https://dexscreener.com/solana?q=PENGU',
                'WLD': 'https://dexscreener.com/ethereum?q=WLD',
                'TAO': 'https://dexscreener.com/ethereum?q=TAO',
                'ARKM': 'https://dexscreener.com/ethereum?q=ARKM',
                'PENDLE': 'https://dexscreener.com/ethereum?q=PENDLE',
                
                # ‚≠ê –ü–û–ü–£–õ–Ø–†–ù–Ü –¢–û–ö–ï–ù–ò –ó –õ–û–ì–Ü–í –°–ò–°–¢–ï–ú–ò
                'TRX': 'https://dexscreener.com/bsc?q=TRX',
                'C98': 'https://dexscreener.com/bsc?q=C98',
                'SOL': 'https://dexscreener.com/solana?q=SOL',
                'XRP': 'https://dexscreener.com/ethereum?q=XRP',
                'ADA': 'https://dexscreener.com/ethereum?q=ADA',
                'DOT': 'https://dexscreener.com/ethereum?q=DOT',
                'LTC': 'https://dexscreener.com/ethereum?q=LTC',
                'ATOM': 'https://dexscreener.com/ethereum?q=ATOM',
                'OP': 'https://dexscreener.com/optimism?q=OP',
                'ARB': 'https://dexscreener.com/arbitrum?q=ARB',
                'MATIC': 'https://dexscreener.com/polygon?q=MATIC',
                'AVAX': 'https://dexscreener.com/avalanche?q=AVAX',
                'FTM': 'https://dexscreener.com/fantom?q=FTM',
                
                # ‚≠ê –ü–û–ü–£–õ–Ø–†–ù–Ü ALTCOINS
                'ALICE': 'https://dexscreener.com/ethereum?q=ALICE',
                'YFI': 'https://dexscreener.com/ethereum?q=YFI',
                'CELO': 'https://dexscreener.com/ethereum?q=CELO',
                'MANTA': 'https://dexscreener.com/ethereum?q=MANTA',
                'ATA': 'https://dexscreener.com/ethereum?q=ATA',
                'TRU': 'https://dexscreener.com/ethereum?q=TRU',
                'REZ': 'https://dexscreener.com/ethereum?q=REZ',
                'RSR': 'https://dexscreener.com/ethereum?q=RSR',
                'ANKR': 'https://dexscreener.com/ethereum?q=ANKR',
                'DODO': 'https://dexscreener.com/ethereum?q=DODO',
                'DUSK': 'https://dexscreener.com/ethereum?q=DUSK'
            }
            
            # 2. –Ø–∫—â–æ –∑–Ω–∞—Ö–æ–¥–∏–º–æ –ø—Ä—è–º–∏–π link - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ!
            if clean_symbol in chain_specific_links:
                direct_link = chain_specific_links[clean_symbol]
                logging.info(f"üîó DIRECT FALLBACK: {clean_symbol} -> {direct_link}")
                return direct_link
            
            # 3. –†–û–ó–£–ú–ù–ò–ô FALLBACK: –≤–∏–±–∏—Ä–∞—î–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π blockchain –∑–∞ –Ω–∞–∑–≤–æ—é —Ç–æ–∫–µ–Ω–∞
            smart_chain = 'ethereum'  # Default to most popular
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–π–±—ñ–ª—å—à –π–º–æ–≤—ñ—Ä–Ω–∏–π blockchain
            if any(indicator in clean_symbol.lower() for indicator in ['sol', 'ray', 'srm', 'bonk', 'wif']):
                smart_chain = 'solana'
            elif any(indicator in clean_symbol.lower() for indicator in ['bnb', 'cake', 'busd', 'bsc']):
                smart_chain = 'bsc'  
            elif any(indicator in clean_symbol.lower() for indicator in ['matic', 'polygon', 'pol']):
                smart_chain = 'polygon'
            elif any(indicator in clean_symbol.lower() for indicator in ['arb', 'arbitrum']):
                smart_chain = 'arbitrum'
                
            # 4. –ó–ê–í–ñ–î–ò –ü–†–ê–¶–Æ–Æ–ß–ò–ô FALLBACK: –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ–∫–µ–Ω 
            fallback_link = f"https://dexscreener.com/{smart_chain}/{clean_symbol}"
            logging.info(f"üîó SMART FALLBACK: {clean_symbol} -> {smart_chain} –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è")
            return fallback_link
            
        except Exception as e:
            # 5. –ê–ë–°–û–õ–Æ–¢–ù–ò–ô FALLBACK: ethereum –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            final_fallback = f"https://dexscreener.com/ethereum/{clean_symbol}"
            logging.warning(f"üîó FINAL FALLBACK: {clean_symbol} -> ethereum –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (error: {e})")
            return final_fallback

    def format_arbitrage_signal(self, opportunity: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç—É—î –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π —Å–∏–≥–Ω–∞–ª –Ø–ö –£ –î–†–£–ì–ê –∑ –¥–µ—Ç–∞–ª—è–º–∏
        """
        try:
            # –ü–†–Ø–ú–ï –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤—É –ø–∞—Ä—É (–ù–ï –ø–æ—à—É–∫!)
            symbol = opportunity.get('symbol', 'Unknown')
            dex_link = self.get_dex_link(symbol)
            logging.info(f"üîó –°–ò–ì–ù–ê–õ {symbol}: {'‚úÖ –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è' if dex_link else '‚ùå –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ'}")
            
            signal = f"""
üéØ **ARBITRAGE OPPORTUNITY** üéØ

**{opportunity['symbol']}** | XT.com vs DEX
{opportunity['recommendation']}

**Direction:** {opportunity['direction']}
**Entry:** {opportunity['entry_side']} on XT.com

**Prices:**
üìä DexScreener: ${opportunity['dex_price']:.6f}
‚ö° XT.com: ${opportunity['xt_price']:.6f}

**Spread:** {opportunity['spread_pct']:.2f}%
**Chain:** {opportunity['chain']}

"üìä DexScreener –∞–Ω–∞–ª—ñ–∑"

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
ü§ñ XT.com Arbitrage Scanner
"""
            return signal
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É: {e}")
            return f"Arbitrage: {opportunity.get('symbol', 'Unknown')} - {opportunity.get('spread_pct', 0):.2f}%"

# –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
dex_client = DexCheckClient()

def get_dex_price_simple(symbol: str, for_convergence: bool = False) -> Optional[float]:
    """–ü—Ä–æ—Å—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è DexScreener —Ü—ñ–Ω–∏ (–∑–∞–º—ñ—Å—Ç—å —Å—Ç–∞—Ä–æ—ó DEX —Ñ—É–Ω–∫—Ü—ñ—ó)"""
    return dex_client.get_dex_price(symbol, for_convergence=for_convergence)

def get_advanced_token_analysis(symbol: str) -> Optional[Dict]:
    """
    üî¨ –†–û–ó–®–ò–†–ï–ù–ò–ô –ê–ù–ê–õ–Ü–ó –¢–û–ö–ï–ù–ê —è–∫ —É —Ä–æ—Å—ñ–π—Å—å–∫–æ—ó —Å–∏—Å—Ç–µ–º–∏!
    –õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å, FDV, —Ä–∏–Ω–∫–æ–≤–∞ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è, —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó, –ø–æ–∫—É–ø—Ü—ñ/–ø—Ä–æ–¥–∞–≤—Ü—ñ
    """
    return dex_client.get_advanced_token_metrics(symbol)

def get_dex_token_info(symbol: str) -> Optional[Dict]:
    """
    –ü–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ù–ê–ô–ö–†–ê–©–£ –ø–∞—Ä—É —Ç–æ–∫–µ–Ω–∞ –∑ DexScreener
    """
    try:
        pair_data = dex_client.resolve_best_pair(symbol)
        if not pair_data:
            return None
        
        return {
            'price_usd': pair_data['price_usd'],
            'pair_address': pair_data['pair_address'],  # –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            'chain': pair_data['chain'],
            'dex_id': pair_data['dex_id'],
            'liquidity': pair_data['liquidity_usd'],
            'volume_24h': pair_data['volume_24h'],
            'base_symbol': pair_data['base_symbol'],
            'quote_symbol': pair_data['quote_symbol']
        }
        
    except Exception as e:
        logging.error(f"get_dex_token_info –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}")
        return None

def get_arbitrage_opportunity(gate_symbol: str, xt_price: float) -> Optional[Dict]:
    """–§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π —è–∫ —É –¥—Ä—É–≥–∞"""
    return dex_client.get_arbitrage_opportunity(gate_symbol, xt_price)