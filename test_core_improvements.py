#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–∫—Ä–∞—â–µ–Ω—å –±–æ—Ç–∞:
1. RPC reconnect
2. Spread 2-3%
3. Heartbeat –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
"""
import os
import sys
import time
import logging

# ENV
os.environ['ADMIN_PASSWORD'] = 'Admin123'
os.environ['XT_API_KEY'] = 'edbae47c-5dd1-4e17-85a5-4ddbf9a0198d'
os.environ['XT_API_SECRET'] = 'dc15cbd32da51249b35326dcc0bafb9045771fa8'
os.environ['TELEGRAM_BOT_TOKEN'] = '7198851873:AAFkiFUMNpdt8o7_jb_ZYGfHH_nZUVU_9Lw'
os.environ['TELEGRAM_CHAT_ID'] = '7820995179'
os.environ['ALLOW_LIVE_TRADING'] = 'True'

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def test_spread_config():
    """–¢–µ—Å—Ç spread 2-3%"""
    logging.info("=" * 80)
    logging.info("–¢–ï–°–¢ 1: Spread Configuration (2-3%)")
    logging.info("=" * 80)

    try:
        import config

        logging.info(f"‚úÖ MIN_SPREAD: {config.MIN_SPREAD}% (–æ—á—ñ–∫—É—î—Ç—å—Å—è 2.0%)")
        logging.info(f"‚úÖ MAX_SPREAD: {config.MAX_SPREAD}% (–æ—á—ñ–∫—É—î—Ç—å—Å—è 3.0%)")
        logging.info(f"‚úÖ MIN_NET_PROFIT: {config.MIN_NET_PROFIT_PERCENT}% (–æ—á—ñ–∫—É—î—Ç—å—Å—è 1.4%)")

        assert config.MIN_SPREAD == 2.0, f"‚ùå MIN_SPREAD –º–∞—î –±—É—Ç–∏ 2.0%, –∞ –Ω–µ {config.MIN_SPREAD}%"
        assert config.MAX_SPREAD == 3.0, f"‚ùå MAX_SPREAD –º–∞—î –±—É—Ç–∏ 3.0%, –∞ –Ω–µ {config.MAX_SPREAD}%"
        assert config.MIN_NET_PROFIT_PERCENT == 1.4, f"‚ùå MIN_NET_PROFIT –º–∞—î –±—É—Ç–∏ 1.4%"

        logging.info("üéâ Spread –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: 2-3% –¥–ª—è –∞–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—ñ")
        return True

    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return False

def test_blockchain_reconnect():
    """–¢–µ—Å—Ç RPC reconnect —ñ heartbeat"""
    logging.info("")
    logging.info("=" * 80)
    logging.info("–¢–ï–°–¢ 2: RPC Reconnect + Heartbeat")
    logging.info("=" * 80)

    try:
        from blockchain_pools_client import BlockchainPoolsClient

        client = BlockchainPoolsClient()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –º–µ—Ç–æ–¥–∏ reconnect —ñ—Å–Ω—É—é—Ç—å
        assert hasattr(client, '_ensure_connection'), "‚ùå –ù–µ–º–∞—î –º–µ—Ç–æ–¥—É _ensure_connection"
        assert hasattr(client, '_init_web3_connections'), "‚ùå –ù–µ–º–∞—î –º–µ—Ç–æ–¥—É _init_web3_connections"
        assert hasattr(client, '_log_heartbeat'), "‚ùå –ù–µ–º–∞—î –º–µ—Ç–æ–¥—É _log_heartbeat"

        logging.info("‚úÖ –ú–µ—Ç–æ–¥–∏ reconnect –ø—Ä–∏—Å—É—Ç–Ω—ñ")

        # –¢–µ—Å—Ç heartbeat
        client._log_heartbeat()
        logging.info("‚úÖ Heartbeat –ø—Ä–∞—Ü—é—î")

        # –¢–µ—Å—Ç reconnect (—è–∫—â–æ Web3 –¥–æ—Å—Ç—É–ø–Ω–∏–π)
        if client.w3_eth or client.w3_bsc:
            result = client._ensure_connection('ethereum')
            logging.info(f"‚úÖ Ethereum reconnect: {result}")

            result = client._ensure_connection('bsc')
            logging.info(f"‚úÖ BSC reconnect: {result}")
        else:
            logging.warning("‚ö†Ô∏è Web3 –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ä–µ–∞–ª—å–Ω–∏–π reconnect —Ç–µ—Å—Ç")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ reconnect
        assert hasattr(client, 'max_retries'), "‚ùå –ù–µ–º–∞—î max_retries"
        assert hasattr(client, 'retry_delay'), "‚ùå –ù–µ–º–∞—î retry_delay"
        assert hasattr(client, 'connection_check_interval'), "‚ùå –ù–µ–º–∞—î connection_check_interval"

        logging.info(f"‚úÖ Reconnect –ø–∞—Ä–∞–º–µ—Ç—Ä–∏: retries={client.max_retries}, delay={client.retry_delay}s, interval={client.connection_check_interval}s")

        logging.info("üéâ RPC Reconnect –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return True

    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_dex_heartbeat():
    """–¢–µ—Å—Ç DEX heartbeat"""
    logging.info("")
    logging.info("=" * 80)
    logging.info("–¢–ï–°–¢ 3: DEX/XT Heartbeat Monitoring")
    logging.info("=" * 80)

    try:
        from dex_client import dex_client

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ DEX client –º–∞—î rate limiting
        assert hasattr(dex_client, 'provider_stats'), "‚ùå –ù–µ–º–∞—î provider_stats"
        assert hasattr(dex_client, 'last_request_time'), "‚ùå –ù–µ–º–∞—î last_request_time"

        logging.info("‚úÖ DEX client –º–∞—î rate limiting")

        # –ü—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É (real-time —Ç–µ—Å—Ç)
        logging.info("üîç –ü—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ real-time —Ü—ñ–Ω—É BTC...")
        start_time = time.time()
        price = dex_client.get_dex_price('BTC')
        duration = time.time() - start_time

        if price and price > 0:
            logging.info(f"‚úÖ BTC —Ü—ñ–Ω–∞: ${price:,.2f} (–∑–∞ {duration:.2f}—Å)")
        else:
            logging.warning(f"‚ö†Ô∏è BTC —Ü—ñ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–º–æ–∂–ª–∏–≤–æ rate limit –∞–±–æ API –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î)")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = dex_client.provider_stats
        logging.info(f"üìä DEX —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")

        logging.info("üéâ DEX –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∞—Ü—é—î")
        return True

    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_xt_connection():
    """–¢–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ XT.com"""
    logging.info("")
    logging.info("=" * 80)
    logging.info("–¢–ï–°–¢ 4: XT.com Connection (Real-time)")
    logging.info("=" * 80)

    try:
        from xt_client import create_xt, get_xt_price

        logging.info("üîç –°—Ç–≤–æ—Ä—é—î–º–æ XT client...")
        xt = create_xt()

        if not xt:
            logging.warning("‚ö†Ô∏è XT client –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ, –º–æ–∂–ª–∏–≤–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∫–ª—é—á—ñ")
            return False

        logging.info("‚úÖ XT client —Å—Ç–≤–æ—Ä–µ–Ω–æ")

        # –ü—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É
        logging.info("üîç –û—Ç—Ä–∏–º—É—î–º–æ real-time —Ü—ñ–Ω—É BTC –∑ XT.com...")
        start_time = time.time()
        price = get_xt_price(xt, 'BTC/USDT:USDT')
        duration = time.time() - start_time

        if price and price > 0:
            logging.info(f"‚úÖ XT BTC: ${price:,.2f} (–∑–∞ {duration:.2f}—Å)")
        else:
            logging.warning("‚ö†Ô∏è XT —Ü—ñ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return False

        logging.info("üéâ XT.com –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î")
        return True

    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_real_spread_calculation():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É spread"""
    logging.info("")
    logging.info("=" * 80)
    logging.info("–¢–ï–°–¢ 5: Real Spread Calculation (2-3%)")
    logging.info("=" * 80)

    try:
        from dex_client import dex_client
        from xt_client import create_xt, get_xt_price
        import config

        xt = create_xt()
        if not xt:
            logging.warning("‚ö†Ô∏è XT client –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
            return False

        # –¢–µ—Å—Ç—É—î–º–æ –Ω–∞ BTC
        symbol = 'BTC/USDT:USDT'

        logging.info(f"üîç –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ spread –¥–ª—è {symbol}...")

        # DEX —Ü—ñ–Ω–∞
        dex_price = dex_client.get_dex_price('BTC')
        if not dex_price:
            logging.warning("‚ö†Ô∏è DEX —Ü—ñ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return False

        # XT —Ü—ñ–Ω–∞
        xt_price = get_xt_price(xt, symbol)
        if not xt_price:
            logging.warning("‚ö†Ô∏è XT —Ü—ñ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return False

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ spread
        spread = abs((dex_price - xt_price) / xt_price * 100)

        logging.info(f"üìä DEX: ${dex_price:,.2f}")
        logging.info(f"üìä XT:  ${xt_price:,.2f}")
        logging.info(f"üìä Spread: {spread:.2f}%")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
        min_spread = config.MIN_SPREAD
        max_spread = config.MAX_SPREAD

        logging.info(f"üéØ –§—ñ–ª—å—Ç—Ä: {min_spread}% ‚â§ spread ‚â§ {max_spread}%")

        if min_spread <= spread <= max_spread:
            logging.info(f"‚úÖ Spread {spread:.2f}% –í –î–Ü–ê–ü–ê–ó–û–ù–Ü {min_spread}-{max_spread}% ‚Üí –°–ò–ì–ù–ê–õ!")
        else:
            logging.info(f"‚ö†Ô∏è Spread {spread:.2f}% –ø–æ–∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º {min_spread}-{max_spread}%")

        logging.info("üéâ Spread —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return True

    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == '__main__':
    logging.info("üöÄ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ü–û–ö–†–ê–©–ï–ù–¨ –ë–û–¢–ê")
    logging.info("")

    results = []

    # –¢–µ—Å—Ç–∏
    results.append(('Spread 2-3%', test_spread_config()))
    results.append(('RPC Reconnect', test_blockchain_reconnect()))
    results.append(('DEX Heartbeat', test_dex_heartbeat()))
    results.append(('XT Connection', test_xt_connection()))
    results.append(('Real Spread', test_real_spread_calculation()))

    # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏
    logging.info("")
    logging.info("=" * 80)
    logging.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–Ü–í:")
    logging.info("=" * 80)

    passed = 0
    for name, success in results:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        logging.info(f"   {status} {name}")
        if success:
            passed += 1

    logging.info("")
    logging.info(f"üìà –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{len(results)} —Ç–µ—Å—Ç—ñ–≤ ({passed/len(results)*100:.0f}%)")

    if passed == len(results):
        logging.info("üéâ –í–°–Ü –ü–û–ö–†–ê–©–ï–ù–ù–Ø –ü–†–ê–¶–Æ–Æ–¢–¨!")
        logging.info("")
        logging.info("‚úÖ Spread –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ: 2.0-3.0% –¥–ª—è –∞–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—ñ")
        logging.info("‚úÖ RPC reconnect: –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø—Ä–∏ –ø–∞–¥—ñ–Ω–Ω—ñ –∑–≤'—è–∑–∫—É")
        logging.info("‚úÖ Heartbeat: –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥")
        logging.info("‚úÖ Real-time: —Å–∏–≥–Ω–∞–ª–∏ –ª–æ–≤–ª—è—Ç—å—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ")
        sys.exit(0)
    else:
        logging.warning(f"‚ö†Ô∏è {len(results) - passed} —Ç–µ—Å—Ç(—ñ–≤) –Ω–µ –ø—Ä–æ–π—à–ª–∏")
        sys.exit(1)
